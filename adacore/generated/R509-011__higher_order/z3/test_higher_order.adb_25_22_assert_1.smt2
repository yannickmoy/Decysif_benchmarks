;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort small_int 0)

;; "small_int'int"
(declare-fun small_intqtint (small_int) Int)

;; "small_int'axiom"
(assert
  (forall ((i small_int))
    (and (<= (- 100) (small_intqtint i)) (<= (small_intqtint i) 100))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 100) x) (<= x 100)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep1 ((x small_int)) Int
  (small_intqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) small_int)

;; "inversion_axiom"
(assert
  (forall ((x small_int))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x small_int))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort map1 0)

;; "get"
(declare-fun get (map1
  Int
  Int) small_int)

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep (rec__first (mk f l))) f)
             (= (to_rep (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((t1 (tqtmk1 (rec__first1 integer)(rec__last1 integer)))))

;; "mk"
(declare-fun mk1 (Int
  Int) t1)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep (rec__first1 (mk1 f l))) f)
             (= (to_rep (rec__last1 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

;; "dynamic_property"
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts map1)(rt t)(rt_2 t1)))))

;; "to_array"
(define-fun to_array ((a us_t)) map1
  (elts a))

;; "of_array"
(define-fun of_array ((a map1) (f Int) (l Int) (f2 Int) (l2 Int)) us_t
  (us_tqtmk a (mk f l) (mk1 f2 l2)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

;; "first_2"
(define-fun first_2 ((a us_t)) Int
  (to_rep (rec__first1 (rt_2 a))))

;; "last_2"
(define-fun last_2 ((a us_t)) Int
  (to_rep (rec__last1 (rt_2 a))))

;; "length_2"
(define-fun length_2 ((a us_t)) Int
  (ite (<= (first_2 a) (last_2 a)) (+ (- (last_2 a) (first_2 a)) 1) 0))

;; "dynamic_property"
(define-fun dynamic_property2 ((range_first1 Int) (range_last1 Int) (f1 Int) (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int) (l2 Int)) Bool
  (and
    (dynamic_property range_first1 range_last1 f1 l1)
    (dynamic_property1 range_first2 range_last2 f2 l2)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "count"
(declare-fun count (us_t) Int)

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "fold"
(declare-fun fold (us_t
  Int) Int)

;; "temp_____aggregate_def_1122"
(declare-fun temp_____aggregate_def_1122 (Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int
  Int) map1)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

;; "to_rep"
(define-fun to_rep2 ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

;; "in_range"
(declare-fun in_range4 (us_t
  Int
  Int
  Int) Bool)

;; "add_one"
(define-fun add_one ((param__e Int) (param__x Int)) Int
  (ite (= (>= param__e 0) true) (+ param__x 1) param__x))

;; "result_in_range"
(define-fun result_in_range ((param__a us_t) (param__x Int)) Bool
  (<= param__x (* (length param__a) (length_2 param__a))))

(declare-sort map2 0)

;; "get"
(declare-fun get1 (map2
  Int
  Int) natural)

(declare-datatypes ()
  ((t2 (tqtmk2 (rec__first2 integer)(rec__last2 integer)))))

;; "dynamic_property"
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((t3 (tqtmk3 (rec__first3 integer)(rec__last3 integer)))))

;; "dynamic_property"
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t1 (us_tqtmk1 (elts1 map2)(rt1 t2)(rt_21 t3)))))

;; "to_array"
(define-fun to_array1 ((a us_t1)) map2
  (elts1 a))

;; "first"
(define-fun first1 ((a us_t1)) Int
  (to_rep (rec__first2 (rt1 a))))

;; "last"
(define-fun last1 ((a us_t1)) Int
  (to_rep (rec__last2 (rt1 a))))

;; "first_2"
(define-fun first_21 ((a us_t1)) Int
  (to_rep (rec__first3 (rt_21 a))))

;; "last_2"
(define-fun last_21 ((a us_t1)) Int
  (to_rep (rec__last3 (rt_21 a))))

;; "dynamic_property"
(define-fun dynamic_property5 ((range_first1 Int) (range_last1 Int) (f1 Int) (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int) (l2 Int)) Bool
  (and
    (dynamic_property3 range_first1 range_last1 f1 l1)
    (dynamic_property4 range_first2 range_last2 f2 l2)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "fold"
(declare-fun fold1 (us_t
  Int) us_t1)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_343 us_t) (temp___is_init_339 Bool) (temp___skip_constant_340 Bool) (temp___do_toplevel_341 Bool) (temp___do_typ_inv_342 Bool)) Bool
  (=>
    (not (= temp___skip_constant_340 true))
    (dynamic_property2
      1
      100
      (first temp___expr_343)
      (last temp___expr_343)
      1
      100
      (first_2 temp___expr_343)
      (last_2 temp___expr_343))))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_662 us_t1) (temp___is_init_658 Bool) (temp___skip_constant_659 Bool) (temp___do_toplevel_660 Bool) (temp___do_typ_inv_661 Bool)) Bool
  (=>
    (not (= temp___skip_constant_659 true))
    (dynamic_property5
      1
      100
      (first1 temp___expr_662)
      (last1 temp___expr_662)
      1
      100
      (first_21 temp___expr_662)
      (last_21 temp___expr_662))))

;; "in_range__post_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__x Int) (param__i Int) (param__j Int))
      (! (=>
           (and
             (and
               (and
                 (and
                   (dynamic_invariant param__a true false true true)
                   (in_range3 param__x))
                 (in_range2 param__i))
               (in_range2 param__j))
             (and
               (and
                 (<= (first param__a) param__i)
                 (<= param__i (last param__a)))
               (and
                 (<= (first_2 param__a) param__j)
                 (<= param__j (last_2 param__a)))))
           (=>
             (= (in_range4 param__a param__x param__i param__j) true)
             (< param__x 2147483647))) :pattern ((in_range4
                                                   param__a
                                                   param__x
                                                   param__i
                                                   param__j)) ))))

;; "in_range__def_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__x Int) (param__i Int) (param__j Int))
      (! (=
           (= (in_range4 param__a param__x param__i param__j) true)
           (<= param__x (+ (* (- param__i (first param__a)) (length_2
                                                              param__a)) (- param__j 
           (first_2
             param__a))))) :pattern ((in_range4
                                       param__a
                                       param__x
                                       param__i
                                       param__j)) ))))

;; "fold__post_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__init Int))
      (! (=>
           (and
             (and
               (dynamic_invariant param__a true false true true)
               (in_range3 param__init))
             (and
               (and (< 0 (length param__a)) (< 0 (length_2 param__a)))
               (= (in_range4
                    param__a
                    param__init
                    (first param__a)
                    (first_2 param__a)) true)))
           (let ((result (fold1 param__a param__init)))
             (and
               (and
                 (and
                   (and
                     (and
                       (and
                         (and
                           (and
                             (and
                               (= (first1 result) (first param__a))
                               (= (last1 result) (last param__a)))
                             (= (first_21 result) (first_2 param__a)))
                           (= (last_21 result) (last_2 param__a)))
                         (= (in_range4
                              param__a
                              param__init
                              (first param__a)
                              (first_2 param__a)) true))
                       (= (to_rep2
                            (get1
                              (to_array1 result)
                              (first param__a)
                              (first_2 param__a))) (add_one
                                                     (to_rep1
                                                       (get
                                                         (to_array param__a)
                                                         (first param__a)
                                                         (first_2 param__a)))
                                                     param__init)))
                     (forall ((i Int))
                       (=>
                         (and (<= (first param__a) i) (<= i (last param__a)))
                         (=>
                           (< (first param__a) i)
                           (and
                             (= (in_range4
                                  param__a
                                  (to_rep2
                                    (get1
                                      (to_array1 result)
                                      (- i 1)
                                      (last_2 param__a)))
                                  i
                                  (first_2 param__a)) true)
                             (= (to_rep2
                                  (get1
                                    (to_array1 result)
                                    i
                                    (first_2 param__a))) (add_one
                                                           (to_rep1
                                                             (get
                                                               (to_array
                                                                 param__a)
                                                               i
                                                               (first_2
                                                                 param__a)))
                                                           (to_rep2
                                                             (get1
                                                               (to_array1
                                                                 result)
                                                               (- i 1)
                                                               (last_2
                                                                 param__a))))))))))
                   (forall ((i Int))
                     (=>
                       (and (<= (first param__a) i) (<= i (last param__a)))
                       (forall ((j Int))
                         (=>
                           (and
                             (<= (first_2 param__a) j)
                             (<= j (last_2 param__a)))
                           (=>
                             (< (first_2 param__a) j)
                             (and
                               (= (in_range4
                                    param__a
                                    (to_rep2
                                      (get1 (to_array1 result) i (- j 1)))
                                    i
                                    j) true)
                               (= (to_rep2 (get1 (to_array1 result) i j)) 
                               (add_one
                                 (to_rep1 (get (to_array param__a) i j))
                                 (to_rep2
                                   (get1 (to_array1 result) i (- j 1))))))))))))
                 (= (result_in_range
                      param__a
                      (to_rep2
                        (get1
                          (to_array1 result)
                          (last param__a)
                          (last_2 param__a)))) true))
               (dynamic_invariant1 result true false true true)))) :pattern (
      (fold1
        param__a
        param__init)) ))))

;; "fold__post_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__init Int))
      (! (=>
           (and
             (and
               (dynamic_invariant param__a true false true true)
               (in_range3 param__init))
             (or
               (or (= (length param__a) 0) (= (length_2 param__a) 0))
               (= (in_range4
                    param__a
                    param__init
                    (first param__a)
                    (first_2 param__a)) true)))
           (let ((result (fold param__a param__init)))
             (and
               (ite (or (= (length param__a) 0) (= (length_2 param__a) 0))
                 (= result param__init)
                 (and
                   (= result (to_rep2
                               (let ((temp___708 (fold1 param__a param__init)))
                                 (get1
                                   (to_array1 temp___708)
                                   (last param__a)
                                   (last_2 param__a)))))
                   (= (result_in_range param__a result) true)))
               (in_range3 result)))) :pattern ((fold param__a param__init)) ))))

;; "count__post_axiom"
(assert
  (forall ((param__a us_t))
    (! (=>
         (dynamic_invariant param__a true false true true)
         (in_range3 (count param__a))) :pattern ((count param__a)) )))

;; "count__def_axiom"
(assert
  (forall ((param__a us_t))
    (! (= (count param__a) (fold param__a 0)) :pattern ((count param__a)) )))

(declare-const rliteral small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral) 1))

(declare-const rliteral1 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral1) (- 2)))

(declare-const rliteral2 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral2) 3))

(declare-const rliteral3 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral3) (- 4)))

(declare-const rliteral4 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral4) (- 5)))

(declare-const rliteral5 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral5) 6))

(declare-const rliteral6 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral6) 7))

(declare-const rliteral7 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral7) 13))

(declare-const rliteral8 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral8) 0))

(declare-const rliteral9 small_int)

;; "rliteral_axiom"
(assert (= (small_intqtint rliteral9) (- 1)))

;; "def_axiom"
(assert
  (forall ((temp___1095 Int) (temp___1096 Int) (temp___1097 Int) (temp___1098 Int) (temp___1099 Int) (temp___1100 Int) (temp___1101 Int) (temp___1102 Int) (temp___1103 Int) (temp___1104 Int) (temp___1105 Int) (temp___1106 Int) (temp___1107 Int) (temp___1108 Int) (temp___1109 Int) (temp___1110 Int) (temp___1111 Int) (temp___1112 Int) (temp___1113 Int) (temp___1114 Int) (temp___1115 Int) (temp___1116 Int) (temp___1117 Int) (temp___1118 Int) (temp___1119 Int) (temp___1120 Int) (temp___1121 Int))
    (let ((temp___1123 (temp_____aggregate_def_1122
                         temp___1095
                         temp___1096
                         temp___1097
                         temp___1098
                         temp___1099
                         temp___1100
                         temp___1101
                         temp___1102
                         temp___1103
                         temp___1104
                         temp___1105
                         temp___1106
                         temp___1107
                         temp___1108
                         temp___1109
                         temp___1110
                         temp___1111
                         temp___1112
                         temp___1113
                         temp___1114
                         temp___1115
                         temp___1116
                         temp___1117
                         temp___1118
                         temp___1119
                         temp___1120
                         temp___1121)))
      (and
        (and
          (= (get temp___1123 1 1) rliteral)
          (= (get temp___1123 1 2) rliteral1))
        (and
          (and
            (and
              (and
                (and
                  (= (get temp___1123 1 3) rliteral2)
                  (= (get temp___1123 1 4) rliteral3))
                (and
                  (= (get temp___1123 1 5) rliteral4)
                  (= (get temp___1123 1 6) rliteral5)))
              (and
                (and
                  (= (get temp___1123 1 7) rliteral6)
                  (= (get temp___1123 1 8) rliteral7))
                (= (get temp___1123 1 9) rliteral8)))
            (and
              (and
                (and
                  (= (get temp___1123 2 1) rliteral)
                  (= (get temp___1123 2 2) rliteral1))
                (= (get temp___1123 2 3) rliteral2))
              (and
                (and
                  (= (get temp___1123 2 4) rliteral3)
                  (= (get temp___1123 2 5) rliteral4))
                (= (get temp___1123 2 6) rliteral5))))
          (and
            (and
              (and
                (and
                  (= (get temp___1123 2 7) rliteral6)
                  (= (get temp___1123 2 8) rliteral7))
                (= (get temp___1123 2 9) rliteral8))
              (and
                (and
                  (= (get temp___1123 3 1) rliteral)
                  (= (get temp___1123 3 2) rliteral1))
                (= (get temp___1123 3 3) rliteral2)))
            (and
              (and
                (and
                  (= (get temp___1123 3 4) rliteral3)
                  (= (get temp___1123 3 5) rliteral4))
                (= (get temp___1123 3 6) rliteral5))
              (and
                (and
                  (= (get temp___1123 3 7) rliteral6)
                  (= (get temp___1123 3 8) rliteral7))
                (= (get temp___1123 3 9) rliteral9)))))))))

;; Goal "def'vc"
;; File "test_higher_order.ads", line 127, characters 0-0
(assert
  (not
  (= (count
       (of_array
         (temp_____aggregate_def_1122
           1
           (- 2)
           3
           (- 4)
           (- 5)
           6
           7
           13
           0
           1
           (- 2)
           3
           (- 4)
           (- 5)
           6
           7
           13
           0
           1
           (- 2)
           3
           (- 4)
           (- 5)
           6
           7
           13
           (- 1))
         1
         3
         1
         9)) 17)))

(check-sat)
