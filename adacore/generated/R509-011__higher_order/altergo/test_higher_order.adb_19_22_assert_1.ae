(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type us_private

logic us_null_ext__ : us_private

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type small_int

logic small_intqtint : small_int -> int

axiom small_intqtaxiom :
  (forall i:small_int. (((- 100) <= small_intqtint(i)) and
  (small_intqtint(i) <= 100)))

predicate in_range1(x: int) = (((- 100) <= x) and (x <= 100))

type small_index

logic small_indexqtint : small_index -> int

axiom small_indexqtaxiom :
  (forall i:small_index. ((1 <= small_indexqtint(i)) and
  (small_indexqtint(i) <= 100)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function to_rep1(x: small_int) : int = small_intqtint(x)

logic of_rep1 : int -> small_int

axiom inversion_axiom1 :
  (forall x:small_int [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:small_int [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map

logic get : map, int, int -> small_int

type t = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep((mk(f, l)).rec__first) = f) and (to_rep((mk(f,
  l)).rec__last) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t1 = { rec__first1 : integer; rec__last1 : integer
}

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep((mk1(f, l)).rec__first1) = f) and (to_rep((mk1(f,
  l)).rec__last1) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : map; rt : t; rt_2 : t1
}

function to_array(a: us_t) : map = (a).elts

function of_array(a: map, f: int, l: int, f2: int, l2: int) : us_t = { elts =
  a; rt = mk(f, l); rt_2 = mk1(f2, l2) }

function first(a: us_t) : int = to_rep(((a).rt).rec__first)

function last(a: us_t) : int = to_rep(((a).rt).rec__last)

function length(a: us_t) : int =
  (if (first(a) <= last(a)) then ((last(a) - first(a)) + 1) else 0)

function first_2(a: us_t) : int = to_rep(((a).rt_2).rec__first1)

function last_2(a: us_t) : int = to_rep(((a).rt_2).rec__last1)

function length_2(a: us_t) : int =
  (if (first_2(a) <= last_2(a)) then ((last_2(a) - first_2(a)) + 1) else 0)

predicate dynamic_property2(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property(range_first1, range_last1, f1, l1) and
  dynamic_property1(range_first2, range_last2, f2, l2))

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic no_overflows : us_t -> bool

logic no_overflows1 : us_t, int, int, int -> bool

logic sum : us_t -> int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dummy : int

logic sum1 : us_t -> int

type t5b

logic t5bqtint : t5b -> int

axiom t5bqtaxiom :
  (forall i:t5b. ((1 <= t5bqtint(i)) and (t5bqtint(i) <= 2)))

type t6b

logic t6bqtint : t6b -> int

axiom t6bqtaxiom :
  (forall i:t6b. ((1 <= t6bqtint(i)) and (t6bqtint(i) <= 7)))

type t8b

logic t8bqtint : t8b -> int

axiom t8bqtaxiom :
  (forall i:t8b. ((1 <= t8bqtint(i)) and (t8bqtint(i) <= 2)))

type t9b

logic t9bqtint : t9b -> int

axiom t9bqtaxiom :
  (forall i:t9b. ((1 <= t9bqtint(i)) and (t9bqtint(i) <= 7)))

logic temp_____aggregate_def_1003 : int, int, int, int, int, int, int, int,
  int, int, int, int, int, int -> map

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic temp_____aggregate_def_1041 : int, int, int, int, int, int, int, int,
  int, int, int, int, int, int -> map

logic value__size3 : int

logic object__size3 : int

logic component__size2 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom3 : (0 <= alignment3)

function of_int(i: int) : bool = (if (i = 0) then false else true)

logic in_range3 : int, int, int -> bool

logic in_range4 : int -> bool

type map1

logic get1 : map1, int, int -> int

type t2 = { rec__first2 : integer; rec__last2 : integer
}

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t3 = { rec__first3 : integer; rec__last3 : integer
}

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : map1; rt1 : t2; rt_21 : t3
}

function to_array1(a: us_t1) : map1 = (a).elts1

function first1(a: us_t1) : int = to_rep(((a).rt1).rec__first2)

function last1(a: us_t1) : int = to_rep(((a).rt1).rec__last2)

function first_21(a: us_t1) : int = to_rep(((a).rt_21).rec__first3)

function last_21(a: us_t1) : int = to_rep(((a).rt_21).rec__last3)

predicate dynamic_property5(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property3(range_first1, range_last1, f1, l1) and
  dynamic_property4(range_first2, range_last2, f2, l2))

logic value__size4 : int

logic object__size4 : int

logic component__size3 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom4 : (0 <= alignment4)

logic fold : us_t, int -> us_t1

logic fold1 : us_t, int -> int

predicate dynamic_invariant(temp___expr_343: us_t, temp___is_init_339: bool,
  temp___skip_constant_340: bool, temp___do_toplevel_341: bool,
  temp___do_typ_inv_342: bool) = ((not (temp___skip_constant_340 = true)) ->
  dynamic_property2(1, 100, first(temp___expr_343), last(temp___expr_343), 1,
  100, first_2(temp___expr_343), last_2(temp___expr_343)))

predicate dynamic_invariant1(temp___expr_568: us_t1,
  temp___is_init_564: bool, temp___skip_constant_565: bool,
  temp___do_toplevel_566: bool, temp___do_typ_inv_567: bool) =
  ((not (temp___skip_constant_565 = true)) -> dynamic_property5(1, 100,
  first1(temp___expr_568), last1(temp___expr_568), 1, 100,
  first_21(temp___expr_568), last_21(temp___expr_568)))

axiom in_range__post_axiom : true

axiom in_range__def_axiom :
  (forall param__arg:int.
  (forall param__low:int. forall param__high:int [in_range3(param__arg,
  param__low, param__high)]. ((in_range3(param__arg, param__low,
  param__high) = true) <-> ((param__low <= param__arg) and
  (param__arg <= param__high)))))

axiom in_range__post_axiom1 : true

axiom in_range__def_axiom1 :
  (forall param__x:int [in_range4(param__x)].
  ((in_range4(param__x) = true) <-> (in_range3(param__x, (- 2147483648),
  2147483647) = true)))

axiom fold__post_axiom :
  (forall param__a:us_t.
  (forall param__init:int [fold(param__a, param__init)].
  ((dynamic_invariant(param__a, true, false, true, true) and
  (((0 <  length(param__a)) and (0 <  length_2(param__a))) and
  (of_int(1) = true))) -> (let result = fold(param__a, param__init)
  : us_t1 in ((((((((((first1(result) = first(param__a)) and
  (last1(result) = last(param__a))) and
  (first_21(result) = first_2(param__a))) and
  (last_21(result) = last_2(param__a))) and (of_int(1) = true)) and
  (get1(to_array1(result), first(param__a),
  first_2(param__a)) = (to_rep1(get(to_array(param__a), first(param__a),
  first_2(param__a))) + param__init))) and
  (forall i:int. (((first(param__a) <= i) and (i <= last(param__a))) ->
  ((first(param__a) <  i) -> ((of_int(1) = true) and (get1(to_array1(result),
  i, first_2(param__a)) = (to_rep1(get(to_array(param__a), i,
  first_2(param__a))) + get1(to_array1(result), (i - 1),
  last_2(param__a))))))))) and
  (forall i:int. (((first(param__a) <= i) and (i <= last(param__a))) ->
  (forall j:int. (((first_2(param__a) <= j) and (j <= last_2(param__a))) ->
  ((first_2(param__a) <  j) -> ((of_int(1) = true) and
  (get1(to_array1(result), i, j) = (to_rep1(get(to_array(param__a), i,
  j)) + get1(to_array1(result), i, (j - 1))))))))))) and
  (of_int(1) = true)) and dynamic_invariant1(result, true, false, true,
  true))))))

axiom fold__post_axiom1 :
  (forall param__a:us_t.
  (forall param__init:int [fold1(param__a, param__init)].
  ((dynamic_invariant(param__a, true, false, true, true) and
  (((length(param__a) = 0) or (length_2(param__a) = 0)) or
  (of_int(1) = true))) -> (let result = fold1(param__a, param__init) : int in
  (if ((length(param__a) = 0) or
  (length_2(param__a) = 0)) then (result = param__init) else ((result = (let temp___614qtunused =
  fold(param__a, param__init) : us_t1 in get1(to_array1(fold(param__a,
  param__init)), last(param__a), last_2(param__a)))) and
  (of_int(1) = true)))))))

axiom sum__post_axiom : true

axiom sum__def_axiom :
  (forall param__a:us_t [sum1(param__a)]. (sum1(param__a) = fold1(param__a,
  0)))

axiom no_overflows__post_axiom : true

axiom no_overflows__def_axiom :
  (forall param__a:us_t.
  (forall param__x:int. forall param__i:int. forall param__j:int
  [no_overflows1(param__a, param__x, param__i, param__j)].
  ((no_overflows1(param__a, param__x, param__i, param__j) = true) <->
  ((in_range4((param__x + to_rep1(get(to_array(param__a), param__i,
  param__j)))) = true) and
  (if (param__j <  last_2(param__a)) then (no_overflows1(param__a,
  (param__x + to_rep1(get(to_array(param__a), param__i, param__j))),
  param__i, (param__j + 1)) = true) else ((param__i <  last(param__a)) ->
  (no_overflows1(param__a, (param__x + to_rep1(get(to_array(param__a),
  param__i, param__j))), (param__i + 1), first_2(param__a)) = true)))))))

axiom no_overflows__post_axiom1 : true

axiom no_overflows__def_axiom1 :
  (forall param__a:us_t [no_overflows(param__a)].
  ((no_overflows(param__a) = true) <-> (((0 <  length(param__a)) and
  (0 <  length_2(param__a))) -> (no_overflows1(param__a, 0, first(param__a),
  first_2(param__a)) = true))))

axiom sum__post_axiom1 :
  (forall param__a:us_t [sum(param__a)]. ((dynamic_invariant(param__a, true,
  false, true, true) and (no_overflows(param__a) = true)) -> (let result =
  sum(param__a) : int in ((result = sum1(param__a)) and in_range(result)))))

logic rliteral : small_int

axiom rliteral_axiom : (small_intqtint(rliteral) = 1)

logic rliteral1 : small_int

axiom rliteral_axiom1 : (small_intqtint(rliteral1) = 2)

logic rliteral2 : small_int

axiom rliteral_axiom2 : (small_intqtint(rliteral2) = 3)

logic rliteral3 : small_int

axiom rliteral_axiom3 : (small_intqtint(rliteral3) = 4)

logic rliteral4 : small_int

axiom rliteral_axiom4 : (small_intqtint(rliteral4) = 5)

logic rliteral5 : small_int

axiom rliteral_axiom5 : (small_intqtint(rliteral5) = 6)

logic rliteral6 : small_int

axiom rliteral_axiom6 : (small_intqtint(rliteral6) = 7)

axiom def_axiom :
  (forall temp___989:int. forall temp___990:int. forall temp___991:int.
  forall temp___992:int. forall temp___993:int. forall temp___994:int.
  forall temp___995:int. forall temp___996:int. forall temp___997:int.
  forall temp___998:int. forall temp___999:int. forall temp___1000:int.
  forall temp___1001:int. forall temp___1002:int. (let temp___1004 =
  temp_____aggregate_def_1003(temp___989, temp___990, temp___991, temp___992,
  temp___993, temp___994, temp___995, temp___996, temp___997, temp___998,
  temp___999, temp___1000, temp___1001, temp___1002) : map in
  (((get(temp___1004, 1, 1) = rliteral) and (get(temp___1004, 1,
  2) = rliteral1)) and (((((get(temp___1004, 1, 3) = rliteral2) and
  (get(temp___1004, 1, 4) = rliteral3)) and (get(temp___1004, 1,
  5) = rliteral4)) and (((get(temp___1004, 1, 6) = rliteral5) and
  (get(temp___1004, 1, 7) = rliteral6)) and (get(temp___1004, 2,
  1) = rliteral))) and ((((get(temp___1004, 2, 2) = rliteral1) and
  (get(temp___1004, 2, 3) = rliteral2)) and (get(temp___1004, 2,
  4) = rliteral3)) and (((get(temp___1004, 2, 5) = rliteral4) and
  (get(temp___1004, 2, 6) = rliteral5)) and (get(temp___1004, 2,
  7) = rliteral6)))))))

axiom def_axiom1 :
  (forall temp___1027:int. forall temp___1028:int. forall temp___1029:int.
  forall temp___1030:int. forall temp___1031:int. forall temp___1032:int.
  forall temp___1033:int. forall temp___1034:int. forall temp___1035:int.
  forall temp___1036:int. forall temp___1037:int. forall temp___1038:int.
  forall temp___1039:int. forall temp___1040:int. (let temp___1042 =
  temp_____aggregate_def_1041(temp___1027, temp___1028, temp___1029,
  temp___1030, temp___1031, temp___1032, temp___1033, temp___1034,
  temp___1035, temp___1036, temp___1037, temp___1038, temp___1039,
  temp___1040) : map in (((get(temp___1042, 1, 1) = rliteral) and
  (get(temp___1042, 1, 2) = rliteral1)) and (((((get(temp___1042, 1,
  3) = rliteral2) and (get(temp___1042, 1, 4) = rliteral3)) and
  (get(temp___1042, 1, 5) = rliteral4)) and (((get(temp___1042, 1,
  6) = rliteral5) and (get(temp___1042, 1, 7) = rliteral6)) and
  (get(temp___1042, 2, 1) = rliteral))) and ((((get(temp___1042, 2,
  2) = rliteral1) and (get(temp___1042, 2, 3) = rliteral2)) and
  (get(temp___1042, 2, 4) = rliteral3)) and (((get(temp___1042, 2,
  5) = rliteral4) and (get(temp___1042, 2, 6) = rliteral5)) and
  (get(temp___1042, 2, 7) = rliteral6)))))))

 (* "test_higher_order.ads", line 118, characters 0-0 *)
goal defqtvc : ((no_overflows(of_array(temp_____aggregate_def_1003(1, 2, 3,
  4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7), 1, 2, 1, 7)) = true) ->
  (sum(of_array(temp_____aggregate_def_1041(1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4,
  5, 6, 7), 1, 2, 1, 7)) = 56))
