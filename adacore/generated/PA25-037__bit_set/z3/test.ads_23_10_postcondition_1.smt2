;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const two_power_size_minus_one Int)

(declare-const two_power_size_minus_one1 Int)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483646)))

(declare-sort unsigned_32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

;; "to_rep"
(declare-fun to_rep1 (unsigned_32) (_ BitVec 32))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 32)) unsigned_32)

;; "inversion_axiom"
(assert
  (forall ((x unsigned_32))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 32)))
    (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int unsigned_32))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int unsigned_32)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const a us_t)

(declare-const a_first Int)

(declare-const i (_ BitVec 64))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_188 us_t) (temp___is_init_184 Bool) (temp___skip_constant_185 Bool) (temp___do_toplevel_186 Bool) (temp___do_typ_inv_187 Bool)) Bool
  (=>
    (not (= temp___skip_constant_185 true))
    (dynamic_property
      0
      2147483646
      (first temp___expr_188)
      (last temp___expr_188))))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

;; "Assume"
(assert (dynamic_invariant a true false true true))

;; "Assume"
(assert (in_range1 a_first))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (and
    (and (<= (first a) a_first) (<= a_first (last a)))
    (bvule (bvudiv i #x0000000000000020) ((_ int2bv 64) (- (last a) a_first)))))

(declare-const o (_ BitVec 32))

(declare-const o1 (_ BitVec 64))

;; "H"
(assert (= o1 (bvurem i #x0000000000000020)))

(declare-const urem_qtresultqtunused (_ BitVec 64))

;; "H"
(assert (= urem_qtresultqtunused o1))

(declare-const o2 Int)

;; "H"
(assert (= o2 (bv2int o1)))

(declare-const t_intqtresultqtunused Int)

;; "H"
(assert (= t_intqtresultqtunused o2))

;; "Ensures"
(assert (in_range1 o2))

(declare-const range_check_qtresultqtunused Int)

;; "H"
(assert (= range_check_qtresultqtunused o2))

(declare-const infix_lsqtresultqtunused Bool)

;; "H"
(assert (= infix_lsqtresultqtunused (ite (< o2 4294967296) true false)))

(declare-const o3 (_ BitVec 32))

(declare-const of_intqtresultqtunused (_ BitVec 32))

(declare-const lsl_bvqtresultqtunused (_ BitVec 32))

;; "H"
(assert
  (ite (< o2 4294967296)
    (and
      (= o3 ((_ int2bv 32) o2))
      (and
        (= of_intqtresultqtunused o3)
        (and (= o (bvshl #x00000001 o3)) (= lsl_bvqtresultqtunused o))))
    (= o #x00000000)))

;; "o"
(define-fun o4 () (_ BitVec 64)
  (bvudiv i #x0000000000000020))

;; "udiv_'result'unused"
(define-fun udiv_qtresultqtunused () (_ BitVec 64)
  o4)

;; "o"
(define-fun o5 () Int
  (bv2int o4))

;; "t_int'result'unused"
(define-fun t_intqtresultqtunused1 () Int
  o5)

;; "Ensures"
(assert (in_range1 o5))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o5)

;; "o"
(define-fun o6 () Int
  (+ a_first o5))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o6)

;; "Ensures"
(assert (in_range o6))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  o6)

;; "Assert"
(assert (and (<= (first a) o6) (<= o6 (last a))))

;; "o"
(define-fun o7 () (Array Int unsigned_32)
  (to_array a))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int unsigned_32)
  o7)

;; "o"
(define-fun o8 () unsigned_32
  (select o7 o6))

;; "get'result'unused"
(define-fun getqtresultqtunused () unsigned_32
  o8)

(declare-const o9 (_ BitVec 32))

;; "Ensures"
(assert (= (to_rep1 o8) o9))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () (_ BitVec 32)
  o9)

;; "o"
(define-fun o10 () (_ BitVec 32)
  (bvand o9 o))

;; "bw_and'result'unused"
(define-fun bw_andqtresultqtunused () (_ BitVec 32)
  o10)

;; "o"
(define-fun o11 () Bool
  (ite (not (= o10 #x00000000)) true false))

;; "neq'result'unused"
(define-fun neqqtresultqtunused () Bool
  o11)

(declare-const test__bit_set__result Bool)

;; "test__bit_set__result'unused"
(define-fun test__bit_set__resultqtunused () bool__ref
  (bool__refqtmk test__bit_set__result))

;; "H"
(assert (= test__bit_set__result o11))

;; "result'unused"
(define-fun resultqtunused () Bool
  test__bit_set__result)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  test__bit_set__result)

;; "H"
(assert (= test__bit_set__result true))

;; Goal "def'vc"
;; File "test.ads", line 13, characters 0-0
(assert
  (not
  (not
    (= (bvand (to_rep1
                (select (to_array a) (+ a_first (bv2int (bvudiv i #x0000000000000020))))) 
    (let ((temp___215 (bv2int (bvurem i #x0000000000000020))))
      (ite (< temp___215 4294967296)
        (bvshl #x00000001 ((_ int2bv 32) temp___215))
        #x00000000))) #x00000000))))

(check-sat)
