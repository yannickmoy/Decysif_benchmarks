(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

type us_private

logic us_null_ext__ : us_private

logic bool_eq : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs_int(y)) <  mod(x,
  y)) and (mod(x, y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1((mk(f, l)).rec__first) = f) and (to_rep1((mk(f,
  l)).rec__last) = l)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic last32 : (int,character) farray

function is_less_than_max(param__s: us_t, param__is_pos: bool,
  param__first: int) : bool =
  orb(bool_lt(to_rep((to_array(param__s)[param__first])), 50),
  andb(bool_eq(to_rep((to_array(param__s)[param__first])), 50),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 1)])), 49),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 1)])), 49),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 2)])), 52),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 2)])), 52),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 3)])), 55),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 3)])), 55),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 4)])), 52),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 4)])), 52),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 5)])), 56),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 5)])), 56),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 6)])), 51),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 6)])), 51),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 7)])), 54),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 7)])), 54),
  orb(bool_lt(to_rep((to_array(param__s)[(param__first + 8)])), 52),
  andb(bool_eq(to_rep((to_array(param__s)[(param__first + 8)])), 52),
  bool_le(to_rep((to_array(param__s)[(param__first + 9)])),
  (if (param__is_pos = true) then 55 else (to_rep((last32[10])) + 1)))))))))))))))))))))

type integer_32

logic integer_32qtint : integer_32 -> int

axiom integer_32qtaxiom :
  (forall i:integer_32. (((- 2147483648) <= integer_32qtint(i)) and
  (integer_32qtint(i) <= 2147483647)))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic dummy : integer_32

function to_rep2(x: integer_32) : int = integer_32qtint(x)

logic of_rep2 : int -> integer_32

axiom inversion_axiom2 :
  (forall x:integer_32 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:integer_32 [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

function char_to_int(param__c: int) : int =
  (if (param__c = 48) then 0 else (if (param__c = 49) then 1 else (if (param__c = 50) then 2 else (if (param__c = 51) then 3 else (if (param__c = 52) then 4 else (if (param__c = 53) then 5 else (if (param__c = 54) then 6 else (if (param__c = 55) then 7 else (if (param__c = 56) then 8 else (if (param__c = 57) then 9 else to_rep2(dummy)))))))))))

logic v : int

function int_to_char(param__v: int) : int =
  (if (param__v = 0) then 48 else (if (param__v = 1) then 49 else (if (param__v = 2) then 50 else (if (param__v = 3) then 51 else (if (param__v = 4) then 52 else (if (param__v = 5) then 53 else (if (param__v = 6) then 54 else (if (param__v = 7) then 55 else (if (param__v = 8) then 56 else 57)))))))))

logic tens : (int,integer_32) farray

logic last : int

logic res0 : us_t

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic temp___String_Literal_169 : unit -> (int,character) farray

axiom temp___String_Literal_169__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_169(us_void_param)].
  (((to_rep((temp___String_Literal_169(us_void_param)[1])) = 50) and
  (to_rep((temp___String_Literal_169(us_void_param)[2])) = 49)) and
  ((((to_rep((temp___String_Literal_169(us_void_param)[3])) = 52) and
  (to_rep((temp___String_Literal_169(us_void_param)[4])) = 55)) and
  ((to_rep((temp___String_Literal_169(us_void_param)[5])) = 52) and
  (to_rep((temp___String_Literal_169(us_void_param)[6])) = 56))) and
  (((to_rep((temp___String_Literal_169(us_void_param)[7])) = 51) and
  (to_rep((temp___String_Literal_169(us_void_param)[8])) = 54)) and
  ((to_rep((temp___String_Literal_169(us_void_param)[9])) = 52) and
  (to_rep((temp___String_Literal_169(us_void_param)[10])) = 55))))))

type tinteger_32B

logic tinteger_32Bqtint : tinteger_32B -> int

axiom tinteger_32Bqtaxiom :
  (forall i:tinteger_32B. (((- 2147483648) <= tinteger_32Bqtint(i)) and
  (tinteger_32Bqtint(i) <= 2147483647)))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

type ttensD1

logic ttensD1qtint : ttensD1 -> int

axiom ttensD1qtaxiom :
  (forall i:ttensD1. ((1 <= ttensD1qtint(i)) and (ttensD1qtint(i) <= 10)))

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic value__size3 : int

logic object__size3 : int

logic component__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic integer32_parsing__tens__aggregate_def : int, int, int, int, int, int,
  int, int, int, int -> (int,integer_32) farray

type tTresSP1

logic tTresSP1qtint : tTresSP1 -> int

axiom tTresSP1qtaxiom :
  (forall i:tTresSP1. ((1 <= tTresSP1qtint(i)) and (tTresSP1qtint(i) <= 11)))

logic value__size4 : int

logic object__size4 : int

logic component__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom4 : (0 <= component__size4)

axiom alignment_axiom4 : (0 <= alignment4)

type t81b

logic t81bqtint : t81b -> int

axiom t81bqtaxiom :
  (forall i:t81b. ((1 <= t81bqtint(i)) and (t81bqtint(i) <= 11)))

logic value__size5 : int

logic object__size5 : int

logic component__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom5 : (0 <= component__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic integer32_parsing__print_int_32__res__aggregate_def : int -> (int,character) farray

axiom last32__def_axiom : (last32 = (let temp___170qtunused =
  temp___String_Literal_169(void) : (int,character) farray in
  temp___String_Literal_169(void)))

axiom tens__def_axiom : (tens = (let temp___195qtunused =
  integer32_parsing__tens__aggregate_def(1, 10, 100, 1000, 10000, 100000,
  1000000, 10000000, 100000000, 1000000000) : (int,integer_32) farray in
  integer32_parsing__tens__aggregate_def(1, 10, 100, 1000, 10000, 100000,
  1000000, 10000000, 100000000, 1000000000)))

logic rliteral : integer_32

axiom rliteral_axiom : (integer_32qtint(rliteral) = 1)

logic rliteral1 : integer_32

axiom rliteral_axiom1 : (integer_32qtint(rliteral1) = 10)

logic rliteral2 : integer_32

axiom rliteral_axiom2 : (integer_32qtint(rliteral2) = 100)

logic rliteral3 : integer_32

axiom rliteral_axiom3 : (integer_32qtint(rliteral3) = 1000)

logic rliteral4 : integer_32

axiom rliteral_axiom4 : (integer_32qtint(rliteral4) = 10000)

logic rliteral5 : integer_32

axiom rliteral_axiom5 : (integer_32qtint(rliteral5) = 100000)

logic rliteral6 : integer_32

axiom rliteral_axiom6 : (integer_32qtint(rliteral6) = 1000000)

logic rliteral7 : integer_32

axiom rliteral_axiom7 : (integer_32qtint(rliteral7) = 10000000)

logic rliteral8 : integer_32

axiom rliteral_axiom8 : (integer_32qtint(rliteral8) = 100000000)

logic rliteral9 : integer_32

axiom rliteral_axiom9 : (integer_32qtint(rliteral9) = 1000000000)

axiom def_axiom :
  (forall temp___182:int. forall temp___183:int. forall temp___184:int.
  forall temp___185:int. forall temp___186:int. forall temp___187:int.
  forall temp___188:int. forall temp___189:int. forall temp___190:int.
  forall temp___191:int. (let temp___192 =
  integer32_parsing__tens__aggregate_def(temp___182, temp___183, temp___184,
  temp___185, temp___186, temp___187, temp___188, temp___189, temp___190,
  temp___191) : (int,integer_32) farray in ((((temp___192[1]) = rliteral) and
  ((temp___192[2]) = rliteral1)) and (((((temp___192[3]) = rliteral2) and
  ((temp___192[4]) = rliteral3)) and (((temp___192[5]) = rliteral4) and
  ((temp___192[6]) = rliteral5))) and ((((temp___192[7]) = rliteral6) and
  ((temp___192[8]) = rliteral7)) and (((temp___192[9]) = rliteral8) and
  ((temp___192[10]) = rliteral9)))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. (((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))) and (((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))) and (((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))) and ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d))))))))))

 (* "integer32_parsing.ads", line 65, characters 0-0 *)
goal defqtvc :
  (forall first:int. ((temp___String_Literal_169(void) = last32) ->
  (forall temp___627:(int,integer_32) farray.
  ((((((temp___627[1]) = rliteral) and ((temp___627[2]) = rliteral1)) and
  (((((temp___627[3]) = rliteral2) and ((temp___627[4]) = rliteral3)) and
  (((temp___627[5]) = rliteral4) and ((temp___627[6]) = rliteral5))) and
  ((((temp___627[7]) = rliteral6) and ((temp___627[8]) = rliteral7)) and
  (((temp___627[9]) = rliteral8) and ((temp___627[10]) = rliteral9))))) and
  (temp___627 = integer32_parsing__tens__aggregate_def(1, 10, 100, 1000,
  10000, 100000, 1000000, 10000000, 100000000, 1000000000))) ->
  ((temp___627 = tens) -> (in_range3(v) ->
  (forall temp___567:(int,character) farray.
  (((forall temp___566:int [(temp___567[temp___566])].
    (((1 <= temp___566) and (temp___566 <= 11)) -> (in_range2(48) ->
    (to_rep((temp___567[temp___566])) = 48)))) and
  (temp___567 = integer32_parsing__print_int_32__res__aggregate_def(48))) ->
  (forall res:(int,character) farray. ((res = temp___567) ->
  (forall x:int. ((x = v) -> (in_range3(x) ->
  (forall top:int. ((top = 11) -> (in_range1(top) -> (in_range1(first) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (v = 0) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall res1:(int,character) farray. forall top1:int.
  ((exists i:int. ((i = 1) and (if (andb((if (1 <= i) then true else false),
   (if (i <= 10) then true else false)) = true) then (exists res2:(int,character) farray.
                                                     exists x1:int.
                                                     exists top2:int.
                                                     exists i1:int.
                                                     ((andb((if (in_range3(x1) and
                                                     in_range1(top2)) then true else false),
                                                     (if ((1 <= i1) and
                                                     (i1 <= 10)) then true else false)) = true) and
                                                     (let o = abs_int(mod(x1,
                                                     10)) : int in (let o1 =
                                                     int_to_char(o) : int in
                                                     ((in_range2(o1) and
                                                     (o1 = (if (o = 0) then 48 else (if (o = 1) then 49 else (if (o = 2) then 50 else (if (o = 3) then 51 else (if (o = 4) then 52 else (if (o = 5) then 53 else (if (o = 6) then 54 else (if (o = 7) then 55 else (if (o = 8) then 56 else 57))))))))))) and
                                                     (exists o2:character.
                                                     ((to_rep(o2) = o1) and
                                                     (((1 <= top2) and
                                                     (top2 <= 11)) and
                                                     ((res1 = (res2[top2 <- o2])) and
                                                     (let o3 = (top2 - 1)
                                                     : int in
                                                     (in_range1(o3) and
                                                     ((top1 = o3) and
                                                     (exists x2:int.
                                                     ((x2 = div(x1, 10)) and
                                                     ((not (x2 = 0)) ->
                                                     ((top1 = (11 - i1)) and
                                                     ((((-div(2147483647,
                                                     to_rep2((tens[i1])))) <= x2) and
                                                     (x2 <= div(2147483647,
                                                     to_rep2((tens[i1]))))) and
                                                     ((x2 = div(div(v,
                                                     to_rep2((tens[i1]))),
                                                     10)) and ((x2 = div(v,
                                                     to_rep2((tens[(i1 + 1)])))) and
                                                     ((char_to_int(to_rep((res1[(12 - i1)]))) = abs_int(mod(div(v,
                                                     to_rep2((tens[i1]))),
                                                     10))) and (((div(v,
                                                     to_rep2((tens[(i1 + 1)]))) = div(2147483647,
                                                     to_rep2((tens[i1])))) ->
                                                     (to_rep((res1[(12 - i1)])) <= to_rep((last32[(11 - i1)])))) and
                                                     (((div(v,
                                                     to_rep2((tens[(i1 + 1)]))) = (-div(2147483647,
                                                     to_rep2((tens[i1]))))) ->
                                                     ((to_rep((res1[(12 - i1)])) <= to_rep((last32[(11 - i1)]))) or
                                                     ((i1 = 1) and
                                                     (to_rep((res1[(12 - i1)])) = (to_rep((last32[(11 - i1)])) + 1))))) and
                                                     (i1 = 10))))))))))))))))))))))) else ((res1 = res) and
   (top1 = top))))) ->
  (let o = (top1 + 1) : int in (in_range(o) ->
  (forall first1:int. ((first1 = o) ->
  (forall spark__branch1:bool. forall res2:(int,character) farray.
  forall top2:int.
  (((spark__branch1 = (if (v <  0) then true else false)) and
  (if (spark__branch1 = true) then (exists o1:character.
                                   ((to_rep(o1) = 45) and (((1 <= top1) and
                                   (top1 <= 11)) and
                                   ((res2 = (res1[top1 <- o1])) and (let o2 =
                                   (top1 - 1) : int in (in_range1(o2) and
                                   (top2 = o2))))))) else ((res2 = res1) and
  (top2 = top1)))) -> (((1 <  first1) or (is_less_than_max(of_array(res2, 1,
  11), bool_ge(v, 0), first1) = true)) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 11) then true else false)) = true) ->
  (forall i1:int. (((1 <= i1) and (i1 <= 11)) ->
  (forall spark__branch2:bool.
  ((spark__branch2 = (if (first1 <= i1) then true else false)) ->
  ((spark__branch2 = true) -> (let temp___591 = (12 - i1) : int in
  (((1 <= temp___591) and (temp___591 <= 10)) ->
  (forall o1:int. ((to_rep2((tens[temp___591])) = o1) -> (in_range4(div(v,
  o1)) -> (forall o2:int. ((to_rep((res2[i1])) = o2) -> (48 <= o2)))))))))))))))))))))))))))))))))))))))))))))
