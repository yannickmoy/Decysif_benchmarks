(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type us_private

logic us_null_ext__ : us_private

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__frame_condition__cell__value : natural;
rec__frame_condition__cell__max_left : natural;
rec__frame_condition__cell__max_right : natural }

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic frame_condition__cell__value__first__bit : int

logic frame_condition__cell__value__last__bit : int

logic frame_condition__cell__value__position : int

axiom frame_condition__cell__value__first__bit_axiom :
  (0 <= frame_condition__cell__value__first__bit)

axiom frame_condition__cell__value__last__bit_axiom :
  (frame_condition__cell__value__first__bit <  frame_condition__cell__value__last__bit)

axiom frame_condition__cell__value__position_axiom :
  (0 <= frame_condition__cell__value__position)

logic frame_condition__cell__max_left__first__bit : int

logic frame_condition__cell__max_left__last__bit : int

logic frame_condition__cell__max_left__position : int

axiom frame_condition__cell__max_left__first__bit_axiom :
  (0 <= frame_condition__cell__max_left__first__bit)

axiom frame_condition__cell__max_left__last__bit_axiom :
  (frame_condition__cell__max_left__first__bit <  frame_condition__cell__max_left__last__bit)

axiom frame_condition__cell__max_left__position_axiom :
  (0 <= frame_condition__cell__max_left__position)

logic frame_condition__cell__max_right__first__bit : int

logic frame_condition__cell__max_right__last__bit : int

logic frame_condition__cell__max_right__position : int

axiom frame_condition__cell__max_right__first__bit_axiom :
  (0 <= frame_condition__cell__max_right__first__bit)

axiom frame_condition__cell__max_right__last__bit_axiom :
  (frame_condition__cell__max_right__first__bit <  frame_condition__cell__max_right__last__bit)

axiom frame_condition__cell__max_right__position_axiom :
  (0 <= frame_condition__cell__max_right__position)

logic dummy : us_rep

logic a__first : integer

logic a__last : integer

logic first : int

logic last : int

type t = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1((mk(f, l)).rec__first) = f) and (to_rep1((mk(f,
  l)).rec__last) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function get_max_right(param__index: int,
  Frame_condition__update_max_2__a___a___: (int,us_rep) farray) : int =
  to_rep((((let temp___178 =
  of_array(Frame_condition__update_max_2__a___a___, to_rep1(a__first),
  to_rep1(a__last)) : us_t in
  (to_array(temp___178)[param__index]))).us_split_fields1).rec__frame_condition__cell__max_right)

function frame_right(param__old_a: us_t,
  Frame_condition__update_max_2__a___a___: (int,us_rep) farray) : bool =
  (if (forall i:int. (((to_rep1(a__first) <= i) and
      (i <= to_rep1(a__last))) -> ((to_rep((((let temp___182 =
      of_array(Frame_condition__update_max_2__a___a___, to_rep1(a__first),
      to_rep1(a__last)) : us_t in
      (to_array(temp___182)[i]))).us_split_fields1).rec__frame_condition__cell__value) = to_rep((((to_array(param__old_a)[i])).us_split_fields1).rec__frame_condition__cell__value)) and
      (to_rep((((let temp___183 =
      of_array(Frame_condition__update_max_2__a___a___, to_rep1(a__first),
      to_rep1(a__last)) : us_t in
      (to_array(temp___183)[i]))).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep((((to_array(param__old_a)[i])).us_split_fields1).rec__frame_condition__cell__max_left))))) then true else false)

logic first1 : int

logic last1 : int

axiom first__def_axiom : (first = to_rep1(a__first))

axiom last__def_axiom : (last = to_rep1(a__last))

axiom first__def_axiom1 : (first1 = last)

axiom last__def_axiom1 : (last1 = first)

 (* "frame_condition.adb", line 150, characters 0-0 *)
goal defqtvc :
  (forall a:(int,us_rep) farray. (in_range2(first) ->
  (forall temp___899:int. ((to_rep1(a__first) = temp___899) ->
  ((temp___899 = first) -> (in_range2(last) ->
  (forall temp___901:int. ((to_rep1(a__last) = temp___901) ->
  ((temp___901 = last) -> (dynamic_property(1, 2147483647, to_rep1(a__first),
  to_rep1(a__last)) -> (in_range2(first1) -> ((last = first1) ->
  (in_range2(last1) -> ((first = last1) -> ((0 <  length(to_rep1(a__first),
  to_rep1(a__last))) ->
  (forall o:int. ((to_rep1(a__last) = o) ->
  (forall o1:int. ((to_rep1(a__first) = o1) ->
  (forall k:int. ((k = first1) -> (in_range2(k) ->
  (forall max:int. ((max = 0) -> (in_range1(max) ->
  (forall o2:int. ((to_rep1(a__last) = o2) ->
  (forall o3:int. ((to_rep1(a__first) = o3) ->
  (forall o4:int. ((to_rep1(a__last) = o4) ->
  (forall o5:int. ((to_rep1(a__first) = o5) ->
  (forall spark__branch:bool. forall max1:int.
  ((exists o6:int. ((to_rep1(a__last) = o6) and
   (exists o7:int. ((to_rep1(a__first) = o7) and (((o7 <= k) and
   (k <= o6)) and
   (exists o8:int.
   ((to_rep((((a[k])).us_split_fields1).rec__frame_condition__cell__value) = o8) and
   ((spark__branch = (if (max <  o8) then true else false)) and
   (if (spark__branch = true) then (exists o9:int.
                                   ((to_rep1(a__last) = o9) and
                                   (exists o10:int.
                                   ((to_rep1(a__first) = o10) and
                                   (((o10 <= k) and (k <= o9)) and
                                   (exists o11:int.
                                   ((to_rep((((a[k])).us_split_fields1).rec__frame_condition__cell__value) = o11) and
                                   (max1 = o11)))))))) else (max1 = max)))))))))) ->
  (forall c267b:int. ((c267b = k) -> (in_range2(c267b) ->
  (forall c268b:int. ((c268b = max1) -> (in_range1(c268b) ->
  (forall o6:int. ((to_rep1(a__last) = o6) ->
  (forall o7:int. ((to_rep1(a__first) = o7) ->
  (forall o8:int. ((to_rep1(a__last) = o8) ->
  (forall o9:int. ((to_rep1(a__first) = o9) -> (let usq_ =
  ((a[c267b])).us_split_fields1 : us_split_fields in
  (forall o10:natural. ((to_rep(o10) = c268b) -> (((o7 <= c267b) and
  (c267b <= o6)) ->
  (forall a1:(int,us_rep) farray. ((a1 = to_array({ elts = (a[c267b <- {
  us_split_fields1 = { rec__frame_condition__cell__value =
  (usq_).rec__frame_condition__cell__value;
  rec__frame_condition__cell__max_left =
  (usq_).rec__frame_condition__cell__max_left;
  rec__frame_condition__cell__max_right = o10 } }]); rt = (of_array(a, o7,
  o6)).rt })) ->
  (forall o11:int. ((to_rep1(a__last) = o11) ->
  (forall o12:int. ((to_rep1(a__first) = o12) ->
  (forall o13:int. ((to_rep1(a__last) = o13) ->
  (forall o14:int. ((to_rep1(a__last) = o14) ->
  (forall o15:int. ((to_rep1(a__first) = o15) ->
  (forall o16:int. ((to_rep1(a__first) = o16) ->
  (forall a2:(int,us_rep) farray. forall k1:int. forall max2:int.
  forall c267b1:int. forall c268b1:int. ((((to_rep1(a__first) <= k1) and
  (k1 <= to_rep1(a__last))) and
  (((forall i:int. (((first1 <= i) and (i <= k1)) ->
    (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__value) <= max2))) and
  (forall i:int. (((k1 <= i) and (i <= first1)) ->
  (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__value) <= max2)))) and
  (((forall i:int. (((first1 <= i) and (i <= k1)) ->
    (forall j:int. (((i <= j) and (j <= k1)) ->
    (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__value) <= get_max_right(j,
    a2)))))) and
  (forall i:int. (((k1 <= i) and (i <= first1)) ->
  (forall j:int. (((i <= j) and (j <= first1)) ->
  (to_rep((((a2[j])).us_split_fields1).rec__frame_condition__cell__value) <= get_max_right(i,
  a2))))))) and (frame_right(of_array(a, o3, o2), a2) = true)))) ->
  ((((((forall temp___856:int. (((to_rep1(a__first) <= temp___856) and
       (temp___856 <= to_rep1(a__last))) ->
       (((((a2[temp___856])).us_split_fields1).rec__frame_condition__cell__value = (((a[temp___856])).us_split_fields1).rec__frame_condition__cell__value) and
       ((((a2[temp___856])).us_split_fields1).rec__frame_condition__cell__max_left = (((a[temp___856])).us_split_fields1).rec__frame_condition__cell__max_left)))) and
  in_range2(k1)) and in_range1(max2)) and in_range2(c267b1)) and
  in_range1(c268b1)) -> ((not (k1 = last1)) -> (let o17 = (k1 - 1) : int in
  (in_range2(o17) ->
  (forall k2:int. ((k2 = o17) ->
  (forall max3:int.
  ((exists o18:int. ((to_rep1(a__last) = o18) and
   (exists o19:int. ((to_rep1(a__first) = o19) and (((o19 <= k2) and
   (k2 <= o18)) and
   (exists o20:int.
   ((to_rep((((a2[k2])).us_split_fields1).rec__frame_condition__cell__value) = o20) and
   (exists spark__branch1:bool.
   ((spark__branch1 = (if (max2 <  o20) then true else false)) and
   (if (spark__branch1 = true) then (exists o21:int.
                                    ((to_rep1(a__last) = o21) and
                                    (exists o22:int.
                                    ((to_rep1(a__first) = o22) and
                                    (((o22 <= k2) and (k2 <= o21)) and
                                    (exists o23:int.
                                    ((to_rep((((a2[k2])).us_split_fields1).rec__frame_condition__cell__value) = o23) and
                                    (max3 = o23)))))))) else (max3 = max2))))))))))) ->
  (forall c267b2:int. ((c267b2 = k2) -> (in_range2(c267b2) ->
  (forall c268b2:int. ((c268b2 = max3) -> (in_range1(c268b2) ->
  (forall o18:int. ((to_rep1(a__last) = o18) ->
  (forall o19:int. ((to_rep1(a__first) = o19) ->
  (forall o20:int. ((to_rep1(a__last) = o20) ->
  (forall o21:int. ((to_rep1(a__first) = o21) -> (let usq_1 =
  ((a2[c267b2])).us_split_fields1 : us_split_fields in
  (forall o22:natural. ((to_rep(o22) = c268b2) -> (((o19 <= c267b2) and
  (c267b2 <= o18)) ->
  (forall a3:(int,us_rep) farray. ((a3 = to_array({ elts = (a2[c267b2 <- {
  us_split_fields1 = { rec__frame_condition__cell__value =
  (usq_1).rec__frame_condition__cell__value;
  rec__frame_condition__cell__max_left =
  (usq_1).rec__frame_condition__cell__max_left;
  rec__frame_condition__cell__max_right = o22 } }]); rt = (of_array(a2, o19,
  o18)).rt })) ->
  (forall o23:int. ((to_rep1(a__last) = o23) ->
  (forall o24:int. ((to_rep1(a__first) = o24) ->
  (forall o25:int. ((to_rep1(a__last) = o25) ->
  (forall o26:int. ((to_rep1(a__last) = o26) ->
  (forall o27:int. ((to_rep1(a__first) = o27) ->
  (forall o28:int. ((to_rep1(a__first) = o28) ->
  (((to_rep1(a__first) <= k2) and (k2 <= to_rep1(a__last))) ->
  (((forall i:int. (((first1 <= i) and (i <= k2)) ->
    (to_rep((((a3[i])).us_split_fields1).rec__frame_condition__cell__value) <= max3))) and
  (forall i:int. (((k2 <= i) and (i <= first1)) ->
  (to_rep((((a3[i])).us_split_fields1).rec__frame_condition__cell__value) <= max3)))) ->
  (forall i:int. (((k2 <= i) and (i <= first1)) ->
  (forall j:int. (((i <= j) and (j <= first1)) ->
  (to_rep((((a3[j])).us_split_fields1).rec__frame_condition__cell__value) <= get_max_right(i,
  a3)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
