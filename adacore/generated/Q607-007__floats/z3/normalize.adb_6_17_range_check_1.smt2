;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-const x Float32)

;; "in_range"
(define-fun in_range ((x1 Float32)) Bool
  (and
    (fp.isFinite32 x1)
    (and
      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111101110)) x1)
      (fp.leq x1 (fp #b0 #b11111110 #b11111111111111111101110)))))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_191 Float32) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool) (temp___do_typ_inv_190 Bool)) Bool
  (=>
    (or
      (= temp___is_init_187 true)
      (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111101110)) (fp #b0 #b11111110 #b11111111111111111101110)))
    (in_range temp___expr_191)))

;; "Assume"
(assert (dynamic_invariant x true false true true))

;; "o"
(define-fun o () Float32
  (fp.roundToIntegral RTN x))

;; "floor'result'unused"
(define-fun floorqtresultqtunused () Float32
  o)

;; Goal "def'vc"
;; File "normalize.adb", line 5, characters 0-0
(assert
  (not (in_range o)))

(check-sat)
