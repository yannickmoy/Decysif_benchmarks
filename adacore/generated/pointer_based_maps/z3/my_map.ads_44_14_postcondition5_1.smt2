;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-sort positive 0)

;; "positive'int"
(declare-fun positiveqtint (positive) Int)

;; "positive'axiom"
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x positive)) Int
  (positiveqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) positive)

;; "inversion_axiom"
(assert
  (forall ((x positive))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-datatypes ()
  ((us_rep
   (us_repqtmk
   (rec__my_map__map_acc__is_null_pointer Bool)(rec__my_map__map_acc__is_moved Bool)(rec__my_map__map_acc__pointer_value_abstr us_main_type)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (rec__my_map__map_acc__is_null_pointer a) (rec__my_map__map_acc__is_null_pointer
                                                        b))
         (=>
           (not (= (rec__my_map__map_acc__is_null_pointer a) true))
           (= (rec__my_map__map_acc__pointer_value_abstr a) (rec__my_map__map_acc__pointer_value_abstr
                                                              b))))
    true
    false))

(declare-const dummy us_rep)

(declare-const dummy1 us_rep)

(declare-datatypes ()
  ((us_rep1
   (us_repqtmk1
   (rec__my_map__nullable_int_acc__is_null_pointer Bool)(rec__my_map__nullable_int_acc__is_moved Bool)(rec__my_map__nullable_int_acc__pointer_value integer)))))

(declare-const us_null_pointer us_rep1)

;; "__null_pointer__def_axiom"
(assert
  (= (rec__my_map__nullable_int_acc__is_null_pointer us_null_pointer) true))

(declare-const dummy2 us_rep1)

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__my_map__map__key positive)(rec__my_map__map__value us_rep1)(rec__my_map__map__next us_rep)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const my_map__map__key__first__bit Int)

(declare-const my_map__map__key__last__bit Int)

(declare-const my_map__map__key__position Int)

;; "my_map__map__key__first__bit_axiom"
(assert (<= 0 my_map__map__key__first__bit))

;; "my_map__map__key__last__bit_axiom"
(assert (< my_map__map__key__first__bit my_map__map__key__last__bit))

;; "my_map__map__key__position_axiom"
(assert (<= 0 my_map__map__key__position))

(declare-const my_map__map__value__first__bit Int)

(declare-const my_map__map__value__last__bit Int)

(declare-const my_map__map__value__position Int)

;; "my_map__map__value__first__bit_axiom"
(assert (<= 0 my_map__map__value__first__bit))

;; "my_map__map__value__last__bit_axiom"
(assert (< my_map__map__value__first__bit my_map__map__value__last__bit))

;; "my_map__map__value__position_axiom"
(assert (<= 0 my_map__map__value__position))

(declare-const my_map__map__next__first__bit Int)

(declare-const my_map__map__next__last__bit Int)

(declare-const my_map__map__next__position Int)

;; "my_map__map__next__first__bit_axiom"
(assert (<= 0 my_map__map__next__first__bit))

;; "my_map__map__next__last__bit_axiom"
(assert (< my_map__map__next__first__bit my_map__map__next__last__bit))

;; "my_map__map__next__position_axiom"
(assert (<= 0 my_map__map__next__position))

(declare-const dummy3 us_rep2)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content us_rep2)))))

;; "model_contains"
(declare-fun model_contains (us_rep
  Int) Bool)

;; "has_element"
(declare-fun has_element (us_rep2
  Int) Bool)

;; "__open"
(declare-fun us_open (us_main_type) us_rep2)

;; "__close"
(declare-fun us_close (us_rep2) us_main_type)

;; "close_open"
(assert
  (forall ((x us_main_type))
    (! (= (us_close (us_open x)) x) :pattern ((us_open x)) )))

;; "open_close"
(assert
  (forall ((x us_rep2))
    (! (= (us_open (us_close x)) x) :pattern ((us_close x)) )))

;; "rec__my_map__map_acc__pointer_value"
(define-fun rec__my_map__map_acc__pointer_value ((a us_rep)) us_rep2
  (us_open (rec__my_map__map_acc__pointer_value_abstr a)))

(declare-const us_null_pointer1 us_rep)

;; "__null_pointer__def_axiom"
(assert (= (rec__my_map__map_acc__is_null_pointer us_null_pointer1) true))

(declare-const dummy4 us_rep)

;; "model_value"
(declare-fun model_value (us_rep
  Int) Int)

(declare-const dummy5 us_rep)

(declare-const m__is_null_pointer Bool)

(declare-const k Int)

(declare-const v Int)

(declare-const dummy6 us_rep)

;; "deep_copy"
(declare-fun deep_copy (us_rep) us_rep)

;; "temp___dynamic_invariant_201"
(declare-fun temp___dynamic_invariant_201 (us_rep
  Bool
  Bool
  Bool
  Bool) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_200 us_rep) (temp___is_init_196 Bool) (temp___skip_constant_197 Bool) (temp___do_toplevel_198 Bool) (temp___do_typ_inv_199 Bool)) Bool
  (=>
    (not (= (rec__my_map__map_acc__is_null_pointer temp___expr_200) true))
    (and
      (not
        (= (rec__my_map__nullable_int_acc__is_null_pointer
             (rec__my_map__map__value
               (us_split_fields1
                 (rec__my_map__map_acc__pointer_value temp___expr_200)))) true))
      (temp___dynamic_invariant_201
        (rec__my_map__map__next
          (us_split_fields1
            (rec__my_map__map_acc__pointer_value temp___expr_200)))
        true
        false
        true
        temp___do_typ_inv_199))))

;; "my_map__map_acc__def_axiom"
(assert
  (forall ((temp___expr_206 us_rep))
    (forall ((temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool) (temp___do_typ_inv_205 Bool))
      (! (=
           (temp___dynamic_invariant_201
             temp___expr_206
             temp___is_init_202
             temp___skip_constant_203
             temp___do_toplevel_204
             temp___do_typ_inv_205)
           (=>
             (not
               (= (rec__my_map__map_acc__is_null_pointer temp___expr_206) true))
             (and
               (not
                 (= (rec__my_map__nullable_int_acc__is_null_pointer
                      (rec__my_map__map__value
                        (us_split_fields1
                          (rec__my_map__map_acc__pointer_value
                            temp___expr_206)))) true))
               (temp___dynamic_invariant_201
                 (rec__my_map__map__next
                   (us_split_fields1
                     (rec__my_map__map_acc__pointer_value temp___expr_206)))
                 true
                 false
                 true
                 temp___do_typ_inv_205)))) :pattern ((temp___dynamic_invariant_201
                                                       temp___expr_206
                                                       temp___is_init_202
                                                       temp___skip_constant_203
                                                       temp___do_toplevel_204
                                                       temp___do_typ_inv_205)) ))))

(declare-const dummy7 us_rep)

(declare-const m_copy__is_null_pointer Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
  ((t25b__ref (t25b__refqtmk (t25b__content us_rep)))))

(declare-const x__borrowed_at_end us_rep)

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_207 us_rep) (temp___skip_top_level_208 Bool)) Bool
  (= (rec__my_map__map_acc__is_null_pointer temp___expr_207) true))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_213 us_rep2) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool) (temp___do_typ_inv_212 Bool)) Bool
  (and
    (=>
      (= temp___is_init_209 true)
      (not
        (= (rec__my_map__nullable_int_acc__is_null_pointer
             (rec__my_map__map__value (us_split_fields1 temp___expr_213))) true)))
    (=>
      (not
        (= (rec__my_map__map_acc__is_null_pointer
             (rec__my_map__map__next (us_split_fields1 temp___expr_213))) true))
      (and
        (not
          (= (rec__my_map__nullable_int_acc__is_null_pointer
               (rec__my_map__map__value
                 (us_split_fields1
                   (rec__my_map__map_acc__pointer_value
                     (rec__my_map__map__next
                       (us_split_fields1 temp___expr_213)))))) true))
        (temp___dynamic_invariant_201
          (rec__my_map__map__next
            (us_split_fields1
              (rec__my_map__map_acc__pointer_value
                (rec__my_map__map__next (us_split_fields1 temp___expr_213)))))
          true
          false
          true
          temp___do_typ_inv_212)))))

(declare-const dummy9 us_rep)

;; "has_element__post_axiom"
(assert true)

;; "has_element__def_axiom"
(assert
  (forall ((param__m us_rep2))
    (forall ((param__k Int))
      (! (=
           (= (has_element param__m param__k) true)
           (and
             (not (= param__k 0))
             (or
               (= (to_rep1
                    (rec__my_map__map__key (us_split_fields1 param__m))) param__k)
               (= (model_contains
                    (rec__my_map__map__next (us_split_fields1 param__m))
                    param__k) true)))) :pattern ((has_element
                                                   param__m
                                                   param__k)) ))))

;; "model_contains__post_axiom"
(assert true)

;; "model_contains__def_axiom"
(assert
  (forall ((param__m us_rep))
    (forall ((param__k Int))
      (! (=
           (= (model_contains param__m param__k) true)
           (and
             (not (= (bool_eq param__m us_null_pointer1) true))
             (= (has_element
                  (rec__my_map__map_acc__pointer_value param__m)
                  param__k) true))) :pattern ((model_contains
                                                param__m
                                                param__k)) ))))

;; "model_value__post_axiom"
(assert
  (forall ((param__m us_rep))
    (forall ((param__k Int))
      (! (=>
           (and
             (and
               (=>
                 (not
                   (= (rec__my_map__map_acc__is_null_pointer param__m) true))
                 (dynamic_invariant1
                   (rec__my_map__map_acc__pointer_value param__m)
                   true
                   false
                   true
                   true))
               (in_range2 param__k))
             (= (model_contains param__m param__k) true))
           (in_range (model_value param__m param__k))) :pattern ((model_value
                                                                   param__m
                                                                   param__k)) ))))

;; "model_value__def_axiom"
(assert
  (forall ((param__m us_rep))
    (forall ((param__k Int))
      (! (= (model_value param__m param__k) (ite (= (to_rep1
                                                      (rec__my_map__map__key
                                                        (us_split_fields1
                                                          (rec__my_map__map_acc__pointer_value
                                                            param__m)))) param__k)
                                              (to_rep
                                                (rec__my_map__nullable_int_acc__pointer_value
                                                  (rec__my_map__map__value
                                                    (us_split_fields1
                                                      (rec__my_map__map_acc__pointer_value
                                                        param__m)))))
                                              (model_value
                                                (rec__my_map__map__next
                                                  (us_split_fields1
                                                    (rec__my_map__map_acc__pointer_value
                                                      param__m)))
                                                param__k))) :pattern (
      (model_value
        param__m
        param__k)) ))))

;; "deep_copy__post_axiom"
(assert
  (forall ((param__m us_rep))
    (! (=>
         (=>
           (not (= (rec__my_map__map_acc__is_null_pointer param__m) true))
           (dynamic_invariant1
             (rec__my_map__map_acc__pointer_value param__m)
             true
             false
             true
             true))
         (let ((result (deep_copy param__m)))
           (and
             (and
               (=
                 (= (bool_eq result us_null_pointer1) true)
                 (= (bool_eq param__m us_null_pointer1) true))
               (=>
                 (not (= (bool_eq param__m us_null_pointer1) true))
                 (and
                   (forall ((k1 Int))
                     (=>
                       (and
                         (in_range1 k1)
                         (= (has_element
                              (rec__my_map__map_acc__pointer_value param__m)
                              k1) true))
                       (= (model_contains result k1) true)))
                   (forall ((k1 Int))
                     (=>
                       (and
                         (in_range1 k1)
                         (= (has_element
                              (rec__my_map__map_acc__pointer_value result)
                              k1) true))
                       (and
                         (= (model_contains param__m k1) true)
                         (= (model_value param__m k1) (model_value result k1))))))))
             (dynamic_invariant result true false true true)))) :pattern (
    (deep_copy
      param__m)) )))

(declare-const m__pointer_value us_split_fields)

(declare-const m__rec__is_moved__ Bool)

(declare-const r__pointer_value us_split_fields)

(declare-const r__is_null_pointer Bool)

(declare-const r__rec__is_moved__ Bool)

;; "r__rec__is_moved__"
(define-fun r__rec__is_moved__1 () bool__ref
  (bool__refqtmk r__rec__is_moved__))

;; "r__is_null_pointer'unused"
(define-fun r__is_null_pointerqtunused () bool__ref
  (bool__refqtmk r__is_null_pointer))

;; "r__pointer_value'unused"
(define-fun r__pointer_valueqtunused () map__ref
  (map__refqtmk (us_repqtmk2 r__pointer_value)))

;; "m__rec__is_moved__'unused"
(define-fun m__rec__is_moved__qtunused () bool__ref
  (bool__refqtmk m__rec__is_moved__))

;; "m__pointer_value'unused"
(define-fun m__pointer_valueqtunused () map__ref
  (map__refqtmk (us_repqtmk2 m__pointer_value)))

;; "m__pointer_value'unused"
(define-fun m__pointer_valueqtunused1 () map__ref
  (map__refqtmk (us_repqtmk2 m__pointer_value)))

;; "m__rec__is_moved__'unused"
(define-fun m__rec__is_moved__qtunused1 () bool__ref
  (bool__refqtmk m__rec__is_moved__))

;; "Assume"
(assert
  (=>
    (not (= m__is_null_pointer true))
    (dynamic_invariant1
      (rec__my_map__map_acc__pointer_value
        (us_repqtmk
          m__is_null_pointer
          m__rec__is_moved__
          (us_close (us_repqtmk2 m__pointer_value))))
      true
      false
      true
      true)))

;; "Assume"
(assert (in_range2 k))

;; "Assume"
(assert (in_range v))

;; "Assume"
(assert
  (= (model_contains
       (us_repqtmk
         m__is_null_pointer
         m__rec__is_moved__
         (us_close (us_repqtmk2 m__pointer_value)))
       k) true))

;; "o"
(define-fun o () us_rep2
  (us_repqtmk2 m__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () us_rep2
  o)

;; "o"
(define-fun o1 () us_main_type
  (us_close o))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused () us_main_type
  o1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  m__rec__is_moved__)

;; "o"
(define-fun o2 () us_rep
  (us_repqtmk m__is_null_pointer m__rec__is_moved__ o1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep
  o2)

;; "temp___old_364"
(define-fun temp___old_364 () us_rep
  (deep_copy o2))

;; "H"
(assert (dynamic_invariant temp___old_364 true false true true))

;; "H"
(assert
  (=
    (= (bool_eq temp___old_364 us_null_pointer1) true)
    (= (bool_eq o2 us_null_pointer1) true)))

;; "H"
(assert
  (=>
    (not (= (bool_eq o2 us_null_pointer1) true))
    (and
      (forall ((k1 Int))
        (=>
          (and
            (in_range1 k1)
            (= (has_element (rec__my_map__map_acc__pointer_value o2) k1) true))
          (= (model_contains temp___old_364 k1) true)))
      (forall ((k1 Int))
        (=>
          (and
            (in_range1 k1)
            (= (has_element
                 (rec__my_map__map_acc__pointer_value temp___old_364)
                 k1) true))
          (and
            (= (model_contains o2 k1) true)
            (= (model_value o2 k1) (model_value temp___old_364 k1))))))))

;; "deep_copy'result'unused"
(define-fun deep_copyqtresultqtunused () us_rep
  temp___old_364)

;; "o"
(define-fun o3 () us_rep2
  (us_repqtmk2 m__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () us_rep2
  o3)

;; "o"
(define-fun o4 () us_main_type
  (us_close o3))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused1 () us_main_type
  o4)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  m__rec__is_moved__)

;; "o"
(define-fun o5 () us_rep
  (us_repqtmk m__is_null_pointer m__rec__is_moved__ o4))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep
  o5)

;; "temp___old_361"
(define-fun temp___old_361 () us_rep
  (deep_copy o5))

;; "H"
(assert (dynamic_invariant temp___old_361 true false true true))

;; "H"
(assert
  (=
    (= (bool_eq temp___old_361 us_null_pointer1) true)
    (= (bool_eq o5 us_null_pointer1) true)))

;; "H"
(assert
  (=>
    (not (= (bool_eq o5 us_null_pointer1) true))
    (and
      (forall ((k1 Int))
        (=>
          (and
            (in_range1 k1)
            (= (has_element (rec__my_map__map_acc__pointer_value o5) k1) true))
          (= (model_contains temp___old_361 k1) true)))
      (forall ((k1 Int))
        (=>
          (and
            (in_range1 k1)
            (= (has_element
                 (rec__my_map__map_acc__pointer_value temp___old_361)
                 k1) true))
          (and
            (= (model_contains o5 k1) true)
            (= (model_value o5 k1) (model_value temp___old_361 k1))))))))

;; "deep_copy'result'unused"
(define-fun deep_copyqtresultqtunused1 () us_rep
  temp___old_361)

;; "o"
(define-fun o6 () us_rep2
  (us_repqtmk2 m__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () us_rep2
  o6)

;; "o"
(define-fun o7 () us_main_type
  (us_close o6))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused2 () us_main_type
  o7)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused2 () Bool
  m__rec__is_moved__)

;; "o"
(define-fun o8 () us_rep
  (us_repqtmk m__is_null_pointer m__rec__is_moved__ o7))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep
  o8)

;; "my_map__replace_element_ext__m_copy__assume"
(define-fun my_map__replace_element_ext__m_copy__assume () us_rep
  (deep_copy o8))

;; "H"
(assert
  (dynamic_invariant
    my_map__replace_element_ext__m_copy__assume
    true
    false
    true
    true))

;; "H"
(assert
  (=
    (= (bool_eq my_map__replace_element_ext__m_copy__assume us_null_pointer1) true)
    (= (bool_eq o8 us_null_pointer1) true)))

;; "H"
(assert
  (=>
    (not (= (bool_eq o8 us_null_pointer1) true))
    (and
      (forall ((k1 Int))
        (=>
          (and
            (in_range1 k1)
            (= (has_element (rec__my_map__map_acc__pointer_value o8) k1) true))
          (= (model_contains my_map__replace_element_ext__m_copy__assume k1) true)))
      (forall ((k1 Int))
        (=>
          (and
            (in_range1 k1)
            (= (has_element
                 (rec__my_map__map_acc__pointer_value
                   my_map__replace_element_ext__m_copy__assume)
                 k1) true))
          (and
            (= (model_contains o8 k1) true)
            (= (model_value o8 k1) (model_value
                                     my_map__replace_element_ext__m_copy__assume
                                     k1))))))))

;; "deep_copy'result'unused"
(define-fun deep_copyqtresultqtunused2 () us_rep
  my_map__replace_element_ext__m_copy__assume)

;; "o"
(define-fun o9 () us_rep2
  (rec__my_map__map_acc__pointer_value
    my_map__replace_element_ext__m_copy__assume))

;; "rec__my_map__map_acc__pointer_value'result'unused"
(define-fun rec__my_map__map_acc__pointer_valueqtresultqtunused () us_rep2
  o9)

(declare-const m_copy__pointer_value us_split_fields)

;; "m_copy__pointer_value'unused"
(define-fun m_copy__pointer_valueqtunused () map__ref
  (map__refqtmk (us_repqtmk2 m_copy__pointer_value)))

;; "H"
(assert (= (us_repqtmk2 m_copy__pointer_value) o9))

;; "Assume"
(assert
  (= m_copy__is_null_pointer (rec__my_map__map_acc__is_null_pointer
                               my_map__replace_element_ext__m_copy__assume)))

;; "o"
(define-fun o10 () Bool
  (rec__my_map__map_acc__is_moved
    my_map__replace_element_ext__m_copy__assume))

;; "rec__my_map__map_acc__is_moved'result'unused"
(define-fun rec__my_map__map_acc__is_movedqtresultqtunused () Bool
  o10)

(declare-const m_copy__rec__is_moved__ Bool)

;; "m_copy__rec__is_moved__'unused"
(define-fun m_copy__rec__is_moved__qtunused () bool__ref
  (bool__refqtmk m_copy__rec__is_moved__))

;; "H"
(assert (= m_copy__rec__is_moved__ o10))

;; "Assume"
(assert
  (dynamic_invariant
    (us_repqtmk
      m_copy__is_null_pointer
      m_copy__rec__is_moved__
      (us_close (us_repqtmk2 m_copy__pointer_value)))
    true
    false
    true
    true))

;; "Assume"
(assert
  (default_initial_assumption
    (us_repqtmk
      r__is_null_pointer
      r__rec__is_moved__
      (us_close (us_repqtmk2 r__pointer_value)))
    false))

;; "Assume"
(assert
  (dynamic_invariant
    (us_repqtmk
      r__is_null_pointer
      r__rec__is_moved__
      (us_close (us_repqtmk2 r__pointer_value)))
    false
    false
    true
    true))

;; "o"
(define-fun o11 () us_rep2
  (us_repqtmk2 m__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () us_rep2
  o11)

;; "o"
(define-fun o12 () us_main_type
  (us_close o11))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused3 () us_main_type
  o12)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused3 () Bool
  m__rec__is_moved__)

;; "my_map__replace_element_ext__x__assume"
(define-fun my_map__replace_element_ext__x__assume () us_rep
  (us_repqtmk m__is_null_pointer m__rec__is_moved__ o12))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep
  my_map__replace_element_ext__x__assume)

;; "o"
(define-fun o13 () us_rep2
  (rec__my_map__map_acc__pointer_value
    my_map__replace_element_ext__x__assume))

;; "rec__my_map__map_acc__pointer_value'result'unused"
(define-fun rec__my_map__map_acc__pointer_valueqtresultqtunused1 () us_rep2
  o13)

(declare-const x__pointer_value us_split_fields)

;; "x__pointer_value'unused"
(define-fun x__pointer_valueqtunused () map__ref
  (map__refqtmk (us_repqtmk2 x__pointer_value)))

;; "H"
(assert (= (us_repqtmk2 x__pointer_value) o13))

;; "o"
(define-fun o14 () Bool
  m__is_null_pointer)

;; "rec__my_map__map_acc__is_null_pointer'result'unused"
(define-fun rec__my_map__map_acc__is_null_pointerqtresultqtunused () Bool
  o14)

(declare-const x__is_null_pointer Bool)

;; "x__is_null_pointer'unused"
(define-fun x__is_null_pointerqtunused () bool__ref
  (bool__refqtmk x__is_null_pointer))

;; "H"
(assert (= x__is_null_pointer o14))

;; "rec__my_map__map_acc__is_moved'result'unused"
(define-fun rec__my_map__map_acc__is_movedqtresultqtunused1 () Bool
  m__rec__is_moved__)

(declare-const x__rec__is_moved__ Bool)

;; "x__rec__is_moved__'unused"
(define-fun x__rec__is_moved__qtunused () bool__ref
  (bool__refqtmk x__rec__is_moved__))

;; "H"
(assert (= x__rec__is_moved__ m__rec__is_moved__))

(declare-const usf us_rep)

;; "H"
(assert
  (=>
    (not (= (rec__my_map__map_acc__is_null_pointer usf) true))
    (dynamic_invariant1
      (rec__my_map__map_acc__pointer_value usf)
      true
      false
      true
      true)))

;; "H"
(assert (= m__is_null_pointer (rec__my_map__map_acc__is_null_pointer usf)))

;; "H"
(assert (= m__rec__is_moved__ (rec__my_map__map_acc__is_moved usf)))

;; "H"
(assert true)

;; "H"
(assert true)

;; "any'result'unused"
(define-fun anyqtresultqtunused () us_rep
  usf)

(declare-const x__brower_at_end us_rep)

;; "x__brower_at_end'unused"
(define-fun x__brower_at_endqtunused () t25b__ref
  (t25b__refqtmk x__brower_at_end))

;; "H"
(assert (= x__brower_at_end usf))

;; "Assume"
(assert
  (and
    (and
      (=>
        (not
          (= (rec__my_map__map_acc__is_null_pointer x__borrowed_at_end) true))
        (dynamic_invariant1
          (rec__my_map__map_acc__pointer_value x__borrowed_at_end)
          true
          false
          true
          true))
      (= x__borrowed_at_end x__brower_at_end))
    (and
      (= (rec__my_map__map_acc__is_null_pointer x__borrowed_at_end) m__is_null_pointer)
      (= (rec__my_map__map_acc__is_moved x__borrowed_at_end) m__rec__is_moved__))))

;; "Assume"
(assert
  (=>
    (not (= x__is_null_pointer true))
    (dynamic_invariant1
      (rec__my_map__map_acc__pointer_value
        (us_repqtmk
          x__is_null_pointer
          x__rec__is_moved__
          (us_close (us_repqtmk2 x__pointer_value))))
      true
      false
      true
      true)))

;; "o"
(define-fun o15 () us_rep2
  (us_repqtmk2 x__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused4 () us_rep2
  o15)

;; "o"
(define-fun o16 () us_main_type
  (us_close o15))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused4 () us_main_type
  o16)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused4 () Bool
  x__rec__is_moved__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused5 () Bool
  x__is_null_pointer)

;; "o"
(define-fun o17 () us_rep
  (us_repqtmk x__is_null_pointer x__rec__is_moved__ o16))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep
  o17)

;; "o"
(define-fun o18 () Bool
  (bool_eq o17 us_null_pointer1))

;; "bool_eq'result'unused"
(define-fun bool_eqqtresultqtunused () Bool
  o18)

;; "o"
(define-fun o19 () Bool
  (not o18))

;; "notb'result'unused"
(define-fun notbqtresultqtunused () Bool
  o19)

;; "H"
(assert (= o19 true))

;; "o"
(define-fun o20 () us_rep2
  (us_repqtmk2 x__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused5 () us_rep2
  o20)

;; "o"
(define-fun o21 () us_main_type
  (us_close o20))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused5 () us_main_type
  o21)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused6 () Bool
  x__rec__is_moved__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused7 () Bool
  x__is_null_pointer)

;; "temp___loop_entry_321'unused"
(define-fun temp___loop_entry_321qtunused () us_rep
  (us_repqtmk x__is_null_pointer x__rec__is_moved__ o21))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep
  (us_repqtmk x__is_null_pointer x__rec__is_moved__ o21))

;; "o"
(define-fun o22 () us_rep2
  (us_repqtmk2 r__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused6 () us_rep2
  o22)

;; "o"
(define-fun o23 () us_main_type
  (us_close o22))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused6 () us_main_type
  o23)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused8 () Bool
  r__rec__is_moved__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused9 () Bool
  r__is_null_pointer)

;; "temp___loop_entry_320'unused"
(define-fun temp___loop_entry_320qtunused () us_rep
  (us_repqtmk r__is_null_pointer r__rec__is_moved__ o23))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused6 () us_rep
  (us_repqtmk r__is_null_pointer r__rec__is_moved__ o23))

;; "o"
(define-fun o24 () Int
  k)

;; "o"
(define-fun o25 () us_rep2
  (us_repqtmk2 x__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused7 () us_rep2
  o25)

;; "o"
(define-fun o26 () us_main_type
  (us_close o25))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused7 () us_main_type
  o26)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused10 () Bool
  x__rec__is_moved__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused11 () Bool
  x__is_null_pointer)

;; "o"
(define-fun o27 () us_rep
  (us_repqtmk x__is_null_pointer x__rec__is_moved__ o26))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused7 () us_rep
  o27)

;; "temp___inv_355"
(define-fun temp___inv_355 () Bool
  (model_contains o27 o24))

;; "Ensures"
(assert
  (=
    (= temp___inv_355 true)
    (and
      (not (= (bool_eq o27 us_null_pointer1) true))
      (= (has_element (rec__my_map__map_acc__pointer_value o27) o24) true))))

;; "model_contains'result'unused"
(define-fun model_containsqtresultqtunused () Bool
  temp___inv_355)

(declare-const r__pointer_value1 us_split_fields)

(declare-const r__is_null_pointer1 Bool)

(declare-const x__pointer_value1 us_split_fields)

(declare-const x__is_null_pointer1 Bool)

(declare-const x__rec__is_moved__1 Bool)

(declare-const x__brower_at_end1 us_rep)

;; "x__brower_at_end'unused"
(define-fun x__brower_at_endqtunused1 () t25b__ref
  (t25b__refqtmk x__brower_at_end1))

;; "x__rec__is_moved__'unused"
(define-fun x__rec__is_moved__qtunused1 () bool__ref
  (bool__refqtmk x__rec__is_moved__1))

;; "x__is_null_pointer'unused"
(define-fun x__is_null_pointerqtunused1 () bool__ref
  (bool__refqtmk x__is_null_pointer1))

;; "x__pointer_value'unused"
(define-fun x__pointer_valueqtunused1 () map__ref
  (map__refqtmk (us_repqtmk2 x__pointer_value1)))

;; "r__is_null_pointer'unused"
(define-fun r__is_null_pointerqtunused1 () bool__ref
  (bool__refqtmk r__is_null_pointer1))

;; "r__pointer_value'unused"
(define-fun r__pointer_valueqtunused1 () map__ref
  (map__refqtmk (us_repqtmk2 r__pointer_value1)))

;; "LoopInvariant"
(assert
  (= (model_contains
       (us_repqtmk
         x__is_null_pointer1
         x__rec__is_moved__1
         (us_close (us_repqtmk2 x__pointer_value1)))
       k) true))

;; "LoopInvariant"
(assert
  (not
    (= (model_contains
         (us_repqtmk
           r__is_null_pointer1
           r__rec__is_moved__
           (us_close (us_repqtmk2 r__pointer_value1)))
         k) true)))

;; "LoopInvariant"
(assert
  (forall ((k1 Int))
    (=>
      (and
        (in_range1 k1)
        (= (has_element
             (rec__my_map__map_acc__pointer_value x__brower_at_end1)
             k1) true))
      (= (model_contains x__borrowed_at_end k1) true))))

;; "LoopInvariant"
(assert
  (=>
    (not
      (= (bool_eq
           (us_repqtmk
             r__is_null_pointer1
             r__rec__is_moved__
             (us_close (us_repqtmk2 r__pointer_value1)))
           us_null_pointer1) true))
    (forall ((k1 Int))
      (=>
        (and
          (in_range1 k1)
          (= (has_element
               (rec__my_map__map_acc__pointer_value
                 (us_repqtmk
                   r__is_null_pointer1
                   r__rec__is_moved__
                   (us_close (us_repqtmk2 r__pointer_value1))))
               k1) true))
        (= (model_contains x__borrowed_at_end k1) true)))))

;; "LoopInvariant"
(assert
  (forall ((k1 Int))
    (=>
      (and
        (in_range1 k1)
        (= (has_element
             (rec__my_map__map_acc__pointer_value x__borrowed_at_end)
             k1) true))
      (or
        (= (model_contains
             (us_repqtmk
               r__is_null_pointer1
               r__rec__is_moved__
               (us_close (us_repqtmk2 r__pointer_value1)))
             k1) true)
        (= (model_contains x__brower_at_end1 k1) true)))))

;; "LoopInvariant"
(assert
  (forall ((k1 Int))
    (=>
      (and
        (in_range1 k1)
        (= (has_element
             (rec__my_map__map_acc__pointer_value x__borrowed_at_end)
             k1) true))
      (ite (= (model_contains
                (us_repqtmk
                  r__is_null_pointer1
                  r__rec__is_moved__
                  (us_close (us_repqtmk2 r__pointer_value1)))
                k1) true)
        (= (model_value x__borrowed_at_end k1) (model_value
                                                 (us_repqtmk
                                                   r__is_null_pointer1
                                                   r__rec__is_moved__
                                                   (us_close
                                                     (us_repqtmk2
                                                       r__pointer_value1)))
                                                 k1))
        (= (model_value x__borrowed_at_end k1) (model_value
                                                 x__brower_at_end1
                                                 k1))))))

;; "LoopInvariant"
(assert
  (forall ((k1 Int))
    (=>
      (and
        (in_range1 k1)
        (= (has_element
             (rec__my_map__map_acc__pointer_value
               (us_repqtmk
                 x__is_null_pointer1
                 x__rec__is_moved__1
                 (us_close (us_repqtmk2 x__pointer_value1))))
             k1) true))
      (= (model_contains
           (us_repqtmk
             m_copy__is_null_pointer
             m_copy__rec__is_moved__
             (us_close (us_repqtmk2 m_copy__pointer_value)))
           k1) true))))

;; "LoopInvariant"
(assert
  (=>
    (not
      (= (bool_eq
           (us_repqtmk
             r__is_null_pointer1
             r__rec__is_moved__
             (us_close (us_repqtmk2 r__pointer_value1)))
           us_null_pointer1) true))
    (forall ((k1 Int))
      (=>
        (and
          (in_range1 k1)
          (= (has_element
               (rec__my_map__map_acc__pointer_value
                 (us_repqtmk
                   r__is_null_pointer1
                   r__rec__is_moved__
                   (us_close (us_repqtmk2 r__pointer_value1))))
               k1) true))
        (= (model_contains
             (us_repqtmk
               m_copy__is_null_pointer
               m_copy__rec__is_moved__
               (us_close (us_repqtmk2 m_copy__pointer_value)))
             k1) true)))))

;; "LoopInvariant"
(assert
  (forall ((k1 Int))
    (=>
      (and
        (in_range1 k1)
        (= (has_element
             (rec__my_map__map_acc__pointer_value
               (us_repqtmk
                 m_copy__is_null_pointer
                 m_copy__rec__is_moved__
                 (us_close (us_repqtmk2 m_copy__pointer_value))))
             k1) true))
      (or
        (= (model_contains
             (us_repqtmk
               r__is_null_pointer1
               r__rec__is_moved__
               (us_close (us_repqtmk2 r__pointer_value1)))
             k1) true)
        (= (model_contains
             (us_repqtmk
               x__is_null_pointer1
               x__rec__is_moved__1
               (us_close (us_repqtmk2 x__pointer_value1)))
             k1) true)))))

;; "LoopInvariant"
(assert
  (forall ((k1 Int))
    (=>
      (and
        (in_range1 k1)
        (= (has_element
             (rec__my_map__map_acc__pointer_value
               (us_repqtmk
                 m_copy__is_null_pointer
                 m_copy__rec__is_moved__
                 (us_close (us_repqtmk2 m_copy__pointer_value))))
             k1) true))
      (ite (= (model_contains
                (us_repqtmk
                  r__is_null_pointer1
                  r__rec__is_moved__
                  (us_close (us_repqtmk2 r__pointer_value1)))
                k1) true)
        (= (model_value
             (us_repqtmk
               m_copy__is_null_pointer
               m_copy__rec__is_moved__
               (us_close (us_repqtmk2 m_copy__pointer_value)))
             k1) (model_value
                   (us_repqtmk
                     r__is_null_pointer1
                     r__rec__is_moved__
                     (us_close (us_repqtmk2 r__pointer_value1)))
                   k1))
        (= (model_value
             (us_repqtmk
               m_copy__is_null_pointer
               m_copy__rec__is_moved__
               (us_close (us_repqtmk2 m_copy__pointer_value)))
             k1) (model_value
                   (us_repqtmk
                     x__is_null_pointer1
                     x__rec__is_moved__1
                     (us_close (us_repqtmk2 x__pointer_value1)))
                   k1))))))

;; "Assume"
(assert
  (= (and (ite (and
                 (and
                   (dynamic_invariant
                     (us_repqtmk
                       r__is_null_pointer1
                       r__rec__is_moved__
                       (us_close (us_repqtmk2 r__pointer_value1)))
                     false
                     true
                     true
                     true)
                   (=>
                     (not (= x__is_null_pointer1 true))
                     (dynamic_invariant1
                       (rec__my_map__map_acc__pointer_value
                         (us_repqtmk
                           x__is_null_pointer1
                           x__rec__is_moved__1
                           (us_close (us_repqtmk2 x__pointer_value1))))
                       true
                       false
                       true
                       true)))
                 (and
                   (=>
                     (not
                       (= (rec__my_map__map_acc__is_null_pointer
                            x__brower_at_end1) true))
                     (dynamic_invariant1
                       (rec__my_map__map_acc__pointer_value
                         x__brower_at_end1)
                       true
                       false
                       true
                       true))
                   (= (rec__my_map__map_acc__is_null_pointer
                        x__brower_at_end1) x__is_null_pointer1)))
            true
            false) (ite (not
                          (= (bool_eq
                               (us_repqtmk
                                 x__is_null_pointer1
                                 x__rec__is_moved__1
                                 (us_close (us_repqtmk2 x__pointer_value1)))
                               us_null_pointer1) true))
                     true
                     false)) true))

;; "o"
(define-fun o28 () us_rep2
  (us_repqtmk2 r__pointer_value1))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused8 () us_rep2
  o28)

;; "o"
(define-fun o29 () us_main_type
  (us_close o28))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused8 () us_main_type
  o29)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused12 () Bool
  r__rec__is_moved__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused13 () Bool
  r__is_null_pointer1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused8 () us_rep
  (us_repqtmk r__is_null_pointer1 r__rec__is_moved__ o29))

;; "o"
(define-fun o30 () us_rep2
  (us_repqtmk2 x__pointer_value1))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused9 () us_rep2
  o30)

;; "o"
(define-fun o31 () us_main_type
  (us_close o30))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused9 () us_main_type
  o31)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused14 () Bool
  x__rec__is_moved__1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused15 () Bool
  x__is_null_pointer1)

;; "o"
(define-fun o32 () us_rep
  (us_repqtmk x__is_null_pointer1 x__rec__is_moved__1 o31))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused9 () us_rep
  o32)

;; "param__r__pointer_value'unused"
(define-fun param__r__pointer_valueqtunused () map__ref
  (map__refqtmk (us_repqtmk2 r__pointer_value1)))

;; "param__r__rec__is_moved__'unused"
(define-fun param__r__rec__is_moved__qtunused () bool__ref
  r__rec__is_moved__1)

;; "param__r__is_null_pointer'unused"
(define-fun param__r__is_null_pointerqtunused () bool__ref
  (bool__refqtmk r__is_null_pointer1))

(declare-const r__pointer_value2 us_split_fields)

(declare-const r__is_null_pointer2 Bool)

;; "r__is_null_pointer'unused"
(define-fun r__is_null_pointerqtunused2 () bool__ref
  (bool__refqtmk r__is_null_pointer2))

;; "r__pointer_value'unused"
(define-fun r__pointer_valueqtunused2 () map__ref
  (map__refqtmk (us_repqtmk2 r__pointer_value2)))

;; "H"
(assert
  (= (model_contains
       (us_repqtmk
         r__is_null_pointer2
         r__rec__is_moved__
         (us_close (us_repqtmk2 r__pointer_value2)))
       (to_rep1
         (rec__my_map__map__key
           (us_split_fields1 (rec__my_map__map_acc__pointer_value o32))))) true))

;; "H"
(assert
  (let ((old_r (deep_copy
                 (us_repqtmk
                   r__is_null_pointer1
                   r__rec__is_moved__
                   (us_close (us_repqtmk2 r__pointer_value1))))))
    (and
      (and
        (=>
          (not (= (bool_eq old_r us_null_pointer1) true))
          (forall ((k1 Int))
            (=>
              (and
                (in_range1 k1)
                (= (has_element
                     (rec__my_map__map_acc__pointer_value old_r)
                     k1) true))
              (and
                (= (model_contains
                     (us_repqtmk
                       r__is_null_pointer2
                       r__rec__is_moved__
                       (us_close (us_repqtmk2 r__pointer_value2)))
                     k1) true)
                (= (model_value
                     (us_repqtmk
                       r__is_null_pointer2
                       r__rec__is_moved__
                       (us_close (us_repqtmk2 r__pointer_value2)))
                     k1) (model_value old_r k1))))))
        (forall ((k1 Int))
          (=>
            (and
              (in_range1 k1)
              (= (has_element
                   (rec__my_map__map_acc__pointer_value
                     (us_repqtmk
                       r__is_null_pointer2
                       r__rec__is_moved__
                       (us_close (us_repqtmk2 r__pointer_value2))))
                   k1) true))
            (or
              (= (model_contains old_r k1) true)
              (= k1 (to_rep1
                      (rec__my_map__map__key
                        (us_split_fields1
                          (rec__my_map__map_acc__pointer_value o32)))))))))
      (=>
        (not
          (= (model_contains
               old_r
               (to_rep1
                 (rec__my_map__map__key
                   (us_split_fields1
                     (rec__my_map__map_acc__pointer_value o32))))) true))
        (= (model_value
             (us_repqtmk
               r__is_null_pointer2
               r__rec__is_moved__
               (us_close (us_repqtmk2 r__pointer_value2)))
             (to_rep1
               (rec__my_map__map__key
                 (us_split_fields1 (rec__my_map__map_acc__pointer_value o32))))) 
        (to_rep
          (rec__my_map__nullable_int_acc__pointer_value
            (rec__my_map__map__value
              (us_split_fields1 (rec__my_map__map_acc__pointer_value o32))))))))))

;; "H"
(assert
  (dynamic_invariant
    (us_repqtmk
      r__is_null_pointer2
      r__rec__is_moved__
      (us_close (us_repqtmk2 r__pointer_value2)))
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "o"
(define-fun o33 () us_rep2
  (us_repqtmk2 x__pointer_value1))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused10 () us_rep2
  o33)

;; "o"
(define-fun o34 () us_main_type
  (us_close o33))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused10 () us_main_type
  o34)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused16 () Bool
  x__rec__is_moved__1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused17 () Bool
  x__is_null_pointer1)

;; "o"
(define-fun o35 () us_rep
  (us_repqtmk x__is_null_pointer1 x__rec__is_moved__1 o34))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused10 () us_rep
  o35)

;; "o"
(define-fun o36 () us_rep2
  (rec__my_map__map_acc__pointer_value o35))

;; "rec__my_map__map_acc__pointer_value_'result'unused"
(define-fun rec__my_map__map_acc__pointer_value_qtresultqtunused () us_rep2
  o36)

;; "o"
(define-fun o37 () us_split_fields
  (us_split_fields1 o36))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields
  o37)

;; "o"
(define-fun o38 () positive
  (rec__my_map__map__key o37))

;; "rec__my_map__map__key'result'unused"
(define-fun rec__my_map__map__keyqtresultqtunused () positive
  o38)

(declare-const o39 Int)

;; "Ensures"
(assert (= (to_rep1 o38) o39))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o39)

;; "o"
(define-fun o40 () Bool
  (ite (= o39 k) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o40)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o40))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused18 () Bool
  spark__branch)

;; "H"
(assert (= spark__branch true))

;; "o"
(define-fun o41 () us_rep2
  (us_repqtmk2 x__pointer_value1))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused11 () us_rep2
  o41)

;; "o"
(define-fun o42 () us_main_type
  (us_close o41))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused11 () us_main_type
  o42)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused19 () Bool
  x__rec__is_moved__1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused20 () Bool
  x__is_null_pointer1)

;; "temp___310"
(define-fun temp___310 () us_rep
  (us_repqtmk x__is_null_pointer1 x__rec__is_moved__1 o42))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused11 () us_rep
  temp___310)

;; "o"
(define-fun o43 () us_rep2
  (us_repqtmk2 x__pointer_value1))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused12 () us_rep2
  o43)

;; "o"
(define-fun o44 () us_main_type
  (us_close o43))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused12 () us_main_type
  o44)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused21 () Bool
  x__rec__is_moved__1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused22 () Bool
  x__is_null_pointer1)

;; "o"
(define-fun o45 () us_rep
  (us_repqtmk x__is_null_pointer1 x__rec__is_moved__1 o44))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused12 () us_rep
  o45)

;; "temp___308"
(define-fun temp___308 () us_rep2
  (rec__my_map__map_acc__pointer_value o45))

;; "rec__my_map__map_acc__pointer_value'result'unused"
(define-fun rec__my_map__map_acc__pointer_valueqtresultqtunused2 () us_rep2
  temp___308)

;; "_q "
(define-fun usq_ () us_split_fields
  (us_split_fields1 temp___308))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields
  usq_)

;; "o"
(define-fun o46 () us_rep
  (rec__my_map__map__next usq_))

;; "rec__my_map__map__next'result'unused"
(define-fun rec__my_map__map__nextqtresultqtunused () us_rep
  o46)

;; "o"
(define-fun o47 () us_rep2
  (us_repqtmk2 x__pointer_value1))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused13 () us_rep2
  o47)

;; "o"
(define-fun o48 () us_main_type
  (us_close o47))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused13 () us_main_type
  o48)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused23 () Bool
  x__rec__is_moved__1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused24 () Bool
  x__is_null_pointer1)

;; "o"
(define-fun o49 () us_rep
  (us_repqtmk x__is_null_pointer1 x__rec__is_moved__1 o48))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused13 () us_rep
  o49)

;; "o"
(define-fun o50 () us_rep2
  (rec__my_map__map_acc__pointer_value o49))

;; "rec__my_map__map_acc__pointer_value'result'unused"
(define-fun rec__my_map__map_acc__pointer_valueqtresultqtunused3 () us_rep2
  o50)

;; "o"
(define-fun o51 () us_split_fields
  (us_split_fields1 o50))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields
  o51)

;; "temp___306"
(define-fun temp___306 () us_rep1
  (rec__my_map__map__value o51))

;; "rec__my_map__map__value'result'unused"
(define-fun rec__my_map__map__valueqtresultqtunused () us_rep1
  temp___306)

(declare-const o52 integer)

;; "Ensures"
(assert (= (to_rep o52) v))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () integer
  o52)

;; "o"
(define-fun o53 () Bool
  (rec__my_map__nullable_int_acc__is_moved temp___306))

;; "rec__my_map__nullable_int_acc__is_moved'result'unused"
(define-fun rec__my_map__nullable_int_acc__is_movedqtresultqtunused () Bool
  o53)

;; "o"
(define-fun o54 () Bool
  (rec__my_map__nullable_int_acc__is_null_pointer temp___306))

;; "rec__my_map__nullable_int_acc__is_null_pointer'result'unused"
(define-fun rec__my_map__nullable_int_acc__is_null_pointerqtresultqtunused 
  () Bool
  o54)

;; "o"
(define-fun o55 () us_rep1
  (us_repqtmk1 o54 o53 o52))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused14 () us_rep1
  o55)

;; "o"
(define-fun o56 () positive
  (rec__my_map__map__key usq_))

;; "rec__my_map__map__key'result'unused"
(define-fun rec__my_map__map__keyqtresultqtunused1 () positive
  o56)

;; "o"
(define-fun o57 () us_split_fields
  (us_split_fieldsqtmk o56 o55 o46))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o57)

;; "o"
(define-fun o58 () us_rep2
  (us_repqtmk2 o57))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused15 () us_rep2
  o58)

;; "o"
(define-fun o59 () us_main_type
  (us_close o58))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused14 () us_main_type
  o59)

;; "rec__my_map__map_acc__is_moved'result'unused"
(define-fun rec__my_map__map_acc__is_movedqtresultqtunused2 () Bool
  x__rec__is_moved__1)

;; "rec__my_map__map_acc__is_null_pointer'result'unused"
(define-fun rec__my_map__map_acc__is_null_pointerqtresultqtunused1 () Bool
  x__is_null_pointer1)

;; "temp___312"
(define-fun temp___312 () us_rep
  (us_repqtmk x__is_null_pointer1 x__rec__is_moved__1 o59))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused16 () us_rep
  temp___312)

;; "o"
(define-fun o60 () us_rep2
  (rec__my_map__map_acc__pointer_value temp___312))

;; "rec__my_map__map_acc__pointer_value'result'unused"
(define-fun rec__my_map__map_acc__pointer_valueqtresultqtunused4 () us_rep2
  o60)

(declare-const x__pointer_value2 us_split_fields)

;; "x__pointer_value'unused"
(define-fun x__pointer_valueqtunused2 () map__ref
  (map__refqtmk (us_repqtmk2 x__pointer_value2)))

;; "H"
(assert (= (us_repqtmk2 x__pointer_value2) o60))

;; "Assume"
(assert
  (= x__brower_at_end1 (us_repqtmk
                         x__is_null_pointer1
                         x__rec__is_moved__1
                         (us_close (us_repqtmk2 x__pointer_value2)))))

;; "o"
(define-fun o61 () us_rep2
  (rec__my_map__map_acc__pointer_value x__borrowed_at_end))

;; "rec__my_map__map_acc__pointer_value'result'unused"
(define-fun rec__my_map__map_acc__pointer_valueqtresultqtunused5 () us_rep2
  o61)

(declare-const m__pointer_value1 us_split_fields)

;; "m__pointer_value'unused"
(define-fun m__pointer_valueqtunused2 () map__ref
  (map__refqtmk (us_repqtmk2 m__pointer_value1)))

;; "H"
(assert (= (us_repqtmk2 m__pointer_value1) o61))

;; "o"
(define-fun o62 () us_rep2
  (us_repqtmk2 m_copy__pointer_value))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused14 () us_rep2
  o62)

;; "o"
(define-fun o63 () us_main_type
  (us_close o62))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused15 () us_main_type
  o63)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused25 () Bool
  m_copy__rec__is_moved__)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused17 () us_rep
  (us_repqtmk m_copy__is_null_pointer m_copy__rec__is_moved__ o63))

;; "o"
(define-fun o64 () us_rep2
  (us_repqtmk2 r__pointer_value2))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused15 () us_rep2
  o64)

;; "o"
(define-fun o65 () us_main_type
  (us_close o64))

;; "__close'result'unused"
(define-fun us_closeqtresultqtunused16 () us_main_type
  o65)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused26 () Bool
  r__rec__is_moved__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused27 () Bool
  r__is_null_pointer2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused18 () us_rep
  (us_repqtmk r__is_null_pointer2 r__rec__is_moved__ o65))

;; "old_m"
(define-fun old_m () us_rep
  (deep_copy
    (us_repqtmk
      m__is_null_pointer
      m__rec__is_moved__
      (us_close (us_repqtmk2 m__pointer_value)))))

(declare-const l Int)

;; "H"
(assert (in_range1 l))

;; "H"
(assert
  (= (has_element
       (rec__my_map__map_acc__pointer_value
         (us_repqtmk
           m__is_null_pointer
           m__rec__is_moved__
           (us_close (us_repqtmk2 m__pointer_value1))))
       l) true))

;; "H"
(assert (not (= l k)))

;; Goal "def'vc"
;; File "my_map.ads", line 42, characters 0-0
(assert
  (not
  (= (model_value
       (us_repqtmk
         m__is_null_pointer
         m__rec__is_moved__
         (us_close (us_repqtmk2 m__pointer_value1)))
       l) (model_value old_m l))))

(check-sat)
