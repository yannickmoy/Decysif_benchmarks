;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort status 0)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep (status) Int)

;; "of_rep"
(declare-fun of_rep (Int) status)

;; "inversion_axiom"
(assert
  (forall ((x status)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x status)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

;; "mem"
(declare-fun mem (us_rep
  Int) Bool)

;; "mem__function_guard"
(declare-fun mem__function_guard (Bool
  us_rep
  Int) Bool)

;; "is_add"
(declare-fun is_add (us_rep
  Int
  us_rep) Bool)

;; "is_add__function_guard"
(declare-fun is_add__function_guard (Bool
  us_rep
  Int
  us_rep) Bool)

;; "add"
(declare-fun add (us_rep
  Int) us_rep)

;; "add__function_guard"
(declare-fun add__function_guard (us_rep
  us_rep
  Int) Bool)

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__allocator__m__t__available us_rep)(rec__allocator__m__t__allocated us_rep)))))

(declare-datatypes ((us_rep1 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const allocator__m__t__available__first__bit Int)

(declare-const allocator__m__t__available__last__bit Int)

(declare-const allocator__m__t__available__position Int)

;; "allocator__m__t__available__first__bit_axiom"
(assert (<= 0 allocator__m__t__available__first__bit))

;; "allocator__m__t__available__last__bit_axiom"
(assert
  (< allocator__m__t__available__first__bit allocator__m__t__available__last__bit))

;; "allocator__m__t__available__position_axiom"
(assert (<= 0 allocator__m__t__available__position))

(declare-const allocator__m__t__allocated__first__bit Int)

(declare-const allocator__m__t__allocated__last__bit Int)

(declare-const allocator__m__t__allocated__position Int)

;; "allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 allocator__m__t__allocated__first__bit))

;; "allocator__m__t__allocated__last__bit_axiom"
(assert
  (< allocator__m__t__allocated__first__bit allocator__m__t__allocated__last__bit))

;; "allocator__m__t__allocated__position_axiom"
(assert (<= 0 allocator__m__t__allocated__position))

(declare-const dummy1 us_rep1)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 3)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "is_empty"
(declare-fun is_empty (us_rep) Bool)

;; "is_empty__function_guard"
(declare-fun is_empty__function_guard (Bool
  us_rep) Bool)

;; "temp___result_230"
(declare-fun temp___result_230 (us_rep) Bool)

;; "temp___result_230'def"
(assert
  (forall ((temp___231 us_rep))
    (and
      (= (temp___result_230 temp___231) (is_empty temp___231))
      (is_empty__function_guard (temp___result_230 temp___231) temp___231))))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_227 us_rep) (temp___skip_top_level_228 Bool)) Bool
  (=>
    (not (= temp___skip_top_level_228 true))
    (= (let ((temp___231 temp___expr_227)) (temp___result_230 temp___231)) true)))

;; "mem__post_axiom"
(assert
  (forall ((param__s us_rep))
    (forall ((param__e Int))
      (! (=>
           (in_range1 param__e)
           (let ((result (mem param__s param__e)))
             (=>
               (mem__function_guard result param__s param__e)
               (=> (= param__e 0) (not (= result true)))))) :pattern (
      (mem
        param__s
        param__e)) ))))

;; "is_empty__post_axiom"
(assert
  (forall ((param__s us_rep))
    (! (let ((result (is_empty param__s)))
         (=>
           (is_empty__function_guard result param__s)
           (and
             (forall ((e Int))
               (mem__function_guard (mem param__s e) param__s e))
             (=
               (= result true)
               (forall ((e Int))
                 (not (and (in_range1 e) (= (mem param__s e) true)))))))) :pattern (
    (is_empty
      param__s)) )))

;; "is_add__post_axiom"
(assert
  (forall ((param__s us_rep) (param__result__ us_rep))
    (forall ((param__e Int))
      (! (=>
           (in_range1 param__e)
           (let ((result (is_add param__s param__e param__result__)))
             (=>
               (is_add__function_guard
                 result
                 param__s
                 param__e
                 param__result__)
               (and
                 (mem__function_guard
                   (mem param__result__ param__e)
                   param__result__
                   param__e)
                 (and
                   (mem__function_guard
                     (mem param__s param__e)
                     param__s
                     param__e)
                   (and
                     (forall ((f Int))
                       (mem__function_guard
                         (mem param__result__ f)
                         param__result__
                         f))
                     (and
                       (forall ((f Int))
                         (mem__function_guard (mem param__s f) param__s f))
                       (and
                         (forall ((e Int))
                           (mem__function_guard (mem param__s e) param__s e))
                         (and
                           (forall ((e Int))
                             (mem__function_guard
                               (mem param__result__ e)
                               param__result__
                               e))
                           (=
                             (= result true)
                             (and
                               (and
                                 (and
                                   (and
                                     (not (= param__e 0))
                                     (= (let ((temp___284qtunused param__result__))
                                          (mem param__result__ param__e)) true))
                                   (not
                                     (= (let ((temp___286qtunused param__s))
                                          (mem param__s param__e)) true)))
                                 (forall ((f Int))
                                   (=>
                                     (and
                                       (in_range1 f)
                                       (= (mem param__result__ f) true))
                                     (or
                                       (= (let ((temp___291qtunused param__s))
                                            (mem param__s f)) true)
                                       (= f param__e)))))
                               (forall ((e Int))
                                 (=>
                                   (and
                                     (in_range1 e)
                                     (= (mem param__s e) true))
                                   (= (let ((temp___296qtunused param__result__))
                                        (mem param__result__ e)) true)))))))))))))) :pattern (
      (is_add
        param__s
        param__e
        param__result__)) ))))

;; Goal "def'vc"
;; File "allocator.ads", line 41, characters 0-0
(assert
  (not
  (forall ((data (Array Int status)) (avail us_rep) (alloc us_rep))
    (=>
      (default_initial_assumption avail false)
      (=>
        (default_initial_assumption alloc false)
        (forall ((r Int))
          (=>
            (= r 1)
            (=>
              (= (and (ite (<= 1 r) true false) (ite (<= r 3) true false)) true)
              (forall ((spark__branch Bool) (avail1 us_rep) (alloc1 us_rep))
                (=>
                  (forall ((o us_rep))
                    (is_add__function_guard (is_add avail r o) avail r o))
                  (=>
                    (forall ((o us_rep))
                      (is_add__function_guard (is_add alloc r o) alloc r o))
                    (=>
                      (exists ((temp___543 Int))
                        (and
                          (= (to_rep (select data r)) temp___543)
                          (and
                            (= spark__branch (ite (= temp___543 0)
                                               true
                                               false))
                            (ite (= spark__branch true)
                              (and
                                (let ((o (add avail r)))
                                  (and
                                    (and
                                      (add__function_guard o avail r)
                                      (= (is_add avail r o) true))
                                    (= avail1 o)))
                                (= alloc1 alloc))
                              (and
                                (let ((o (add alloc r)))
                                  (and
                                    (and
                                      (add__function_guard o alloc r)
                                      (= (is_add alloc r o) true))
                                    (= alloc1 o)))
                                (= avail1 avail))))))
                      (=>
                        (forall ((e Int))
                          (mem__function_guard (mem avail1 e) avail1 e))
                        (=>
                          (forall ((e Int))
                            (mem__function_guard (mem alloc1 e) alloc1 e))
                          (=>
                            (forall ((e Int))
                              (mem__function_guard (mem alloc1 e) alloc1 e))
                            (=>
                              (exists ((o Bool))
                                (and
                                  (exists ((usf Int))
                                    (mem__function_guard
                                      (mem avail1 usf)
                                      avail1
                                      usf))
                                  (ite (forall ((e Int))
                                         (=>
                                           (and
                                             (in_range1 e)
                                             (= (mem avail1 e) true))
                                           (and (<= 1 e) (<= e r))))
                                    (and
                                      (exists ((usf Int))
                                        (mem__function_guard
                                          (mem alloc1 usf)
                                          alloc1
                                          usf))
                                      (= o (ite (forall ((e Int))
                                                  (=>
                                                    (and
                                                      (in_range1 e)
                                                      (= (mem alloc1 e) true))
                                                    (and (<= 1 e) (<= e r))))
                                             true
                                             false)))
                                    (= o false))))
                              (forall ((e Int))
                                (=>
                                  (mem__function_guard
                                    (mem avail1 e)
                                    avail1
                                    e)
                                  (=>
                                    (and
                                      (in_range1 e)
                                      (= (mem avail1 e) true))
                                    (<= e r))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
