;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-const two_power_size_minus_one Int)

(declare-const two_power_size_minus_one1 Int)

(declare-datatypes ()
  ((t__ref (t__refqtmk (t__content (_ BitVec 128))))))

;; "ipv4bitswellformed"
(define-fun ipv4bitswellformed ((param__bv (_ BitVec 128))) Bool
  (= (bvand param__bv #x000000000000000000000000FFFFFFFF) param__bv))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; "to_rep"
(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)

;; "inversion_axiom"
(assert
  (forall ((x unsigned_8))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int unsigned_8))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int unsigned_8)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const bytes us_t)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_192 us_t) (temp___is_init_188 Bool) (temp___skip_constant_189 Bool) (temp___do_toplevel_190 Bool) (temp___do_typ_inv_191 Bool)) Bool
  (and
    (=>
      (not (= temp___skip_constant_189 true))
      (dynamic_property
        0
        2147483647
        (first temp___expr_192)
        (last temp___expr_192)))
    (=>
      (= temp___is_init_188 true)
      (=> (= temp___do_toplevel_190 true) (= (first temp___expr_192) 0)))))

;; "Assume"
(assert (dynamic_invariant bytes true false true true))

;; "Assume"
(assert (= (length bytes) 4))

;; "o"
(define-fun o () (_ BitVec 128)
  ((_ int2bv 128) 24))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () (_ BitVec 128)
  o)

;; "Assert"
(assert (and (<= (first bytes) 0) (<= 0 (last bytes))))

;; "o"
(define-fun o1 () (Array Int unsigned_8)
  (to_array bytes))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int unsigned_8)
  o1)

;; "o"
(define-fun o2 () unsigned_8
  (select o1 0))

;; "get'result'unused"
(define-fun getqtresultqtunused () unsigned_8
  o2)

(declare-const o3 (_ BitVec 8))

;; "Ensures"
(assert (= (to_rep1 o2) o3))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () (_ BitVec 8)
  o3)

;; "o"
(define-fun o4 () (_ BitVec 128)
  ((_ zero_extend 120) o3))

;; "toBig'result'unused"
(define-fun toBigqtresultqtunused () (_ BitVec 128)
  o4)

;; "b0"
(define-fun b0 () (_ BitVec 128)
  (bvshl o4 o))

;; "lsl_bv'result'unused"
(define-fun lsl_bvqtresultqtunused () (_ BitVec 128)
  b0)

;; "o"
(define-fun o5 () (_ BitVec 128)
  ((_ int2bv 128) 16))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused1 () (_ BitVec 128)
  o5)

;; "Assert"
(assert (and (<= (first bytes) 1) (<= 1 (last bytes))))

;; "o"
(define-fun o6 () (Array Int unsigned_8)
  (to_array bytes))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array Int unsigned_8)
  o6)

;; "o"
(define-fun o7 () unsigned_8
  (select o6 1))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () unsigned_8
  o7)

(declare-const o8 (_ BitVec 8))

;; "Ensures"
(assert (= (to_rep1 o7) o8))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () (_ BitVec 8)
  o8)

;; "o"
(define-fun o9 () (_ BitVec 128)
  ((_ zero_extend 120) o8))

;; "toBig'result'unused"
(define-fun toBigqtresultqtunused1 () (_ BitVec 128)
  o9)

;; "b1"
(define-fun b1 () (_ BitVec 128)
  (bvshl o9 o5))

;; "lsl_bv'result'unused"
(define-fun lsl_bvqtresultqtunused1 () (_ BitVec 128)
  b1)

;; "o"
(define-fun o10 () (_ BitVec 128)
  ((_ int2bv 128) 8))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused2 () (_ BitVec 128)
  o10)

;; "Assert"
(assert (and (<= (first bytes) 2) (<= 2 (last bytes))))

;; "o"
(define-fun o11 () (Array Int unsigned_8)
  (to_array bytes))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int unsigned_8)
  o11)

;; "o"
(define-fun o12 () unsigned_8
  (select o11 2))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () unsigned_8
  o12)

(declare-const o13 (_ BitVec 8))

;; "Ensures"
(assert (= (to_rep1 o12) o13))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () (_ BitVec 8)
  o13)

;; "o"
(define-fun o14 () (_ BitVec 128)
  ((_ zero_extend 120) o13))

;; "toBig'result'unused"
(define-fun toBigqtresultqtunused2 () (_ BitVec 128)
  o14)

;; "b2"
(define-fun b2 () (_ BitVec 128)
  (bvshl o14 o10))

;; "lsl_bv'result'unused"
(define-fun lsl_bvqtresultqtunused2 () (_ BitVec 128)
  b2)

;; "o"
(define-fun o15 () (_ BitVec 128)
  ((_ int2bv 128) 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused3 () (_ BitVec 128)
  o15)

;; "Assert"
(assert (and (<= (first bytes) 3) (<= 3 (last bytes))))

;; "o"
(define-fun o16 () (Array Int unsigned_8)
  (to_array bytes))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused3 () (Array Int unsigned_8)
  o16)

;; "o"
(define-fun o17 () unsigned_8
  (select o16 3))

;; "get'result'unused"
(define-fun getqtresultqtunused3 () unsigned_8
  o17)

(declare-const o18 (_ BitVec 8))

;; "Ensures"
(assert (= (to_rep1 o17) o18))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () (_ BitVec 8)
  o18)

;; "o"
(define-fun o19 () (_ BitVec 128)
  ((_ zero_extend 120) o18))

;; "toBig'result'unused"
(define-fun toBigqtresultqtunused3 () (_ BitVec 128)
  o19)

;; "b3"
(define-fun b3 () (_ BitVec 128)
  (bvshl o19 o15))

;; "lsl_bv'result'unused"
(define-fun lsl_bvqtresultqtunused3 () (_ BitVec 128)
  b3)

;; "o"
(define-fun o20 () (_ BitVec 128)
  (bvor b0 b1))

;; "bw_or'result'unused"
(define-fun bw_orqtresultqtunused () (_ BitVec 128)
  o20)

;; "o"
(define-fun o21 () (_ BitVec 128)
  (bvor o20 b2))

;; "bw_or'result'unused"
(define-fun bw_orqtresultqtunused1 () (_ BitVec 128)
  o21)

;; "o"
(define-fun o22 () (_ BitVec 128)
  (bvor o21 b3))

;; "bw_or'result'unused"
(define-fun bw_orqtresultqtunused2 () (_ BitVec 128)
  o22)

(declare-const ipv4bitspec__ipv4bytestobits__result (_ BitVec 128))

;; "ipv4bitspec__ipv4bytestobits__result'unused"
(define-fun ipv4bitspec__ipv4bytestobits__resultqtunused () t__ref
  (t__refqtmk ipv4bitspec__ipv4bytestobits__result))

;; "H"
(assert (= ipv4bitspec__ipv4bytestobits__result o22))

;; Goal "def'vc"
;; File "ipv4bitspec.ads", line 26, characters 0-0
(assert
  (not (= (ipv4bitswellformed ipv4bitspec__ipv4bytestobits__result) true)))

(check-sat)
