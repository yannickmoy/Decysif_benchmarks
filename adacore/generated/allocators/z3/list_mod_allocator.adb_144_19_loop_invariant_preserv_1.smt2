;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort resource 0)

;; "resource'int"
(declare-fun resourceqtint (resource) Int)

;; "resource'axiom"
(assert
  (forall ((i resource))
    (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 10000))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 10000)))

;; "to_rep"
(define-fun to_rep ((x resource)) Int
  (resourceqtint x))

;; "of_rep"
(declare-fun of_rep (Int) resource)

;; "inversion_axiom"
(assert
  (forall ((x resource))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x resource)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort status 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep1 (status) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) status)

;; "inversion_axiom"
(assert
  (forall ((x status))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x status)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__list_mod_allocator__cell__stat status)(rec__list_mod_allocator__cell__next resource)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const list_mod_allocator__cell__stat__first__bit Int)

(declare-const list_mod_allocator__cell__stat__last__bit Int)

(declare-const list_mod_allocator__cell__stat__position Int)

;; "list_mod_allocator__cell__stat__first__bit_axiom"
(assert (<= 0 list_mod_allocator__cell__stat__first__bit))

;; "list_mod_allocator__cell__stat__last__bit_axiom"
(assert
  (< list_mod_allocator__cell__stat__first__bit list_mod_allocator__cell__stat__last__bit))

;; "list_mod_allocator__cell__stat__position_axiom"
(assert (<= 0 list_mod_allocator__cell__stat__position))

(declare-const list_mod_allocator__cell__next__first__bit Int)

(declare-const list_mod_allocator__cell__next__last__bit Int)

(declare-const list_mod_allocator__cell__next__position Int)

;; "list_mod_allocator__cell__next__first__bit_axiom"
(assert (<= 0 list_mod_allocator__cell__next__first__bit))

;; "list_mod_allocator__cell__next__last__bit_axiom"
(assert
  (< list_mod_allocator__cell__next__first__bit list_mod_allocator__cell__next__last__bit))

;; "list_mod_allocator__cell__next__position_axiom"
(assert (<= 0 list_mod_allocator__cell__next__position))

(declare-const dummy us_rep)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int us_rep))))))

;; "is_well_formed"
(define-fun is_well_formed ((List_mod_allocator__data___data___ (Array Int us_rep)) (List_mod_allocator__first_available___first_available___ Int)) Bool
  (and (ite (not
              (= List_mod_allocator__first_available___first_available___ 0))
         (= (to_rep1
              (rec__list_mod_allocator__cell__stat
                (us_split_fields1
                  (select List_mod_allocator__data___data___ List_mod_allocator__first_available___first_available___)))) 0)
         (distinct 1 0)) (ite (forall ((r Int))
                                (=>
                                  (and (<= 1 r) (<= r 10000))
                                  (=>
                                    (and
                                      (= (to_rep1
                                           (rec__list_mod_allocator__cell__stat
                                             (us_split_fields1
                                               (select List_mod_allocator__data___data___ r)))) 0)
                                      (not
                                        (= (to_rep
                                             (rec__list_mod_allocator__cell__next
                                               (us_split_fields1
                                                 (select List_mod_allocator__data___data___ r)))) 0)))
                                    (= (to_rep1
                                         (rec__list_mod_allocator__cell__stat
                                           (us_split_fields1
                                             (select List_mod_allocator__data___data___ 
                                             (to_rep
                                               (rec__list_mod_allocator__cell__next
                                                 (us_split_fields1
                                                   (select List_mod_allocator__data___data___ r)))))))) 0))))
                           true
                           false)))

(declare-sort us_rep1 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep1)

(declare-datatypes ()
  ((sequence__ref (sequence__refqtmk (sequence__content us_rep1)))))

;; "last"
(declare-fun last (us_rep1) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "get"
(declare-fun get (us_rep1
  Int) Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 Int)

;; "length"
(define-fun length ((param__container us_rep1)) Int
  (- (+ (last param__container) 1) 1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_332 Int) (temp___is_init_328 Bool) (temp___skip_constant_329 Bool) (temp___do_toplevel_330 Bool) (temp___do_typ_inv_331 Bool)) Bool
  (=>
    (= temp___is_init_328 true)
    (=> (= temp___do_toplevel_330 true) (<= 0 temp___expr_332))))

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy3 us_rep2)

(declare-datatypes ()
  ((set__ref (set__refqtmk (set__content us_rep2)))))

;; "contains"
(declare-fun contains (us_rep2
  Int) Bool)

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__list_mod_allocator__m__t__available us_rep1)(rec__list_mod_allocator__m__t__allocated us_rep2)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const list_mod_allocator__m__t__available__first__bit Int)

(declare-const list_mod_allocator__m__t__available__last__bit Int)

(declare-const list_mod_allocator__m__t__available__position Int)

;; "list_mod_allocator__m__t__available__first__bit_axiom"
(assert (<= 0 list_mod_allocator__m__t__available__first__bit))

;; "list_mod_allocator__m__t__available__last__bit_axiom"
(assert
  (< list_mod_allocator__m__t__available__first__bit list_mod_allocator__m__t__available__last__bit))

;; "list_mod_allocator__m__t__available__position_axiom"
(assert (<= 0 list_mod_allocator__m__t__available__position))

(declare-const list_mod_allocator__m__t__allocated__first__bit Int)

(declare-const list_mod_allocator__m__t__allocated__last__bit Int)

(declare-const list_mod_allocator__m__t__allocated__position Int)

;; "list_mod_allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 list_mod_allocator__m__t__allocated__first__bit))

;; "list_mod_allocator__m__t__allocated__last__bit_axiom"
(assert
  (< list_mod_allocator__m__t__allocated__first__bit list_mod_allocator__m__t__allocated__last__bit))

;; "list_mod_allocator__m__t__allocated__position_axiom"
(assert (<= 0 list_mod_allocator__m__t__allocated__position))

(declare-const dummy4 us_rep3)

;; "contains"
(declare-fun contains1 (us_rep1
  Int) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 10000)))

;; "equal_prefix"
(define-fun equal_prefix ((param__left us_rep1) (param__right us_rep1)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

;; "add"
(declare-fun add (us_rep1
  Int) us_rep1)

;; "length"
(declare-fun length1 (us_rep2) Int)

;; "ole"
(declare-fun ole (us_rep2
  us_rep2) Bool)

;; "included_except"
(declare-fun included_except (us_rep2
  us_rep2
  Int) Bool)

;; "add"
(declare-fun add1 (us_rep2
  Int) us_rep2)

;; "remove"
(declare-fun remove (us_rep2
  Int) us_rep2)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_300 us_rep1) (temp___skip_top_level_301 Bool)) Bool
  (=>
    (not (= temp___skip_top_level_301 true))
    (= (length temp___expr_300) 0)))

;; "is_empty"
(declare-fun is_empty (us_rep2) Bool)

;; "default_initial_assumption"
(define-fun default_initial_assumption1 ((temp___expr_345 us_rep2) (temp___skip_top_level_346 Bool)) Bool
  (=>
    (not (= temp___skip_top_level_346 true))
    (= (is_empty temp___expr_345) true)))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "contains__post_axiom"
(assert true)

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((item Int))
           (=>
             (and (in_range item) (= (contains param__left item) true))
             (= (contains param__right item) true)))) :pattern ((ole
                                                                  param__left
                                                                  param__right)) )))

;; "contains__post_axiom"
(assert true)

;; "contains__def_axiom"
(assert
  (forall ((param__s us_rep1))
    (forall ((param__e Int))
      (! (=
           (= (contains1 param__s param__e) true)
           (exists ((i Int))
             (and
               (and (<= 1 i) (<= i (last param__s)))
               (= (get param__s i) param__e)))) :pattern ((contains1
                                                            param__s
                                                            param__e)) ))))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__item Int))
      (=>
        (and
          (in_range param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range e) (= (contains param__container e) true))
            (not (= param__item e))))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (dynamic_invariant (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((item Int))
               (not
                 (and
                   (in_range item)
                   (= (contains param__container item) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "included_except__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (forall ((param__item Int))
      (! (=>
           (in_range param__item)
           (=
             (= (included_except param__left param__right param__item) true)
             (forall ((e Int))
               (=>
                 (and (in_range e) (= (contains param__left e) true))
                 (or (= (contains param__right e) true) (= e param__item)))))) :pattern (
      (included_except
        param__left
        param__right
        param__item)) ))))

(declare-const data (Array Int us_rep))

(declare-const first_available Int)

(declare-const avail us_rep1)

(declare-const alloc us_rep2)

(declare-const unseen us_rep2)

;; "unseen'unused"
(define-fun unseenqtunused () set__ref
  (set__refqtmk unseen))

;; "alloc'unused"
(define-fun allocqtunused () set__ref
  (set__refqtmk alloc))

;; "avail'unused"
(define-fun availqtunused () sequence__ref
  (sequence__refqtmk avail))

;; "first_available'unused"
(define-fun first_availableqtunused () int__ref
  (int__refqtmk first_available))

;; "data'unused"
(define-fun dataqtunused () map__ref
  (map__refqtmk data))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range first_available))

;; "Assume"
(assert (= (is_well_formed data first_available) true))

;; "Assume"
(assert (default_initial_assumption avail false))

;; "Assume"
(assert true)

;; "Assume"
(assert (default_initial_assumption1 alloc false))

;; "Assume"
(assert true)

;; "Assume"
(assert (default_initial_assumption1 unseen false))

;; "Assume"
(assert true)

(declare-const alloc1 us_rep2)

(declare-const unseen1 us_rep2)

;; "unseen'unused"
(define-fun unseenqtunused1 () set__ref
  (set__refqtmk unseen1))

;; "alloc'unused"
(define-fun allocqtunused1 () set__ref
  (set__refqtmk alloc1))

(declare-const r Int)

(declare-const rqtunused int__ref)

;; "H"
(assert (= rqtunused (int__refqtmk r)))

;; "H"
(assert (= r 1))

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused r))

(declare-const o Bool)

;; "H"
(assert (= o (ite (<= r 10000) true false)))

(declare-const infix_lseqqtresultqtunused Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused o))

(declare-const int__contentqtresultqtunused1 Int)

;; "H"
(assert (= int__contentqtresultqtunused1 r))

(declare-const o1 Bool)

;; "H"
(assert (= o1 (ite (<= 1 r) true false)))

(declare-const infix_lseqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused1 o1))

(declare-const o2 Bool)

;; "H"
(assert (= o2 (and o1 o)))

(declare-const andbqtresultqtunused Bool)

;; "H"
(assert (= andbqtresultqtunused o2))

(declare-const temp___loop_entry_586qtunused us_rep2)

(declare-const set__contentqtresultqtunused us_rep2)

(declare-const temp___loop_entry_585qtunused us_rep2)

(declare-const set__contentqtresultqtunused1 us_rep2)

(declare-const usfqtunused Bool)

(declare-const anyqtresultqtunused Bool)

(declare-const alloc2 us_rep2)

(declare-const unseen2 us_rep2)

(declare-const r1 Int)

(declare-const rqtunused1 int__ref)

(declare-const unseenqtunused2 set__ref)

(declare-const allocqtunused2 set__ref)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const infix_eqqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused3 Int)

(declare-const map__contentqtresultqtunused (Array Int us_rep))

(declare-const o3 us_rep)

(declare-const getqtresultqtunused us_rep)

(declare-const o4 us_split_fields)

(declare-const us_split_fieldsqtresultqtunused us_split_fields)

(declare-const o5 status)

(declare-const rec__list_mod_allocator__cell__statqtresultqtunused status)

(declare-const o6 Int)

(declare-const to_repqtresultqtunused Int)

(declare-const o7 Bool)

(declare-const infix_eqqtresultqtunused1 Bool)

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

(declare-const bool__contentqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused4 Int)

(declare-const set__contentqtresultqtunused2 us_rep2)

(declare-const o8 us_rep2)

(declare-const addqtresultqtunused us_rep2)

(declare-const int__contentqtresultqtunused5 Int)

(declare-const set__contentqtresultqtunused3 us_rep2)

(declare-const o9 us_rep2)

(declare-const addqtresultqtunused1 us_rep2)

(declare-const set__contentqtresultqtunused4 us_rep2)

(declare-const usf Int)

(declare-const anyqtresultqtunused1 Int)

(declare-const eqtunused Int)

(declare-const o10 Bool)

(declare-const containsqtresultqtunused Bool)

(declare-const usf1 Bool)

(declare-const anyqtresultqtunused2 Bool)

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert
  (ite (= o2 true)
    (and
      (= temp___loop_entry_586qtunused unseen)
      (and
        (= set__contentqtresultqtunused unseen)
        (and
          (= temp___loop_entry_585qtunused alloc)
          (and
            (= set__contentqtresultqtunused1 alloc)
            (and
              (and
                (= set__contentqtresultqtunused4 alloc)
                (and
                  (= anyqtresultqtunused1 usf)
                  (and
                    (= eqtunused usf)
                    (and
                      (= o10 (contains alloc usf))
                      (and
                        (= containsqtresultqtunused o10)
                        (and
                          (= usf1 (ite (in_range usf) true false))
                          (and
                            (= anyqtresultqtunused2 usf1)
                            (= andbqtresultqtunused1 (and usf1 o10)))))))))
              (and
                (= usfqtunused (ite (forall ((e Int))
                                      (=>
                                        (and
                                          (in_range e)
                                          (= (contains alloc e) true))
                                        (and (<= 1 e) (<= e (- r 1)))))
                                 true
                                 false))
                (and
                  (= anyqtresultqtunused (ite (forall ((e Int))
                                                (=>
                                                  (and
                                                    (in_range e)
                                                    (= (contains alloc e) true))
                                                  (and
                                                    (<= 1 e)
                                                    (<= e (- r 1)))))
                                           true
                                           false))
                  (and
                    (= rqtunused1 (int__refqtmk r1))
                    (and
                      (= unseenqtunused2 (set__refqtmk unseen2))
                      (and
                        (= allocqtunused2 (set__refqtmk alloc2))
                        (and
                          (and
                            (forall ((e Int))
                              (=>
                                (and
                                  (in_range e)
                                  (= (contains alloc2 e) true))
                                (and (<= 1 e) (<= e (- r1 1)))))
                            (and
                              (forall ((e Int))
                                (=>
                                  (and
                                    (in_range e)
                                    (= (contains unseen2 e) true))
                                  (and (<= 1 e) (<= e (- r1 1)))))
                              (and
                                (forall ((e Int))
                                  (=>
                                    (and (<= 1 e) (<= e 10000))
                                    (=>
                                      (= (to_rep1
                                           (rec__list_mod_allocator__cell__stat
                                             (us_split_fields1
                                               (select data e)))) 0)
                                      (not (= (contains alloc2 e) true)))))
                                (and
                                  (forall ((e Int))
                                    (=>
                                      (and (<= 1 e) (<= e (- r1 1)))
                                      (ite (= (to_rep1
                                                (rec__list_mod_allocator__cell__stat
                                                  (us_split_fields1
                                                    (select data e)))) 1)
                                        (= (contains alloc2 e) true)
                                        (= (contains unseen2 e) true))))
                                  (and
                                    (<= (length1 alloc2) (- r1 1))
                                    (<= (length1 unseen2) (- r1 1)))))))
                          (and
                            (= (and (ite true true false) (ite (and
                                                                 (<= 1 
                                                                 r1)
                                                                 (<= 
                                                                 r1 10000))
                                                            true
                                                            false)) true)
                            (and
                              (and
                                (= int__contentqtresultqtunused3 r1)
                                (and
                                  (= map__contentqtresultqtunused data)
                                  (and
                                    (= o3 (select data r1))
                                    (and
                                      (= getqtresultqtunused o3)
                                      (and
                                        (= o4 (us_split_fields1 o3))
                                        (and
                                          (= us_split_fieldsqtresultqtunused 
                                          o4)
                                          (and
                                            (= o5 (rec__list_mod_allocator__cell__stat
                                                    o4))
                                            (and
                                              (= rec__list_mod_allocator__cell__statqtresultqtunused 
                                              o5)
                                              (and
                                                (= (to_rep1 o5) o6)
                                                (and
                                                  (= to_repqtresultqtunused 
                                                  o6)
                                                  (and
                                                    (= o7 (ite (= o6 1)
                                                            true
                                                            false))
                                                    (and
                                                      (= infix_eqqtresultqtunused1 
                                                      o7)
                                                      (and
                                                        (= spark__branchqtunused 
                                                        (bool__refqtmk
                                                          spark__branch))
                                                        (and
                                                          (= spark__branch 
                                                          o7)
                                                          (and
                                                            (= bool__contentqtresultqtunused 
                                                            spark__branch)
                                                            (ite (= spark__branch true)
                                                              (and
                                                                (and
                                                                  (= 
                                                                  int__contentqtresultqtunused5 
                                                                  r1)
                                                                  (and
                                                                    (= 
                                                                    set__contentqtresultqtunused3 
                                                                    alloc2)
                                                                    (and
                                                                    (= 
                                                                    o9 
                                                                    (add1
                                                                    alloc2
                                                                    r1))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (length1
                                                                    o9) (+ 
                                                                    (length1
                                                                    alloc2) 1))
                                                                    (= 
                                                                    (contains
                                                                    o9
                                                                    r1) true))
                                                                    (= 
                                                                    (ole
                                                                    alloc2
                                                                    o9) true))
                                                                    (= 
                                                                    (included_except
                                                                    o9
                                                                    alloc2
                                                                    r1) true))
                                                                    (and
                                                                    (= 
                                                                    addqtresultqtunused1 
                                                                    o9)
                                                                    (= 
                                                                    alloc1 
                                                                    o9))))))
                                                                (= unseen1 
                                                                unseen2))
                                                              (and
                                                                (and
                                                                  (= 
                                                                  int__contentqtresultqtunused4 
                                                                  r1)
                                                                  (and
                                                                    (= 
                                                                    set__contentqtresultqtunused2 
                                                                    unseen2)
                                                                    (and
                                                                    (= 
                                                                    o8 
                                                                    (add1
                                                                    unseen2
                                                                    r1))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (length1
                                                                    o8) (+ 
                                                                    (length1
                                                                    unseen2) 1))
                                                                    (= 
                                                                    (contains
                                                                    o8
                                                                    r1) true))
                                                                    (= 
                                                                    (ole
                                                                    unseen2
                                                                    o8) true))
                                                                    (= 
                                                                    (included_except
                                                                    o8
                                                                    unseen2
                                                                    r1) true))
                                                                    (and
                                                                    (= 
                                                                    addqtresultqtunused 
                                                                    o8)
                                                                    (= 
                                                                    unseen1 
                                                                    o8))))))
                                                                (= alloc1 
                                                                alloc2))))))))))))))))))
                              (and
                                (= int__contentqtresultqtunused2 r1)
                                (and
                                  (= infix_eqqtresultqtunused (ite (= 
                                                                r1 10000)
                                                                true
                                                                false))
                                  (= r1 10000))))))))))))))))
    (and (= alloc1 alloc) (= unseen1 unseen))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  first_available)

(declare-const r2 Int)

;; "r'unused"
(define-fun rqtunused2 () int__ref
  (int__refqtmk r2))

;; "H"
(assert (= r2 first_available))

;; "Assume"
(assert (in_range r2))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused7 () Int
  r2)

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused () us_rep1
  avail)

;; "o"
(define-fun o11 () Bool
  (contains1 avail r2))

;; "Ensures"
(assert
  (=
    (= o11 true)
    (exists ((i Int))
      (and (and (<= 1 i) (<= i (last avail))) (= (get avail i) r2)))))

;; "contains'result'unused"
(define-fun containsqtresultqtunused1 () Bool
  o11)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  r2)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused2 () Bool
  (ite (= r2 0) true false))

;; "o"
(define-fun o12 () Bool
  (and (ite (= r2 0) false true) (ite (= o11 true) false true)))

;; "andb'result'unused"
(define-fun andbqtresultqtunused2 () Bool
  o12)

;; "H"
(assert (= o12 true))

;; "temp___loop_entry_608'unused"
(define-fun temp___loop_entry_608qtunused () us_rep2
  unseen1)

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused5 () us_rep2
  unseen1)

;; "temp___loop_entry_607'unused"
(define-fun temp___loop_entry_607qtunused () us_rep1
  avail)

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused1 () us_rep1
  avail)

;; "temp___loop_entry_606'unused"
(define-fun temp___loop_entry_606qtunused () Int
  r2)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  r2)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  r2)

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused6 () us_rep2
  unseen1)

;; "o"
(define-fun o13 () us_rep2
  (remove unseen1 r2))

;; "H"
(assert true)

;; "H"
(assert (= (length1 o13) (- (length1 unseen1) 1)))

;; "H"
(assert (not (= (contains o13 r2) true)))

;; "H"
(assert (= (ole o13 unseen1) true))

;; "H"
(assert (= (included_except unseen1 o13 r2) true))

;; "remove'result'unused"
(define-fun removeqtresultqtunused () us_rep2
  o13)

(declare-const unseen3 us_rep2)

;; "unseen'unused"
(define-fun unseenqtunused3 () set__ref
  (set__refqtmk unseen3))

;; "H"
(assert (= unseen3 o13))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  r2)

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused2 () us_rep1
  avail)

;; "o"
(define-fun o14 () us_rep1
  (add avail r2))

;; "H"
(assert true)

;; "H"
(assert (= (last o14) (+ (last avail) 1)))

;; "H"
(assert (= (get o14 (last o14)) r2))

;; "H"
(assert (= (equal_prefix avail o14) true))

;; "add'result'unused"
(define-fun addqtresultqtunused2 () us_rep1
  o14)

(declare-const avail1 us_rep1)

;; "avail'unused"
(define-fun availqtunused1 () sequence__ref
  (sequence__refqtmk avail1))

;; "H"
(assert (= avail1 o14))

;; "Assert"
(assert (and (<= 1 r2) (<= r2 10000)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  r2)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int us_rep)
  data)

;; "o"
(define-fun o15 () us_rep
  (select data r2))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () us_rep
  o15)

;; "o"
(define-fun o16 () us_split_fields
  (us_split_fields1 o15))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields
  o16)

;; "o"
(define-fun o17 () resource
  (rec__list_mod_allocator__cell__next o16))

;; "rec__list_mod_allocator__cell__next'result'unused"
(define-fun rec__list_mod_allocator__cell__nextqtresultqtunused () resource
  o17)

(declare-const o18 Int)

;; "Ensures"
(assert (= (to_rep o17) o18))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o18)

(declare-const r3 Int)

;; "r'unused"
(define-fun rqtunused3 () int__ref
  (int__refqtmk r3))

;; "H"
(assert (= r3 o18))

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused7 () us_rep2
  unseen3)

;; "o"
(define-fun o19 () Int
  (length1 unseen3))

;; "Ensures"
(assert (dynamic_invariant o19 true false true true))

;; "length'result'unused"
(define-fun lengthqtresultqtunused () Int
  o19)

;; "o"
(define-fun o20 () Int
  o19)

;; "to_base'result'unused"
(define-fun to_baseqtresultqtunused () Int
  o20)

;; "temp___638"
(define-fun temp___638 () Int
  o20)

;; "of_base'result'unused"
(define-fun of_baseqtresultqtunused () Int
  temp___638)

;; "Assert"
(assert true)

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused2 () Bool
  (ite (<= temp___638 10000) true false))

(declare-const avail2 us_rep1)

(declare-const unseen4 us_rep2)

(declare-const r4 Int)

;; "r'unused"
(define-fun rqtunused4 () int__ref
  (int__refqtmk r4))

;; "unseen'unused"
(define-fun unseenqtunused4 () set__ref
  (set__refqtmk unseen4))

;; "avail'unused"
(define-fun availqtunused2 () sequence__ref
  (sequence__refqtmk avail2))

;; "LoopInvariant"
(assert (<= (length1 unseen4) 10000))

;; "LoopInvariant"
(assert (<= (length avail2) (- 10000 (length1 unseen4))))

;; "LoopInvariant"
(assert
  (forall ((e Int))
    (=>
      (and (<= 1 e) (<= e 10000))
      (=>
        (and
          (= (to_rep1
               (rec__list_mod_allocator__cell__stat
                 (us_split_fields1 (select data e)))) 0)
          (not (= (contains1 avail2 e) true)))
        (= (contains unseen4 e) true)))))

;; "LoopInvariant"
(assert (and (< 0 (length avail2)) (= (get avail2 1) first_available)))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=> (and (<= 1 j) (<= j (last avail2))) (in_range3 (get avail2 j)))))

;; "LoopInvariant"
(assert
  (= r4 (to_rep
          (rec__list_mod_allocator__cell__next
            (us_split_fields1 (select data (get avail2 (last avail2))))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j (- (last avail2) 1)))
      (= (to_rep
           (rec__list_mod_allocator__cell__next
             (us_split_fields1 (select data (get avail2 j))))) (get
                                                                 avail2
                                                                 (+ j 1))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 2 j) (<= j (last avail2)))
      (= (get avail2 j) (to_rep
                          (rec__list_mod_allocator__cell__next
                            (us_split_fields1
                              (select data (get avail2 (- j 1))))))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j (last avail2)))
      (forall ((k Int))
        (=>
          (and (<= 1 k) (<= k (last avail2)))
          (=> (= (get avail2 j) (get avail2 k)) (= j k)))))))

;; "LoopInvariant"
(assert
  (forall ((e Int))
    (=>
      (and (<= 1 e) (<= e 10000))
      (=>
        (= (to_rep1
             (rec__list_mod_allocator__cell__stat
               (us_split_fields1 (select data e)))) 1)
        (not (= (contains1 avail2 e) true))))))

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused3 () us_rep1
  avail2)

;; "loop_var___67357"
(define-fun loop_var___67357 () Int
  (last avail2))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  loop_var___67357)

;; "Assume"
(assert (in_range r4))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused13 () Int
  r4)

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused4 () us_rep1
  avail2)

;; "o"
(define-fun o21 () Bool
  (contains1 avail2 r4))

;; "Ensures"
(assert
  (=
    (= o21 true)
    (exists ((i Int))
      (and (and (<= 1 i) (<= i (last avail2))) (= (get avail2 i) r4)))))

;; "contains'result'unused"
(define-fun containsqtresultqtunused2 () Bool
  o21)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused14 () Int
  r4)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused3 () Bool
  (ite (= r4 0) true false))

;; "o"
(define-fun o22 () Bool
  (and (ite (= r4 0) false true) (ite (= o21 true) false true)))

;; "andb'result'unused"
(define-fun andbqtresultqtunused3 () Bool
  o22)

;; "H"
(assert (= o22 true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused15 () Int
  r4)

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused8 () us_rep2
  unseen4)

;; "o"
(define-fun o23 () us_rep2
  (remove unseen4 r4))

;; "H"
(assert true)

;; "H"
(assert (= (length1 o23) (- (length1 unseen4) 1)))

;; "H"
(assert (not (= (contains o23 r4) true)))

;; "H"
(assert (= (ole o23 unseen4) true))

;; "H"
(assert (= (included_except unseen4 o23 r4) true))

;; "remove'result'unused"
(define-fun removeqtresultqtunused1 () us_rep2
  o23)

(declare-const unseen5 us_rep2)

;; "unseen'unused"
(define-fun unseenqtunused5 () set__ref
  (set__refqtmk unseen5))

;; "H"
(assert (= unseen5 o23))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused16 () Int
  r4)

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused5 () us_rep1
  avail2)

;; "o"
(define-fun o24 () us_rep1
  (add avail2 r4))

;; "H"
(assert true)

;; "H"
(assert (= (last o24) (+ (last avail2) 1)))

;; "H"
(assert (= (get o24 (last o24)) r4))

;; "H"
(assert (= (equal_prefix avail2 o24) true))

;; "add'result'unused"
(define-fun addqtresultqtunused3 () us_rep1
  o24)

(declare-const avail3 us_rep1)

;; "avail'unused"
(define-fun availqtunused3 () sequence__ref
  (sequence__refqtmk avail3))

;; "H"
(assert (= avail3 o24))

;; "Assert"
(assert (and (<= 1 r4) (<= r4 10000)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused17 () Int
  r4)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int us_rep)
  data)

;; "o"
(define-fun o25 () us_rep
  (select data r4))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () us_rep
  o25)

;; "o"
(define-fun o26 () us_split_fields
  (us_split_fields1 o25))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields
  o26)

;; "o"
(define-fun o27 () resource
  (rec__list_mod_allocator__cell__next o26))

;; "rec__list_mod_allocator__cell__next'result'unused"
(define-fun rec__list_mod_allocator__cell__nextqtresultqtunused1 () resource
  o27)

(declare-const o28 Int)

;; "Ensures"
(assert (= (to_rep o27) o28))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o28)

(declare-const r5 Int)

;; "r'unused"
(define-fun rqtunused5 () int__ref
  (int__refqtmk r5))

;; "H"
(assert (= r5 o28))

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused9 () us_rep2
  unseen5)

;; "o"
(define-fun o29 () Int
  (length1 unseen5))

;; "Ensures"
(assert (dynamic_invariant o29 true false true true))

;; "length'result'unused"
(define-fun lengthqtresultqtunused1 () Int
  o29)

;; "o"
(define-fun o30 () Int
  o29)

;; "to_base'result'unused"
(define-fun to_baseqtresultqtunused1 () Int
  o30)

;; "temp___638"
(define-fun temp___6381 () Int
  o30)

;; "of_base'result'unused"
(define-fun of_baseqtresultqtunused1 () Int
  temp___6381)

;; "Assert"
(assert true)

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused3 () Bool
  (ite (<= temp___6381 10000) true false))

;; "sequence__content'result'unused"
(define-fun sequence__contentqtresultqtunused6 () us_rep1
  avail3)

;; "loop_var_new___67357"
(define-fun loop_var_new___67357 () Int
  (last avail3))

;; "last'result'unused"
(define-fun lastqtresultqtunused1 () Int
  loop_var_new___67357)

;; "H"
(assert (< loop_var___67357 loop_var_new___67357))

;; "LoopInvariant"
(assert (<= (length1 unseen5) 10000))

;; "LoopInvariant"
(assert (<= (length avail3) (- 10000 (length1 unseen5))))

;; "LoopInvariant"
(assert
  (forall ((e Int))
    (=>
      (and (<= 1 e) (<= e 10000))
      (=>
        (and
          (= (to_rep1
               (rec__list_mod_allocator__cell__stat
                 (us_split_fields1 (select data e)))) 0)
          (not (= (contains1 avail3 e) true)))
        (= (contains unseen5 e) true)))))

;; "LoopInvariant"
(assert (and (< 0 (length avail3)) (= (get avail3 1) first_available)))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=> (and (<= 1 j) (<= j (last avail3))) (in_range3 (get avail3 j)))))

;; "LoopInvariant"
(assert
  (= r5 (to_rep
          (rec__list_mod_allocator__cell__next
            (us_split_fields1 (select data (get avail3 (last avail3))))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j (- (last avail3) 1)))
      (= (to_rep
           (rec__list_mod_allocator__cell__next
             (us_split_fields1 (select data (get avail3 j))))) (get
                                                                 avail3
                                                                 (+ j 1))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 2 j) (<= j (last avail3)))
      (= (get avail3 j) (to_rep
                          (rec__list_mod_allocator__cell__next
                            (us_split_fields1
                              (select data (get avail3 (- j 1))))))))))

(declare-const j Int)

;; "H"
(assert (<= 1 j))

;; "H"
(assert (<= j (last avail3)))

(declare-const k Int)

;; "H"
(assert (<= 1 k))

;; "H"
(assert (<= k (last avail3)))

;; "H"
(assert (= (get avail3 j) (get avail3 k)))

;; Goal "def'vc"
;; File "list_mod_allocator.ads", line 74, characters 0-0
(assert
  (not (= j k)))

(check-sat)
