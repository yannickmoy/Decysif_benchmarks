;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 Int)

;; "last"
(declare-fun last (us_rep) Int)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "length"
(define-fun length ((param__container us_rep)) Int
  (- (+ (last param__container) 1) 1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_316 Int) (temp___is_init_312 Bool) (temp___skip_constant_313 Bool) (temp___do_toplevel_314 Bool) (temp___do_typ_inv_315 Bool)) Bool
  (=>
    (= temp___is_init_312 true)
    (=> (= temp___do_toplevel_314 true) (<= 0 temp___expr_316))))

;; "get"
(declare-fun get (us_rep
  Int) Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 10000)))

(declare-sort us_rep1 0)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 us_rep1)

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__list_allocator__m__t__available us_rep)(rec__list_allocator__m__t__allocated us_rep1)))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const list_allocator__m__t__available__first__bit Int)

(declare-const list_allocator__m__t__available__last__bit Int)

(declare-const list_allocator__m__t__available__position Int)

;; "list_allocator__m__t__available__first__bit_axiom"
(assert (<= 0 list_allocator__m__t__available__first__bit))

;; "list_allocator__m__t__available__last__bit_axiom"
(assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; "list_allocator__m__t__available__position_axiom"
(assert (<= 0 list_allocator__m__t__available__position))

(declare-const list_allocator__m__t__allocated__first__bit Int)

(declare-const list_allocator__m__t__allocated__last__bit Int)

(declare-const list_allocator__m__t__allocated__position Int)

;; "list_allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; "list_allocator__m__t__allocated__last__bit_axiom"
(assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; "list_allocator__m__t__allocated__position_axiom"
(assert (<= 0 list_allocator__m__t__allocated__position))

(declare-const dummy3 us_rep2)

;; "is_empty"
(declare-fun is_empty (us_rep1) Bool)

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_353 us_rep2) (temp___skip_top_level_354 Bool)) Bool
  (and
    (= (length
         (rec__list_allocator__m__t__available
           (us_split_fields1 temp___expr_353))) 0)
    (= (is_empty
         (rec__list_allocator__m__t__allocated
           (us_split_fields1 temp___expr_353))) true)))

;; "length"
(declare-fun length1 (us_rep1) Int)

;; "contains"
(declare-fun contains (us_rep
  Int) Bool)

;; "contains"
(declare-fun contains1 (us_rep1
  Int) Bool)

;; "equal_prefix"
(define-fun equal_prefix ((param__left us_rep) (param__right us_rep)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

;; "add"
(declare-fun add (us_rep
  Int) us_rep)

(declare-const enable_handling_of_equivalence Bool)

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (in_range (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range1 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "contains__post_axiom"
(assert true)

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (dynamic_invariant (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "contains__def_axiom"
(assert
  (forall ((param__s us_rep))
    (forall ((param__e Int))
      (! (=
           (= (contains param__s param__e) true)
           (exists ((i Int))
             (and
               (and (<= 1 i) (<= i (last param__s)))
               (= (get param__s i) param__e)))) :pattern ((contains
                                                            param__s
                                                            param__e)) ))))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((item Int))
               (not
                 (and
                   (in_range1 item)
                   (= (contains1 param__container item) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (forall ((param__item Int))
      (=>
        (and
          (in_range1 param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains1 param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range1 e) (= (contains1 param__container e) true))
            (not (= param__item e))))))))

(declare-const model__split_fields us_split_fields)

;; "model__split_fields'unused"
(define-fun model__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk model__split_fields))

;; "temp___600"
(define-fun temp___600 () Bool
  (distinct 1 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () Bool
  temp___600)

;; "Assume"
(assert (= temp___600 enable_handling_of_equivalence))

;; "Assume"
(assert (default_initial_assumption (us_repqtmk model__split_fields) false))

;; "Assume"
(assert true)

;; "Assert"
(assert
  (= (length (rec__list_allocator__m__t__available model__split_fields)) 0))

(declare-const r Int)

;; "r'unused"
(define-fun rqtunused () int__ref
  (int__refqtmk r))

;; "H"
(assert (= r 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  r)

;; "o"
(define-fun o () Bool
  (ite (<= r 10000) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  r)

;; "o"
(define-fun o1 () Bool
  (ite (<= 1 r) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o1)

;; "o"
(define-fun o2 () Bool
  (and o1 o))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o2)

;; "H"
(assert (= o2 true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields
  model__split_fields)

;; "temp___loop_entry_575'unused"
(define-fun temp___loop_entry_575qtunused () us_rep2
  (us_repqtmk model__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep2
  (us_repqtmk model__split_fields))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields
  model__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep2
  (us_repqtmk model__split_fields))

;; "_q 'unused"
(define-fun usq_qtunused () us_split_fields
  model__split_fields)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields
  model__split_fields)

;; "o"
(define-fun o3 () us_rep1
  (rec__list_allocator__m__t__allocated model__split_fields))

;; "rec__list_allocator__m__t__allocated'result'unused"
(define-fun rec__list_allocator__m__t__allocatedqtresultqtunused () us_rep1
  o3)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  r)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields
  model__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep2
  (us_repqtmk model__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields
  model__split_fields)

;; "o"
(define-fun o4 () us_rep
  (rec__list_allocator__m__t__available model__split_fields))

;; "rec__list_allocator__m__t__available'result'unused"
(define-fun rec__list_allocator__m__t__availableqtresultqtunused () us_rep
  o4)

;; "o"
(define-fun o5 () us_rep
  (add o4 r))

;; "H"
(assert true)

;; "H"
(assert (= (last o5) (+ (last o4) 1)))

;; "H"
(assert (= (get o5 (last o5)) r))

;; "H"
(assert (= (equal_prefix o4 o5) true))

;; "add'result'unused"
(define-fun addqtresultqtunused () us_rep
  o5)

;; "o"
(define-fun o6 () us_split_fields
  (us_split_fieldsqtmk o5 o3))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep2
  (us_repqtmk o6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields
  o6)

(declare-const model__split_fields1 us_split_fields)

;; "model__split_fields'unused"
(define-fun model__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk model__split_fields1))

;; "H"
(assert (= model__split_fields1 o6))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused3 () us_split_fields
  model__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep2
  (us_repqtmk model__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields
  model__split_fields1)

;; "o"
(define-fun o7 () us_rep1
  (rec__list_allocator__m__t__allocated model__split_fields1))

;; "rec__list_allocator__m__t__allocated'result'unused"
(define-fun rec__list_allocator__m__t__allocatedqtresultqtunused1 () us_rep1
  o7)

;; "temp___inv_590"
(define-fun temp___inv_590 () Bool
  (is_empty o7))

;; "H"
(assert
  (=
    (= temp___inv_590 true)
    (forall ((item Int))
      (not (and (in_range1 item) (= (contains1 o7 item) true))))))

;; "H"
(assert (= (= temp___inv_590 true) (= (length1 o7) 0)))

;; "is_empty'result'unused"
(define-fun is_emptyqtresultqtunused () Bool
  temp___inv_590)

(declare-const model__split_fields2 us_split_fields)

(declare-const r1 Int)

;; "r'unused"
(define-fun rqtunused1 () int__ref
  (int__refqtmk r1))

;; "model__split_fields'unused"
(define-fun model__split_fieldsqtunused2 () us_split_fields__ref
  (us_split_fields__refqtmk model__split_fields2))

;; "LoopInvariant"
(assert
  (= (is_empty (rec__list_allocator__m__t__allocated model__split_fields2)) true))

;; "LoopInvariant"
(assert
  (= (length1 (rec__list_allocator__m__t__allocated model__split_fields2)) 0))

;; "LoopInvariant"
(assert
  (= (last (rec__list_allocator__m__t__available model__split_fields2)) 
  r1))

;; "LoopInvariant"
(assert
  (= (get (rec__list_allocator__m__t__available model__split_fields2) 1) 1))

;; "LoopInvariant"
(assert
  (forall ((rr Int))
    (=>
      (and (<= 1 rr) (<= rr r1))
      (= (get (rec__list_allocator__m__t__available model__split_fields2) rr) rr))))

;; "LoopInvariant"
(assert
  (forall ((rr Int))
    (=>
      (and (<= 1 rr) (<= rr r1))
      (= (contains
           (rec__list_allocator__m__t__available model__split_fields2)
           rr) true))))

;; "Assume"
(assert
  (= (and (ite (= (rec__list_allocator__m__t__allocated model__split_fields2) 
            (rec__list_allocator__m__t__allocated
              model__split_fields))
            true
            false) (ite (and (<= 1 r1) (<= r1 10000)) true false)) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  r1)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  (ite (= r1 10000) true false))

;; "H"
(assert (not (= r1 10000)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  r1)

;; "o"
(define-fun o8 () Int
  (+ r1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o8)

(declare-const r2 Int)

;; "r'unused"
(define-fun rqtunused2 () int__ref
  (int__refqtmk r2))

;; "H"
(assert (= r2 o8))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused4 () us_split_fields
  model__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep2
  (us_repqtmk model__split_fields2))

;; "_q 'unused"
(define-fun usq_qtunused1 () us_split_fields
  model__split_fields2)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields
  model__split_fields2)

;; "o"
(define-fun o9 () us_rep1
  (rec__list_allocator__m__t__allocated model__split_fields2))

;; "rec__list_allocator__m__t__allocated'result'unused"
(define-fun rec__list_allocator__m__t__allocatedqtresultqtunused2 () us_rep1
  o9)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  r2)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused5 () us_split_fields
  model__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused6 () us_rep2
  (us_repqtmk model__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields
  model__split_fields2)

;; "o"
(define-fun o10 () us_rep
  (rec__list_allocator__m__t__available model__split_fields2))

;; "rec__list_allocator__m__t__available'result'unused"
(define-fun rec__list_allocator__m__t__availableqtresultqtunused1 () us_rep
  o10)

;; "o"
(define-fun o11 () us_rep
  (add o10 r2))

;; "H"
(assert true)

;; "H"
(assert (= (last o11) (+ (last o10) 1)))

;; "H"
(assert (= (get o11 (last o11)) r2))

;; "H"
(assert (= (equal_prefix o10 o11) true))

;; "add'result'unused"
(define-fun addqtresultqtunused1 () us_rep
  o11)

;; "o"
(define-fun o12 () us_split_fields
  (us_split_fieldsqtmk o11 o9))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields
  o12)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused7 () us_rep2
  (us_repqtmk o12))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields
  o12)

(declare-const model__split_fields3 us_split_fields)

;; "model__split_fields'unused"
(define-fun model__split_fieldsqtunused3 () us_split_fields__ref
  (us_split_fields__refqtmk model__split_fields3))

;; "H"
(assert (= model__split_fields3 o12))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused6 () us_split_fields
  model__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused8 () us_rep2
  (us_repqtmk model__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields
  model__split_fields3)

;; "o"
(define-fun o13 () us_rep1
  (rec__list_allocator__m__t__allocated model__split_fields3))

;; "rec__list_allocator__m__t__allocated'result'unused"
(define-fun rec__list_allocator__m__t__allocatedqtresultqtunused3 () us_rep1
  o13)

;; "temp___inv_590"
(define-fun temp___inv_5901 () Bool
  (is_empty o13))

;; "H"
(assert
  (=
    (= temp___inv_5901 true)
    (forall ((item Int))
      (not (and (in_range1 item) (= (contains1 o13 item) true))))))

;; "H"
(assert (= (= temp___inv_5901 true) (= (length1 o13) 0)))

;; "is_empty'result'unused"
(define-fun is_emptyqtresultqtunused1 () Bool
  temp___inv_5901)

;; "LoopInvariant"
(assert
  (= (is_empty (rec__list_allocator__m__t__allocated model__split_fields3)) true))

;; "LoopInvariant"
(assert
  (= (length1 (rec__list_allocator__m__t__allocated model__split_fields3)) 0))

;; "LoopInvariant"
(assert
  (= (last (rec__list_allocator__m__t__available model__split_fields3)) 
  r2))

;; "LoopInvariant"
(assert
  (= (get (rec__list_allocator__m__t__available model__split_fields3) 1) 1))

;; "LoopInvariant"
(assert
  (forall ((rr Int))
    (=>
      (and (<= 1 rr) (<= rr r2))
      (= (get (rec__list_allocator__m__t__available model__split_fields3) rr) rr))))

(declare-const rr Int)

;; "H"
(assert (<= 1 rr))

;; "H"
(assert (<= rr r2))

;; Goal "def'vc"
;; File "list_allocator.ads", line 28, characters 0-0
(assert
  (not
  (= (contains
       (rec__list_allocator__m__t__available model__split_fields3)
       rr) true)))

(check-sat)
