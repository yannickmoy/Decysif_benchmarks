;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const no_resource Int)

(declare-sort resource 0)

;; "resource'int"
(declare-fun resourceqtint (resource) Int)

;; "resource'axiom"
(assert
  (forall ((i resource))
    (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 10000))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 10000)))

;; "to_rep"
(define-fun to_rep ((x resource)) Int
  (resourceqtint x))

;; "of_rep"
(declare-fun of_rep (Int) resource)

;; "inversion_axiom"
(assert
  (forall ((x resource))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x resource)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort status 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep1 (status) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) status)

;; "inversion_axiom"
(assert
  (forall ((x status))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x status)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__list_mod_allocator__cell__stat status)(rec__list_mod_allocator__cell__next resource)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const list_mod_allocator__cell__stat__first__bit Int)

(declare-const list_mod_allocator__cell__stat__last__bit Int)

(declare-const list_mod_allocator__cell__stat__position Int)

;; "list_mod_allocator__cell__stat__first__bit_axiom"
(assert (<= 0 list_mod_allocator__cell__stat__first__bit))

;; "list_mod_allocator__cell__stat__last__bit_axiom"
(assert
  (< list_mod_allocator__cell__stat__first__bit list_mod_allocator__cell__stat__last__bit))

;; "list_mod_allocator__cell__stat__position_axiom"
(assert (<= 0 list_mod_allocator__cell__stat__position))

(declare-const list_mod_allocator__cell__next__first__bit Int)

(declare-const list_mod_allocator__cell__next__last__bit Int)

(declare-const list_mod_allocator__cell__next__position Int)

;; "list_mod_allocator__cell__next__first__bit_axiom"
(assert (<= 0 list_mod_allocator__cell__next__first__bit))

;; "list_mod_allocator__cell__next__last__bit_axiom"
(assert
  (< list_mod_allocator__cell__next__first__bit list_mod_allocator__cell__next__last__bit))

;; "list_mod_allocator__cell__next__position_axiom"
(assert (<= 0 list_mod_allocator__cell__next__position))

(declare-const dummy us_rep)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int us_rep))))))

(declare-sort us_rep1 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep1)

;; "last"
(declare-fun last (us_rep1) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "get"
(declare-fun get (us_rep1
  Int) Int)

(declare-sort us_rep2 0)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 us_rep2)

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__list_mod_allocator__m__t__available us_rep1)(rec__list_mod_allocator__m__t__allocated us_rep2)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const list_mod_allocator__m__t__available__first__bit Int)

(declare-const list_mod_allocator__m__t__available__last__bit Int)

(declare-const list_mod_allocator__m__t__available__position Int)

;; "list_mod_allocator__m__t__available__first__bit_axiom"
(assert (<= 0 list_mod_allocator__m__t__available__first__bit))

;; "list_mod_allocator__m__t__available__last__bit_axiom"
(assert
  (< list_mod_allocator__m__t__available__first__bit list_mod_allocator__m__t__available__last__bit))

;; "list_mod_allocator__m__t__available__position_axiom"
(assert (<= 0 list_mod_allocator__m__t__available__position))

(declare-const list_mod_allocator__m__t__allocated__first__bit Int)

(declare-const list_mod_allocator__m__t__allocated__last__bit Int)

(declare-const list_mod_allocator__m__t__allocated__position Int)

;; "list_mod_allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 list_mod_allocator__m__t__allocated__first__bit))

;; "list_mod_allocator__m__t__allocated__last__bit_axiom"
(assert
  (< list_mod_allocator__m__t__allocated__first__bit list_mod_allocator__m__t__allocated__last__bit))

;; "list_mod_allocator__m__t__allocated__position_axiom"
(assert (<= 0 list_mod_allocator__m__t__allocated__position))

(declare-const dummy3 us_rep3)

;; "contains"
(declare-fun contains (us_rep1
  Int) Bool)

;; "model"
(declare-fun model1 ((Array Int us_rep)
  Int) us_rep3)

;; "model__function_guard"
(declare-fun model__function_guard (us_rep3
  (Array Int us_rep)
  Int) Bool)

;; "is_well_formed"
(define-fun is_well_formed ((List_mod_allocator__data___data___ (Array Int us_rep)) (List_mod_allocator__first_available___first_available___ Int)) Bool
  (and (ite (not
              (= List_mod_allocator__first_available___first_available___ 0))
         (= (to_rep1
              (rec__list_mod_allocator__cell__stat
                (us_split_fields1
                  (select List_mod_allocator__data___data___ List_mod_allocator__first_available___first_available___)))) 0)
         (distinct 1 0)) (ite (forall ((r Int))
                                (=>
                                  (and (<= 1 r) (<= r 10000))
                                  (=>
                                    (and
                                      (= (to_rep1
                                           (rec__list_mod_allocator__cell__stat
                                             (us_split_fields1
                                               (select List_mod_allocator__data___data___ r)))) 0)
                                      (not
                                        (= (to_rep
                                             (rec__list_mod_allocator__cell__next
                                               (us_split_fields1
                                                 (select List_mod_allocator__data___data___ r)))) 0)))
                                    (= (to_rep1
                                         (rec__list_mod_allocator__cell__stat
                                           (us_split_fields1
                                             (select List_mod_allocator__data___data___ 
                                             (to_rep
                                               (rec__list_mod_allocator__cell__next
                                                 (us_split_fields1
                                                   (select List_mod_allocator__data___data___ r)))))))) 0))))
                           true
                           false)))

;; "model_is_well_formed"
(declare-fun model_is_well_formed (us_rep3
  (Array Int us_rep)
  Int) Bool)

(declare-const enable_handling_of_equivalence Bool)

(declare-const r158b us_rep3)

(declare-const r160b Int)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 10000)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size1 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "list_mod_allocator__data__aggregate_def"
(declare-fun list_mod_allocator__data__aggregate_def (us_rep) (Array Int us_rep))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const dummy4 Int)

;; "length"
(define-fun length ((param__container us_rep1)) Int
  (- (+ (last param__container) 1) 1))

;; "contains"
(declare-fun contains1 (us_rep2
  Int) Bool)

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "contains__post_axiom"
(assert true)

;; "contains__post_axiom"
(assert true)

;; "contains__def_axiom"
(assert
  (forall ((param__s us_rep1))
    (forall ((param__e Int))
      (! (=
           (= (contains param__s param__e) true)
           (exists ((i Int))
             (and
               (and (<= 1 i) (<= i (last param__s)))
               (= (get param__s i) param__e)))) :pattern ((contains
                                                            param__s
                                                            param__e)) ))))

;; "model_is_well_formed__post_axiom"
(assert true)

;; "model_is_well_formed__def_axiom"
(assert
  (forall ((param__m us_rep3))
    (forall ((List_mod_allocator__data___data___ (Array Int us_rep)))
      (forall ((List_mod_allocator__first_available___first_available___ Int))
        (! (=
             (= (model_is_well_formed
                  param__m
                  List_mod_allocator__data___data___
                  List_mod_allocator__first_available___first_available___) true)
             (let ((avail (rec__list_mod_allocator__m__t__available
                            (us_split_fields3 param__m))))
               (let ((alloc (rec__list_mod_allocator__m__t__allocated
                              (us_split_fields3 param__m))))
                 (and
                   (and
                     (and
                       (and
                         (and
                           (and
                             (and
                               (<= (length avail) 10000)
                               (ite (not
                                      (= List_mod_allocator__first_available___first_available___ 0))
                                 (and
                                   (< 0 (length avail))
                                   (= (get avail 1) List_mod_allocator__first_available___first_available___))
                                 (= (length avail) 0)))
                             (forall ((j Int))
                               (=>
                                 (and (<= 1 j) (<= j (last avail)))
                                 (and
                                   (in_range3 (get avail j))
                                   (=>
                                     (< j (last avail))
                                     (= (to_rep
                                          (rec__list_mod_allocator__cell__next
                                            (us_split_fields1
                                              (select List_mod_allocator__data___data___ 
                                              (get
                                                avail
                                                j))))) (get avail (+ j 1))))))))
                           (forall ((j Int))
                             (=>
                               (and (<= 1 j) (<= j (last avail)))
                               (=>
                                 (< 1 j)
                                 (and
                                   (in_range3 (get avail (- j 1)))
                                   (= (get avail j) (to_rep
                                                      (rec__list_mod_allocator__cell__next
                                                        (us_split_fields1
                                                          (select List_mod_allocator__data___data___ 
                                                          (get
                                                            avail
                                                            (- j 1))))))))))))
                         (forall ((j Int))
                           (=>
                             (and (<= 1 j) (<= j (last avail)))
                             (forall ((k Int))
                               (=>
                                 (and (<= 1 k) (<= k (last avail)))
                                 (=> (= (get avail j) (get avail k)) (= j k)))))))
                       (=>
                         (and
                           (not
                             (= List_mod_allocator__first_available___first_available___ 0))
                           (in_range3
                             (to_rep
                               (rec__list_mod_allocator__cell__next
                                 (us_split_fields1
                                   (select List_mod_allocator__data___data___ 
                                   (get
                                     avail
                                     (last avail))))))))
                         (= (contains
                              avail
                              (to_rep
                                (rec__list_mod_allocator__cell__next
                                  (us_split_fields1
                                    (select List_mod_allocator__data___data___ 
                                    (get
                                      avail
                                      (last avail))))))) true)))
                     (forall ((e Int))
                       (=>
                         (and (in_range e) (= (contains1 alloc e) true))
                         (in_range3 e))))
                   (forall ((r Int))
                     (=>
                       (and (<= 1 r) (<= r 10000))
                       (ite (= (to_rep1
                                 (rec__list_mod_allocator__cell__stat
                                   (us_split_fields1
                                     (select List_mod_allocator__data___data___ r)))) 0)
                         (not (= (contains1 alloc r) true))
                         (and
                           (not (= (contains avail r) true))
                           (= (contains1 alloc r) true))))))))) :pattern (
        (model_is_well_formed
          param__m
          List_mod_allocator__data___data___
          List_mod_allocator__first_available___first_available___)) )))))

;; "model__post_axiom"
(assert
  (forall ((List_mod_allocator__data___data___ (Array Int us_rep)))
    (forall ((List_mod_allocator__first_available___first_available___ Int))
      (! (=>
           (and
             (in_range
               List_mod_allocator__first_available___first_available___)
             (= (is_well_formed
                  List_mod_allocator__data___data___
                  List_mod_allocator__first_available___first_available___) true))
           (let ((result (model1
                           List_mod_allocator__data___data___
                           List_mod_allocator__first_available___first_available___)))
             (=>
               (model__function_guard
                 result
                 List_mod_allocator__data___data___
                 List_mod_allocator__first_available___first_available___)
               (= (model_is_well_formed
                    result
                    List_mod_allocator__data___data___
                    List_mod_allocator__first_available___first_available___) true)))) :pattern (
      (model1
        List_mod_allocator__data___data___
        List_mod_allocator__first_available___first_available___)) ))))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__item Int))
      (=>
        (and
          (in_range param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains1 param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range e) (= (contains1 param__container e) true))
            (not (= param__item e))))))))

(declare-const rliteral resource)

;; "rliteral_axiom"
(assert (= (resourceqtint rliteral) 0))

;; "list_mod_allocator__no_resource__assume'unused"
(define-fun list_mod_allocator__no_resource__assumeqtunused () Int
  0)

;; "Assume"
(assert (= 0 no_resource))

;; "Assume"
(assert (in_range no_resource))

;; "temp___524"
(define-fun temp___524 () Bool
  (distinct 1 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () Bool
  temp___524)

;; "Assume"
(assert (= temp___524 enable_handling_of_equivalence))

(declare-const o status)

;; "Ensures"
(assert (= (to_rep1 o) 0))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () status
  o)

;; "o"
(define-fun o1 () us_split_fields
  (us_split_fieldsqtmk o rliteral))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o1)

;; "o"
(define-fun o2 () us_rep
  (us_repqtmk o1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep
  o2)

(declare-const temp___521 (Array Int us_rep))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___520 Int))
    (! (=>
         (and (<= 1 temp___520) (<= temp___520 10000))
         (= (select temp___521 temp___520) o2)) :pattern ((select temp___521 temp___520)) )))

;; "H"
(assert (= temp___521 (list_mod_allocator__data__aggregate_def o2)))

;; "list_mod_allocator__data__aggregate_def'result'unused"
(define-fun list_mod_allocator__data__aggregate_defqtresultqtunused () (Array Int us_rep)
  temp___521)

(declare-const data (Array Int us_rep))

;; "data'unused"
(define-fun dataqtunused () map__ref
  (map__refqtmk data))

;; "H"
(assert (= data temp___521))

;; "Assume"
(assert true)

(declare-const first_available Int)

;; "first_available'unused"
(define-fun first_availableqtunused () int__ref
  (int__refqtmk first_available))

;; "H"
(assert (= first_available 1))

;; "Assume"
(assert (in_range first_available))

(declare-const data1 (Array Int us_rep))

;; "data'unused"
(define-fun dataqtunused1 () map__ref
  (map__refqtmk data1))

(declare-const r Int)

(declare-const rqtunused int__ref)

;; "H"
(assert (= rqtunused (int__refqtmk r)))

;; "H"
(assert (= r 1))

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused r))

(declare-const o3 Bool)

;; "H"
(assert (= o3 (ite (<= r 10000) true false)))

(declare-const infix_lseqqtresultqtunused Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused o3))

(declare-const int__contentqtresultqtunused1 Int)

;; "H"
(assert (= int__contentqtresultqtunused1 r))

(declare-const o4 Bool)

;; "H"
(assert (= o4 (ite (<= 1 r) true false)))

(declare-const infix_lseqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused1 o4))

(declare-const o5 Bool)

;; "H"
(assert (= o5 (and o4 o3)))

(declare-const andbqtresultqtunused Bool)

;; "H"
(assert (= andbqtresultqtunused o5))

(declare-const temp___loop_entry_503qtunused (Array Int us_rep))

(declare-const map__contentqtresultqtunused (Array Int us_rep))

(declare-const spark__branch Bool)

(declare-const data2 (Array Int us_rep))

(declare-const dataqtunused2 map__ref)

(declare-const spark__branchqtunused bool__ref)

(declare-const usfqtunused Bool)

(declare-const anyqtresultqtunused Bool)

(declare-const r1 Int)

(declare-const rqtunused1 int__ref)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const infix_eqqtresultqtunused Bool)

(declare-const usf Int)

(declare-const anyqtresultqtunused1 Int)

(declare-const rrqtunused Int)

(declare-const int__contentqtresultqtunused3 Int)

(declare-const o6 Bool)

(declare-const infix_lseqqtresultqtunused2 Bool)

(declare-const o7 Bool)

(declare-const infix_lseqqtresultqtunused3 Bool)

(declare-const andbqtresultqtunused1 Bool)

(declare-const int__contentqtresultqtunused4 Int)

(declare-const o8 Bool)

(declare-const infix_lsqtresultqtunused Bool)

(declare-const bool__contentqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused5 Int)

(declare-const map__contentqtresultqtunused1 (Array Int us_rep))

(declare-const temp___501 us_rep)

(declare-const getqtresultqtunused us_rep)

(declare-const usq_ us_split_fields)

(declare-const us_split_fieldsqtresultqtunused us_split_fields)

(declare-const int__contentqtresultqtunused6 Int)

(declare-const o9 Int)

(declare-const infix_plqtresultqtunused Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const o10 resource)

(declare-const of_repqtresultqtunused1 resource)

(declare-const o11 status)

(declare-const rec__list_mod_allocator__cell__statqtresultqtunused status)

(declare-const o12 us_split_fields)

(declare-const us_split_fieldsqtmkqtresultqtunused1 us_split_fields)

(declare-const o13 us_rep)

(declare-const us_repqtmkqtresultqtunused1 us_rep)

(declare-const int__contentqtresultqtunused7 Int)

(declare-const map__contentqtresultqtunused2 (Array Int us_rep))

(declare-const o14 (Array Int us_rep))

(declare-const setqtresultqtunused (Array Int us_rep))

;; "H"
(assert
  (ite (= o5 true)
    (and
      (= temp___loop_entry_503qtunused data)
      (and
        (= map__contentqtresultqtunused data)
        (and
          (= dataqtunused2 (map__refqtmk data2))
          (and
            (= spark__branchqtunused (bool__refqtmk spark__branch))
            (and
              (and
                (= int__contentqtresultqtunused4 r)
                (and
                  (= o8 (ite (< r 10000) true false))
                  (and
                    (= infix_lsqtresultqtunused o8)
                    (and
                      (= spark__branch o8)
                      (and
                        (= bool__contentqtresultqtunused spark__branch)
                        (ite (= spark__branch true)
                          (and
                            (= int__contentqtresultqtunused5 r)
                            (and
                              (= map__contentqtresultqtunused1 data)
                              (and
                                (= temp___501 (select data r))
                                (and
                                  (= getqtresultqtunused temp___501)
                                  (and
                                    (= usq_ (us_split_fields1 temp___501))
                                    (and
                                      (= us_split_fieldsqtresultqtunused 
                                      usq_)
                                      (and
                                        (= int__contentqtresultqtunused6 
                                        r)
                                        (and
                                          (= o9 (+ r 1))
                                          (and
                                            (= infix_plqtresultqtunused 
                                            o9)
                                            (and
                                              (in_range o9)
                                              (and
                                                (= range_check_qtresultqtunused 
                                                o9)
                                                (and
                                                  (= (to_rep o10) o9)
                                                  (and
                                                    (= of_repqtresultqtunused1 
                                                    o10)
                                                    (and
                                                      (= o11 (rec__list_mod_allocator__cell__stat
                                                               usq_))
                                                      (and
                                                        (= rec__list_mod_allocator__cell__statqtresultqtunused 
                                                        o11)
                                                        (and
                                                          (= o12 (us_split_fieldsqtmk
                                                                   o11
                                                                   o10))
                                                          (and
                                                            (= us_split_fieldsqtmkqtresultqtunused1 
                                                            o12)
                                                            (and
                                                              (= o13 
                                                              (us_repqtmk
                                                                o12))
                                                              (and
                                                                (= us_repqtmkqtresultqtunused1 
                                                                o13)
                                                                (and
                                                                  (= 
                                                                  int__contentqtresultqtunused7 
                                                                  r)
                                                                  (and
                                                                    (= 
                                                                    map__contentqtresultqtunused2 
                                                                    data)
                                                                    (and
                                                                    (= 
                                                                    o14 (store 
                                                                    data 
                                                                    r o13))
                                                                    (and
                                                                    (= 
                                                                    setqtresultqtunused 
                                                                    o14)
                                                                    (= 
                                                                    data2 
                                                                    o14))))))))))))))))))))))))
                          (= data2 data)))))))
              (and
                (and
                  (= anyqtresultqtunused1 usf)
                  (and
                    (= rrqtunused usf)
                    (and
                      (= int__contentqtresultqtunused3 r)
                      (and
                        (= o6 (ite (<= usf r) true false))
                        (and
                          (= infix_lseqqtresultqtunused2 o6)
                          (and
                            (= o7 (ite (<= 1 usf) true false))
                            (and
                              (= infix_lseqqtresultqtunused3 o7)
                              (= andbqtresultqtunused1 (and o7 o6)))))))))
                (and
                  (= usfqtunused (ite (forall ((rr Int))
                                        (=>
                                          (and (<= 1 rr) (<= rr r))
                                          (= (to_rep
                                               (rec__list_mod_allocator__cell__next
                                                 (us_split_fields1
                                                   (select data2 rr)))) 
                                          (ite (= rr 10000)
                                            0
                                            (+ rr 1)))))
                                   true
                                   false))
                  (and
                    (= anyqtresultqtunused (ite (forall ((rr Int))
                                                  (=>
                                                    (and (<= 1 rr) (<= rr r))
                                                    (= (to_rep
                                                         (rec__list_mod_allocator__cell__next
                                                           (us_split_fields1
                                                             (select 
                                                             data2 rr)))) 
                                                    (ite (= rr 10000)
                                                      0
                                                      (+ rr 1)))))
                                             true
                                             false))
                    (and
                      (= rqtunused1 (int__refqtmk r1))
                      (and
                        (and
                          (forall ((rr Int))
                            (=>
                              (and (<= 1 rr) (<= rr r1))
                              (= (to_rep
                                   (rec__list_mod_allocator__cell__next
                                     (us_split_fields1 (select data1 rr)))) 
                              (ite (= rr 10000)
                                0
                                (+ rr 1)))))
                          (and
                            (= (to_rep
                                 (rec__list_mod_allocator__cell__next
                                   (us_split_fields1 (select data1 10000)))) 0)
                            (forall ((rr Int))
                              (=>
                                (and (<= 1 rr) (<= rr 10000))
                                (= (to_rep1
                                     (rec__list_mod_allocator__cell__stat
                                       (us_split_fields1 (select data1 rr)))) 0)))))
                        (and
                          (= (and (ite (forall ((temp___504 Int))
                                         (=>
                                           (and
                                             (<= 1 temp___504)
                                             (<= temp___504 10000))
                                           (ite (or
                                                  (< 10000 temp___504)
                                                  (or
                                                    (< temp___504 1)
                                                    (< r1 temp___504)))
                                             (= (select data1 temp___504) (select 
                                             data temp___504))
                                             (= (rec__list_mod_allocator__cell__stat
                                                  (us_split_fields1
                                                    (select data1 temp___504))) 
                                             (rec__list_mod_allocator__cell__stat
                                               (us_split_fields1
                                                 (select data temp___504)))))))
                                    true
                                    false) (ite (and (<= 1 r1) (<= r1 10000))
                                             true
                                             false)) true)
                          (and
                            (= int__contentqtresultqtunused2 r1)
                            (and
                              (= infix_eqqtresultqtunused (ite (= r1 10000)
                                                            true
                                                            false))
                              (= r1 10000))))))))))))))
    (= data1 data)))

;; "list_mod_allocator__R158b__assume"
(define-fun list_mod_allocator__R158b__assume () us_rep3
  (model1 data1 first_available))

;; "H"
(assert
  (model__function_guard
    list_mod_allocator__R158b__assume
    data1
    first_available))

;; "H"
(assert true)

;; "H"
(assert
  (= (model_is_well_formed
       list_mod_allocator__R158b__assume
       data1
       first_available) true))

;; "model'result'unused"
(define-fun modelqtresultqtunused () us_rep3
  list_mod_allocator__R158b__assume)

;; "Assume"
(assert (= list_mod_allocator__R158b__assume r158b))

;; "Assume"
(assert true)

;; "o"
(define-fun o15 () us_split_fields2
  (us_split_fields3 r158b))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields2
  o15)

;; "o"
(define-fun o16 () us_rep1
  (rec__list_mod_allocator__m__t__available o15))

;; "rec__list_mod_allocator__m__t__available'result'unused"
(define-fun rec__list_mod_allocator__m__t__availableqtresultqtunused 
  () us_rep1
  o16)

;; "list_mod_allocator__B159b__L_5__R160b__assume"
(define-fun list_mod_allocator__B159b__L_5__R160b__assume () Int
  (last o16))

;; "Ensures"
(assert (in_range2 list_mod_allocator__B159b__L_5__R160b__assume))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  list_mod_allocator__B159b__L_5__R160b__assume)

;; "Assume"
(assert (= list_mod_allocator__B159b__L_5__R160b__assume r160b))

;; "Assume"
(assert (in_range2 r160b))

;; "temp___509"
(define-fun temp___509 () Int
  r160b)

(declare-const i Int)

;; "i'unused"
(define-fun iqtunused () int__ref
  (int__refqtmk i))

;; "H"
(assert (= i 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  i)

;; "o"
(define-fun o17 () Bool
  (ite (<= i temp___509) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused4 () Bool
  o17)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  i)

;; "o"
(define-fun o18 () Bool
  (ite (<= 1 i) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused5 () Bool
  o18)

;; "o"
(define-fun o19 () Bool
  (and o18 o17))

;; "andb'result'unused"
(define-fun andbqtresultqtunused2 () Bool
  o19)

;; "H"
(assert (= o19 true))

(declare-const usf1 Int)

(declare-const anyqtresultqtunused2 Int)

;; "H"
(assert (= anyqtresultqtunused2 usf1))

(declare-const jqtunused Int)

;; "H"
(assert (= jqtunused usf1))

(declare-const int__contentqtresultqtunused10 Int)

;; "H"
(assert (= int__contentqtresultqtunused10 i))

(declare-const o20 Bool)

;; "H"
(assert (= o20 (ite (<= usf1 i) true false)))

(declare-const infix_lseqqtresultqtunused6 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused6 o20))

(declare-const o21 Bool)

;; "H"
(assert (= o21 (ite (<= 1 usf1) true false)))

(declare-const infix_lseqqtresultqtunused7 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused7 o21))

(declare-const andbqtresultqtunused3 Bool)

;; "H"
(assert (= andbqtresultqtunused3 (and o21 o20)))

;; "_f'unused"
(define-fun usfqtunused1 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= 1 j) (<= j i))
           (= (get
                (rec__list_mod_allocator__m__t__available
                  (us_split_fields3 r158b))
                j) j)))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused3 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= 1 j) (<= j i))
           (= (get
                (rec__list_mod_allocator__m__t__available
                  (us_split_fields3 r158b))
                j) j)))
    true
    false))

(declare-const i1 Int)

;; "i'unused"
(define-fun iqtunused1 () int__ref
  (int__refqtmk i1))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j i1))
      (= (get
           (rec__list_mod_allocator__m__t__available
             (us_split_fields3 r158b))
           j) j))))

;; "Assume"
(assert (and (<= 1 i1) (<= i1 r160b)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  i1)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused1 () Bool
  (ite (= i1 temp___509) true false))

;; "H"
(assert (not (= i1 temp___509)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  i1)

;; "o"
(define-fun o22 () Int
  (+ i1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused1 () Int
  o22)

(declare-const i2 Int)

;; "i'unused"
(define-fun iqtunused2 () int__ref
  (int__refqtmk i2))

;; "H"
(assert (= i2 o22))

(declare-const usf2 Int)

(declare-const anyqtresultqtunused4 Int)

;; "H"
(assert (= anyqtresultqtunused4 usf2))

(declare-const jqtunused1 Int)

;; "H"
(assert (= jqtunused1 usf2))

(declare-const int__contentqtresultqtunused13 Int)

;; "H"
(assert (= int__contentqtresultqtunused13 i2))

(declare-const o23 Bool)

;; "H"
(assert (= o23 (ite (<= usf2 i2) true false)))

(declare-const infix_lseqqtresultqtunused8 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused8 o23))

(declare-const o24 Bool)

;; "H"
(assert (= o24 (ite (<= 1 usf2) true false)))

(declare-const infix_lseqqtresultqtunused9 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused9 o24))

(declare-const andbqtresultqtunused4 Bool)

;; "H"
(assert (= andbqtresultqtunused4 (and o24 o23)))

;; "_f'unused"
(define-fun usfqtunused2 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= 1 j) (<= j i2))
           (= (get
                (rec__list_mod_allocator__m__t__available
                  (us_split_fields3 r158b))
                j) j)))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused5 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= 1 j) (<= j i2))
           (= (get
                (rec__list_mod_allocator__m__t__available
                  (us_split_fields3 r158b))
                j) j)))
    true
    false))

(declare-const j Int)

;; "H"
(assert (<= 1 j))

;; "H"
(assert (<= j i2))

;; Goal "def'vc"
;; File "list_mod_allocator.ads", line 8, characters 0-0
(assert
  (not
  (= (get
       (rec__list_mod_allocator__m__t__available (us_split_fields3 r158b))
       j) j)))

(check-sat)
