(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

function of_int(i: int) : bool = (if (i = 0) then false else true)

logic no_resource : int

type resource

logic resourceqtint : resource -> int

axiom resourceqtaxiom :
  (forall i:resource. ((0 <= resourceqtint(i)) and
  (resourceqtint(i) <= 10000)))

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

function to_rep(x: resource) : int = resourceqtint(x)

logic of_rep : int -> resource

axiom inversion_axiom :
  (forall x:resource [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:resource [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type status

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic to_rep1 : status -> int

logic of_rep1 : int -> status

axiom inversion_axiom1 :
  (forall x:status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:status [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_mod_allocator__cell__stat : status;
rec__list_mod_allocator__cell__next : resource }

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic list_mod_allocator__cell__stat__first__bit : int

logic list_mod_allocator__cell__stat__last__bit : int

logic list_mod_allocator__cell__stat__position : int

axiom list_mod_allocator__cell__stat__first__bit_axiom :
  (0 <= list_mod_allocator__cell__stat__first__bit)

axiom list_mod_allocator__cell__stat__last__bit_axiom :
  (list_mod_allocator__cell__stat__first__bit <  list_mod_allocator__cell__stat__last__bit)

axiom list_mod_allocator__cell__stat__position_axiom :
  (0 <= list_mod_allocator__cell__stat__position)

logic list_mod_allocator__cell__next__first__bit : int

logic list_mod_allocator__cell__next__last__bit : int

logic list_mod_allocator__cell__next__position : int

axiom list_mod_allocator__cell__next__first__bit_axiom :
  (0 <= list_mod_allocator__cell__next__first__bit)

axiom list_mod_allocator__cell__next__last__bit_axiom :
  (list_mod_allocator__cell__next__first__bit <  list_mod_allocator__cell__next__last__bit)

axiom list_mod_allocator__cell__next__position_axiom :
  (0 <= list_mod_allocator__cell__next__position)

logic dummy : us_rep

type us_rep1

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dummy1 : us_rep1

logic last : us_rep1 -> int

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((0 <= extended_indexqtint(i)) and
  (extended_indexqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic get : us_rep1, int -> int

type us_rep2

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic dummy2 : us_rep2

type us_split_fields2 = { rec__list_mod_allocator__m__t__available : us_rep1;
rec__list_mod_allocator__m__t__allocated : us_rep2 }

type us_rep3 = { us_split_fields3 : us_split_fields2
}

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic list_mod_allocator__m__t__available__first__bit : int

logic list_mod_allocator__m__t__available__last__bit : int

logic list_mod_allocator__m__t__available__position : int

axiom list_mod_allocator__m__t__available__first__bit_axiom :
  (0 <= list_mod_allocator__m__t__available__first__bit)

axiom list_mod_allocator__m__t__available__last__bit_axiom :
  (list_mod_allocator__m__t__available__first__bit <  list_mod_allocator__m__t__available__last__bit)

axiom list_mod_allocator__m__t__available__position_axiom :
  (0 <= list_mod_allocator__m__t__available__position)

logic list_mod_allocator__m__t__allocated__first__bit : int

logic list_mod_allocator__m__t__allocated__last__bit : int

logic list_mod_allocator__m__t__allocated__position : int

axiom list_mod_allocator__m__t__allocated__first__bit_axiom :
  (0 <= list_mod_allocator__m__t__allocated__first__bit)

axiom list_mod_allocator__m__t__allocated__last__bit_axiom :
  (list_mod_allocator__m__t__allocated__first__bit <  list_mod_allocator__m__t__allocated__last__bit)

axiom list_mod_allocator__m__t__allocated__position_axiom :
  (0 <= list_mod_allocator__m__t__allocated__position)

logic dummy3 : us_rep3

logic contains : us_rep1, int -> bool

logic model : (int,us_rep) farray, int -> us_rep3

logic model__function_guard : us_rep3, (int,us_rep) farray, int -> prop

logic bool_eq : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

function is_well_formed(List_mod_allocator__data___data___: (int,us_rep) farray,
  List_mod_allocator__first_available___first_available___: int) : bool =
  andb((if (not (List_mod_allocator__first_available___first_available___ = 0)) then bool_eq(to_rep1((((List_mod_allocator__data___data___[List_mod_allocator__first_available___first_available___])).us_split_fields1).rec__list_mod_allocator__cell__stat),
  0) else of_int(1)),
  (if (forall r:int. (((1 <= r) and (r <= 10000)) ->
      (((to_rep1((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0) and
      (not (to_rep((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__next) = 0))) ->
      (to_rep1((((List_mod_allocator__data___data___[to_rep((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__next)])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0)))) then true else false))

logic model_is_well_formed : us_rep3, (int,us_rep) farray, int -> bool

logic enable_handling_of_equivalence : bool

logic r158b : us_rep3

logic r160b : int

type tresourceB

logic tresourceBqtint : tresourceB -> int

axiom tresourceBqtaxiom :
  (forall i:tresourceB. (((- 2147483648) <= tresourceBqtint(i)) and
  (tresourceBqtint(i) <= 2147483647)))

type valid_resource

logic valid_resourceqtint : valid_resource -> int

axiom valid_resourceqtaxiom :
  (forall i:valid_resource. ((1 <= valid_resourceqtint(i)) and
  (valid_resourceqtint(i) <= 10000)))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10000))

logic value__size4 : int

logic object__size4 : int

logic component__size : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom4 : (0 <= alignment4)

type t4b

logic t4bqtint : t4b -> int

axiom t4bqtaxiom :
  (forall i:t4b. ((1 <= t4bqtint(i)) and (t4bqtint(i) <= 10000)))

logic value__size5 : int

logic object__size5 : int

logic component__size1 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom5 : (0 <= alignment5)

logic list_mod_allocator__data__aggregate_def : us_rep -> (int,us_rep) farray

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic dummy4 : int

function length(param__container: us_rep1) : int =
  ((last(param__container) + 1) - 1)

logic contains1 : us_rep2, int -> bool

axiom last__post_axiom :
  (forall param__container:us_rep1 [last(param__container)].
  in_range2(last(param__container)))

axiom get__post_axiom :
  (forall param__container:us_rep1.
  (forall param__position:int [get(param__container, param__position)].
  ((in_range2(param__position) and ((1 <= param__position) and
  (param__position <= last(param__container)))) ->
  in_range(get(param__container, param__position)))))

axiom contains__post_axiom : true

axiom contains__post_axiom1 : true

axiom contains__def_axiom :
  (forall param__s:us_rep1.
  (forall param__e:int [contains(param__s, param__e)]. ((contains(param__s,
  param__e) = true) <->
  (exists i:int. (((1 <= i) and (i <= last(param__s))) and (get(param__s,
  i) = param__e))))))

axiom model_is_well_formed__post_axiom : true

axiom model_is_well_formed__def_axiom :
  (forall param__m:us_rep3.
  (forall List_mod_allocator__data___data___:(int,us_rep) farray.
  (forall List_mod_allocator__first_available___first_available___:int
  [model_is_well_formed(param__m, List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___)].
  ((model_is_well_formed(param__m, List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___) = true) <->
  (let avail =
  ((param__m).us_split_fields3).rec__list_mod_allocator__m__t__available
  : us_rep1 in (let alloc =
  ((param__m).us_split_fields3).rec__list_mod_allocator__m__t__allocated
  : us_rep2 in ((((((((length(avail) <= 10000) and
  (if (not (List_mod_allocator__first_available___first_available___ = 0)) then ((0 <  length(avail)) and
  (get(avail,
  1) = List_mod_allocator__first_available___first_available___)) else (length(avail) = 0))) and
  (forall j:int. (((1 <= j) and (j <= last(avail))) -> (in_range3(get(avail,
  j)) and ((j <  last(avail)) ->
  (to_rep((((List_mod_allocator__data___data___[get(avail,
  j)])).us_split_fields1).rec__list_mod_allocator__cell__next) = get(avail,
  (j + 1)))))))) and
  (forall j:int. (((1 <= j) and (j <= last(avail))) -> ((1 <  j) ->
  (in_range3(get(avail, (j - 1))) and (get(avail,
  j) = to_rep((((List_mod_allocator__data___data___[get(avail,
  (j - 1))])).us_split_fields1).rec__list_mod_allocator__cell__next))))))) and
  (forall j:int. (((1 <= j) and (j <= last(avail))) ->
  (forall k:int. (((1 <= k) and (k <= last(avail))) -> ((get(avail,
  j) = get(avail, k)) -> (j = k))))))) and
  (((not (List_mod_allocator__first_available___first_available___ = 0)) and
  in_range3(to_rep((((List_mod_allocator__data___data___[get(avail,
  last(avail))])).us_split_fields1).rec__list_mod_allocator__cell__next))) ->
  (contains(avail, to_rep((((List_mod_allocator__data___data___[get(avail,
  last(avail))])).us_split_fields1).rec__list_mod_allocator__cell__next)) = true))) and
  (forall e:int. ((in_range(e) and (contains1(alloc, e) = true)) ->
  in_range3(e)))) and
  (forall r:int. (((1 <= r) and (r <= 10000)) ->
  (if (to_rep1((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0) then (not (contains1(alloc,
  r) = true)) else ((not (contains(avail, r) = true)) and (contains1(alloc,
  r) = true))))))))))))

axiom model__post_axiom :
  (forall List_mod_allocator__data___data___:(int,us_rep) farray.
  (forall List_mod_allocator__first_available___first_available___:int
  [model(List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___)].
  ((in_range(List_mod_allocator__first_available___first_available___) and
  (is_well_formed(List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___) = true)) ->
  (let result = model(List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___) : us_rep3 in
  (model__function_guard(result, List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___) ->
  (model_is_well_formed(result, List_mod_allocator__data___data___,
  List_mod_allocator__first_available___first_available___) = true))))))

axiom lemma_contains_equivalent__post_axiom :
  (forall param__container:us_rep2.
  (forall param__item:int. ((in_range(param__item) and
  ((of_int(1) = true) and (not (contains1(param__container,
  param__item) = true)))) ->
  (forall e:int. ((in_range(e) and (contains1(param__container,
  e) = true)) -> (not (param__item = e)))))))

logic rliteral : resource

axiom rliteral_axiom : (resourceqtint(rliteral) = 0)

 (* "list_mod_allocator.ads", line 8, characters 0-0 *)
goal defqtvc : ((0 = no_resource) -> (in_range(no_resource) ->
  ((of_int(1) = enable_handling_of_equivalence) ->
  (forall o:status. ((to_rep1(o) = 0) -> (let o1 = { us_split_fields1 = {
  rec__list_mod_allocator__cell__stat = o;
  rec__list_mod_allocator__cell__next = rliteral } } : us_rep in
  (forall temp___521:(int,us_rep) farray.
  (((forall temp___520:int [(temp___521[temp___520])].
    (((1 <= temp___520) and (temp___520 <= 10000)) ->
    ((temp___521[temp___520]) = o1))) and
  (temp___521 = list_mod_allocator__data__aggregate_def(o1))) ->
  (forall data:(int,us_rep) farray. ((data = temp___521) ->
  (forall first_available:int. ((first_available = 1) ->
  (in_range(first_available) ->
  (forall data1:(int,us_rep) farray.
  ((exists r:int. ((r = 1) and (if (andb((if (1 <= r) then true else false),
   (if (r <= 10000) then true else false)) = true) then (exists spark__branch:bool.
                                                        exists data2:(int,us_rep) farray.
                                                        (((spark__branch = (if (r <  10000) then true else false)) and
                                                        (if (spark__branch = true) then (let o2 =
                                                        (r + 1) : int in
                                                        (in_range(o2) and
                                                        (exists o3:resource.
                                                        ((to_rep(o3) = o2) and
                                                        (data2 = (data[r <- {
                                                        us_split_fields1 = {
                                                        rec__list_mod_allocator__cell__stat =
                                                        (((data[r])).us_split_fields1).rec__list_mod_allocator__cell__stat;
                                                        rec__list_mod_allocator__cell__next =
                                                        o3 } }])))))) else (data2 = data))) and
                                                        (exists r1:int.
                                                        (((forall rr:int.
                                                          (((1 <= rr) and
                                                          (rr <= r1)) ->
                                                          (to_rep((((data1[rr])).us_split_fields1).rec__list_mod_allocator__cell__next) = (if (rr = 10000) then 0 else (rr + 1))))) and
                                                        ((to_rep((((data1[10000])).us_split_fields1).rec__list_mod_allocator__cell__next) = 0) and
                                                        (forall rr:int.
                                                        (((1 <= rr) and
                                                        (rr <= 10000)) ->
                                                        (to_rep1((((data1[rr])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0))))) and
                                                        ((andb((if (forall temp___504:int.
                                                                   (((1 <= temp___504) and
                                                                   (temp___504 <= 10000)) ->
                                                                   (if ((10000 <  temp___504) or
                                                                   ((temp___504 <  1) or
                                                                   (r1 <  temp___504))) then ((data1[temp___504]) = (data[temp___504])) else ((((data1[temp___504])).us_split_fields1).rec__list_mod_allocator__cell__stat = (((data[temp___504])).us_split_fields1).rec__list_mod_allocator__cell__stat)))) then true else false),
                                                        (if ((1 <= r1) and
                                                        (r1 <= 10000)) then true else false)) = true) and
                                                        (r1 = 10000)))))) else (data1 = data)))) ->
  (let list_mod_allocator__R158b__assume = model(data1, first_available)
  : us_rep3 in ((model__function_guard(list_mod_allocator__R158b__assume,
  data1, first_available) and
  (model_is_well_formed(list_mod_allocator__R158b__assume, data1,
  first_available) = true)) ->
  ((list_mod_allocator__R158b__assume = r158b) ->
  (let list_mod_allocator__B159b__L_5__R160b__assume =
  last(((r158b).us_split_fields3).rec__list_mod_allocator__m__t__available)
  : int in (in_range2(list_mod_allocator__B159b__L_5__R160b__assume) ->
  ((list_mod_allocator__B159b__L_5__R160b__assume = r160b) ->
  (in_range2(r160b) -> (let temp___509 = r160b : int in
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= temp___509) then true else false)) = true) ->
  (forall i1:int.
  ((forall j:int. (((1 <= j) and (j <= i1)) ->
   (get(((r158b).us_split_fields3).rec__list_mod_allocator__m__t__available,
   j) = j))) ->
  (((1 <= i1) and (i1 <= r160b)) -> ((not (i1 = temp___509)) ->
  (forall i2:int. ((i2 = (i1 + 1)) ->
  (forall j:int. (((1 <= j) and (j <= i2)) ->
  (get(((r158b).us_split_fields3).rec__list_mod_allocator__m__t__available,
  j) = j)))))))))))))))))))))))))))))))))))
