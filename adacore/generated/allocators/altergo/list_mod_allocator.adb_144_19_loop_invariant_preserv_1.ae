(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

function of_int(i: int) : bool = (if (i = 0) then false else true)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

type resource

logic resourceqtint : resource -> int

axiom resourceqtaxiom :
  (forall i:resource. ((0 <= resourceqtint(i)) and
  (resourceqtint(i) <= 10000)))

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

function to_rep(x: resource) : int = resourceqtint(x)

logic of_rep : int -> resource

axiom inversion_axiom :
  (forall x:resource [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:resource [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type status

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic to_rep1 : status -> int

logic of_rep1 : int -> status

axiom inversion_axiom1 :
  (forall x:status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:status [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_mod_allocator__cell__stat : status;
rec__list_mod_allocator__cell__next : resource }

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic list_mod_allocator__cell__stat__first__bit : int

logic list_mod_allocator__cell__stat__last__bit : int

logic list_mod_allocator__cell__stat__position : int

axiom list_mod_allocator__cell__stat__first__bit_axiom :
  (0 <= list_mod_allocator__cell__stat__first__bit)

axiom list_mod_allocator__cell__stat__last__bit_axiom :
  (list_mod_allocator__cell__stat__first__bit <  list_mod_allocator__cell__stat__last__bit)

axiom list_mod_allocator__cell__stat__position_axiom :
  (0 <= list_mod_allocator__cell__stat__position)

logic list_mod_allocator__cell__next__first__bit : int

logic list_mod_allocator__cell__next__last__bit : int

logic list_mod_allocator__cell__next__position : int

axiom list_mod_allocator__cell__next__first__bit_axiom :
  (0 <= list_mod_allocator__cell__next__first__bit)

axiom list_mod_allocator__cell__next__last__bit_axiom :
  (list_mod_allocator__cell__next__first__bit <  list_mod_allocator__cell__next__last__bit)

axiom list_mod_allocator__cell__next__position_axiom :
  (0 <= list_mod_allocator__cell__next__position)

logic dummy : us_rep

logic bool_eq : int, int -> bool

logic bool_le : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

function is_well_formed(List_mod_allocator__data___data___: (int,us_rep) farray,
  List_mod_allocator__first_available___first_available___: int) : bool =
  andb((if (not (List_mod_allocator__first_available___first_available___ = 0)) then bool_eq(to_rep1((((List_mod_allocator__data___data___[List_mod_allocator__first_available___first_available___])).us_split_fields1).rec__list_mod_allocator__cell__stat),
  0) else of_int(1)),
  (if (forall r:int. (((1 <= r) and (r <= 10000)) ->
      (((to_rep1((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0) and
      (not (to_rep((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__next) = 0))) ->
      (to_rep1((((List_mod_allocator__data___data___[to_rep((((List_mod_allocator__data___data___[r])).us_split_fields1).rec__list_mod_allocator__cell__next)])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0)))) then true else false))

type us_rep1

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dummy1 : us_rep1

logic last : us_rep1 -> int

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((0 <= extended_indexqtint(i)) and
  (extended_indexqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic get : us_rep1, int -> int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic dummy2 : int

function length(param__container: us_rep1) : int =
  ((last(param__container) + 1) - 1)

predicate dynamic_invariant(temp___expr_332: int, temp___is_init_328: bool,
  temp___skip_constant_329: bool, temp___do_toplevel_330: bool,
  temp___do_typ_inv_331: bool) = ((temp___is_init_328 = true) ->
  ((temp___do_toplevel_330 = true) -> (0 <= temp___expr_332)))

type us_rep2

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic dummy3 : us_rep2

logic contains : us_rep2, int -> bool

type us_split_fields2 = { rec__list_mod_allocator__m__t__available : us_rep1;
rec__list_mod_allocator__m__t__allocated : us_rep2 }

type us_rep3 = { us_split_fields3 : us_split_fields2
}

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic list_mod_allocator__m__t__available__first__bit : int

logic list_mod_allocator__m__t__available__last__bit : int

logic list_mod_allocator__m__t__available__position : int

axiom list_mod_allocator__m__t__available__first__bit_axiom :
  (0 <= list_mod_allocator__m__t__available__first__bit)

axiom list_mod_allocator__m__t__available__last__bit_axiom :
  (list_mod_allocator__m__t__available__first__bit <  list_mod_allocator__m__t__available__last__bit)

axiom list_mod_allocator__m__t__available__position_axiom :
  (0 <= list_mod_allocator__m__t__available__position)

logic list_mod_allocator__m__t__allocated__first__bit : int

logic list_mod_allocator__m__t__allocated__last__bit : int

logic list_mod_allocator__m__t__allocated__position : int

axiom list_mod_allocator__m__t__allocated__first__bit_axiom :
  (0 <= list_mod_allocator__m__t__allocated__first__bit)

axiom list_mod_allocator__m__t__allocated__last__bit_axiom :
  (list_mod_allocator__m__t__allocated__first__bit <  list_mod_allocator__m__t__allocated__last__bit)

axiom list_mod_allocator__m__t__allocated__position_axiom :
  (0 <= list_mod_allocator__m__t__allocated__position)

logic dummy4 : us_rep3

logic contains1 : us_rep1, int -> bool

type valid_resource

logic valid_resourceqtint : valid_resource -> int

axiom valid_resourceqtaxiom :
  (forall i:valid_resource. ((1 <= valid_resourceqtint(i)) and
  (valid_resourceqtint(i) <= 10000)))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10000))

function equal_prefix(param__left: us_rep1, param__right: us_rep1) : bool =
  andb(bool_le(length(param__left), length(param__right)),
  (if (forall n:int. (((1 <= n) and (n <= last(param__left))) ->
      (get(param__left, n) = get(param__right, n)))) then true else false))

logic add : us_rep1, int -> us_rep1

logic length1 : us_rep2 -> int

logic ole : us_rep2, us_rep2 -> bool

logic included_except : us_rep2, us_rep2, int -> bool

logic add1 : us_rep2, int -> us_rep2

logic remove : us_rep2, int -> us_rep2

logic value__size5 : int

logic object__size5 : int

logic component__size : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom5 : (0 <= alignment5)

predicate default_initial_assumption(temp___expr_300: us_rep1,
  temp___skip_top_level_301: bool) =
  ((not (temp___skip_top_level_301 = true)) -> (length(temp___expr_300) = 0))

logic is_empty : us_rep2 -> bool

predicate default_initial_assumption1(temp___expr_345: us_rep2,
  temp___skip_top_level_346: bool) =
  ((not (temp___skip_top_level_346 = true)) ->
  (is_empty(temp___expr_345) = true))

axiom last__post_axiom :
  (forall param__container:us_rep1 [last(param__container)].
  in_range2(last(param__container)))

axiom get__post_axiom :
  (forall param__container:us_rep1.
  (forall param__position:int [get(param__container, param__position)].
  ((in_range2(param__position) and ((1 <= param__position) and
  (param__position <= last(param__container)))) ->
  in_range(get(param__container, param__position)))))

axiom contains__post_axiom : true

axiom ole__post_axiom :
  (forall param__left:us_rep2. forall param__right:us_rep2 [ole(param__left,
  param__right)]. ((ole(param__left, param__right) = true) <->
  (forall item:int. ((in_range(item) and (contains(param__left,
  item) = true)) -> (contains(param__right, item) = true)))))

axiom contains__post_axiom1 : true

axiom contains__def_axiom :
  (forall param__s:us_rep1.
  (forall param__e:int [contains1(param__s, param__e)]. ((contains1(param__s,
  param__e) = true) <->
  (exists i:int. (((1 <= i) and (i <= last(param__s))) and (get(param__s,
  i) = param__e))))))

axiom lemma_contains_equivalent__post_axiom :
  (forall param__container:us_rep2.
  (forall param__item:int. ((in_range(param__item) and
  ((of_int(1) = true) and (not (contains(param__container,
  param__item) = true)))) ->
  (forall e:int. ((in_range(e) and (contains(param__container, e) = true)) ->
  (not (param__item = e)))))))

axiom length__post_axiom :
  (forall param__container:us_rep2 [length1(param__container)].
  dynamic_invariant(length1(param__container), true, false, true, true))

axiom is_empty__post_axiom :
  (forall param__container:us_rep2 [is_empty(param__container)].
  (let result = is_empty(param__container) : bool in (((result = true) <->
  (forall item:int. (not (in_range(item) and (contains(param__container,
  item) = true))))) and ((result = true) <->
  (length1(param__container) = 0)))))

axiom included_except__post_axiom :
  (forall param__left:us_rep2. forall param__right:us_rep2.
  (forall param__item:int [included_except(param__left, param__right,
  param__item)]. (in_range(param__item) -> ((included_except(param__left,
  param__right, param__item) = true) <->
  (forall e:int. ((in_range(e) and (contains(param__left, e) = true)) ->
  ((contains(param__right, e) = true) or (e = param__item))))))))

 (* "list_mod_allocator.ads", line 74, characters 0-0 *)
goal defqtvc :
  (forall data:(int,us_rep) farray. forall first_available:int.
  forall avail:us_rep1. forall alloc:us_rep2. forall unseen:us_rep2.
  (in_range(first_available) -> ((is_well_formed(data,
  first_available) = true) -> (default_initial_assumption(avail, false) ->
  (default_initial_assumption1(alloc, false) ->
  (default_initial_assumption1(unseen, false) ->
  (forall alloc1:us_rep2. forall unseen1:us_rep2.
  ((exists r:int. ((r = 1) and (if (andb((if (1 <= r) then true else false),
   (if (r <= 10000) then true else false)) = true) then (exists alloc2:us_rep2.
                                                        exists unseen2:us_rep2.
                                                        exists r1:int.
                                                        (((forall e:int.
                                                          ((in_range(e) and
                                                          (contains(alloc2,
                                                          e) = true)) ->
                                                          ((1 <= e) and
                                                          (e <= (r1 - 1))))) and
                                                        ((forall e:int.
                                                         ((in_range(e) and
                                                         (contains(unseen2,
                                                         e) = true)) ->
                                                         ((1 <= e) and
                                                         (e <= (r1 - 1))))) and
                                                        ((forall e:int.
                                                         (((1 <= e) and
                                                         (e <= 10000)) ->
                                                         ((to_rep1((((data[e])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0) ->
                                                         (not (contains(alloc2,
                                                         e) = true))))) and
                                                        ((forall e:int.
                                                         (((1 <= e) and
                                                         (e <= (r1 - 1))) ->
                                                         (if (to_rep1((((data[e])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 1) then (contains(alloc2,
                                                         e) = true) else (contains(unseen2,
                                                         e) = true)))) and
                                                        ((length1(alloc2) <= (r1 - 1)) and
                                                        (length1(unseen2) <= (r1 - 1))))))) and
                                                        ((andb((if true then true else false),
                                                        (if ((1 <= r1) and
                                                        (r1 <= 10000)) then true else false)) = true) and
                                                        ((exists o:int.
                                                         ((to_rep1((((data[r1])).us_split_fields1).rec__list_mod_allocator__cell__stat) = o) and
                                                         (exists spark__branch:bool.
                                                         ((spark__branch = (if (o = 1) then true else false)) and
                                                         (if (spark__branch = true) then ((let o1 =
                                                         add1(alloc2, r1)
                                                         : us_rep2 in
                                                         (((((length1(o1) = (length1(alloc2) + 1)) and
                                                         (contains(o1,
                                                         r1) = true)) and
                                                         (ole(alloc2,
                                                         o1) = true)) and
                                                         (included_except(o1,
                                                         alloc2,
                                                         r1) = true)) and
                                                         (alloc1 = o1))) and
                                                         (unseen1 = unseen2)) else ((let o1 =
                                                         add1(unseen2, r1)
                                                         : us_rep2 in
                                                         (((((length1(o1) = (length1(unseen2) + 1)) and
                                                         (contains(o1,
                                                         r1) = true)) and
                                                         (ole(unseen2,
                                                         o1) = true)) and
                                                         (included_except(o1,
                                                         unseen2,
                                                         r1) = true)) and
                                                         (unseen1 = o1))) and
                                                         (alloc1 = alloc2))))))) and
                                                        (r1 = 10000))))) else ((alloc1 = alloc) and
   (unseen1 = unseen))))) ->
  (forall r:int. ((r = first_available) -> (in_range(r) -> (let o =
  contains1(avail, r) : bool in (((o = true) <->
  (exists i:int. (((1 <= i) and (i <= last(avail))) and (get(avail, i) = r)))) ->
  ((andb((if (r = 0) then false else true),
  (if (o = true) then false else true)) = true) -> (let o1 = remove(unseen1,
  r) : us_rep2 in (((((length1(o1) = (length1(unseen1) - 1)) and
  (not (contains(o1, r) = true))) and (ole(o1, unseen1) = true)) and
  (included_except(unseen1, o1, r) = true)) ->
  (forall unseen2:us_rep2. ((unseen2 = o1) -> (let o2 = add(avail, r)
  : us_rep1 in ((((last(o2) = (last(avail) + 1)) and (get(o2,
  last(o2)) = r)) and (equal_prefix(avail, o2) = true)) ->
  (forall avail1:us_rep1. ((avail1 = o2) -> (((1 <= r) and (r <= 10000)) ->
  (forall o3:int.
  ((to_rep((((data[r])).us_split_fields1).rec__list_mod_allocator__cell__next) = o3) ->
  (forall r1:int. ((r1 = o3) -> (dynamic_invariant(length1(unseen2), true,
  false, true, true) ->
  (forall avail2:us_rep1. forall unseen3:us_rep2. forall r2:int.
  (((length1(unseen3) <= 10000) and
  ((length(avail2) <= (10000 - length1(unseen3))) and
  ((forall e:int. (((1 <= e) and (e <= 10000)) ->
   (((to_rep1((((data[e])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0) and
   (not (contains1(avail2, e) = true))) -> (contains(unseen3, e) = true)))) and
  (((0 <  length(avail2)) and (get(avail2, 1) = first_available)) and
  ((forall j:int. (((1 <= j) and (j <= last(avail2))) ->
   in_range3(get(avail2, j)))) and
  ((r2 = to_rep((((data[get(avail2,
  last(avail2))])).us_split_fields1).rec__list_mod_allocator__cell__next)) and
  ((forall j:int. (((1 <= j) and (j <= (last(avail2) - 1))) ->
   (to_rep((((data[get(avail2,
   j)])).us_split_fields1).rec__list_mod_allocator__cell__next) = get(avail2,
   (j + 1))))) and
  ((forall j:int. (((2 <= j) and (j <= last(avail2))) -> (get(avail2,
   j) = to_rep((((data[get(avail2,
   (j - 1))])).us_split_fields1).rec__list_mod_allocator__cell__next)))) and
  ((forall j:int. (((1 <= j) and (j <= last(avail2))) ->
   (forall k:int. (((1 <= k) and (k <= last(avail2))) -> ((get(avail2,
   j) = get(avail2, k)) -> (j = k)))))) and
  (forall e:int. (((1 <= e) and (e <= 10000)) ->
  ((to_rep1((((data[e])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 1) ->
  (not (contains1(avail2, e) = true)))))))))))))) -> (in_range(r2) ->
  (let o4 = contains1(avail2, r2) : bool in (((o4 = true) <->
  (exists i:int. (((1 <= i) and (i <= last(avail2))) and (get(avail2,
  i) = r2)))) -> ((andb((if (r2 = 0) then false else true),
  (if (o4 = true) then false else true)) = true) -> (let o5 = remove(unseen3,
  r2) : us_rep2 in (((((length1(o5) = (length1(unseen3) - 1)) and
  (not (contains(o5, r2) = true))) and (ole(o5, unseen3) = true)) and
  (included_except(unseen3, o5, r2) = true)) ->
  (forall unseen4:us_rep2. ((unseen4 = o5) -> (let o6 = add(avail2, r2)
  : us_rep1 in ((((last(o6) = (last(avail2) + 1)) and (get(o6,
  last(o6)) = r2)) and (equal_prefix(avail2, o6) = true)) ->
  (forall avail3:us_rep1. ((avail3 = o6) -> (((1 <= r2) and (r2 <= 10000)) ->
  (forall o7:int.
  ((to_rep((((data[r2])).us_split_fields1).rec__list_mod_allocator__cell__next) = o7) ->
  (forall r3:int. ((r3 = o7) -> (dynamic_invariant(length1(unseen4), true,
  false, true, true) -> ((last(avail2) <  last(avail3)) ->
  ((length1(unseen4) <= 10000) ->
  ((length(avail3) <= (10000 - length1(unseen4))) ->
  ((forall e:int. (((1 <= e) and (e <= 10000)) ->
   (((to_rep1((((data[e])).us_split_fields1).rec__list_mod_allocator__cell__stat) = 0) and
   (not (contains1(avail3, e) = true))) -> (contains(unseen4, e) = true)))) ->
  (((0 <  length(avail3)) and (get(avail3, 1) = first_available)) ->
  ((forall j:int. (((1 <= j) and (j <= last(avail3))) ->
   in_range3(get(avail3, j)))) ->
  ((r3 = to_rep((((data[get(avail3,
  last(avail3))])).us_split_fields1).rec__list_mod_allocator__cell__next)) ->
  ((forall j:int. (((1 <= j) and (j <= (last(avail3) - 1))) ->
   (to_rep((((data[get(avail3,
   j)])).us_split_fields1).rec__list_mod_allocator__cell__next) = get(avail3,
   (j + 1))))) ->
  ((forall j:int. (((2 <= j) and (j <= last(avail3))) -> (get(avail3,
   j) = to_rep((((data[get(avail3,
   (j - 1))])).us_split_fields1).rec__list_mod_allocator__cell__next)))) ->
  (forall j:int. (((1 <= j) and (j <= last(avail3))) ->
  (forall k:int. (((1 <= k) and (k <= last(avail3))) -> ((get(avail3,
  j) = get(avail3, k)) -> (j = k)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
