(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

function of_int(i: int) : bool = (if (i = 0) then false else true)

type resource

logic resourceqtint : resource -> int

axiom resourceqtaxiom :
  (forall i:resource. ((0 <= resourceqtint(i)) and
  (resourceqtint(i) <= 10000)))

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

function to_rep(x: resource) : int = resourceqtint(x)

logic of_rep : int -> resource

axiom inversion_axiom :
  (forall x:resource [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:resource [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type status

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic to_rep1 : status -> int

logic of_rep1 : int -> status

axiom inversion_axiom1 :
  (forall x:status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:status [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_allocator__cell__stat : status;
rec__list_allocator__cell__next : resource }

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic list_allocator__cell__stat__first__bit : int

logic list_allocator__cell__stat__last__bit : int

logic list_allocator__cell__stat__position : int

axiom list_allocator__cell__stat__first__bit_axiom :
  (0 <= list_allocator__cell__stat__first__bit)

axiom list_allocator__cell__stat__last__bit_axiom :
  (list_allocator__cell__stat__first__bit <  list_allocator__cell__stat__last__bit)

axiom list_allocator__cell__stat__position_axiom :
  (0 <= list_allocator__cell__stat__position)

logic list_allocator__cell__next__first__bit : int

logic list_allocator__cell__next__last__bit : int

logic list_allocator__cell__next__position : int

axiom list_allocator__cell__next__first__bit_axiom :
  (0 <= list_allocator__cell__next__first__bit)

axiom list_allocator__cell__next__last__bit_axiom :
  (list_allocator__cell__next__first__bit <  list_allocator__cell__next__last__bit)

axiom list_allocator__cell__next__position_axiom :
  (0 <= list_allocator__cell__next__position)

logic dummy : us_rep

type us_rep1

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dummy1 : us_rep1

logic bool_eq : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic dummy2 : int

logic last : us_rep1 -> int

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((0 <= extended_indexqtint(i)) and
  (extended_indexqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

predicate dynamic_invariant(temp___expr_316: int, temp___is_init_312: bool,
  temp___skip_constant_313: bool, temp___do_toplevel_314: bool,
  temp___do_typ_inv_315: bool) = ((temp___is_init_312 = true) ->
  ((temp___do_toplevel_314 = true) -> (0 <= temp___expr_316)))

function length(param__container: us_rep1) : int =
  ((last(param__container) + 1) - 1)

logic get : us_rep1, int -> int

type us_rep2

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic dummy3 : us_rep2

type us_split_fields2 = { rec__list_allocator__m__t__available : us_rep1;
rec__list_allocator__m__t__allocated : us_rep2 }

type us_rep3 = { us_split_fields3 : us_split_fields2
}

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic list_allocator__m__t__available__first__bit : int

logic list_allocator__m__t__available__last__bit : int

logic list_allocator__m__t__available__position : int

axiom list_allocator__m__t__available__first__bit_axiom :
  (0 <= list_allocator__m__t__available__first__bit)

axiom list_allocator__m__t__available__last__bit_axiom :
  (list_allocator__m__t__available__first__bit <  list_allocator__m__t__available__last__bit)

axiom list_allocator__m__t__available__position_axiom :
  (0 <= list_allocator__m__t__available__position)

logic list_allocator__m__t__allocated__first__bit : int

logic list_allocator__m__t__allocated__last__bit : int

logic list_allocator__m__t__allocated__position : int

axiom list_allocator__m__t__allocated__first__bit_axiom :
  (0 <= list_allocator__m__t__allocated__first__bit)

axiom list_allocator__m__t__allocated__last__bit_axiom :
  (list_allocator__m__t__allocated__first__bit <  list_allocator__m__t__allocated__last__bit)

axiom list_allocator__m__t__allocated__position_axiom :
  (0 <= list_allocator__m__t__allocated__position)

logic dummy4 : us_rep3

logic is_valid : us_split_fields2, (int,us_rep) farray, int -> bool

logic contains : us_rep2, int -> bool

logic length1 : us_rep2 -> int

logic contains1 : us_rep1, int -> bool

type valid_resource

logic valid_resourceqtint : valid_resource -> int

axiom valid_resourceqtaxiom :
  (forall i:valid_resource. ((1 <= valid_resourceqtint(i)) and
  (valid_resourceqtint(i) <= 10000)))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10000))

function range_equal(param__left: us_rep1, param__right: us_rep1,
  param__fst: int, param__lst: int) : bool =
  (if (forall i:int. (((param__fst <= i) and (i <= param__lst)) ->
      (get(param__left, i) = get(param__right, i)))) then true else false)

function range_shifted(param__left: us_rep1, param__right: us_rep1,
  param__fst: int, param__lst: int, param__offset: int) : bool =
  andb((if (forall i:int. (((param__fst <= i) and (i <= param__lst)) ->
           (get(param__left, i) = get(param__right, (i + param__offset))))) then true else false),
  (if (forall i:int. ((((param__fst + param__offset) <= i) and
      (i <= (param__lst + param__offset))) -> (get(param__left,
      (i - param__offset)) = get(param__right, i)))) then true else false))

logic remove : us_rep1, int -> us_rep1

logic ole : us_rep2, us_rep2 -> bool

logic included_except : us_rep2, us_rep2, int -> bool

logic add : us_rep2, int -> us_rep2

logic is_prepend : us_rep1, int, us_rep1 -> bool

logic is_add : us_rep2, int, us_rep2 -> bool

logic oeq : us_rep3, us_rep3 -> bool

function oeq1(param__left: us_rep1, param__right: us_rep1) : bool =
  andb(bool_eq(length(param__left), length(param__right)),
  (if (forall n:int. (((1 <= n) and (n <= last(param__left))) ->
      (get(param__left, n) = get(param__right, n)))) then true else false))

logic oeq2 : us_rep2, us_rep2 -> bool

logic value__size5 : int

logic object__size5 : int

logic component__size : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom5 : (0 <= alignment5)

axiom last__post_axiom :
  (forall param__container:us_rep1 [last(param__container)].
  in_range2(last(param__container)))

axiom get__post_axiom :
  (forall param__container:us_rep1.
  (forall param__position:int [get(param__container, param__position)].
  ((in_range2(param__position) and ((1 <= param__position) and
  (param__position <= last(param__container)))) ->
  in_range(get(param__container, param__position)))))

axiom contains__post_axiom : true

axiom ole__post_axiom :
  (forall param__left:us_rep2. forall param__right:us_rep2 [ole(param__left,
  param__right)]. ((ole(param__left, param__right) = true) <->
  (forall item:int. ((in_range(item) and (contains(param__left,
  item) = true)) -> (contains(param__right, item) = true)))))

axiom oeq__post_axiom :
  (forall param__left:us_rep2. forall param__right:us_rep2 [oeq2(param__left,
  param__right)]. ((oeq2(param__left, param__right) = true) <->
  ((ole(param__left, param__right) = true) and (ole(param__right,
  param__left) = true))))

axiom length__post_axiom :
  (forall param__container:us_rep2 [length1(param__container)].
  dynamic_invariant(length1(param__container), true, false, true, true))

axiom contains__post_axiom1 : true

axiom contains__def_axiom :
  (forall param__s:us_rep1.
  (forall param__e:int [contains1(param__s, param__e)]. ((contains1(param__s,
  param__e) = true) <->
  (exists i:int. (((1 <= i) and (i <= last(param__s))) and (get(param__s,
  i) = param__e))))))

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall List_allocator__m__model___model__split_fields___:us_split_fields2.
  (forall List_allocator__data___data___:(int,us_rep) farray.
  (forall List_allocator__first_available___first_available___:int
  [is_valid(List_allocator__m__model___model__split_fields___,
  List_allocator__data___data___,
  List_allocator__first_available___first_available___)].
  ((is_valid(List_allocator__m__model___model__split_fields___,
  List_allocator__data___data___,
  List_allocator__first_available___first_available___) = true) <->
  (let avail =
  (List_allocator__m__model___model__split_fields___).rec__list_allocator__m__t__available
  : us_rep1 in (let alloc =
  (List_allocator__m__model___model__split_fields___).rec__list_allocator__m__t__allocated
  : us_rep2 in (((((((length(avail) <= 10000) and
  (length1(alloc) <= 10000)) and
  ((length(avail) + length1(alloc)) = 10000)) and
  (if (not (List_allocator__first_available___first_available___ = 0)) then ((0 <  length(avail)) and
  (get(avail,
  1) = List_allocator__first_available___first_available___)) else (length(avail) = 0))) and
  (forall j:int. (((1 <= j) and (j <= last(avail))) -> ((in_range3(get(avail,
  j)) and (to_rep((((List_allocator__data___data___[get(avail,
  j)])).us_split_fields1).rec__list_allocator__cell__next) = (if (j <  last(avail)) then get(avail,
  (j + 1)) else 0))) and
  (forall k:int. (((1 <= k) and (k <= (j - 1))) -> (not (get(avail,
  j) = get(avail, k))))))))) and
  (forall e:int. ((in_range(e) and (contains(alloc, e) = true)) ->
  in_range3(e)))) and
  (forall r:int. (((1 <= r) and (r <= 10000)) ->
  (if (to_rep1((((List_allocator__data___data___[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0) then ((contains1(avail,
  r) = true) and (not (contains(alloc,
  r) = true))) else ((not (contains1(avail, r) = true)) and (contains(alloc,
  r) = true))))))))))))

axiom lemma_contains_equivalent__post_axiom :
  (forall param__container:us_rep2.
  (forall param__item:int. ((in_range(param__item) and
  ((of_int(1) = true) and (not (contains(param__container,
  param__item) = true)))) ->
  (forall e:int. ((in_range(e) and (contains(param__container, e) = true)) ->
  (not (param__item = e)))))))

axiom included_except__post_axiom :
  (forall param__left:us_rep2. forall param__right:us_rep2.
  (forall param__item:int [included_except(param__left, param__right,
  param__item)]. (in_range(param__item) -> ((included_except(param__left,
  param__right, param__item) = true) <->
  (forall e:int. ((in_range(e) and (contains(param__left, e) = true)) ->
  ((contains(param__right, e) = true) or (e = param__item))))))))

axiom is_prepend__post_axiom : true

axiom is_prepend__def_axiom :
  (forall param__s:us_rep1. forall param__result__:us_rep1.
  (forall param__e:int [is_prepend(param__s, param__e, param__result__)].
  ((is_prepend(param__s, param__e, param__result__) = true) <->
  ((((last(param__s) <  2147483647) and
  (length(param__result__) = (length(param__s) + 1))) and
  (get(param__result__, 1) = param__e)) and (range_shifted(param__s,
  param__result__, 1, last(param__s), 1) = true)))))

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall param__s:us_rep2. forall param__result__:us_rep2.
  (forall param__e:int [is_add(param__s, param__e, param__result__)].
  ((is_add(param__s, param__e, param__result__) = true) <->
  ((((not (contains(param__s, param__e) = true)) and
  (contains(param__result__, param__e) = true)) and
  (included_except(param__result__, param__s, param__e) = true)) and
  (ole(param__s, param__result__) = true)))))

axiom oeq__post_axiom1 : true

axiom oeq__def_axiom :
  (forall param__x:us_rep3. forall param__y:us_rep3 [oeq(param__x,
  param__y)]. ((oeq(param__x, param__y) = true) <->
  ((oeq1(((param__x).us_split_fields3).rec__list_allocator__m__t__available,
  ((param__y).us_split_fields3).rec__list_allocator__m__t__available) = true) and
  (oeq2(((param__x).us_split_fields3).rec__list_allocator__m__t__allocated,
  ((param__y).us_split_fields3).rec__list_allocator__m__t__allocated) = true))))

logic rliteral : resource

axiom rliteral_axiom : (resourceqtint(rliteral) = 0)

 (* "list_allocator.ads", line 89, characters 0-0 *)
goal defqtvc :
  (forall data:(int,us_rep) farray.
  forall model__split_fields:us_split_fields2. forall first_available:int.
  forall res:int. forall next_avail:int. (in_range(first_available) ->
  (in_range(res) -> ((is_valid(model__split_fields, data,
  first_available) = true) -> (let o =
  (model__split_fields).rec__list_allocator__m__t__available : us_rep1 in
  (let o1 = length(o) : int in ((dynamic_invariant(o1, true, false, true,
  true) and (o1 = ((last(o) + 1) - 1))) -> (in_range(next_avail) ->
  (forall ma:us_rep1.
  ((ma = (model__split_fields).rec__list_allocator__m__t__available) ->
  (forall data1:(int,us_rep) farray.
  forall model__split_fields1:us_split_fields2. forall first_available1:int.
  forall res1:int.
  ((exists spark__branch:bool.
   ((spark__branch = (if (first_available = 0) then false else true)) and
   (if (spark__branch = true) then ((res1 = first_available) and
   (((1 <= first_available) and (first_available <= 10000)) and
   (exists o2:int.
   ((to_rep((((data[first_available])).us_split_fields1).rec__list_allocator__cell__next) = o2) and
   (exists next_avail1:int. ((next_avail1 = o2) and
   (exists o3:status. ((to_rep1(o3) = 1) and (((1 <= res1) and
   (res1 <= 10000)) and ((data1 = (data[res1 <- { us_split_fields1 = {
   rec__list_allocator__cell__stat = o3; rec__list_allocator__cell__next =
   rliteral } }])) and ((first_available1 = next_avail1) and (let o4 =
   (model__split_fields).rec__list_allocator__m__t__available : us_rep1 in
   (let o5 = remove(o4, 1) : us_rep1 in ((((last(o5) = (last(o4) - 1)) and
   (range_equal(o4, o5, 1, (1 - 1)) = true)) and (range_shifted(o5, o4, 1,
   last(o5), 1) = true)) and
   (exists model__split_fields2:us_split_fields2. ((model__split_fields2 = {
   rec__list_allocator__m__t__available = o5;
   rec__list_allocator__m__t__allocated =
   (model__split_fields).rec__list_allocator__m__t__allocated }) and
   (let o6 = (model__split_fields2).rec__list_allocator__m__t__allocated
   : us_rep2 in (let o7 = add(o6, res1) : us_rep2 in
   (((((length1(o7) = (length1(o6) + 1)) and (contains(o7, res1) = true)) and
   (ole(o6, o7) = true)) and (included_except(o7, o6, res1) = true)) and
   ((model__split_fields1 = { rec__list_allocator__m__t__available =
   (model__split_fields2).rec__list_allocator__m__t__available;
   rec__list_allocator__m__t__allocated = o7 }) and
   (forall j:int. (((1 <= j) and
   (j <= last((model__split_fields1).rec__list_allocator__m__t__available))) ->
   (forall k:int. (((1 <= k) and (k <= (j - 1))) ->
   (not (get((model__split_fields1).rec__list_allocator__m__t__available,
   j) = get((model__split_fields1).rec__list_allocator__m__t__available,
   k))))))))))))))))))))))))))) else ((((res1 = 0) and (data1 = data)) and
   (model__split_fields1 = model__split_fields)) and
   (first_available1 = first_available))))) ->
  (((o1 = 0) -> ((res1 = 0) and (oeq({ us_split_fields3 =
  model__split_fields1 }, { us_split_fields3 = model__split_fields
  }) = true))) -> (((not (o1 = 0)) ->
  ((is_prepend((model__split_fields1).rec__list_allocator__m__t__available,
  res1,
  (model__split_fields).rec__list_allocator__m__t__available) = true) and
  (is_add((model__split_fields).rec__list_allocator__m__t__allocated, res1,
  (model__split_fields1).rec__list_allocator__m__t__allocated) = true))) ->
  (forall r:int. (((1 <= r) and (r <= 10000)) ->
  ((to_rep1((((data1[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0) ->
  (contains1((model__split_fields1).rec__list_allocator__m__t__available,
  r) = true))))))))))))))))))
