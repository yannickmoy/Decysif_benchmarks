;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort resource 0)

;; "resource'int"
(declare-fun resourceqtint (resource) Int)

;; "resource'axiom"
(assert
  (forall ((i resource))
    (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 10000))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 10000)))

;; "to_rep"
(define-fun to_rep ((x resource)) Int
  (resourceqtint x))

;; "of_rep"
(declare-fun of_rep (Int) resource)

;; "inversion_axiom"
(assert
  (forall ((x resource))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x resource)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort status 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep1 (status) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) status)

;; "inversion_axiom"
(assert
  (forall ((x status))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x status)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__list_allocator__cell__stat status)(rec__list_allocator__cell__next resource)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const list_allocator__cell__stat__first__bit Int)

(declare-const list_allocator__cell__stat__last__bit Int)

(declare-const list_allocator__cell__stat__position Int)

;; "list_allocator__cell__stat__first__bit_axiom"
(assert (<= 0 list_allocator__cell__stat__first__bit))

;; "list_allocator__cell__stat__last__bit_axiom"
(assert
  (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))

;; "list_allocator__cell__stat__position_axiom"
(assert (<= 0 list_allocator__cell__stat__position))

(declare-const list_allocator__cell__next__first__bit Int)

(declare-const list_allocator__cell__next__last__bit Int)

(declare-const list_allocator__cell__next__position Int)

;; "list_allocator__cell__next__first__bit_axiom"
(assert (<= 0 list_allocator__cell__next__first__bit))

;; "list_allocator__cell__next__last__bit_axiom"
(assert
  (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))

;; "list_allocator__cell__next__position_axiom"
(assert (<= 0 list_allocator__cell__next__position))

(declare-const dummy us_rep)

(declare-sort us_rep1 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep1)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 Int)

;; "last"
(declare-fun last (us_rep1) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_316 Int) (temp___is_init_312 Bool) (temp___skip_constant_313 Bool) (temp___do_toplevel_314 Bool) (temp___do_typ_inv_315 Bool)) Bool
  (=>
    (= temp___is_init_312 true)
    (=> (= temp___do_toplevel_314 true) (<= 0 temp___expr_316))))

;; "length"
(define-fun length ((param__container us_rep1)) Int
  (- (+ (last param__container) 1) 1))

;; "get"
(declare-fun get (us_rep1
  Int) Int)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy3 us_rep2)

(declare-datatypes ((us_split_fields2 0))
  (((us_split_fieldsqtmk1
    (rec__list_allocator__m__t__available us_rep1)(rec__list_allocator__m__t__allocated us_rep2)))))

(declare-datatypes ((us_rep3 0))
  (((us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const list_allocator__m__t__available__first__bit Int)

(declare-const list_allocator__m__t__available__last__bit Int)

(declare-const list_allocator__m__t__available__position Int)

;; "list_allocator__m__t__available__first__bit_axiom"
(assert (<= 0 list_allocator__m__t__available__first__bit))

;; "list_allocator__m__t__available__last__bit_axiom"
(assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; "list_allocator__m__t__available__position_axiom"
(assert (<= 0 list_allocator__m__t__available__position))

(declare-const list_allocator__m__t__allocated__first__bit Int)

(declare-const list_allocator__m__t__allocated__last__bit Int)

(declare-const list_allocator__m__t__allocated__position Int)

;; "list_allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; "list_allocator__m__t__allocated__last__bit_axiom"
(assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; "list_allocator__m__t__allocated__position_axiom"
(assert (<= 0 list_allocator__m__t__allocated__position))

(declare-const dummy4 us_rep3)

;; "is_valid"
(declare-fun is_valid (us_split_fields2
  (Array Int us_rep)
  Int) Bool)

;; "contains"
(declare-fun contains (us_rep2
  Int) Bool)

;; "length"
(declare-fun length1 (us_rep2) Int)

;; "contains"
(declare-fun contains1 (us_rep1
  Int) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 10000)))

;; "range_equal"
(define-fun range_equal ((param__left us_rep1) (param__right us_rep1) (param__fst Int) (param__lst Int)) Bool
  (ite (forall ((i Int))
         (=>
           (and (<= param__fst i) (<= i param__lst))
           (= (get param__left i) (get param__right i))))
    true
    false))

;; "range_shifted"
(define-fun range_shifted ((param__left us_rep1) (param__right us_rep1) (param__fst Int) (param__lst Int) (param__offset Int)) Bool
  (and (ite (forall ((i Int))
              (=>
                (and (<= param__fst i) (<= i param__lst))
                (= (get param__left i) (get param__right (+ i param__offset)))))
         true
         false) (ite (forall ((i Int))
                       (=>
                         (and
                           (<= (+ param__fst param__offset) i)
                           (<= i (+ param__lst param__offset)))
                         (= (get param__left (- i param__offset)) (get
                                                                    param__right
                                                                    i))))
                  true
                  false)))

;; "remove"
(declare-fun remove (us_rep1
  Int) us_rep1)

;; "ole"
(declare-fun ole (us_rep2
  us_rep2) Bool)

;; "included_except"
(declare-fun included_except (us_rep2
  us_rep2
  Int) Bool)

;; "add"
(declare-fun add (us_rep2
  Int) us_rep2)

;; "is_prepend"
(declare-fun is_prepend (us_rep1
  Int
  us_rep1) Bool)

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "oeq"
(declare-fun oeq (us_rep3
  us_rep3) Bool)

;; "oeq"
(define-fun oeq1 ((param__left us_rep1) (param__right us_rep1)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "oeq"
(declare-fun oeq2 (us_rep2
  us_rep2) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "contains__post_axiom"
(assert true)

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((item Int))
           (=>
             (and (in_range item) (= (contains param__left item) true))
             (= (contains param__right item) true)))) :pattern ((ole
                                                                  param__left
                                                                  param__right)) )))

;; "oeq__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (! (=
         (= (oeq2 param__left param__right) true)
         (and
           (= (ole param__left param__right) true)
           (= (ole param__right param__left) true))) :pattern ((oeq2
                                                                 param__left
                                                                 param__right)) )))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (dynamic_invariant (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "contains__post_axiom"
(assert true)

;; "contains__def_axiom"
(assert
  (forall ((param__s us_rep1))
    (forall ((param__e Int))
      (! (=
           (= (contains1 param__s param__e) true)
           (exists ((i Int))
             (and
               (and (<= 1 i) (<= i (last param__s)))
               (= (get param__s i) param__e)))) :pattern ((contains1
                                                            param__s
                                                            param__e)) ))))

;; "is_valid__post_axiom"
(assert true)

;; "is_valid__def_axiom"
(assert
  (forall ((List_allocator__m__model___model__split_fields___ us_split_fields2))
    (forall ((List_allocator__data___data___ (Array Int us_rep)))
      (forall ((List_allocator__first_available___first_available___ Int))
        (! (=
             (= (is_valid
                  List_allocator__m__model___model__split_fields___
                  List_allocator__data___data___
                  List_allocator__first_available___first_available___) true)
             (let ((avail (rec__list_allocator__m__t__available
                            List_allocator__m__model___model__split_fields___)))
               (let ((alloc (rec__list_allocator__m__t__allocated
                              List_allocator__m__model___model__split_fields___)))
                 (and
                   (and
                     (and
                       (and
                         (and
                           (and
                             (<= (length avail) 10000)
                             (<= (length1 alloc) 10000))
                           (= (+ (length avail) (length1 alloc)) 10000))
                         (ite (not
                                (= List_allocator__first_available___first_available___ 0))
                           (and
                             (< 0 (length avail))
                             (= (get avail 1) List_allocator__first_available___first_available___))
                           (= (length avail) 0)))
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j (last avail)))
                           (and
                             (and
                               (in_range3 (get avail j))
                               (= (to_rep
                                    (rec__list_allocator__cell__next
                                      (us_split_fields1
                                        (select List_allocator__data___data___ 
                                        (get
                                          avail
                                          j))))) (ite (< j (last avail))
                                                   (get avail (+ j 1))
                                                   0)))
                             (forall ((k Int))
                               (=>
                                 (and (<= 1 k) (<= k (- j 1)))
                                 (not (= (get avail j) (get avail k)))))))))
                     (forall ((e Int))
                       (=>
                         (and (in_range e) (= (contains alloc e) true))
                         (in_range3 e))))
                   (forall ((r Int))
                     (=>
                       (and (<= 1 r) (<= r 10000))
                       (ite (= (to_rep1
                                 (rec__list_allocator__cell__stat
                                   (us_split_fields1
                                     (select List_allocator__data___data___ r)))) 0)
                         (and
                           (= (contains1 avail r) true)
                           (not (= (contains alloc r) true)))
                         (and
                           (not (= (contains1 avail r) true))
                           (= (contains alloc r) true))))))))) :pattern (
        (is_valid
          List_allocator__m__model___model__split_fields___
          List_allocator__data___data___
          List_allocator__first_available___first_available___)) )))))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__item Int))
      (=>
        (and
          (in_range param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range e) (= (contains param__container e) true))
            (not (= param__item e))))))))

;; "included_except__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (forall ((param__item Int))
      (! (=>
           (in_range param__item)
           (=
             (= (included_except param__left param__right param__item) true)
             (forall ((e Int))
               (=>
                 (and (in_range e) (= (contains param__left e) true))
                 (or (= (contains param__right e) true) (= e param__item)))))) :pattern (
      (included_except
        param__left
        param__right
        param__item)) ))))

;; "is_prepend__post_axiom"
(assert true)

;; "is_prepend__def_axiom"
(assert
  (forall ((param__s us_rep1) (param__result__ us_rep1))
    (forall ((param__e Int))
      (! (=
           (= (is_prepend param__s param__e param__result__) true)
           (and
             (and
               (and
                 (< (last param__s) 2147483647)
                 (= (length param__result__) (+ (length param__s) 1)))
               (= (get param__result__ 1) param__e))
             (= (range_shifted param__s param__result__ 1 (last param__s) 1) true))) :pattern (
      (is_prepend
        param__s
        param__e
        param__result__)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s us_rep2) (param__result__ us_rep2))
    (forall ((param__e Int))
      (! (=
           (= (is_add param__s param__e param__result__) true)
           (and
             (and
               (and
                 (not (= (contains param__s param__e) true))
                 (= (contains param__result__ param__e) true))
               (= (included_except param__result__ param__s param__e) true))
             (= (ole param__s param__result__) true))) :pattern ((is_add
                                                                   param__s
                                                                   param__e
                                                                   param__result__)) ))))

;; "oeq__post_axiom"
(assert true)

;; "oeq__def_axiom"
(assert
  (forall ((param__x us_rep3) (param__y us_rep3))
    (! (=
         (= (oeq param__x param__y) true)
         (and
           (= (oeq1
                (rec__list_allocator__m__t__available
                  (us_split_fields3 param__x))
                (rec__list_allocator__m__t__available
                  (us_split_fields3 param__y))) true)
           (= (oeq2
                (rec__list_allocator__m__t__allocated
                  (us_split_fields3 param__x))
                (rec__list_allocator__m__t__allocated
                  (us_split_fields3 param__y))) true))) :pattern ((oeq
                                                                    param__x
                                                                    param__y)) )))

(declare-const rliteral resource)

;; "rliteral_axiom"
(assert (= (resourceqtint rliteral) 0))

;; Goal "def'vc"
;; File "list_allocator.ads", line 89, characters 0-0
(assert
  (not
  (forall ((data (Array Int us_rep)) (model__split_fields us_split_fields2) (first_available Int) (res Int) (next_avail Int))
    (=>
      (in_range first_available)
      (=>
        (in_range res)
        (=>
          (= (is_valid model__split_fields data first_available) true)
          (let ((o (rec__list_allocator__m__t__available model__split_fields)))
            (let ((o1 (length o)))
              (=>
                (and
                  (dynamic_invariant o1 true false true true)
                  (= o1 (- (+ (last o) 1) 1)))
                (=>
                  (in_range next_avail)
                  (forall ((ma us_rep1))
                    (=>
                      (= ma (rec__list_allocator__m__t__available
                              model__split_fields))
                      (forall ((data1 (Array Int us_rep)) (model__split_fields1 us_split_fields2) (first_available1 Int) (res1 Int))
                        (=>
                          (exists ((spark__branch Bool))
                            (and
                              (= spark__branch (ite (= first_available 0)
                                                 false
                                                 true))
                              (ite (= spark__branch true)
                                (and
                                  (= res1 first_available)
                                  (and
                                    (and
                                      (<= 1 first_available)
                                      (<= first_available 10000))
                                    (exists ((o2 Int))
                                      (and
                                        (= (to_rep
                                             (rec__list_allocator__cell__next
                                               (us_split_fields1
                                                 (select data first_available)))) o2)
                                        (exists ((next_avail1 Int))
                                          (and
                                            (= next_avail1 o2)
                                            (exists ((o3 status))
                                              (and
                                                (= (to_rep1 o3) 1)
                                                (and
                                                  (and
                                                    (<= 1 res1)
                                                    (<= res1 10000))
                                                  (and
                                                    (= data1 (store data res1 
                                                    (us_repqtmk
                                                      (us_split_fieldsqtmk
                                                        o3
                                                        rliteral))))
                                                    (and
                                                      (= first_available1 next_avail1)
                                                      (let ((o4 (rec__list_allocator__m__t__available
                                                                  model__split_fields)))
                                                        (let ((o5 (remove
                                                                    o4
                                                                    1)))
                                                          (and
                                                            (and
                                                              (and
                                                                (= (last o5) (- 
                                                                (last
                                                                  o4) 1))
                                                                (= (range_equal
                                                                    o4
                                                                    o5
                                                                    1
                                                                    (- 1 1)) true))
                                                              (= (range_shifted
                                                                   o5
                                                                   o4
                                                                   1
                                                                   (last o5)
                                                                   1) true))
                                                            (exists ((model__split_fields2 us_split_fields2))
                                                              (and
                                                                (= model__split_fields2 
                                                                (us_split_fieldsqtmk1
                                                                  o5
                                                                  (rec__list_allocator__m__t__allocated
                                                                    model__split_fields)))
                                                                (let ((o6 
                                                                  (rec__list_allocator__m__t__allocated
                                                                    model__split_fields2)))
                                                                  (let ((o7 
                                                                    (add
                                                                    o6
                                                                    res1)))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (length1
                                                                    o7) (+ 
                                                                    (length1
                                                                    o6) 1))
                                                                    (= 
                                                                    (contains
                                                                    o7
                                                                    res1) true))
                                                                    (= 
                                                                    (ole
                                                                    o6
                                                                    o7) true))
                                                                    (= 
                                                                    (included_except
                                                                    o7
                                                                    o6
                                                                    res1) true))
                                                                    (and
                                                                    (= model__split_fields1 
                                                                    (us_split_fieldsqtmk1
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields2)
                                                                    o7))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 
                                                                    (last
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields1))))
                                                                    (forall 
                                                                    ((k Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 k)
                                                                    (<= k (- j 1)))
                                                                    (not
                                                                    (= 
                                                                    (get
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields1)
                                                                    j) 
                                                                    (get
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields1)
                                                                    k)))))))))))))))))))))))))))
                                (and
                                  (and
                                    (and (= res1 0) (= data1 data))
                                    (= model__split_fields1 model__split_fields))
                                  (= first_available1 first_available)))))
                          (=>
                            (=>
                              (= o1 0)
                              (and
                                (= res1 0)
                                (= (oeq
                                     (us_repqtmk1 model__split_fields1)
                                     (us_repqtmk1 model__split_fields)) true)))
                            (=>
                              (=>
                                (not (= o1 0))
                                (and
                                  (= (is_prepend
                                       (rec__list_allocator__m__t__available
                                         model__split_fields1)
                                       res1
                                       (rec__list_allocator__m__t__available
                                         model__split_fields)) true)
                                  (= (is_add
                                       (rec__list_allocator__m__t__allocated
                                         model__split_fields)
                                       res1
                                       (rec__list_allocator__m__t__allocated
                                         model__split_fields1)) true)))
                              (forall ((r Int))
                                (=>
                                  (and (<= 1 r) (<= r 10000))
                                  (=>
                                    (= (to_rep1
                                         (rec__list_allocator__cell__stat
                                           (us_split_fields1
                                             (select data1 r)))) 0)
                                    (= (contains1
                                         (rec__list_allocator__m__t__available
                                           model__split_fields1)
                                         r) true))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
