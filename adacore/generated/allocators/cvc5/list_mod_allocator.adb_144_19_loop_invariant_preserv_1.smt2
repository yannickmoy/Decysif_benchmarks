;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort resource 0)

;; "resource'int"
(declare-fun resourceqtint (resource) Int)

;; "resource'axiom"
(assert
  (forall ((i resource))
    (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 10000))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 10000)))

;; "to_rep"
(define-fun to_rep ((x resource)) Int
  (resourceqtint x))

;; "of_rep"
(declare-fun of_rep (Int) resource)

;; "inversion_axiom"
(assert
  (forall ((x resource))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x resource)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort status 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep1 (status) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) status)

;; "inversion_axiom"
(assert
  (forall ((x status))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x status)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__list_mod_allocator__cell__stat status)(rec__list_mod_allocator__cell__next resource)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const list_mod_allocator__cell__stat__first__bit Int)

(declare-const list_mod_allocator__cell__stat__last__bit Int)

(declare-const list_mod_allocator__cell__stat__position Int)

;; "list_mod_allocator__cell__stat__first__bit_axiom"
(assert (<= 0 list_mod_allocator__cell__stat__first__bit))

;; "list_mod_allocator__cell__stat__last__bit_axiom"
(assert
  (< list_mod_allocator__cell__stat__first__bit list_mod_allocator__cell__stat__last__bit))

;; "list_mod_allocator__cell__stat__position_axiom"
(assert (<= 0 list_mod_allocator__cell__stat__position))

(declare-const list_mod_allocator__cell__next__first__bit Int)

(declare-const list_mod_allocator__cell__next__last__bit Int)

(declare-const list_mod_allocator__cell__next__position Int)

;; "list_mod_allocator__cell__next__first__bit_axiom"
(assert (<= 0 list_mod_allocator__cell__next__first__bit))

;; "list_mod_allocator__cell__next__last__bit_axiom"
(assert
  (< list_mod_allocator__cell__next__first__bit list_mod_allocator__cell__next__last__bit))

;; "list_mod_allocator__cell__next__position_axiom"
(assert (<= 0 list_mod_allocator__cell__next__position))

(declare-const dummy us_rep)

;; "is_well_formed"
(define-fun is_well_formed ((List_mod_allocator__data___data___ (Array Int us_rep)) (List_mod_allocator__first_available___first_available___ Int)) Bool
  (and (ite (not
              (= List_mod_allocator__first_available___first_available___ 0))
         (= (to_rep1
              (rec__list_mod_allocator__cell__stat
                (us_split_fields1
                  (select List_mod_allocator__data___data___ List_mod_allocator__first_available___first_available___)))) 0)
         (distinct 1 0)) (ite (forall ((r Int))
                                (=>
                                  (and (<= 1 r) (<= r 10000))
                                  (=>
                                    (and
                                      (= (to_rep1
                                           (rec__list_mod_allocator__cell__stat
                                             (us_split_fields1
                                               (select List_mod_allocator__data___data___ r)))) 0)
                                      (not
                                        (= (to_rep
                                             (rec__list_mod_allocator__cell__next
                                               (us_split_fields1
                                                 (select List_mod_allocator__data___data___ r)))) 0)))
                                    (= (to_rep1
                                         (rec__list_mod_allocator__cell__stat
                                           (us_split_fields1
                                             (select List_mod_allocator__data___data___ 
                                             (to_rep
                                               (rec__list_mod_allocator__cell__next
                                                 (us_split_fields1
                                                   (select List_mod_allocator__data___data___ r)))))))) 0))))
                           true
                           false)))

(declare-sort us_rep1 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep1)

;; "last"
(declare-fun last (us_rep1) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "get"
(declare-fun get (us_rep1
  Int) Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 Int)

;; "length"
(define-fun length ((param__container us_rep1)) Int
  (- (+ (last param__container) 1) 1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_332 Int) (temp___is_init_328 Bool) (temp___skip_constant_329 Bool) (temp___do_toplevel_330 Bool) (temp___do_typ_inv_331 Bool)) Bool
  (=>
    (= temp___is_init_328 true)
    (=> (= temp___do_toplevel_330 true) (<= 0 temp___expr_332))))

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy3 us_rep2)

;; "contains"
(declare-fun contains (us_rep2
  Int) Bool)

(declare-datatypes ((us_split_fields2 0))
  (((us_split_fieldsqtmk1
    (rec__list_mod_allocator__m__t__available us_rep1)(rec__list_mod_allocator__m__t__allocated us_rep2)))))

(declare-datatypes ((us_rep3 0))
  (((us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const list_mod_allocator__m__t__available__first__bit Int)

(declare-const list_mod_allocator__m__t__available__last__bit Int)

(declare-const list_mod_allocator__m__t__available__position Int)

;; "list_mod_allocator__m__t__available__first__bit_axiom"
(assert (<= 0 list_mod_allocator__m__t__available__first__bit))

;; "list_mod_allocator__m__t__available__last__bit_axiom"
(assert
  (< list_mod_allocator__m__t__available__first__bit list_mod_allocator__m__t__available__last__bit))

;; "list_mod_allocator__m__t__available__position_axiom"
(assert (<= 0 list_mod_allocator__m__t__available__position))

(declare-const list_mod_allocator__m__t__allocated__first__bit Int)

(declare-const list_mod_allocator__m__t__allocated__last__bit Int)

(declare-const list_mod_allocator__m__t__allocated__position Int)

;; "list_mod_allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 list_mod_allocator__m__t__allocated__first__bit))

;; "list_mod_allocator__m__t__allocated__last__bit_axiom"
(assert
  (< list_mod_allocator__m__t__allocated__first__bit list_mod_allocator__m__t__allocated__last__bit))

;; "list_mod_allocator__m__t__allocated__position_axiom"
(assert (<= 0 list_mod_allocator__m__t__allocated__position))

(declare-const dummy4 us_rep3)

;; "contains"
(declare-fun contains1 (us_rep1
  Int) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 10000)))

;; "equal_prefix"
(define-fun equal_prefix ((param__left us_rep1) (param__right us_rep1)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

;; "add"
(declare-fun add (us_rep1
  Int) us_rep1)

;; "length"
(declare-fun length1 (us_rep2) Int)

;; "ole"
(declare-fun ole (us_rep2
  us_rep2) Bool)

;; "included_except"
(declare-fun included_except (us_rep2
  us_rep2
  Int) Bool)

;; "add"
(declare-fun add1 (us_rep2
  Int) us_rep2)

;; "remove"
(declare-fun remove (us_rep2
  Int) us_rep2)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_300 us_rep1) (temp___skip_top_level_301 Bool)) Bool
  (=>
    (not (= temp___skip_top_level_301 true))
    (= (length temp___expr_300) 0)))

;; "is_empty"
(declare-fun is_empty (us_rep2) Bool)

;; "default_initial_assumption"
(define-fun default_initial_assumption1 ((temp___expr_345 us_rep2) (temp___skip_top_level_346 Bool)) Bool
  (=>
    (not (= temp___skip_top_level_346 true))
    (= (is_empty temp___expr_345) true)))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "contains__post_axiom"
(assert true)

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((item Int))
           (=>
             (and (in_range item) (= (contains param__left item) true))
             (= (contains param__right item) true)))) :pattern ((ole
                                                                  param__left
                                                                  param__right)) )))

;; "contains__post_axiom"
(assert true)

;; "contains__def_axiom"
(assert
  (forall ((param__s us_rep1))
    (forall ((param__e Int))
      (! (=
           (= (contains1 param__s param__e) true)
           (exists ((i Int))
             (and
               (and (<= 1 i) (<= i (last param__s)))
               (= (get param__s i) param__e)))) :pattern ((contains1
                                                            param__s
                                                            param__e)) ))))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__item Int))
      (=>
        (and
          (in_range param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range e) (= (contains param__container e) true))
            (not (= param__item e))))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (dynamic_invariant (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((item Int))
               (not
                 (and
                   (in_range item)
                   (= (contains param__container item) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "included_except__post_axiom"
(assert
  (forall ((param__left us_rep2) (param__right us_rep2))
    (forall ((param__item Int))
      (! (=>
           (in_range param__item)
           (=
             (= (included_except param__left param__right param__item) true)
             (forall ((e Int))
               (=>
                 (and (in_range e) (= (contains param__left e) true))
                 (or (= (contains param__right e) true) (= e param__item)))))) :pattern (
      (included_except
        param__left
        param__right
        param__item)) ))))

;; Goal "def'vc"
;; File "list_mod_allocator.ads", line 74, characters 0-0
(assert
  (not
  (forall ((data (Array Int us_rep)) (first_available Int) (avail us_rep1) (alloc us_rep2) (unseen us_rep2))
    (=>
      (in_range first_available)
      (=>
        (= (is_well_formed data first_available) true)
        (=>
          (default_initial_assumption avail false)
          (=>
            (default_initial_assumption1 alloc false)
            (=>
              (default_initial_assumption1 unseen false)
              (forall ((alloc1 us_rep2) (unseen1 us_rep2))
                (=>
                  (exists ((r Int))
                    (and
                      (= r 1)
                      (ite (= (and (ite (<= 1 r) true false) (ite (<= r 10000)
                                                               true
                                                               false)) true)
                        (exists ((alloc2 us_rep2) (unseen2 us_rep2) (r1 Int))
                          (and
                            (and
                              (forall ((e Int))
                                (=>
                                  (and
                                    (in_range e)
                                    (= (contains alloc2 e) true))
                                  (and (<= 1 e) (<= e (- r1 1)))))
                              (and
                                (forall ((e Int))
                                  (=>
                                    (and
                                      (in_range e)
                                      (= (contains unseen2 e) true))
                                    (and (<= 1 e) (<= e (- r1 1)))))
                                (and
                                  (forall ((e Int))
                                    (=>
                                      (and (<= 1 e) (<= e 10000))
                                      (=>
                                        (= (to_rep1
                                             (rec__list_mod_allocator__cell__stat
                                               (us_split_fields1
                                                 (select data e)))) 0)
                                        (not (= (contains alloc2 e) true)))))
                                  (and
                                    (forall ((e Int))
                                      (=>
                                        (and (<= 1 e) (<= e (- r1 1)))
                                        (ite (= (to_rep1
                                                  (rec__list_mod_allocator__cell__stat
                                                    (us_split_fields1
                                                      (select data e)))) 1)
                                          (= (contains alloc2 e) true)
                                          (= (contains unseen2 e) true))))
                                    (and
                                      (<= (length1 alloc2) (- r1 1))
                                      (<= (length1 unseen2) (- r1 1)))))))
                            (and
                              (= (and (ite true true false) (ite (and
                                                                   (<= 1 r1)
                                                                   (<= r1 10000))
                                                              true
                                                              false)) true)
                              (and
                                (exists ((o Int))
                                  (and
                                    (= (to_rep1
                                         (rec__list_mod_allocator__cell__stat
                                           (us_split_fields1
                                             (select data r1)))) o)
                                    (exists ((spark__branch Bool))
                                      (and
                                        (= spark__branch (ite (= o 1)
                                                           true
                                                           false))
                                        (ite (= spark__branch true)
                                          (and
                                            (let ((o1 (add1 alloc2 r1)))
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (= (length1 o1) (+ 
                                                      (length1
                                                        alloc2) 1))
                                                      (= (contains o1 r1) true))
                                                    (= (ole alloc2 o1) true))
                                                  (= (included_except
                                                       o1
                                                       alloc2
                                                       r1) true))
                                                (= alloc1 o1)))
                                            (= unseen1 unseen2))
                                          (and
                                            (let ((o1 (add1 unseen2 r1)))
                                              (and
                                                (and
                                                  (and
                                                    (and
                                                      (= (length1 o1) (+ 
                                                      (length1
                                                        unseen2) 1))
                                                      (= (contains o1 r1) true))
                                                    (= (ole unseen2 o1) true))
                                                  (= (included_except
                                                       o1
                                                       unseen2
                                                       r1) true))
                                                (= unseen1 o1)))
                                            (= alloc1 alloc2)))))))
                                (= r1 10000)))))
                        (and (= alloc1 alloc) (= unseen1 unseen)))))
                  (forall ((r Int))
                    (=>
                      (= r first_available)
                      (=>
                        (in_range r)
                        (let ((o (contains1 avail r)))
                          (=>
                            (=
                              (= o true)
                              (exists ((i Int))
                                (and
                                  (and (<= 1 i) (<= i (last avail)))
                                  (= (get avail i) r))))
                            (=>
                              (= (and (ite (= r 0) false true) (ite (= o true)
                                                                 false
                                                                 true)) true)
                              (let ((o1 (remove unseen1 r)))
                                (=>
                                  (and
                                    (and
                                      (and
                                        (= (length1 o1) (- (length1 unseen1) 1))
                                        (not (= (contains o1 r) true)))
                                      (= (ole o1 unseen1) true))
                                    (= (included_except unseen1 o1 r) true))
                                  (forall ((unseen2 us_rep2))
                                    (=>
                                      (= unseen2 o1)
                                      (let ((o2 (add avail r)))
                                        (=>
                                          (and
                                            (and
                                              (= (last o2) (+ (last avail) 1))
                                              (= (get o2 (last o2)) r))
                                            (= (equal_prefix avail o2) true))
                                          (forall ((avail1 us_rep1))
                                            (=>
                                              (= avail1 o2)
                                              (=>
                                                (and (<= 1 r) (<= r 10000))
                                                (forall ((o3 Int))
                                                  (=>
                                                    (= (to_rep
                                                         (rec__list_mod_allocator__cell__next
                                                           (us_split_fields1
                                                             (select data r)))) o3)
                                                    (forall ((r1 Int))
                                                      (=>
                                                        (= r1 o3)
                                                        (=>
                                                          (dynamic_invariant
                                                            (length1 unseen2)
                                                            true
                                                            false
                                                            true
                                                            true)
                                                          (forall ((avail2 us_rep1) (unseen3 us_rep2) (r2 Int))
                                                            (=>
                                                              (and
                                                                (<= (length1
                                                                    unseen3) 10000)
                                                                (and
                                                                  (<= 
                                                                  (length
                                                                    avail2) (- 10000 
                                                                  (length1
                                                                    unseen3)))
                                                                  (and
                                                                    (forall 
                                                                    ((e Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 e)
                                                                    (<= e 10000))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    (rec__list_mod_allocator__cell__stat
                                                                    (us_split_fields1
                                                                    (select data e)))) 0)
                                                                    (not
                                                                    (= 
                                                                    (contains1
                                                                    avail2
                                                                    e) true)))
                                                                    (= 
                                                                    (contains
                                                                    unseen3
                                                                    e) true))))
                                                                    (and
                                                                    (and
                                                                    (< 0 
                                                                    (length
                                                                    avail2))
                                                                    (= 
                                                                    (get
                                                                    avail2
                                                                    1) first_available))
                                                                    (and
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 
                                                                    (last
                                                                    avail2)))
                                                                    (in_range3
                                                                    (get
                                                                    avail2
                                                                    j))))
                                                                    (and
                                                                    (= r2 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data 
                                                                    (get
                                                                    avail2
                                                                    (last
                                                                    avail2)))))))
                                                                    (and
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j (- 
                                                                    (last
                                                                    avail2) 1)))
                                                                    (= 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data 
                                                                    (get
                                                                    avail2
                                                                    j))))) 
                                                                    (get
                                                                    avail2
                                                                    (+ j 1)))))
                                                                    (and
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 2 j)
                                                                    (<= j 
                                                                    (last
                                                                    avail2)))
                                                                    (= 
                                                                    (get
                                                                    avail2
                                                                    j) 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data 
                                                                    (get
                                                                    avail2
                                                                    (- j 1)))))))))
                                                                    (and
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 
                                                                    (last
                                                                    avail2)))
                                                                    (forall 
                                                                    ((k Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 k)
                                                                    (<= k 
                                                                    (last
                                                                    avail2)))
                                                                    (=>
                                                                    (= 
                                                                    (get
                                                                    avail2
                                                                    j) 
                                                                    (get
                                                                    avail2
                                                                    k))
                                                                    (= j k))))))
                                                                    (forall 
                                                                    ((e Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 e)
                                                                    (<= e 10000))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    (rec__list_mod_allocator__cell__stat
                                                                    (us_split_fields1
                                                                    (select data e)))) 1)
                                                                    (not
                                                                    (= 
                                                                    (contains1
                                                                    avail2
                                                                    e) true))))))))))))))
                                                              (=>
                                                                (in_range r2)
                                                                (let ((o4 
                                                                  (contains1
                                                                    avail2
                                                                    r2)))
                                                                  (=>
                                                                    (=
                                                                    (= o4 true)
                                                                    (exists 
                                                                    ((i Int))
                                                                    (and
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 
                                                                    (last
                                                                    avail2)))
                                                                    (= 
                                                                    (get
                                                                    avail2
                                                                    i) r2))))
                                                                    (=>
                                                                    (= (and 
                                                                    (ite (= r2 0)
                                                                    false
                                                                    true) 
                                                                    (ite (= o4 true)
                                                                    false
                                                                    true)) true)
                                                                    (let ((o5 
                                                                    (remove
                                                                    unseen3
                                                                    r2)))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (length1
                                                                    o5) (- 
                                                                    (length1
                                                                    unseen3) 1))
                                                                    (not
                                                                    (= 
                                                                    (contains
                                                                    o5
                                                                    r2) true)))
                                                                    (= 
                                                                    (ole
                                                                    o5
                                                                    unseen3) true))
                                                                    (= 
                                                                    (included_except
                                                                    unseen3
                                                                    o5
                                                                    r2) true))
                                                                    (forall 
                                                                    ((unseen4 us_rep2))
                                                                    (=>
                                                                    (= unseen4 o5)
                                                                    (let ((o6 
                                                                    (add
                                                                    avail2
                                                                    r2)))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (last
                                                                    o6) (+ 
                                                                    (last
                                                                    avail2) 1))
                                                                    (= 
                                                                    (get
                                                                    o6
                                                                    (last o6)) r2))
                                                                    (= 
                                                                    (equal_prefix
                                                                    avail2
                                                                    o6) true))
                                                                    (forall 
                                                                    ((avail3 us_rep1))
                                                                    (=>
                                                                    (= avail3 o6)
                                                                    (=>
                                                                    (and
                                                                    (<= 1 r2)
                                                                    (<= r2 10000))
                                                                    (forall 
                                                                    ((o7 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data r2)))) o7)
                                                                    (forall 
                                                                    ((r3 Int))
                                                                    (=>
                                                                    (= r3 o7)
                                                                    (=>
                                                                    (dynamic_invariant
                                                                    (length1
                                                                    unseen4)
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (=>
                                                                    (< 
                                                                    (last
                                                                    avail2) 
                                                                    (last
                                                                    avail3))
                                                                    (=>
                                                                    (<= 
                                                                    (length1
                                                                    unseen4) 10000)
                                                                    (=>
                                                                    (<= 
                                                                    (length
                                                                    avail3) (- 10000 
                                                                    (length1
                                                                    unseen4)))
                                                                    (=>
                                                                    (forall 
                                                                    ((e Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 e)
                                                                    (<= e 10000))
                                                                    (=>
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    (rec__list_mod_allocator__cell__stat
                                                                    (us_split_fields1
                                                                    (select data e)))) 0)
                                                                    (not
                                                                    (= 
                                                                    (contains1
                                                                    avail3
                                                                    e) true)))
                                                                    (= 
                                                                    (contains
                                                                    unseen4
                                                                    e) true))))
                                                                    (=>
                                                                    (and
                                                                    (< 0 
                                                                    (length
                                                                    avail3))
                                                                    (= 
                                                                    (get
                                                                    avail3
                                                                    1) first_available))
                                                                    (=>
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 
                                                                    (last
                                                                    avail3)))
                                                                    (in_range3
                                                                    (get
                                                                    avail3
                                                                    j))))
                                                                    (=>
                                                                    (= r3 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data 
                                                                    (get
                                                                    avail3
                                                                    (last
                                                                    avail3)))))))
                                                                    (=>
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j (- 
                                                                    (last
                                                                    avail3) 1)))
                                                                    (= 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data 
                                                                    (get
                                                                    avail3
                                                                    j))))) 
                                                                    (get
                                                                    avail3
                                                                    (+ j 1)))))
                                                                    (=>
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 2 j)
                                                                    (<= j 
                                                                    (last
                                                                    avail3)))
                                                                    (= 
                                                                    (get
                                                                    avail3
                                                                    j) 
                                                                    (to_rep
                                                                    (rec__list_mod_allocator__cell__next
                                                                    (us_split_fields1
                                                                    (select data 
                                                                    (get
                                                                    avail3
                                                                    (- j 1)))))))))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 
                                                                    (last
                                                                    avail3)))
                                                                    (forall 
                                                                    ((k Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 k)
                                                                    (<= k 
                                                                    (last
                                                                    avail3)))
                                                                    (=>
                                                                    (= 
                                                                    (get
                                                                    avail3
                                                                    j) 
                                                                    (get
                                                                    avail3
                                                                    k))
                                                                    (= j k)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
