;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 Int)

;; "last"
(declare-fun last (us_rep) Int)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "length"
(define-fun length ((param__container us_rep)) Int
  (- (+ (last param__container) 1) 1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_316 Int) (temp___is_init_312 Bool) (temp___skip_constant_313 Bool) (temp___do_toplevel_314 Bool) (temp___do_typ_inv_315 Bool)) Bool
  (=>
    (= temp___is_init_312 true)
    (=> (= temp___do_toplevel_314 true) (<= 0 temp___expr_316))))

;; "get"
(declare-fun get (us_rep
  Int) Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 10000)))

(declare-sort us_rep1 0)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 us_rep1)

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__list_allocator__m__t__available us_rep)(rec__list_allocator__m__t__allocated us_rep1)))))

(declare-datatypes ((us_rep2 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const list_allocator__m__t__available__first__bit Int)

(declare-const list_allocator__m__t__available__last__bit Int)

(declare-const list_allocator__m__t__available__position Int)

;; "list_allocator__m__t__available__first__bit_axiom"
(assert (<= 0 list_allocator__m__t__available__first__bit))

;; "list_allocator__m__t__available__last__bit_axiom"
(assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; "list_allocator__m__t__available__position_axiom"
(assert (<= 0 list_allocator__m__t__available__position))

(declare-const list_allocator__m__t__allocated__first__bit Int)

(declare-const list_allocator__m__t__allocated__last__bit Int)

(declare-const list_allocator__m__t__allocated__position Int)

;; "list_allocator__m__t__allocated__first__bit_axiom"
(assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; "list_allocator__m__t__allocated__last__bit_axiom"
(assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; "list_allocator__m__t__allocated__position_axiom"
(assert (<= 0 list_allocator__m__t__allocated__position))

(declare-const dummy3 us_rep2)

;; "is_empty"
(declare-fun is_empty (us_rep1) Bool)

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_353 us_rep2) (temp___skip_top_level_354 Bool)) Bool
  (and
    (= (length
         (rec__list_allocator__m__t__available
           (us_split_fields1 temp___expr_353))) 0)
    (= (is_empty
         (rec__list_allocator__m__t__allocated
           (us_split_fields1 temp___expr_353))) true)))

;; "length"
(declare-fun length1 (us_rep1) Int)

;; "contains"
(declare-fun contains (us_rep
  Int) Bool)

;; "contains"
(declare-fun contains1 (us_rep1
  Int) Bool)

;; "equal_prefix"
(define-fun equal_prefix ((param__left us_rep) (param__right us_rep)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

;; "add"
(declare-fun add (us_rep
  Int) us_rep)

(declare-const enable_handling_of_equivalence Bool)

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (in_range (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range1 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "contains__post_axiom"
(assert true)

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (dynamic_invariant (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "contains__def_axiom"
(assert
  (forall ((param__s us_rep))
    (forall ((param__e Int))
      (! (=
           (= (contains param__s param__e) true)
           (exists ((i Int))
             (and
               (and (<= 1 i) (<= i (last param__s)))
               (= (get param__s i) param__e)))) :pattern ((contains
                                                            param__s
                                                            param__e)) ))))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((item Int))
               (not
                 (and
                   (in_range1 item)
                   (= (contains1 param__container item) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (forall ((param__item Int))
      (=>
        (and
          (in_range1 param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains1 param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range1 e) (= (contains1 param__container e) true))
            (not (= param__item e))))))))

;; Goal "def'vc"
;; File "list_allocator.ads", line 28, characters 0-0
(assert
  (not
  (forall ((model__split_fields us_split_fields))
    (=>
      (= (distinct 1 0) enable_handling_of_equivalence)
      (=>
        (default_initial_assumption (us_repqtmk model__split_fields) false)
        (=>
          (= (length
               (rec__list_allocator__m__t__available model__split_fields)) 0)
          (forall ((r Int))
            (=>
              (= r 1)
              (=>
                (= (and (ite (<= 1 r) true false) (ite (<= r 10000)
                                                    true
                                                    false)) true)
                (let ((o (rec__list_allocator__m__t__available
                           model__split_fields)))
                  (let ((o1 (add o r)))
                    (=>
                      (and
                        (and
                          (= (last o1) (+ (last o) 1))
                          (= (get o1 (last o1)) r))
                        (= (equal_prefix o o1) true))
                      (forall ((model__split_fields1 us_split_fields))
                        (=>
                          (= model__split_fields1 (us_split_fieldsqtmk
                                                    o1
                                                    (rec__list_allocator__m__t__allocated
                                                      model__split_fields)))
                          (let ((o2 (rec__list_allocator__m__t__allocated
                                      model__split_fields1)))
                            (let ((temp___inv_590 (is_empty o2)))
                              (=>
                                (and
                                  (=
                                    (= temp___inv_590 true)
                                    (forall ((item Int))
                                      (not
                                        (and
                                          (in_range1 item)
                                          (= (contains1 o2 item) true)))))
                                  (=
                                    (= temp___inv_590 true)
                                    (= (length1 o2) 0)))
                                (forall ((model__split_fields2 us_split_fields) (r1 Int))
                                  (=>
                                    (and
                                      (= (is_empty
                                           (rec__list_allocator__m__t__allocated
                                             model__split_fields2)) true)
                                      (and
                                        (= (length1
                                             (rec__list_allocator__m__t__allocated
                                               model__split_fields2)) 0)
                                        (and
                                          (= (last
                                               (rec__list_allocator__m__t__available
                                                 model__split_fields2)) r1)
                                          (and
                                            (= (get
                                                 (rec__list_allocator__m__t__available
                                                   model__split_fields2)
                                                 1) 1)
                                            (and
                                              (forall ((rr Int))
                                                (=>
                                                  (and (<= 1 rr) (<= rr r1))
                                                  (= (get
                                                       (rec__list_allocator__m__t__available
                                                         model__split_fields2)
                                                       rr) rr)))
                                              (forall ((rr Int))
                                                (=>
                                                  (and (<= 1 rr) (<= rr r1))
                                                  (= (contains
                                                       (rec__list_allocator__m__t__available
                                                         model__split_fields2)
                                                       rr) true))))))))
                                    (=>
                                      (= (and (ite (= (rec__list_allocator__m__t__allocated
                                                        model__split_fields2) 
                                                (rec__list_allocator__m__t__allocated
                                                  model__split_fields))
                                                true
                                                false) (ite (and
                                                              (<= 1 r1)
                                                              (<= r1 10000))
                                                         true
                                                         false)) true)
                                      (=>
                                        (not (= r1 10000))
                                        (forall ((r2 Int))
                                          (=>
                                            (= r2 (+ r1 1))
                                            (let ((o3 (rec__list_allocator__m__t__available
                                                        model__split_fields2)))
                                              (let ((o4 (add o3 r2)))
                                                (=>
                                                  (and
                                                    (and
                                                      (= (last o4) (+ 
                                                      (last
                                                        o3) 1))
                                                      (= (get o4 (last o4)) r2))
                                                    (= (equal_prefix o3 o4) true))
                                                  (forall ((model__split_fields3 us_split_fields))
                                                    (=>
                                                      (= model__split_fields3 
                                                      (us_split_fieldsqtmk
                                                        o4
                                                        (rec__list_allocator__m__t__allocated
                                                          model__split_fields2)))
                                                      (let ((o5 (rec__list_allocator__m__t__allocated
                                                                  model__split_fields3)))
                                                        (let ((temp___inv_5901 
                                                          (is_empty
                                                            o5)))
                                                          (=>
                                                            (and
                                                              (=
                                                                (= temp___inv_5901 true)
                                                                (forall 
                                                                  ((item Int))
                                                                  (not
                                                                    (and
                                                                    (in_range1
                                                                    item)
                                                                    (= 
                                                                    (contains1
                                                                    o5
                                                                    item) true)))))
                                                              (=
                                                                (= temp___inv_5901 true)
                                                                (= (length1
                                                                    o5) 0)))
                                                            (=>
                                                              (= (is_empty
                                                                   (rec__list_allocator__m__t__allocated
                                                                    model__split_fields3)) true)
                                                              (=>
                                                                (= (length1
                                                                    (rec__list_allocator__m__t__allocated
                                                                    model__split_fields3)) 0)
                                                                (=>
                                                                  (= 
                                                                  (last
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields3)) r2)
                                                                  (=>
                                                                    (= 
                                                                    (get
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields3)
                                                                    1) 1)
                                                                    (=>
                                                                    (forall 
                                                                    ((rr Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 rr)
                                                                    (<= rr r2))
                                                                    (= 
                                                                    (get
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields3)
                                                                    rr) rr)))
                                                                    (forall 
                                                                    ((rr Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 rr)
                                                                    (<= rr r2))
                                                                    (= 
                                                                    (contains
                                                                    (rec__list_allocator__m__t__available
                                                                    model__split_fields3)
                                                                    rr) true)))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
