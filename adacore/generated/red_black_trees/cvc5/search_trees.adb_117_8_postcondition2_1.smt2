;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ((us_split_fields2 0))
  (((us_split_fieldsqtmk1
    (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ((us_rep1 0))
  (((us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "size"
(declare-fun size (us_rep1) Int)

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 us_rep2)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const dummy3 Int)

;; "last"
(declare-fun last (us_rep2) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "length"
(define-fun length ((param__container us_rep2)) Int
  (- (+ (last param__container) 1) 1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_369 Int) (temp___is_init_365 Bool) (temp___skip_constant_366 Bool) (temp___do_toplevel_367 Bool) (temp___do_typ_inv_368 Bool)) Bool
  (=>
    (= temp___is_init_365 true)
    (=> (= temp___do_toplevel_367 true) (<= 0 temp___expr_369))))

;; "get"
(declare-fun get (us_rep2
  Int) Int)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

(declare-datatypes ((us_split_fields4 0))
  (((us_split_fieldsqtmk2
    (rec__tree_model__path_type__a us_rep2)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ((us_rep3 0))
  (((us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy4 us_rep3)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep3))

;; "position"
(declare-fun position (us_rep1
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment6))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_403 (Array Int us_rep3)) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool) (temp___do_typ_inv_402 Bool)) Bool
  (forall ((temp___404 Int))
    (=>
      (and (<= 1 temp___404) (<= temp___404 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields5 (select temp___expr_403 temp___404)))) 100))))

(declare-const f us_rep1)

(declare-const root Int)

(declare-const i Int)

(declare-const j Int)

;; "ole"
(define-fun ole ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

(declare-const m (Array Int us_rep3))

;; "tree_structure"
(declare-fun tree_structure (us_rep1) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_274 us_rep1) (temp___is_init_270 Bool) (temp___skip_constant_271 Bool) (temp___do_toplevel_272 Bool) (temp___do_typ_inv_273 Bool)) Bool
  (=>
    (= temp___do_typ_inv_273 true)
    (= (tree_structure temp___expr_274) true)))

;; "olt"
(define-fun olt ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "size__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (! (=>
         (dynamic_invariant2 param__f true false true true)
         (in_range (size param__f))) :pattern ((size param__f)) )))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__f true false true true)
             (in_range4 param__i))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__f true false true true)
             (in_range4 param__i))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size param__f) 0) (= result 0)))
               (in_range result)))) :pattern ((parent param__f param__i)) ))))

;; "position__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range4 param__i))
             (not (= (parent param__f param__i) 0)))
           (in_range3 (position param__f param__i))) :pattern ((position
                                                                 param__f
                                                                 param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range3 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep2) (param__s2 us_rep2))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range4 param__root))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields5 (select result param__root)))) 0))
                     (forall ((i1 Int))
                       (=>
                         (and (<= 1 i1) (<= i1 100))
                         (=>
                           (not (= i1 param__root))
                           (ite (and
                                  (not (= (parent param__f i1) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields5
                                         (select result (parent param__f i1)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields5 (select result i1))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result i1))) true)))))))
                   (forall ((i1 Int))
                     (=>
                       (and (<= 1 i1) (<= i1 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5 (select result i1))) true)
                              (not (= i1 param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields5
                                  (select result (parent param__f i1))))
                              (position param__f i1)
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i1)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i1)))) 0)))))
                 (forall ((i1 Int))
                   (=>
                     (and (<= 1 i1) (<= i1 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result i1))) true)
                       (forall ((j1 Int))
                         (=>
                           (and (<= 1 j1) (<= j1 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result j1))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result i1)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result j1)))) true))
                             (= j1 i1))))))))
               (dynamic_invariant1 result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "tree_structure__post_axiom"
(assert true)

;; Goal "def'vc"
;; File "search_trees.adb", line 104, characters 0-0
(assert
  (not
  (=>
    (dynamic_invariant2 f true false true true)
    (=>
      (in_range4 root)
      (=>
        (in_range4 i)
        (=>
          (in_range4 j)
          (=>
            (and
              (and
                (= (valid_root f root) true)
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select (model1 f root) i))) true))
              (= (rec__tree_model__path_type__k
                   (us_split_fields5 (select (model1 f root) j))) true))
            (let ((o root))
              (let ((o1 f))
                (let ((search_trees__find_root__m__assume (model1 o1 o)))
                  (=>
                    (and
                      (dynamic_invariant1
                        search_trees__find_root__m__assume
                        true
                        false
                        true
                        true)
                      (and
                        (and
                          (and
                            (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5
                                     (select search_trees__find_root__m__assume o))) true)
                              (= (last
                                   (rec__tree_model__path_type__a
                                     (us_split_fields5
                                       (select search_trees__find_root__m__assume o)))) 0))
                            (forall ((i1 Int))
                              (=>
                                (and (<= 1 i1) (<= i1 100))
                                (=>
                                  (not (= i1 o))
                                  (ite (and
                                         (not (= (parent o1 i1) 0))
                                         (= (rec__tree_model__path_type__k
                                              (us_split_fields5
                                                (select search_trees__find_root__m__assume 
                                                (parent
                                                  o1
                                                  i1)))) true))
                                    (= (rec__tree_model__path_type__k
                                         (us_split_fields5
                                           (select search_trees__find_root__m__assume i1))) true)
                                    (not
                                      (= (rec__tree_model__path_type__k
                                           (us_split_fields5
                                             (select search_trees__find_root__m__assume i1))) true)))))))
                          (forall ((i1 Int))
                            (=>
                              (and (<= 1 i1) (<= i1 100))
                              (ite (and
                                     (= (rec__tree_model__path_type__k
                                          (us_split_fields5
                                            (select search_trees__find_root__m__assume i1))) true)
                                     (not (= i1 o)))
                                (= (is_add
                                     (rec__tree_model__path_type__a
                                       (us_split_fields5
                                         (select search_trees__find_root__m__assume 
                                         (parent
                                           o1
                                           i1))))
                                     (position o1 i1)
                                     (rec__tree_model__path_type__a
                                       (us_split_fields5
                                         (select search_trees__find_root__m__assume i1)))) true)
                                (= (last
                                     (rec__tree_model__path_type__a
                                       (us_split_fields5
                                         (select search_trees__find_root__m__assume i1)))) 0)))))
                        (forall ((i1 Int))
                          (=>
                            (and (<= 1 i1) (<= i1 100))
                            (=>
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5
                                     (select search_trees__find_root__m__assume i1))) true)
                              (forall ((j1 Int))
                                (=>
                                  (and (<= 1 j1) (<= j1 100))
                                  (=>
                                    (and
                                      (= (rec__tree_model__path_type__k
                                           (us_split_fields5
                                             (select search_trees__find_root__m__assume j1))) true)
                                      (= (oeq
                                           (rec__tree_model__path_type__a
                                             (us_split_fields5
                                               (select search_trees__find_root__m__assume i1)))
                                           (rec__tree_model__path_type__a
                                             (us_split_fields5
                                               (select search_trees__find_root__m__assume j1)))) true))
                                    (= j1 i1)))))))))
                    (=>
                      (= search_trees__find_root__m__assume m)
                      (=>
                        (dynamic_invariant1 m true false true true)
                        (forall ((ki Int))
                          (=>
                            (= ki i)
                            (=>
                              (in_range4 ki)
                              (forall ((kj Int))
                                (=>
                                  (= kj j)
                                  (=>
                                    (in_range4 kj)
                                    (forall ((ki1 Int))
                                      (=>
                                        (ite (not (= ki kj))
                                          (and
                                            (=>
                                              (= (rec__tree_model__path_type__k
                                                   (us_split_fields5
                                                     (select m ki))) true)
                                              (let ((o2 (rec__tree_model__path_type__a
                                                          (us_split_fields5
                                                            (select m 
                                                            i)))))
                                                (let ((o3 (rec__tree_model__path_type__a
                                                            (us_split_fields5
                                                              (select 
                                                              m ki)))))
                                                  (=
                                                    (= (ole o3 o2) true)
                                                    (and
                                                      (<= (length o3) 
                                                      (length
                                                        o2))
                                                      (forall ((n Int))
                                                        (=>
                                                          (and
                                                            (<= 1 n)
                                                            (<= n (last o3)))
                                                          (= (get o3 n) 
                                                          (get
                                                            o2
                                                            n)))))))))
                                            (exists ((ki2 Int) (kj1 Int))
                                              (and
                                                (and
                                                  (and
                                                    (= (rec__tree_model__path_type__k
                                                         (us_split_fields5
                                                           (select m ki2))) true)
                                                    (= (ole
                                                         (rec__tree_model__path_type__a
                                                           (us_split_fields5
                                                             (select 
                                                             m ki2)))
                                                         (rec__tree_model__path_type__a
                                                           (us_split_fields5
                                                             (select 
                                                             m i)))) true))
                                                  (and
                                                    (and
                                                      (= (rec__tree_model__path_type__k
                                                           (us_split_fields5
                                                             (select 
                                                             m kj1))) true)
                                                      (= (ole
                                                           (rec__tree_model__path_type__a
                                                             (us_split_fields5
                                                               (select 
                                                               m kj1)))
                                                           (rec__tree_model__path_type__a
                                                             (us_split_fields5
                                                               (select 
                                                               m j)))) true))
                                                    (and
                                                      (=>
                                                        (< (length
                                                             (rec__tree_model__path_type__a
                                                               (us_split_fields5
                                                                 (select 
                                                                 m kj1)))) 
                                                        (length
                                                          (rec__tree_model__path_type__a
                                                            (us_split_fields5
                                                              (select 
                                                              m ki2)))))
                                                        (= kj1 j))
                                                      (=>
                                                        (< (length
                                                             (rec__tree_model__path_type__a
                                                               (us_split_fields5
                                                                 (select 
                                                                 m ki2)))) 
                                                        (length
                                                          (rec__tree_model__path_type__a
                                                            (us_split_fields5
                                                              (select 
                                                              m kj1)))))
                                                        (= ki2 i)))))
                                                (and
                                                  (= (and (ite (and
                                                                 (in_range4
                                                                   ki2)
                                                                 (in_range4
                                                                   kj1))
                                                            true
                                                            false) (ite 
                                                                    (not
                                                                    (= ki2 kj1))
                                                                    true
                                                                    false)) true)
                                                  (exists ((kj2 Int))
                                                    (and
                                                      (let ((o2 (rec__tree_model__path_type__a
                                                                  (us_split_fields5
                                                                    (select 
                                                                    m kj1)))))
                                                        (let ((o3 (length o2)))
                                                          (and
                                                            (and
                                                              (dynamic_invariant
                                                                o3
                                                                true
                                                                false
                                                                true
                                                                true)
                                                              (= o3 (- (+ 
                                                              (last
                                                                o2) 1) 1)))
                                                            (let ((o4 
                                                              (rec__tree_model__path_type__a
                                                                (us_split_fields5
                                                                  (select 
                                                                  m ki2)))))
                                                              (let ((o5 
                                                                (length
                                                                  o4)))
                                                                (and
                                                                  (and
                                                                    (dynamic_invariant
                                                                    o5
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o5 (- (+ 
                                                                    (last
                                                                    o4) 1) 1)))
                                                                  (exists 
                                                                    ((spark__branch Bool))
                                                                    (and
                                                                    (= spark__branch 
                                                                    (ite (< o3 o5)
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch true)
                                                                    (and
                                                                    (let ((o6 
                                                                    f))
                                                                    (let ((o7 
                                                                    (parent
                                                                    o6
                                                                    ki2)))
                                                                    (and
                                                                    (and
                                                                    (in_range
                                                                    o7)
                                                                    (and
                                                                    (=>
                                                                    (= 
                                                                    (valid_root
                                                                    o6
                                                                    ki2) true)
                                                                    (= o7 0))
                                                                    (=>
                                                                    (= 
                                                                    (size
                                                                    o6) 0)
                                                                    (= o7 0))))
                                                                    (and
                                                                    (in_range4
                                                                    o7)
                                                                    (= ki1 o7)))))
                                                                    (= kj2 kj1))
                                                                    (let ((o6 
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields5
                                                                    (select 
                                                                    m ki2)))))
                                                                    (let ((o7 
                                                                    (length
                                                                    o6)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant
                                                                    o7
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o7 (- (+ 
                                                                    (last
                                                                    o6) 1) 1)))
                                                                    (let ((o8 
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields5
                                                                    (select 
                                                                    m kj1)))))
                                                                    (let ((o9 
                                                                    (length
                                                                    o8)))
                                                                    (and
                                                                    (and
                                                                    (dynamic_invariant
                                                                    o9
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= o9 (- (+ 
                                                                    (last
                                                                    o8) 1) 1)))
                                                                    (exists 
                                                                    ((spark__branch1 Bool))
                                                                    (and
                                                                    (= spark__branch1 
                                                                    (ite (< o7 o9)
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch1 true)
                                                                    (and
                                                                    (let ((o10 
                                                                    f))
                                                                    (let ((o11 
                                                                    (parent
                                                                    o10
                                                                    kj1)))
                                                                    (and
                                                                    (and
                                                                    (in_range
                                                                    o11)
                                                                    (and
                                                                    (=>
                                                                    (= 
                                                                    (valid_root
                                                                    o10
                                                                    kj1) true)
                                                                    (= o11 0))
                                                                    (=>
                                                                    (= 
                                                                    (size
                                                                    o10) 0)
                                                                    (= o11 0))))
                                                                    (and
                                                                    (in_range4
                                                                    o11)
                                                                    (= kj2 o11)))))
                                                                    (= ki1 ki2))
                                                                    (let ((o10 
                                                                    f))
                                                                    (let ((o11 
                                                                    (parent
                                                                    o10
                                                                    ki2)))
                                                                    (and
                                                                    (and
                                                                    (in_range
                                                                    o11)
                                                                    (and
                                                                    (=>
                                                                    (= 
                                                                    (valid_root
                                                                    o10
                                                                    ki2) true)
                                                                    (= o11 0))
                                                                    (=>
                                                                    (= 
                                                                    (size
                                                                    o10) 0)
                                                                    (= o11 0))))
                                                                    (and
                                                                    (in_range4
                                                                    o11)
                                                                    (and
                                                                    (= ki1 o11)
                                                                    (let ((o12 
                                                                    f))
                                                                    (let ((o13 
                                                                    (parent
                                                                    o12
                                                                    kj1)))
                                                                    (and
                                                                    (and
                                                                    (in_range
                                                                    o13)
                                                                    (and
                                                                    (=>
                                                                    (= 
                                                                    (valid_root
                                                                    o12
                                                                    kj1) true)
                                                                    (= o13 0))
                                                                    (=>
                                                                    (= 
                                                                    (size
                                                                    o12) 0)
                                                                    (= o13 0))))
                                                                    (and
                                                                    (in_range4
                                                                    o13)
                                                                    (= kj2 o13))))))))))))))))))))))))))))
                                                      (= ki1 kj2)))))))
                                          (= ki1 ki))
                                        (forall ((search_trees__find_root__result Int))
                                          (=>
                                            (= search_trees__find_root__result ki1)
                                            (= (ole
                                                 (rec__tree_model__path_type__a
                                                   (us_split_fields5
                                                     (select (model1 f root) search_trees__find_root__result)))
                                                 (rec__tree_model__path_type__a
                                                   (us_split_fields5
                                                     (select (model1 f root) 
                                                     i)))) true))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
