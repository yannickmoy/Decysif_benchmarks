;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep1 ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep2 (position_type) Int)

;; "of_rep"
(declare-fun of_rep2 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields2)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep1)(rec__search_trees__search_tree__values (Array Int natural))))))

(declare-datatypes ()
  ((us_split_fields__ref1
   (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields4)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const search_trees__search_tree__root__first__bit Int)

(declare-const search_trees__search_tree__root__last__bit Int)

(declare-const search_trees__search_tree__root__position Int)

;; "search_trees__search_tree__root__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__root__first__bit))

;; "search_trees__search_tree__root__last__bit_axiom"
(assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; "search_trees__search_tree__root__position_axiom"
(assert (<= 0 search_trees__search_tree__root__position))

(declare-const search_trees__search_tree__struct__first__bit Int)

(declare-const search_trees__search_tree__struct__last__bit Int)

(declare-const search_trees__search_tree__struct__position Int)

;; "search_trees__search_tree__struct__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__struct__first__bit))

;; "search_trees__search_tree__struct__last__bit_axiom"
(assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; "search_trees__search_tree__struct__position_axiom"
(assert (<= 0 search_trees__search_tree__struct__position))

(declare-const search_trees__search_tree__values__first__bit Int)

(declare-const search_trees__search_tree__values__last__bit Int)

(declare-const search_trees__search_tree__values__position Int)

;; "search_trees__search_tree__values__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__values__first__bit))

;; "search_trees__search_tree__values__last__bit_axiom"
(assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; "search_trees__search_tree__values__position_axiom"
(assert (<= 0 search_trees__search_tree__values__position))

(declare-const dummy2 us_rep2)

;; "size"
(declare-fun size (us_rep2) Int)

;; "size"
(declare-fun size1 (us_rep1) Int)

;; "root"
(define-fun root ((param__t us_rep2)) Int
  (to_rep1
    (rec__search_trees__search_tree__root (us_split_fields5 param__t))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "position"
(declare-fun position (us_rep1
  Int) Int)

(declare-sort us_rep3 0)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const dummy3 us_rep3)

;; "get"
(declare-fun get (us_rep3
  Int) Int)

;; "last"
(declare-fun last (us_rep3) Int)

(declare-datatypes ()
  ((us_split_fields6
   (us_split_fieldsqtmk3
   (rec__tree_model__path_type__a us_rep3)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep4 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy4 us_rep4)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep4))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const dummy5 Int)

;; "length"
(define-fun length ((param__container us_rep3)) Int
  (- (+ (last param__container) 1) 1))

;; "oeq"
(define-fun oeq ((param__left us_rep3) (param__right us_rep3)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep3
  Int
  us_rep3) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size2 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment8))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_403 (Array Int us_rep4)) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool) (temp___do_typ_inv_402 Bool)) Bool
  (forall ((temp___404 Int))
    (=>
      (and (<= 1 temp___404) (<= temp___404 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields7 (select temp___expr_403 temp___404)))) 100))))

;; "model"
(declare-fun model2 (us_rep2) (Array Int us_rep4))

;; "peek"
(declare-fun peek (us_rep1
  Int
  Int) Int)

;; "peek"
(declare-fun peek1 (us_rep2
  Int
  Int) Int)

(declare-sort us_rep5 0)

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const dummy6 us_rep5)

;; "tree_structure"
(declare-fun tree_structure (us_rep1) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_299 us_rep2) (temp___is_init_295 Bool) (temp___skip_constant_296 Bool) (temp___do_toplevel_297 Bool) (temp___do_typ_inv_298 Bool)) Bool
  (=>
    (= temp___do_typ_inv_298 true)
    (= (tree_structure
         (rec__search_trees__search_tree__struct
           (us_split_fields5 temp___expr_299))) true)))

;; "ordered_leafs"
(declare-fun ordered_leafs (us_rep1
  Int
  (Array Int natural)) Bool)

;; "type_invariant"
(define-fun type_invariant ((temp___318 us_rep2)) Bool
  (ite (= (size1
            (rec__search_trees__search_tree__struct
              (us_split_fields5 temp___318))) 0)
    (= (to_rep1
         (rec__search_trees__search_tree__root (us_split_fields5 temp___318))) 0)
    (and
      (and
        (not
          (= (to_rep1
               (rec__search_trees__search_tree__root
                 (us_split_fields5 temp___318))) 0))
        (= (valid_root
             (rec__search_trees__search_tree__struct
               (us_split_fields5 temp___318))
             (to_rep1
               (rec__search_trees__search_tree__root
                 (us_split_fields5 temp___318)))) true))
      (= (ordered_leafs
           (rec__search_trees__search_tree__struct
             (us_split_fields5 temp___318))
           (to_rep1
             (rec__search_trees__search_tree__root
               (us_split_fields5 temp___318)))
           (rec__search_trees__search_tree__values
             (us_split_fields5 temp___318))) true))))

(declare-const i Int)

;; "olt"
(define-fun olt ((param__left us_rep3) (param__right us_rep3)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "ordered_prefix"
(declare-fun ordered_prefix ((Array Int us_rep4)
  (Array Int natural)
  Int
  Int) Bool)

;; "all_less_than"
(declare-fun all_less_than (us_rep1
  Int
  (Array Int natural)
  Int) Bool)

;; "all_more_than"
(declare-fun all_more_than (us_rep1
  Int
  (Array Int natural)
  Int) Bool)

;; "ole"
(define-fun ole ((param__left us_rep3) (param__right us_rep3)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

;; "is_concat"
(declare-fun is_concat (us_rep3
  us_rep3
  us_rep3) Bool)

;; "oeq"
(declare-fun oeq1 ((Array Int us_rep4)
  (Array Int us_rep4)) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_274 us_rep1) (temp___is_init_270 Bool) (temp___skip_constant_271 Bool) (temp___do_toplevel_272 Bool) (temp___do_typ_inv_273 Bool)) Bool
  (=>
    (= temp___do_typ_inv_273 true)
    (= (tree_structure temp___expr_274) true)))

(declare-const is_root Bool)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "size__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (! (=>
         (dynamic_invariant2 param__f true false true true)
         (in_range2 (size1 param__f))) :pattern ((size1 param__f)) )))

;; "size__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (and
           (dynamic_invariant1 param__t true false true true)
           (type_invariant param__t))
         (in_range2 (size param__t))) :pattern ((size param__t)) )))

;; "size__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (size param__t) (size1
                            (rec__search_trees__search_tree__struct
                              (us_split_fields5 param__t)))) :pattern (
    (size
      param__t)) )))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__f true false true true)
             (in_range4 param__i))
           (=>
             (< (size1 param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__f true false true true)
             (in_range4 param__i))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size1 param__f) 0) (= result 0)))
               (in_range2 result)))) :pattern ((parent param__f param__i)) ))))

;; "position__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range4 param__i))
             (not (= (parent param__f param__i) 0)))
           (in_range5 (position param__f param__i))) :pattern ((position
                                                                 param__f
                                                                 param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep3))
    (! (in_range6 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep3))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range6 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range5 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep3) (param__s2 us_rep3))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range4 param__root))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields7 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields7 (select result param__root)))) 0))
                     (forall ((i1 Int))
                       (=>
                         (and (<= 1 i1) (<= i1 100))
                         (=>
                           (not (= i1 param__root))
                           (ite (and
                                  (not (= (parent param__f i1) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields7
                                         (select result (parent param__f i1)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields7 (select result i1))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields7 (select result i1))) true)))))))
                   (forall ((i1 Int))
                     (=>
                       (and (<= 1 i1) (<= i1 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields7 (select result i1))) true)
                              (not (= i1 param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields7
                                  (select result (parent param__f i1))))
                              (position param__f i1)
                              (rec__tree_model__path_type__a
                                (us_split_fields7 (select result i1)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields7 (select result i1)))) 0)))))
                 (forall ((i1 Int))
                   (=>
                     (and (<= 1 i1) (<= i1 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields7 (select result i1))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields7 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields7 (select result i1)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields7 (select result j)))) true))
                             (= j i1))))))))
               (dynamic_invariant result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (and
           (and
             (dynamic_invariant1 param__t true false true true)
             (type_invariant param__t))
           (not (= (size param__t) 0)))
         (dynamic_invariant (model2 param__t) true false true true)) :pattern (
    (model2
      param__t)) )))

;; "model__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (model2 param__t) (model1
                              (rec__search_trees__search_tree__struct
                                (us_split_fields5 param__t))
                              (to_rep1
                                (rec__search_trees__search_tree__root
                                  (us_split_fields5 param__t))))) :pattern (
    (model2
      param__t)) )))

;; "peek__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range4 param__i))
             (in_range5 param__d))
           (let ((result (peek param__f param__i param__d)))
             (and
               (and
                 (ite (not (= result 0))
                   (and
                     (= (position param__f result) param__d)
                     (= (parent param__f result) param__i))
                   (forall ((j Int))
                     (=>
                       (and (<= 1 j) (<= j 100))
                       (=>
                         (= (parent param__f j) param__i)
                         (not (= (position param__f j) param__d))))))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (= (parent param__f j) param__i)
                         (= (position param__f j) param__d))
                       (= result j)))))
               (in_range2 result)))) :pattern ((peek
                                                 param__f
                                                 param__i
                                                 param__d)) ))))

;; "peek__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (and
                 (and
                   (dynamic_invariant1 param__t true false true true)
                   (in_range4 param__i))
                 (in_range5 param__d))
               (type_invariant param__t))
             (and
               (not (= (size param__t) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields7
                      (let ((temp___430 (model2 param__t)))
                        (select temp___430 param__i)))) true)))
           (in_range2 (peek1 param__t param__i param__d))) :pattern (
      (peek1
        param__t
        param__i
        param__d)) ))))

;; "peek__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int) (param__d Int))
      (! (= (peek1 param__t param__i param__d) (peek
                                                 (rec__search_trees__search_tree__struct
                                                   (us_split_fields5
                                                     param__t))
                                                 param__i
                                                 param__d)) :pattern (
      (peek1
        param__t
        param__i
        param__d)) ))))

;; "ordered_prefix__post_axiom"
(assert
  (forall ((param__model (Array Int us_rep4)))
    (forall ((param__values (Array Int natural)))
      (forall ((param__i Int) (param__j Int))
        (! (=>
             (and
               (and
                 (and
                   (dynamic_invariant param__model true false true true)
                   (in_range4 param__i))
                 (in_range4 param__j))
               (and
                 (and
                   (= (rec__tree_model__path_type__k
                        (us_split_fields7 (select param__model param__i))) true)
                   (= (rec__tree_model__path_type__k
                        (us_split_fields7 (select param__model param__j))) true))
                 (= (olt
                      (rec__tree_model__path_type__a
                        (us_split_fields7 (select param__model param__i)))
                      (rec__tree_model__path_type__a
                        (us_split_fields7 (select param__model param__j)))) true)))
             (in_range
               (ite (ordered_prefix
                      param__model
                      param__values
                      param__i
                      param__j) 1 0))) :pattern ((ordered_prefix
                                                   param__model
                                                   param__values
                                                   param__i
                                                   param__j)) )))))

;; "ordered_prefix__def_axiom"
(assert
  (forall ((param__model (Array Int us_rep4)))
    (forall ((param__values (Array Int natural)))
      (forall ((param__i Int) (param__j Int))
        (! (=
             (= (ordered_prefix param__model param__values param__i param__j) true)
             (ite (= (get
                       (rec__tree_model__path_type__a
                         (us_split_fields7 (select param__model param__j)))
                       (+ (last
                            (rec__tree_model__path_type__a
                              (us_split_fields7
                                (select param__model param__i)))) 1)) 0)
               (< (to_rep (select param__values param__j)) (to_rep
                                                             (select param__values param__i)))
               (< (to_rep (select param__values param__i)) (to_rep
                                                             (select param__values param__j))))) :pattern (
        (ordered_prefix
          param__model
          param__values
          param__i
          param__j)) )))))

;; "ordered_leafs__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (forall ((param__values (Array Int natural)))
        (! (=>
             (and
               (and
                 (dynamic_invariant2 param__f true false true true)
                 (in_range4 param__root))
               (= (valid_root param__f param__root) true))
             (in_range
               (ite (ordered_leafs param__f param__root param__values) 1 0))) :pattern (
        (ordered_leafs
          param__f
          param__root
          param__values)) )))))

;; "ordered_leafs__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (forall ((param__values (Array Int natural)))
        (! (=
             (= (ordered_leafs param__f param__root param__values) true)
             (forall ((i1 Int))
               (=>
                 (and (<= 1 i1) (<= i1 100))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (and
                           (= (rec__tree_model__path_type__k
                                (us_split_fields7
                                  (let ((temp___517 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___517 i1)))) true)
                           (= (rec__tree_model__path_type__k
                                (us_split_fields7
                                  (let ((temp___518 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___518 j)))) true))
                         (= (olt
                              (rec__tree_model__path_type__a
                                (us_split_fields7
                                  (let ((temp___519 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___519 i1))))
                              (rec__tree_model__path_type__a
                                (us_split_fields7
                                  (let ((temp___520 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___520 j))))) true))
                       (= (ordered_prefix
                            (model1 param__f param__root)
                            param__values
                            i1
                            j) true))))))) :pattern ((ordered_leafs
                                                       param__f
                                                       param__root
                                                       param__values)) )))))

;; "tree_structure__post_axiom"
(assert true)

;; "all_less_than__post_axiom"
(assert true)

;; "all_less_than__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int) (param__v Int))
      (forall ((param__values (Array Int natural)))
        (! (=
             (= (all_less_than param__f param__root param__values param__v) true)
             (forall ((j Int))
               (=>
                 (and (<= 1 j) (<= j 100))
                 (=>
                   (= (rec__tree_model__path_type__k
                        (us_split_fields7
                          (let ((temp___529 (model1 param__f param__root)))
                            (select temp___529 j)))) true)
                   (< (to_rep (select param__values j)) param__v))))) :pattern (
        (all_less_than
          param__f
          param__root
          param__values
          param__v)) )))))

;; "all_more_than__post_axiom"
(assert true)

;; "all_more_than__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int) (param__v Int))
      (forall ((param__values (Array Int natural)))
        (! (=
             (= (all_more_than param__f param__root param__values param__v) true)
             (forall ((j Int))
               (=>
                 (and (<= 1 j) (<= j 100))
                 (=>
                   (= (rec__tree_model__path_type__k
                        (us_split_fields7
                          (let ((temp___531 (model1 param__f param__root)))
                            (select temp___531 j)))) true)
                   (< param__v (to_rep (select param__values j))))))) :pattern (
        (all_more_than
          param__f
          param__root
          param__values
          param__v)) )))))

;; "is_concat__post_axiom"
(assert true)

;; "is_concat__def_axiom"
(assert
  (forall ((param__q us_rep3) (param__v us_rep3) (param__p us_rep3))
    (! (=
         (= (is_concat param__q param__v param__p) true)
         (and
           (and
             (and
               (= (- (length param__p) (length param__v)) (length param__q))
               (forall ((i1 Int))
                 (=>
                   (and (<= 1 i1) (<= i1 (last param__q)))
                   (= (get param__p i1) (get param__q i1)))))
             (forall ((i1 Int))
               (=>
                 (and (<= 1 i1) (<= i1 (last param__v)))
                 (= (get param__p (+ i1 (last param__q))) (get param__v i1)))))
           (forall ((i1 Int))
             (=>
               (and (<= (+ (last param__q) 1) i1) (<= i1 (last param__p)))
               (= (get param__v (- i1 (last param__q))) (get param__p i1)))))) :pattern (
    (is_concat
      param__q
      param__v
      param__p)) )))

;; "oeq__post_axiom"
(assert true)

;; "oeq__def_axiom"
(assert
  (forall ((param__m1 (Array Int us_rep4)) (param__m2 (Array Int us_rep4)))
    (! (=
         (= (oeq1 param__m1 param__m2) true)
         (forall ((i1 Int))
           (=>
             (and (<= 1 i1) (<= i1 100))
             (and
               (= (oeq
                    (rec__tree_model__path_type__a
                      (us_split_fields7 (select param__m1 i1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields7 (select param__m2 i1)))) true)
               (=
                 (= (rec__tree_model__path_type__k
                      (us_split_fields7 (select param__m1 i1))) true)
                 (= (rec__tree_model__path_type__k
                      (us_split_fields7 (select param__m2 i1))) true)))))) :pattern (
    (oeq1
      param__m1
      param__m2)) )))

(declare-const t__split_fields us_split_fields4)

(declare-const x Int)

(declare-const y Int)

(declare-const xr Int)

;; "xr'unused"
(define-fun xrqtunused () int__ref
  (int__refqtmk xr))

;; "y'unused"
(define-fun yqtunused () int__ref
  (int__refqtmk y))

;; "x'unused"
(define-fun xqtunused () int__ref
  (int__refqtmk x))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused1 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t__split_fields) true false true true))

;; "Assume"
(assert (in_range4 i))

;; "Assume"
(assert (type_invariant (us_repqtmk2 t__split_fields)))

;; "Assume"
(assert
  (and
    (and
      (< 0 (size (us_repqtmk2 t__split_fields)))
      (= (rec__tree_model__path_type__k
           (us_split_fields7
             (select (model2 (us_repqtmk2 t__split_fields)) i))) true))
    (not (= (peek1 (us_repqtmk2 t__split_fields) i 0) 0))))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields4
  t__split_fields)

;; "temp___old_2615"
(define-fun temp___old_2615 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep2
  temp___old_2615)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields4
  t__split_fields)

;; "temp___old_2637"
(define-fun temp___old_2637 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep2
  temp___old_2637)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields4
  t__split_fields)

;; "temp___old_2630"
(define-fun temp___old_2630 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep2
  temp___old_2630)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused3 () us_split_fields4
  t__split_fields)

;; "temp___old_2623"
(define-fun temp___old_2623 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep2
  temp___old_2623)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused4 () us_split_fields4
  t__split_fields)

;; "temp___old_2594"
(define-fun temp___old_2594 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep2
  temp___old_2594)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused5 () us_split_fields4
  t__split_fields)

;; "temp___old_2578"
(define-fun temp___old_2578 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep2
  temp___old_2578)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused6 () us_split_fields4
  t__split_fields)

;; "temp___old_2566"
(define-fun temp___old_2566 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused6 () us_rep2
  temp___old_2566)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused7 () us_split_fields4
  t__split_fields)

;; "temp___old_2558"
(define-fun temp___old_2558 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused7 () us_rep2
  temp___old_2558)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused8 () us_split_fields4
  t__split_fields)

;; "temp___old_2586"
(define-fun temp___old_2586 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused8 () us_rep2
  temp___old_2586)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused9 () us_split_fields4
  t__split_fields)

;; "temp___old_2543"
(define-fun temp___old_2543 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused9 () us_rep2
  temp___old_2543)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused10 () us_split_fields4
  t__split_fields)

;; "temp___old_2541"
(define-fun temp___old_2541 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused10 () us_rep2
  temp___old_2541)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused11 () us_split_fields4
  t__split_fields)

;; "temp___old_2528"
(define-fun temp___old_2528 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused11 () us_rep2
  temp___old_2528)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused12 () us_split_fields4
  t__split_fields)

;; "temp___old_2514"
(define-fun temp___old_2514 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused12 () us_rep2
  temp___old_2514)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused13 () us_split_fields4
  t__split_fields)

;; "temp___old_2493"
(define-fun temp___old_2493 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused13 () us_rep2
  temp___old_2493)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused14 () us_split_fields4
  t__split_fields)

;; "temp___old_2430"
(define-fun temp___old_2430 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused14 () us_rep2
  temp___old_2430)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused15 () us_split_fields4
  t__split_fields)

;; "temp___old_2486"
(define-fun temp___old_2486 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused15 () us_rep2
  temp___old_2486)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused16 () us_split_fields4
  t__split_fields)

;; "temp___old_2474"
(define-fun temp___old_2474 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused16 () us_rep2
  temp___old_2474)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused17 () us_split_fields4
  t__split_fields)

;; "temp___old_2472"
(define-fun temp___old_2472 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused17 () us_rep2
  temp___old_2472)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused18 () us_split_fields4
  t__split_fields)

;; "temp___old_2460"
(define-fun temp___old_2460 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused18 () us_rep2
  temp___old_2460)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused19 () us_split_fields4
  t__split_fields)

;; "temp___old_2458"
(define-fun temp___old_2458 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused19 () us_rep2
  temp___old_2458)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused20 () us_split_fields4
  t__split_fields)

;; "temp___old_2451"
(define-fun temp___old_2451 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused20 () us_rep2
  temp___old_2451)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused21 () us_split_fields4
  t__split_fields)

;; "temp___old_2444"
(define-fun temp___old_2444 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused21 () us_rep2
  temp___old_2444)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused22 () us_split_fields4
  t__split_fields)

;; "temp___old_2437"
(define-fun temp___old_2437 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused22 () us_rep2
  temp___old_2437)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused23 () us_split_fields4
  t__split_fields)

;; "temp___old_2361"
(define-fun temp___old_2361 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused23 () us_rep2
  temp___old_2361)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused24 () us_split_fields4
  t__split_fields)

;; "temp___old_2417"
(define-fun temp___old_2417 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused24 () us_rep2
  temp___old_2417)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused25 () us_split_fields4
  t__split_fields)

;; "temp___old_2405"
(define-fun temp___old_2405 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused25 () us_rep2
  temp___old_2405)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused26 () us_split_fields4
  t__split_fields)

;; "temp___old_2403"
(define-fun temp___old_2403 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused26 () us_rep2
  temp___old_2403)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused27 () us_split_fields4
  t__split_fields)

;; "temp___old_2391"
(define-fun temp___old_2391 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused27 () us_rep2
  temp___old_2391)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused28 () us_split_fields4
  t__split_fields)

;; "temp___old_2389"
(define-fun temp___old_2389 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused28 () us_rep2
  temp___old_2389)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused29 () us_split_fields4
  t__split_fields)

;; "temp___old_2382"
(define-fun temp___old_2382 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused29 () us_rep2
  temp___old_2382)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused30 () us_split_fields4
  t__split_fields)

;; "temp___old_2375"
(define-fun temp___old_2375 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused30 () us_rep2
  temp___old_2375)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused31 () us_split_fields4
  t__split_fields)

;; "temp___old_2368"
(define-fun temp___old_2368 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused31 () us_rep2
  temp___old_2368)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused32 () us_split_fields4
  t__split_fields)

;; "temp___old_2320"
(define-fun temp___old_2320 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused32 () us_rep2
  temp___old_2320)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused33 () us_split_fields4
  t__split_fields)

;; "temp___old_2318"
(define-fun temp___old_2318 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused33 () us_rep2
  temp___old_2318)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused34 () us_split_fields4
  t__split_fields)

;; "temp___old_2298"
(define-fun temp___old_2298 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused34 () us_rep2
  temp___old_2298)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused35 () us_split_fields4
  t__split_fields)

;; "temp___old_2296"
(define-fun temp___old_2296 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused35 () us_rep2
  temp___old_2296)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused36 () us_split_fields4
  t__split_fields)

;; "temp___old_2341"
(define-fun temp___old_2341 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused36 () us_rep2
  temp___old_2341)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused37 () us_split_fields4
  t__split_fields)

;; "temp___old_2339"
(define-fun temp___old_2339 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused37 () us_rep2
  temp___old_2339)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused38 () us_split_fields4
  t__split_fields)

;; "temp___old_2287"
(define-fun temp___old_2287 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused38 () us_rep2
  temp___old_2287)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused39 () us_split_fields4
  t__split_fields)

;; "temp___old_2274"
(define-fun temp___old_2274 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused39 () us_rep2
  temp___old_2274)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused40 () us_split_fields4
  t__split_fields)

;; "temp___compl_2668"
(define-fun temp___compl_2668 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused40 () us_rep2
  temp___compl_2668)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused41 () us_split_fields4
  t__split_fields)

;; "temp___2669"
(define-fun temp___2669 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused41 () us_rep2
  temp___2669)

;; "Assert"
(assert (type_invariant temp___2669))

;; "temp___2672"
(define-fun temp___2672 () Int
  (root temp___compl_2668))

;; "H"
(assert (in_range4 temp___2672))

;; "H"
(assert
  (= temp___2672 (to_rep1
                   (rec__search_trees__search_tree__root t__split_fields))))

;; "root'result'unused"
(define-fun rootqtresultqtunused () Int
  temp___2672)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused42 () us_split_fields4
  t__split_fields)

;; "temp___old_2266"
(define-fun temp___old_2266 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused42 () us_rep2
  temp___old_2266)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused43 () us_split_fields4
  t__split_fields)

;; "temp___old_2253"
(define-fun temp___old_2253 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused43 () us_rep2
  temp___old_2253)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused44 () us_split_fields4
  t__split_fields)

;; "temp___old_2238"
(define-fun temp___old_2238 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused44 () us_rep2
  temp___old_2238)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused45 () us_split_fields4
  t__split_fields)

;; "temp___old_2223"
(define-fun temp___old_2223 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused45 () us_rep2
  temp___old_2223)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused46 () us_split_fields4
  t__split_fields)

;; "temp___compl_2663"
(define-fun temp___compl_2663 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused46 () us_rep2
  temp___compl_2663)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused47 () us_split_fields4
  t__split_fields)

;; "temp___2664"
(define-fun temp___2664 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused47 () us_rep2
  temp___2664)

;; "Assert"
(assert (type_invariant temp___2664))

;; "temp___2667"
(define-fun temp___2667 () Int
  (root temp___compl_2663))

;; "H"
(assert (in_range4 temp___2667))

;; "H"
(assert
  (= temp___2667 (to_rep1
                   (rec__search_trees__search_tree__root t__split_fields))))

;; "root'result'unused"
(define-fun rootqtresultqtunused1 () Int
  temp___2667)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused48 () us_split_fields4
  t__split_fields)

;; "temp___compl_2658"
(define-fun temp___compl_2658 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused48 () us_rep2
  temp___compl_2658)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused49 () us_split_fields4
  t__split_fields)

;; "temp___2659"
(define-fun temp___2659 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused49 () us_rep2
  temp___2659)

;; "Assert"
(assert (type_invariant temp___2659))

;; "temp___2662"
(define-fun temp___2662 () Int
  (root temp___compl_2658))

;; "H"
(assert (in_range4 temp___2662))

;; "H"
(assert
  (= temp___2662 (to_rep1
                   (rec__search_trees__search_tree__root t__split_fields))))

;; "root'result'unused"
(define-fun rootqtresultqtunused2 () Int
  temp___2662)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused50 () us_split_fields4
  t__split_fields)

;; "temp___compl_2653"
(define-fun temp___compl_2653 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused50 () us_rep2
  temp___compl_2653)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused51 () us_split_fields4
  t__split_fields)

;; "temp___2654"
(define-fun temp___2654 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused51 () us_rep2
  temp___2654)

;; "Assert"
(assert (type_invariant temp___2654))

;; "temp___2657"
(define-fun temp___2657 () Int
  (size temp___compl_2653))

;; "H"
(assert (in_range2 temp___2657))

;; "H"
(assert
  (= temp___2657 (size1
                   (rec__search_trees__search_tree__struct t__split_fields))))

;; "size'result'unused"
(define-fun sizeqtresultqtunused () Int
  temp___2657)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range4 x))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range4 y))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 xr))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused52 () us_split_fields4
  t__split_fields)

;; "temp___compl_2008"
(define-fun temp___compl_2008 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused52 () us_rep2
  temp___compl_2008)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused53 () us_split_fields4
  t__split_fields)

;; "temp___2009"
(define-fun temp___2009 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused53 () us_rep2
  temp___2009)

;; "Assert"
(assert (type_invariant temp___2009))

;; "temp___2012"
(define-fun temp___2012 () Int
  (root temp___compl_2008))

;; "H"
(assert (in_range4 temp___2012))

;; "H"
(assert
  (= temp___2012 (to_rep1
                   (rec__search_trees__search_tree__root t__split_fields))))

;; "root'result'unused"
(define-fun rootqtresultqtunused3 () Int
  temp___2012)

;; "search_trees__right_rotate__is_root__assume"
(define-fun search_trees__right_rotate__is_root__assume () Bool
  (ite (= i temp___2012) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  search_trees__right_rotate__is_root__assume)

;; "Assume"
(assert (= search_trees__right_rotate__is_root__assume is_root))

(declare-const j Int)

;; "j'unused"
(define-fun jqtunused () int__ref
  (int__refqtmk j))

;; "H"
(assert (= j 1))

;; "Assume"
(assert (in_range4 j))

(declare-const d Int)

;; "d'unused"
(define-fun dqtunused () int__ref
  (int__refqtmk d))

;; "H"
(assert (= d 0))

;; "Assume"
(assert (in_range5 d))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused54 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__t_old__assume'unused"
(define-fun search_trees__right_rotate__t_old__assumeqtunused () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused54 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields4
  t__split_fields)

(declare-const t_old__split_fields us_split_fields4)

;; "t_old__split_fields'unused"
(define-fun t_old__split_fieldsqtunused () us_split_fields__ref1
  (us_split_fields__refqtmk1 t_old__split_fields))

;; "H"
(assert (= t_old__split_fields t__split_fields))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t_old__split_fields) true false true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused55 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused55 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__f_old__assume"
(define-fun search_trees__right_rotate__f_old__assume () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused () us_rep1
  search_trees__right_rotate__f_old__assume)

;; "o"
(define-fun o () us_split_fields2
  (us_split_fields3 search_trees__right_rotate__f_old__assume))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields2
  o)

(declare-const f_old__split_fields us_split_fields2)

;; "f_old__split_fields'unused"
(define-fun f_old__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk f_old__split_fields))

;; "H"
(assert (= f_old__split_fields o))

;; "Assume"
(assert
  (dynamic_invariant2 (us_repqtmk1 f_old__split_fields) true false true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused56 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused56 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__dummy_1__assume"
(define-fun search_trees__right_rotate__dummy_1__assume () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused1 () us_rep1
  search_trees__right_rotate__dummy_1__assume)

;; "o"
(define-fun o1 () us_split_fields2
  (us_split_fields3 search_trees__right_rotate__dummy_1__assume))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields2
  o1)

(declare-const dummy_1__split_fields us_split_fields2)

;; "dummy_1__split_fields'unused"
(define-fun dummy_1__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk dummy_1__split_fields))

;; "H"
(assert (= dummy_1__split_fields o1))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_1__split_fields)
    true
    false
    true
    true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused57 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused57 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__dummy_2__assume"
(define-fun search_trees__right_rotate__dummy_2__assume () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused2 () us_rep1
  search_trees__right_rotate__dummy_2__assume)

;; "o"
(define-fun o2 () us_split_fields2
  (us_split_fields3 search_trees__right_rotate__dummy_2__assume))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields2
  o2)

(declare-const dummy_2__split_fields us_split_fields2)

;; "dummy_2__split_fields'unused"
(define-fun dummy_2__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk dummy_2__split_fields))

;; "H"
(assert (= dummy_2__split_fields o2))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_2__split_fields)
    true
    false
    true
    true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused58 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused58 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__dummy_3__assume"
(define-fun search_trees__right_rotate__dummy_3__assume () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused3 () us_rep1
  search_trees__right_rotate__dummy_3__assume)

;; "o"
(define-fun o3 () us_split_fields2
  (us_split_fields3 search_trees__right_rotate__dummy_3__assume))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused8 () us_split_fields2
  o3)

(declare-const dummy_3__split_fields us_split_fields2)

;; "dummy_3__split_fields'unused"
(define-fun dummy_3__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk dummy_3__split_fields))

;; "H"
(assert (= dummy_3__split_fields o3))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_3__split_fields)
    true
    false
    true
    true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused59 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused59 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused9 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__dummy_4__assume"
(define-fun search_trees__right_rotate__dummy_4__assume () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused4 () us_rep1
  search_trees__right_rotate__dummy_4__assume)

;; "o"
(define-fun o4 () us_split_fields2
  (us_split_fields3 search_trees__right_rotate__dummy_4__assume))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused10 () us_split_fields2
  o4)

(declare-const dummy_4__split_fields us_split_fields2)

;; "dummy_4__split_fields'unused"
(define-fun dummy_4__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk dummy_4__split_fields))

;; "H"
(assert (= dummy_4__split_fields o4))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_4__split_fields)
    true
    false
    true
    true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused60 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused60 () us_rep2
  (us_repqtmk2 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused11 () us_split_fields4
  t__split_fields)

;; "search_trees__right_rotate__dummy_5__assume"
(define-fun search_trees__right_rotate__dummy_5__assume () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused5 () us_rep1
  search_trees__right_rotate__dummy_5__assume)

;; "o"
(define-fun o5 () us_split_fields2
  (us_split_fields3 search_trees__right_rotate__dummy_5__assume))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused12 () us_split_fields2
  o5)

(declare-const dummy_5__split_fields us_split_fields2)

;; "dummy_5__split_fields'unused"
(define-fun dummy_5__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk dummy_5__split_fields))

;; "H"
(assert (= dummy_5__split_fields o5))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_5__split_fields)
    true
    false
    true
    true))

(declare-const spark__branch Bool)

(declare-const t__split_fields1 us_split_fields4)

(declare-const y1 Int)

(declare-const j1 Int)

(declare-const d1 Int)

;; "d'unused"
(define-fun dqtunused1 () int__ref
  (int__refqtmk d1))

;; "j'unused"
(define-fun jqtunused1 () int__ref
  (int__refqtmk j1))

;; "y'unused"
(define-fun yqtunused1 () int__ref
  (int__refqtmk y1))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused2 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields1))

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch is_root))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const o6 Int)

(declare-const us_split_fields__contentqtresultqtunused61 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused61 us_rep2)

(declare-const us_split_fieldsqtresultqtunused13 us_split_fields4)

(declare-const o7 us_rep1)

(declare-const rec__search_trees__search_tree__structqtresultqtunused6 us_rep1)

(declare-const o8 Int)

(declare-const parentqtresultqtunused Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const us_split_fields__contentqtresultqtunused62 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused62 us_rep2)

(declare-const us_split_fieldsqtresultqtunused14 us_split_fields4)

(declare-const o9 us_rep1)

(declare-const rec__search_trees__search_tree__structqtresultqtunused7 us_rep1)

(declare-const o10 Int)

(declare-const positionqtresultqtunused Int)

(declare-const us_split_fields__contentqtresultqtunused63 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused63 us_rep2)

(declare-const us_split_fieldsqtresultqtunused15 us_split_fields4)

(declare-const temp___compl_2016 us_rep1)

(declare-const rec__search_trees__search_tree__structqtresultqtunused8 us_rep1)

(declare-const o11 us_split_fields2)

(declare-const us_split_fieldsqtresultqtunused16 us_split_fields2)

(declare-const param__f__split_fields us_split_fields__ref)

(declare-const us_split_fields__refqtmkqtresultqtunused us_split_fields__ref)

(declare-const int__contentqtresultqtunused Int)

(declare-const param__vqtunused int__ref)

(declare-const int__refqtmkqtresultqtunused int__ref)

(declare-const int__contentqtresultqtunused1 Int)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const us_split_fields__contentqtresultqtunused64 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused64 us_rep2)

(declare-const us_split_fieldsqtresultqtunused17 us_split_fields4)

(declare-const o12 extended_index_type)

(declare-const rec__search_trees__search_tree__rootqtresultqtunused extended_index_type)

(declare-const o13 Int)

(declare-const to_repqtresultqtunused Int)

(declare-const range_check_qtresultqtunused1 Int)

(declare-const param__f__split_fieldsqtunused us_split_fields__ref)

(declare-const param__f__split_fields1 us_split_fields2)

(declare-const param__v Int)

(declare-const param__vqtunused1 int__ref)

(declare-const param__f__split_fieldsqtunused1 us_split_fields__ref)

(declare-const us_split_fields__contentqtresultqtunused65 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused65 us_rep2)

(declare-const usq_qtunused us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused18 us_split_fields4)

(declare-const o14 (Array Int natural))

(declare-const rec__search_trees__search_tree__valuesqtresultqtunused (Array Int natural))

(declare-const us_split_fields__contentqtresultqtunused66 us_split_fields2)

(declare-const o15 us_rep1)

(declare-const us_repqtmkqtresultqtunused66 us_rep1)

(declare-const o16 extended_index_type)

(declare-const rec__search_trees__search_tree__rootqtresultqtunused1 extended_index_type)

(declare-const o17 us_split_fields4)

(declare-const us_split_fieldsqtmkqtresultqtunused us_split_fields4)

(declare-const us_repqtmkqtresultqtunused67 us_rep2)

(declare-const us_split_fieldsqtresultqtunused19 us_split_fields4)

(declare-const int__contentqtresultqtunused3 Int)

(declare-const range_check_qtresultqtunused2 Int)

(declare-const us_split_fields__contentqtresultqtunused67 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused68 us_rep2)

(declare-const us_split_fieldsqtresultqtunused20 us_split_fields4)

(declare-const o18 extended_index_type)

(declare-const rec__search_trees__search_tree__rootqtresultqtunused2 extended_index_type)

(declare-const o19 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const range_check_qtresultqtunused3 Int)

;; "H"
(assert
  (ite (= spark__branch true)
    (and
      (and
        (and
          (and
            (= us_split_fields__contentqtresultqtunused67 t__split_fields)
            (and
              (= us_repqtmkqtresultqtunused68 (us_repqtmk2 t__split_fields))
              (and
                (= us_split_fieldsqtresultqtunused20 t__split_fields)
                (and
                  (= o18 (rec__search_trees__search_tree__root
                           t__split_fields))
                  (and
                    (= rec__search_trees__search_tree__rootqtresultqtunused2 
                    o18)
                    (and
                      (= (to_rep1 o18) o19)
                      (and
                        (= to_repqtresultqtunused1 o19)
                        (and
                          (in_range4 o19)
                          (and
                            (= range_check_qtresultqtunused3 o19)
                            (= y1 o19))))))))))
          (= t__split_fields1 t__split_fields))
        (= j1 j))
      (= d1 d))
    (and
      (= o6 i)
      (and
        (= us_split_fields__contentqtresultqtunused61 t__split_fields)
        (and
          (= us_repqtmkqtresultqtunused61 (us_repqtmk2 t__split_fields))
          (and
            (= us_split_fieldsqtresultqtunused13 t__split_fields)
            (and
              (= o7 (rec__search_trees__search_tree__struct t__split_fields))
              (and
                (= rec__search_trees__search_tree__structqtresultqtunused6 
                o7)
                (and
                  (= o8 (parent o7 o6))
                  (and
                    (and
                      (in_range2 o8)
                      (and
                        (=> (= (valid_root o7 o6) true) (= o8 0))
                        (=> (= (size1 o7) 0) (= o8 0))))
                    (and
                      (= parentqtresultqtunused o8)
                      (and
                        (in_range4 o8)
                        (and
                          (= range_check_qtresultqtunused o8)
                          (and
                            (= j1 o8)
                            (and
                              (= us_split_fields__contentqtresultqtunused62 
                              t__split_fields)
                              (and
                                (= us_repqtmkqtresultqtunused62 (us_repqtmk2
                                                                  t__split_fields))
                                (and
                                  (= us_split_fieldsqtresultqtunused14 
                                  t__split_fields)
                                  (and
                                    (= o9 (rec__search_trees__search_tree__struct
                                            t__split_fields))
                                    (and
                                      (= rec__search_trees__search_tree__structqtresultqtunused7 
                                      o9)
                                      (and
                                        (= o10 (position o9 i))
                                        (and
                                          (in_range5 o10)
                                          (and
                                            (= positionqtresultqtunused 
                                            o10)
                                            (and
                                              (= d1 o10)
                                              (and
                                                (= us_split_fields__contentqtresultqtunused63 
                                                t__split_fields)
                                                (and
                                                  (= us_repqtmkqtresultqtunused63 
                                                  (us_repqtmk2
                                                    t__split_fields))
                                                  (and
                                                    (= us_split_fieldsqtresultqtunused15 
                                                    t__split_fields)
                                                    (and
                                                      (= temp___compl_2016 
                                                      (rec__search_trees__search_tree__struct
                                                        t__split_fields))
                                                      (and
                                                        (= rec__search_trees__search_tree__structqtresultqtunused8 
                                                        temp___compl_2016)
                                                        (and
                                                          (= o11 (us_split_fields3
                                                                   temp___compl_2016))
                                                          (and
                                                            (= us_split_fieldsqtresultqtunused16 
                                                            o11)
                                                            (and
                                                              (= param__f__split_fields 
                                                              (us_split_fields__refqtmk
                                                                o11))
                                                              (and
                                                                (= us_split_fields__refqtmkqtresultqtunused 
                                                                param__f__split_fields)
                                                                (and
                                                                  (= 
                                                                  int__contentqtresultqtunused 
                                                                  y)
                                                                  (and
                                                                    (= 
                                                                    param__vqtunused 
                                                                    (int__refqtmk
                                                                    y))
                                                                    (and
                                                                    (= 
                                                                    int__refqtmkqtresultqtunused 
                                                                    (int__refqtmk
                                                                    y))
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused1 
                                                                    d1)
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused2 
                                                                    j1)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused64 
                                                                    t__split_fields)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused64 
                                                                    (us_repqtmk2
                                                                    t__split_fields))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused17 
                                                                    t__split_fields)
                                                                    (and
                                                                    (= 
                                                                    o12 
                                                                    (rec__search_trees__search_tree__root
                                                                    t__split_fields))
                                                                    (and
                                                                    (= 
                                                                    rec__search_trees__search_tree__rootqtresultqtunused 
                                                                    o12)
                                                                    (and
                                                                    (= 
                                                                    (to_rep1
                                                                    o12) 
                                                                    o13)
                                                                    (and
                                                                    (= 
                                                                    to_repqtresultqtunused 
                                                                    o13)
                                                                    (and
                                                                    (in_range4
                                                                    o13)
                                                                    (and
                                                                    (= 
                                                                    range_check_qtresultqtunused1 
                                                                    o13)
                                                                    (and
                                                                    (= 
                                                                    param__f__split_fieldsqtunused 
                                                                    param__f__split_fields)
                                                                    (and
                                                                    (= 
                                                                    param__vqtunused1 
                                                                    (int__refqtmk
                                                                    param__v))
                                                                    (and
                                                                    (= 
                                                                    param__f__split_fieldsqtunused1 
                                                                    (us_split_fields__refqtmk
                                                                    param__f__split_fields1))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (size1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)) 
                                                                    (size1
                                                                    (us_repqtmk1
                                                                    o11)))
                                                                    (= 
                                                                    (valid_root
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    o13) true))
                                                                    (= 
                                                                    param__v 
                                                                    (peek
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    j1
                                                                    d1)))
                                                                    (= 
                                                                    (peek
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    j1
                                                                    d1) 0))
                                                                    (forall 
                                                                    ((j2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j2)
                                                                    (<= j2 100))
                                                                    (=>
                                                                    (not
                                                                    (= j2 
                                                                    param__v))
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    j2) 
                                                                    (parent
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    j2))))))
                                                                    (forall 
                                                                    ((j2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j2)
                                                                    (<= j2 100))
                                                                    (=>
                                                                    (and
                                                                    (not
                                                                    (= j2 
                                                                    param__v))
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    j2) 0)))
                                                                    (= 
                                                                    (position
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    j2) 
                                                                    (position
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    j2))))))
                                                                    (forall 
                                                                    ((j2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j2)
                                                                    (<= j2 100))
                                                                    (forall 
                                                                    ((e Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 e)
                                                                    (<= e 1))
                                                                    (=>
                                                                    (or
                                                                    (not
                                                                    (= j2 
                                                                    j1))
                                                                    (not
                                                                    (= e 
                                                                    d1)))
                                                                    (= 
                                                                    (peek
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    j2
                                                                    e) 
                                                                    (peek
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    j2
                                                                    e))))))))
                                                                    (forall 
                                                                    ((t Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 t)
                                                                    (<= t 100))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (valid_root
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    t) true)
                                                                    (not
                                                                    (= 
                                                                    j1 t)))
                                                                    (not
                                                                    (= 
                                                                    param__v t)))
                                                                    (= 
                                                                    (valid_root
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    t) true)))))
                                                                    (forall 
                                                                    ((t Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 t)
                                                                    (<= t 100))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (valid_root
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    t) true)
                                                                    (not
                                                                    (= 
                                                                    o13 t)))
                                                                    (not
                                                                    (= 
                                                                    param__v t)))
                                                                    (= 
                                                                    (oeq1
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    t)
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    t)) true)))))
                                                                    (=>
                                                                    (not
                                                                    (= 
                                                                    param__v 0))
                                                                    (= 
                                                                    (valid_root
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    param__v) true)))
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i1)
                                                                    (<= i1 100))
                                                                    (=>
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) i1))) true)
                                                                    (ite 
                                                                    (and
                                                                    (not
                                                                    (= 
                                                                    param__v 0))
                                                                    (= 
                                                                    (ole
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) 
                                                                    param__v)))
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) i1)))) true))
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    param__v) i1))) true)
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    o13) i1))) true))))))
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i1)
                                                                    (<= i1 100))
                                                                    (=>
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    o13) i1))) true)
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) i1))) true)))))
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i1)
                                                                    (<= i1 100))
                                                                    (=>
                                                                    (and
                                                                    (not
                                                                    (= 
                                                                    param__v 0))
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    param__v) i1))) true))
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) i1))) true)))))
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i1)
                                                                    (<= i1 100))
                                                                    (=>
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    o13) i1))) true)
                                                                    (= 
                                                                    (oeq
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    o13) i1)))
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) i1)))) true)))))
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i1)
                                                                    (<= i1 100))
                                                                    (=>
                                                                    (and
                                                                    (not
                                                                    (= 
                                                                    param__v 0))
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    param__v) i1))) true))
                                                                    (= 
                                                                    (is_concat
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) 
                                                                    param__v)))
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    param__v) i1)))
                                                                    (rec__tree_model__path_type__a
                                                                    (us_split_fields7
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk1
                                                                    o11)
                                                                    o13) i1)))) true)))))
                                                                    (and
                                                                    (dynamic_invariant2
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1)
                                                                    true
                                                                    true
                                                                    true
                                                                    true)
                                                                    (in_range2
                                                                    param__v)))
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused65 
                                                                    t__split_fields)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused65 
                                                                    (us_repqtmk2
                                                                    t__split_fields))
                                                                    (and
                                                                    (= 
                                                                    usq_qtunused 
                                                                    t__split_fields)
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused18 
                                                                    t__split_fields)
                                                                    (and
                                                                    (= 
                                                                    o14 
                                                                    (rec__search_trees__search_tree__values
                                                                    t__split_fields))
                                                                    (and
                                                                    (= 
                                                                    rec__search_trees__search_tree__valuesqtresultqtunused 
                                                                    o14)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused66 
                                                                    param__f__split_fields1)
                                                                    (and
                                                                    (= 
                                                                    o15 
                                                                    (us_repqtmk1
                                                                    param__f__split_fields1))
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused66 
                                                                    o15)
                                                                    (and
                                                                    (= 
                                                                    o16 
                                                                    (rec__search_trees__search_tree__root
                                                                    t__split_fields))
                                                                    (and
                                                                    (= 
                                                                    rec__search_trees__search_tree__rootqtresultqtunused1 
                                                                    o16)
                                                                    (and
                                                                    (= 
                                                                    o17 
                                                                    (us_split_fieldsqtmk2
                                                                    o16
                                                                    o15
                                                                    o14))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtmkqtresultqtunused 
                                                                    o17)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused67 
                                                                    (us_repqtmk2
                                                                    o17))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused19 
                                                                    o17)
                                                                    (and
                                                                    (= 
                                                                    t__split_fields1 
                                                                    o17)
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused3 
                                                                    param__v)
                                                                    (and
                                                                    (in_range4
                                                                    param__v)
                                                                    (and
                                                                    (= 
                                                                    range_check_qtresultqtunused2 
                                                                    param__v)
                                                                    (= 
                                                                    y1 
                                                                    param__v))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

;; "Ensures"
(assert
  (and
    (and
      (= (ordered_leafs
           (rec__search_trees__search_tree__struct t__split_fields1)
           (to_rep1 (rec__search_trees__search_tree__root t__split_fields1))
           (rec__search_trees__search_tree__values t__split_fields1)) true)
      (= (ordered_leafs
           (rec__search_trees__search_tree__struct t__split_fields1)
           y1
           (rec__search_trees__search_tree__values t__split_fields1)) true))
    (forall ((i1 Int))
      (=>
        (and (<= 1 i1) (<= i1 100))
        (=
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1
                           (us_repqtmk1 f_old__split_fields)
                           (root (us_repqtmk2 t__split_fields1))) i1))) true)
          (or
            (= (rec__tree_model__path_type__k
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               t__split_fields1)
                             (root (us_repqtmk2 t__split_fields1))) i1))) true)
            (= (rec__tree_model__path_type__k
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               t__split_fields1)
                             y1) i1))) true)))))))

;; "Assume"
(assert (in_range4 y1))

;; "Assume"
(assert
  (dynamic_invariant2 (us_repqtmk1 f_old__split_fields) false true true true))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t__split_fields1) false true true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused68 () us_split_fields4
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused69 () us_rep2
  (us_repqtmk2 t__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused21 () us_split_fields4
  t__split_fields1)

;; "temp___2041"
(define-fun temp___2041 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields1))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused9 () us_rep1
  temp___2041)

;; "o"
(define-fun o20 () us_split_fields2
  (us_split_fields3 temp___2041))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused22 () us_split_fields2
  o20)

(declare-const dummy_1__split_fields1 us_split_fields2)

;; "dummy_1__split_fields'unused"
(define-fun dummy_1__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk dummy_1__split_fields1))

;; "H"
(assert (= dummy_1__split_fields1 o20))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused69 () us_split_fields4
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused70 () us_rep2
  (us_repqtmk2 t__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused23 () us_split_fields4
  t__split_fields1)

;; "temp___compl_2042"
(define-fun temp___compl_2042 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields1))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused10 
  () us_rep1
  temp___compl_2042)

;; "o"
(define-fun o21 () us_split_fields2
  (us_split_fields3 temp___compl_2042))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused24 () us_split_fields2
  o21)

;; "param__f__split_fields"
(define-fun param__f__split_fields2 () us_split_fields__ref
  (us_split_fields__refqtmk o21))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused1 () us_split_fields__ref
  param__f__split_fields2)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  x)

;; "param__v'unused"
(define-fun param__vqtunused2 () int__ref
  (int__refqtmk x))

;; "int__ref'mk'result'unused"
(define-fun int__refqtmkqtresultqtunused1 () int__ref
  (int__refqtmk x))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  y1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  y1)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused2 () us_split_fields__ref
  param__f__split_fields2)

(declare-const param__f__split_fields3 us_split_fields2)

(declare-const param__v1 Int)

;; "param__v'unused"
(define-fun param__vqtunused3 () int__ref
  (int__refqtmk param__v1))

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused3 () us_split_fields__ref
  (us_split_fields__refqtmk param__f__split_fields3))

;; "H"
(assert
  (= (size1 (us_repqtmk1 param__f__split_fields3)) (size1 (us_repqtmk1 o21))))

;; "H"
(assert (= (valid_root (us_repqtmk1 param__f__split_fields3) y1) true))

;; "H"
(assert (= param__v1 (peek (us_repqtmk1 o21) y1 0)))

;; "H"
(assert (= (peek (us_repqtmk1 param__f__split_fields3) y1 0) 0))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (not (= j2 param__v1))
        (= (parent (us_repqtmk1 param__f__split_fields3) j2) (parent
                                                               (us_repqtmk1
                                                                 o21)
                                                               j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= j2 param__v1))
          (not (= (parent (us_repqtmk1 param__f__split_fields3) j2) 0)))
        (= (position (us_repqtmk1 param__f__split_fields3) j2) (position
                                                                 (us_repqtmk1
                                                                   o21)
                                                                 j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (forall ((e Int))
        (=>
          (and (<= 0 e) (<= e 1))
          (=>
            (or (not (= j2 y1)) (not (= e 0)))
            (= (peek (us_repqtmk1 param__f__split_fields3) j2 e) (peek
                                                                   (us_repqtmk1
                                                                    o21)
                                                                   j2
                                                                   e))))))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o21) t) true) (not (= y1 t)))
          (not (= param__v1 t)))
        (= (valid_root (us_repqtmk1 param__f__split_fields3) t) true)))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o21) t) true) (not (= y1 t)))
          (not (= param__v1 t)))
        (= (oeq1
             (model1 (us_repqtmk1 param__f__split_fields3) t)
             (model1 (us_repqtmk1 o21) t)) true)))))

;; "H"
(assert
  (=>
    (not (= param__v1 0))
    (= (valid_root (us_repqtmk1 param__f__split_fields3) param__v1) true)))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o21) y1) i1))) true)
        (ite (and
               (not (= param__v1 0))
               (= (ole
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1 (us_repqtmk1 o21) y1) param__v1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1 (us_repqtmk1 o21) y1) i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1
                           (us_repqtmk1 param__f__split_fields3)
                           param__v1) i1))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields3) y1) i1))) true))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields3) y1) i1))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o21) y1) i1))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (and
          (not (= param__v1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1
                           (us_repqtmk1 param__f__split_fields3)
                           param__v1) i1))) true))
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o21) y1) i1))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields3) y1) i1))) true)
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields3) y1) i1)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o21) y1) i1)))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (and
          (not (= param__v1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1
                           (us_repqtmk1 param__f__split_fields3)
                           param__v1) i1))) true))
        (= (is_concat
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 o21) y1) param__v1)))
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1
                           (us_repqtmk1 param__f__split_fields3)
                           param__v1) i1)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o21) y1) i1)))) true)))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk1 param__f__split_fields3)
    true
    true
    true
    true))

;; "H"
(assert (in_range2 param__v1))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused70 () us_split_fields4
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused71 () us_rep2
  (us_repqtmk2 t__split_fields1))

;; "_q 'unused"
(define-fun usq_qtunused1 () us_split_fields4
  t__split_fields1)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused25 () us_split_fields4
  t__split_fields1)

;; "o"
(define-fun o22 () (Array Int natural)
  (rec__search_trees__search_tree__values t__split_fields1))

;; "rec__search_trees__search_tree__values'result'unused"
(define-fun rec__search_trees__search_tree__valuesqtresultqtunused1 () (Array Int natural)
  o22)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused71 () us_split_fields2
  param__f__split_fields3)

;; "o"
(define-fun o23 () us_rep1
  (us_repqtmk1 param__f__split_fields3))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused72 () us_rep1
  o23)

;; "o"
(define-fun o24 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields1))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused3 () extended_index_type
  o24)

;; "o"
(define-fun o25 () us_split_fields4
  (us_split_fieldsqtmk2 o24 o23 o22))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields4
  o25)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused73 () us_rep2
  (us_repqtmk2 o25))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused26 () us_split_fields4
  o25)

(declare-const t__split_fields2 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused3 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields2))

;; "H"
(assert (= t__split_fields2 o25))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused7 () Int
  param__v1)

;; "Ensures"
(assert (in_range4 param__v1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused4 () Int
  param__v1)

(declare-const x1 Int)

;; "x'unused"
(define-fun xqtunused1 () int__ref
  (int__refqtmk x1))

;; "H"
(assert (= x1 param__v1))

;; "Ensures"
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (= (ordered_leafs
                   (rec__search_trees__search_tree__struct t__split_fields2)
                   (to_rep1
                     (rec__search_trees__search_tree__root t__split_fields2))
                   (rec__search_trees__search_tree__values t__split_fields2)) true)
              (= (ordered_leafs
                   (rec__search_trees__search_tree__struct t__split_fields2)
                   x1
                   (rec__search_trees__search_tree__values t__split_fields2)) true))
            (= (ordered_leafs
                 (rec__search_trees__search_tree__struct t__split_fields2)
                 y1
                 (rec__search_trees__search_tree__values t__split_fields2)) true))
          (= (peek
               (rec__search_trees__search_tree__struct t__split_fields2)
               y1
               0) 0))
        (= (all_less_than
             (rec__search_trees__search_tree__struct t__split_fields2)
             x1
             (rec__search_trees__search_tree__values t__split_fields2)
             (to_rep
               (select (rec__search_trees__search_tree__values
                         t__split_fields2) y1))) true))
      (=>
        (not (= is_root true))
        (= (oeq1
             (model1
               (rec__search_trees__search_tree__struct t__split_fields2)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields2)))
             (model1
               (us_repqtmk1 dummy_1__split_fields1)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields2)))) true)))
    (forall ((i1 Int))
      (=>
        (and (<= 1 i1) (<= i1 100))
        (=
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 dummy_1__split_fields1) y1) i1))) true)
          (or
            (= (rec__tree_model__path_type__k
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               t__split_fields2)
                             x1) i1))) true)
            (= (rec__tree_model__path_type__k
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               t__split_fields2)
                             y1) i1))) true)))))))

;; "Assume"
(assert (in_range4 x1))

;; "Assume"
(assert (in_range4 y1))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_1__split_fields1)
    false
    true
    true
    true))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t__split_fields2) false true true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused72 () us_split_fields4
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused74 () us_rep2
  (us_repqtmk2 t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused27 () us_split_fields4
  t__split_fields2)

;; "temp___2067"
(define-fun temp___2067 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields2))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused11 
  () us_rep1
  temp___2067)

;; "o"
(define-fun o26 () us_split_fields2
  (us_split_fields3 temp___2067))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused28 () us_split_fields2
  o26)

(declare-const dummy_2__split_fields1 us_split_fields2)

;; "dummy_2__split_fields'unused"
(define-fun dummy_2__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk dummy_2__split_fields1))

;; "H"
(assert (= dummy_2__split_fields1 o26))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused73 () us_split_fields4
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused75 () us_rep2
  (us_repqtmk2 t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused29 () us_split_fields4
  t__split_fields2)

;; "temp___compl_2068"
(define-fun temp___compl_2068 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields2))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused12 
  () us_rep1
  temp___compl_2068)

;; "o"
(define-fun o27 () us_split_fields2
  (us_split_fields3 temp___compl_2068))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused30 () us_split_fields2
  o27)

;; "param__f__split_fields"
(define-fun param__f__split_fields4 () us_split_fields__ref
  (us_split_fields__refqtmk o27))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused2 () us_split_fields__ref
  param__f__split_fields4)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  xr)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  x1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  x1)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused4 () us_split_fields__ref
  param__f__split_fields4)

(declare-const xr1 Int)

(declare-const param__f__split_fields5 us_split_fields2)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused5 () us_split_fields__ref
  (us_split_fields__refqtmk param__f__split_fields5))

;; "xr'unused"
(define-fun xrqtunused1 () int__ref
  (int__refqtmk xr1))

;; "H"
(assert
  (= (size1 (us_repqtmk1 param__f__split_fields5)) (size1 (us_repqtmk1 o27))))

;; "H"
(assert (= (valid_root (us_repqtmk1 param__f__split_fields5) x1) true))

;; "H"
(assert (= xr1 (peek (us_repqtmk1 o27) x1 1)))

;; "H"
(assert (= (peek (us_repqtmk1 param__f__split_fields5) x1 1) 0))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (not (= j2 xr1))
        (= (parent (us_repqtmk1 param__f__split_fields5) j2) (parent
                                                               (us_repqtmk1
                                                                 o27)
                                                               j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= j2 xr1))
          (not (= (parent (us_repqtmk1 param__f__split_fields5) j2) 0)))
        (= (position (us_repqtmk1 param__f__split_fields5) j2) (position
                                                                 (us_repqtmk1
                                                                   o27)
                                                                 j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (forall ((e Int))
        (=>
          (and (<= 0 e) (<= e 1))
          (=>
            (or (not (= j2 x1)) (not (= e 1)))
            (= (peek (us_repqtmk1 param__f__split_fields5) j2 e) (peek
                                                                   (us_repqtmk1
                                                                    o27)
                                                                   j2
                                                                   e))))))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o27) t) true) (not (= x1 t)))
          (not (= xr1 t)))
        (= (valid_root (us_repqtmk1 param__f__split_fields5) t) true)))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o27) t) true) (not (= x1 t)))
          (not (= xr1 t)))
        (= (oeq1
             (model1 (us_repqtmk1 param__f__split_fields5) t)
             (model1 (us_repqtmk1 o27) t)) true)))))

;; "H"
(assert
  (=>
    (not (= xr1 0))
    (= (valid_root (us_repqtmk1 param__f__split_fields5) xr1) true)))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o27) x1) i1))) true)
        (ite (and
               (not (= xr1 0))
               (= (ole
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1 (us_repqtmk1 o27) x1) xr1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1 (us_repqtmk1 o27) x1) i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields5) xr1) i1))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields5) x1) i1))) true))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields5) x1) i1))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o27) x1) i1))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (and
          (not (= xr1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields5) xr1) i1))) true))
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o27) x1) i1))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields5) x1) i1))) true)
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields5) x1) i1)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o27) x1) i1)))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (and
          (not (= xr1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields5) xr1) i1))) true))
        (= (is_concat
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o27) x1) xr1)))
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields5) xr1) i1)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o27) x1) i1)))) true)))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk1 param__f__split_fields5)
    true
    true
    true
    true))

;; "H"
(assert (in_range2 xr1))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused74 () us_split_fields4
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused76 () us_rep2
  (us_repqtmk2 t__split_fields2))

;; "_q 'unused"
(define-fun usq_qtunused2 () us_split_fields4
  t__split_fields2)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused31 () us_split_fields4
  t__split_fields2)

;; "o"
(define-fun o28 () (Array Int natural)
  (rec__search_trees__search_tree__values t__split_fields2))

;; "rec__search_trees__search_tree__values'result'unused"
(define-fun rec__search_trees__search_tree__valuesqtresultqtunused2 () (Array Int natural)
  o28)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused75 () us_split_fields2
  param__f__split_fields5)

;; "o"
(define-fun o29 () us_rep1
  (us_repqtmk1 param__f__split_fields5))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused77 () us_rep1
  o29)

;; "o"
(define-fun o30 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields2))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused4 () extended_index_type
  o30)

;; "o"
(define-fun o31 () us_split_fields4
  (us_split_fieldsqtmk2 o30 o29 o28))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused2 () us_split_fields4
  o31)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused78 () us_rep2
  (us_repqtmk2 o31))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused32 () us_split_fields4
  o31)

(declare-const t__split_fields3 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused4 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields3))

;; "H"
(assert (= t__split_fields3 o31))

;; "Ensures"
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (= (ordered_leafs
                         (rec__search_trees__search_tree__struct
                           t__split_fields3)
                         (to_rep1
                           (rec__search_trees__search_tree__root
                             t__split_fields3))
                         (rec__search_trees__search_tree__values
                           t__split_fields3)) true)
                    (= (ordered_leafs
                         (rec__search_trees__search_tree__struct
                           t__split_fields3)
                         x1
                         (rec__search_trees__search_tree__values
                           t__split_fields3)) true))
                  (= (ordered_leafs
                       (rec__search_trees__search_tree__struct
                         t__split_fields3)
                       y1
                       (rec__search_trees__search_tree__values
                         t__split_fields3)) true))
                (=>
                  (not (= xr1 0))
                  (= (ordered_leafs
                       (rec__search_trees__search_tree__struct
                         t__split_fields3)
                       xr1
                       (rec__search_trees__search_tree__values
                         t__split_fields3)) true)))
              (= (peek
                   (rec__search_trees__search_tree__struct t__split_fields3)
                   x1
                   1) 0))
            (= (all_less_than
                 (rec__search_trees__search_tree__struct t__split_fields3)
                 x1
                 (rec__search_trees__search_tree__values t__split_fields3)
                 (to_rep
                   (select (rec__search_trees__search_tree__values
                             t__split_fields3) y1))) true))
          (= (peek
               (rec__search_trees__search_tree__struct t__split_fields3)
               y1
               0) 0))
        (=>
          (not (= xr1 0))
          (= (all_more_than
               (rec__search_trees__search_tree__struct t__split_fields3)
               xr1
               (rec__search_trees__search_tree__values t__split_fields3)
               (to_rep
                 (select (rec__search_trees__search_tree__values
                           t__split_fields3) x1))) true)))
      (=>
        (not (= is_root true))
        (= (oeq1
             (model1
               (rec__search_trees__search_tree__struct t__split_fields3)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields3)))
             (model1
               (us_repqtmk1 dummy_1__split_fields1)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields3)))) true)))
    (forall ((i1 Int))
      (=>
        (and (<= 1 i1) (<= i1 100))
        (=
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 dummy_1__split_fields1) y1) i1))) true)
          (or
            (or
              (= (rec__tree_model__path_type__k
                   (us_split_fields7
                     (select (model1
                               (rec__search_trees__search_tree__struct
                                 t__split_fields3)
                               x1) i1))) true)
              (= (rec__tree_model__path_type__k
                   (us_split_fields7
                     (select (model1
                               (rec__search_trees__search_tree__struct
                                 t__split_fields3)
                               y1) i1))) true))
            (and
              (not (= xr1 0))
              (= (rec__tree_model__path_type__k
                   (us_split_fields7
                     (select (model1
                               (rec__search_trees__search_tree__struct
                                 t__split_fields3)
                               xr1) i1))) true))))))))

;; "Assume"
(assert (in_range4 x1))

;; "Assume"
(assert (in_range4 y1))

;; "Assume"
(assert (in_range2 xr1))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_1__split_fields1)
    false
    true
    true
    true))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t__split_fields3) false true true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused76 () us_split_fields4
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused79 () us_rep2
  (us_repqtmk2 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused33 () us_split_fields4
  t__split_fields3)

;; "temp___2092"
(define-fun temp___2092 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields3))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused13 
  () us_rep1
  temp___2092)

;; "o"
(define-fun o32 () us_split_fields2
  (us_split_fields3 temp___2092))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused34 () us_split_fields2
  o32)

(declare-const dummy_3__split_fields1 us_split_fields2)

;; "dummy_3__split_fields'unused"
(define-fun dummy_3__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk dummy_3__split_fields1))

;; "H"
(assert (= dummy_3__split_fields1 o32))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused77 () us_split_fields4
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused80 () us_rep2
  (us_repqtmk2 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused35 () us_split_fields4
  t__split_fields3)

;; "temp___compl_2093"
(define-fun temp___compl_2093 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields3))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused14 
  () us_rep1
  temp___compl_2093)

;; "o"
(define-fun o33 () us_split_fields2
  (us_split_fields3 temp___compl_2093))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused36 () us_split_fields2
  o33)

;; "param__f__split_fields"
(define-fun param__f__split_fields6 () us_split_fields__ref
  (us_split_fields__refqtmk o33))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused3 () us_split_fields__ref
  param__f__split_fields6)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  xr1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  y1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused13 () Int
  y1)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused6 () us_split_fields__ref
  param__f__split_fields6)

(declare-const param__f__split_fields7 us_split_fields2)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused7 () us_split_fields__ref
  (us_split_fields__refqtmk param__f__split_fields7))

;; "H"
(assert
  (= (size1 (us_repqtmk1 param__f__split_fields7)) (size1 (us_repqtmk1 o33))))

;; "H"
(assert (= xr1 (peek (us_repqtmk1 param__f__split_fields7) y1 0)))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and (= (valid_root (us_repqtmk1 o33) j2) true) (not (= j2 xr1)))
        (= (valid_root (us_repqtmk1 param__f__split_fields7) j2) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (valid_root (us_repqtmk1 param__f__split_fields7) j2) true)
        (= (valid_root (us_repqtmk1 o33) j2) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (not (= j2 xr1))
        (= (parent (us_repqtmk1 param__f__split_fields7) j2) (parent
                                                               (us_repqtmk1
                                                                 o33)
                                                               j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= j2 xr1))
          (not (= (parent (us_repqtmk1 param__f__split_fields7) j2) 0)))
        (= (position (us_repqtmk1 param__f__split_fields7) j2) (position
                                                                 (us_repqtmk1
                                                                   o33)
                                                                 j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (forall ((e Int))
        (=>
          (and (<= 0 e) (<= e 1))
          (=>
            (or (not (= j2 y1)) (not (= e 0)))
            (= (peek (us_repqtmk1 param__f__split_fields7) j2 e) (peek
                                                                   (us_repqtmk1
                                                                    o33)
                                                                   j2
                                                                   e))))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o33) y1) j2))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields7) y1) j2))) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= xr1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o33) xr1) j2))) true))
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields7) y1) j2))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields7) y1) i1))) true)
        (ite (and
               (not (= xr1 0))
               (= (ole
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (us_repqtmk1 param__f__split_fields7)
                                  y1) xr1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (us_repqtmk1 param__f__split_fields7)
                                  y1) i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o33) xr1) i1))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o33) y1) i1))) true))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o33) y1) j2))) true)
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields7) y1) j2)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o33) y1) j2)))) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= xr1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o33) xr1) j2))) true))
        (= (is_concat
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields7) y1) 
                 (peek
                   (us_repqtmk1 param__f__split_fields7)
                   y1
                   0))))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o33) xr1) j2)))
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields7) y1) j2)))) true)))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o33) t) true) (not (= y1 t)))
          (not (= xr1 t)))
        (= (oeq1
             (model1 (us_repqtmk1 param__f__split_fields7) t)
             (model1 (us_repqtmk1 o33) t)) true)))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk1 param__f__split_fields7)
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused78 () us_split_fields4
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused81 () us_rep2
  (us_repqtmk2 t__split_fields3))

;; "_q 'unused"
(define-fun usq_qtunused3 () us_split_fields4
  t__split_fields3)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused37 () us_split_fields4
  t__split_fields3)

;; "o"
(define-fun o34 () (Array Int natural)
  (rec__search_trees__search_tree__values t__split_fields3))

;; "rec__search_trees__search_tree__values'result'unused"
(define-fun rec__search_trees__search_tree__valuesqtresultqtunused3 () (Array Int natural)
  o34)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused79 () us_split_fields2
  param__f__split_fields7)

;; "o"
(define-fun o35 () us_rep1
  (us_repqtmk1 param__f__split_fields7))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused82 () us_rep1
  o35)

;; "o"
(define-fun o36 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields3))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused5 () extended_index_type
  o36)

;; "o"
(define-fun o37 () us_split_fields4
  (us_split_fieldsqtmk2 o36 o35 o34))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused3 () us_split_fields4
  o37)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused83 () us_rep2
  (us_repqtmk2 o37))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused38 () us_split_fields4
  o37)

(declare-const t__split_fields4 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused5 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields4))

;; "H"
(assert (= t__split_fields4 o37))

;; "Ensures"
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (= (ordered_leafs
                   (rec__search_trees__search_tree__struct t__split_fields4)
                   (to_rep1
                     (rec__search_trees__search_tree__root t__split_fields4))
                   (rec__search_trees__search_tree__values t__split_fields4)) true)
              (= (ordered_leafs
                   (rec__search_trees__search_tree__struct t__split_fields4)
                   x1
                   (rec__search_trees__search_tree__values t__split_fields4)) true))
            (= (ordered_leafs
                 (rec__search_trees__search_tree__struct t__split_fields4)
                 y1
                 (rec__search_trees__search_tree__values t__split_fields4)) true))
          (= (all_more_than
               (rec__search_trees__search_tree__struct t__split_fields4)
               y1
               (rec__search_trees__search_tree__values t__split_fields4)
               (to_rep
                 (select (rec__search_trees__search_tree__values
                           t__split_fields4) x1))) true))
        (= (peek
             (rec__search_trees__search_tree__struct t__split_fields4)
             x1
             1) 0))
      (=>
        (not (= is_root true))
        (= (oeq1
             (model1
               (rec__search_trees__search_tree__struct t__split_fields4)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields4)))
             (model1
               (us_repqtmk1 dummy_1__split_fields1)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields4)))) true)))
    (forall ((i1 Int))
      (=>
        (and (<= 1 i1) (<= i1 100))
        (=
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 dummy_1__split_fields1) y1) i1))) true)
          (or
            (= (rec__tree_model__path_type__k
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               t__split_fields4)
                             x1) i1))) true)
            (= (rec__tree_model__path_type__k
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               t__split_fields4)
                             y1) i1))) true)))))))

;; "Assume"
(assert (in_range4 x1))

;; "Assume"
(assert (in_range4 y1))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_1__split_fields1)
    false
    true
    true
    true))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t__split_fields4) false true true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused80 () us_split_fields4
  t__split_fields4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused84 () us_rep2
  (us_repqtmk2 t__split_fields4))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused39 () us_split_fields4
  t__split_fields4)

;; "temp___2113"
(define-fun temp___2113 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields4))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused15 
  () us_rep1
  temp___2113)

;; "o"
(define-fun o38 () us_split_fields2
  (us_split_fields3 temp___2113))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused40 () us_split_fields2
  o38)

(declare-const dummy_4__split_fields1 us_split_fields2)

;; "dummy_4__split_fields'unused"
(define-fun dummy_4__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk dummy_4__split_fields1))

;; "H"
(assert (= dummy_4__split_fields1 o38))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused81 () us_split_fields4
  t__split_fields4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused85 () us_rep2
  (us_repqtmk2 t__split_fields4))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused41 () us_split_fields4
  t__split_fields4)

;; "temp___compl_2114"
(define-fun temp___compl_2114 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields4))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused16 
  () us_rep1
  temp___compl_2114)

;; "o"
(define-fun o39 () us_split_fields2
  (us_split_fields3 temp___compl_2114))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused42 () us_split_fields2
  o39)

;; "param__f__split_fields"
(define-fun param__f__split_fields8 () us_split_fields__ref
  (us_split_fields__refqtmk o39))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused4 () us_split_fields__ref
  param__f__split_fields8)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused14 () Int
  y1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused15 () Int
  x1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused16 () Int
  x1)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused8 () us_split_fields__ref
  param__f__split_fields8)

(declare-const param__f__split_fields9 us_split_fields2)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused9 () us_split_fields__ref
  (us_split_fields__refqtmk param__f__split_fields9))

;; "H"
(assert
  (= (size1 (us_repqtmk1 param__f__split_fields9)) (size1 (us_repqtmk1 o39))))

;; "H"
(assert (= y1 (peek (us_repqtmk1 param__f__split_fields9) x1 1)))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and (= (valid_root (us_repqtmk1 o39) j2) true) (not (= j2 y1)))
        (= (valid_root (us_repqtmk1 param__f__split_fields9) j2) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (valid_root (us_repqtmk1 param__f__split_fields9) j2) true)
        (= (valid_root (us_repqtmk1 o39) j2) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (not (= j2 y1))
        (= (parent (us_repqtmk1 param__f__split_fields9) j2) (parent
                                                               (us_repqtmk1
                                                                 o39)
                                                               j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= j2 y1))
          (not (= (parent (us_repqtmk1 param__f__split_fields9) j2) 0)))
        (= (position (us_repqtmk1 param__f__split_fields9) j2) (position
                                                                 (us_repqtmk1
                                                                   o39)
                                                                 j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (forall ((e Int))
        (=>
          (and (<= 0 e) (<= e 1))
          (=>
            (or (not (= j2 x1)) (not (= e 1)))
            (= (peek (us_repqtmk1 param__f__split_fields9) j2 e) (peek
                                                                   (us_repqtmk1
                                                                    o39)
                                                                   j2
                                                                   e))))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o39) x1) j2))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields9) x1) j2))) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= y1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o39) y1) j2))) true))
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields9) x1) j2))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields9) x1) i1))) true)
        (ite (and
               (not (= y1 0))
               (= (ole
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (us_repqtmk1 param__f__split_fields9)
                                  x1) y1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (us_repqtmk1 param__f__split_fields9)
                                  x1) i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o39) y1) i1))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o39) x1) i1))) true))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o39) x1) j2))) true)
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields9) x1) j2)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o39) x1) j2)))) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= y1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o39) y1) j2))) true))
        (= (is_concat
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields9) x1) 
                 (peek
                   (us_repqtmk1 param__f__split_fields9)
                   x1
                   1))))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o39) y1) j2)))
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields9) x1) j2)))) true)))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o39) t) true) (not (= x1 t)))
          (not (= y1 t)))
        (= (oeq1
             (model1 (us_repqtmk1 param__f__split_fields9) t)
             (model1 (us_repqtmk1 o39) t)) true)))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk1 param__f__split_fields9)
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused82 () us_split_fields4
  t__split_fields4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused86 () us_rep2
  (us_repqtmk2 t__split_fields4))

;; "_q 'unused"
(define-fun usq_qtunused4 () us_split_fields4
  t__split_fields4)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused43 () us_split_fields4
  t__split_fields4)

;; "o"
(define-fun o40 () (Array Int natural)
  (rec__search_trees__search_tree__values t__split_fields4))

;; "rec__search_trees__search_tree__values'result'unused"
(define-fun rec__search_trees__search_tree__valuesqtresultqtunused4 () (Array Int natural)
  o40)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused83 () us_split_fields2
  param__f__split_fields9)

;; "o"
(define-fun o41 () us_rep1
  (us_repqtmk1 param__f__split_fields9))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused87 () us_rep1
  o41)

;; "o"
(define-fun o42 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields4))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused6 () extended_index_type
  o42)

;; "o"
(define-fun o43 () us_split_fields4
  (us_split_fieldsqtmk2 o42 o41 o40))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused4 () us_split_fields4
  o43)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused88 () us_rep2
  (us_repqtmk2 o43))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused44 () us_split_fields4
  o43)

(declare-const t__split_fields5 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused6 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields5))

;; "H"
(assert (= t__split_fields5 o43))

;; "Ensures"
(assert
  (and
    (and
      (and
        (=>
          (not (= is_root true))
          (= (ordered_leafs
               (rec__search_trees__search_tree__struct t__split_fields5)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields5))
               (rec__search_trees__search_tree__values t__split_fields5)) true))
        (= (ordered_leafs
             (rec__search_trees__search_tree__struct t__split_fields5)
             x1
             (rec__search_trees__search_tree__values t__split_fields5)) true))
      (=>
        (not (= is_root true))
        (= (oeq1
             (model1
               (rec__search_trees__search_tree__struct t__split_fields5)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields5)))
             (model1
               (us_repqtmk1 dummy_1__split_fields1)
               (to_rep1
                 (rec__search_trees__search_tree__root t__split_fields5)))) true)))
    (forall ((i1 Int))
      (=>
        (and (<= 1 i1) (<= i1 100))
        (=
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1 (us_repqtmk1 dummy_1__split_fields1) y1) i1))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields7
                 (select (model1
                           (rec__search_trees__search_tree__struct
                             t__split_fields5)
                           x1) i1))) true))))))

;; "Assume"
(assert (in_range4 x1))

;; "Assume"
(assert (in_range4 y1))

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk1 dummy_1__split_fields1)
    false
    true
    true
    true))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk2 t__split_fields5) false true true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused84 () us_split_fields4
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused89 () us_rep2
  (us_repqtmk2 t__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused45 () us_split_fields4
  t__split_fields5)

;; "temp___2126"
(define-fun temp___2126 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields5))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused17 
  () us_rep1
  temp___2126)

;; "o"
(define-fun o44 () us_split_fields2
  (us_split_fields3 temp___2126))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused46 () us_split_fields2
  o44)

(declare-const dummy_5__split_fields1 us_split_fields2)

;; "dummy_5__split_fields'unused"
(define-fun dummy_5__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk dummy_5__split_fields1))

;; "H"
(assert (= dummy_5__split_fields1 o44))

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 is_root))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (not (= spark__branch1 true)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused85 () us_split_fields4
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused90 () us_rep2
  (us_repqtmk2 t__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused47 () us_split_fields4
  t__split_fields5)

;; "temp___compl_2131"
(define-fun temp___compl_2131 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields5))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused18 
  () us_rep1
  temp___compl_2131)

;; "o"
(define-fun o45 () us_split_fields2
  (us_split_fields3 temp___compl_2131))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused48 () us_split_fields2
  o45)

;; "param__f__split_fields"
(define-fun param__f__split_fields10 () us_split_fields__ref
  (us_split_fields__refqtmk o45))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused5 () us_split_fields__ref
  param__f__split_fields10)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused17 () Int
  x1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused18 () Int
  d1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused19 () Int
  j1)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused86 () us_split_fields4
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused91 () us_rep2
  (us_repqtmk2 t__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused49 () us_split_fields4
  t__split_fields5)

;; "o"
(define-fun o46 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields5))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused7 () extended_index_type
  o46)

(declare-const o47 Int)

;; "Ensures"
(assert (= (to_rep1 o46) o47))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o47)

;; "Ensures"
(assert (in_range4 o47))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused5 () Int
  o47)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused10 () us_split_fields__ref
  param__f__split_fields10)

(declare-const param__f__split_fields11 us_split_fields2)

;; "param__f__split_fields'unused"
(define-fun param__f__split_fieldsqtunused11 () us_split_fields__ref
  (us_split_fields__refqtmk param__f__split_fields11))

;; "H"
(assert
  (= (size1 (us_repqtmk1 param__f__split_fields11)) (size1 (us_repqtmk1 o45))))

;; "H"
(assert (= x1 (peek (us_repqtmk1 param__f__split_fields11) j1 d1)))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and (= (valid_root (us_repqtmk1 o45) j2) true) (not (= j2 x1)))
        (= (valid_root (us_repqtmk1 param__f__split_fields11) j2) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (valid_root (us_repqtmk1 param__f__split_fields11) j2) true)
        (= (valid_root (us_repqtmk1 o45) j2) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (not (= j2 x1))
        (= (parent (us_repqtmk1 param__f__split_fields11) j2) (parent
                                                                (us_repqtmk1
                                                                  o45)
                                                                j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= j2 x1))
          (not (= (parent (us_repqtmk1 param__f__split_fields11) j2) 0)))
        (= (position (us_repqtmk1 param__f__split_fields11) j2) (position
                                                                  (us_repqtmk1
                                                                    o45)
                                                                  j2))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (forall ((e Int))
        (=>
          (and (<= 0 e) (<= e 1))
          (=>
            (or (not (= j2 j1)) (not (= e d1)))
            (= (peek (us_repqtmk1 param__f__split_fields11) j2 e) (peek
                                                                    (us_repqtmk1
                                                                    o45)
                                                                    j2
                                                                    e))))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o45) o47) j2))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields11) o47) j2))) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= x1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o45) x1) j2))) true))
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields11) o47) j2))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1 (us_repqtmk1 param__f__split_fields11) o47) i1))) true)
        (ite (and
               (not (= x1 0))
               (= (ole
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (us_repqtmk1 param__f__split_fields11)
                                  o47) x1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (us_repqtmk1 param__f__split_fields11)
                                  o47) i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o45) x1) i1))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o45) o47) i1))) true))))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select (model1 (us_repqtmk1 o45) o47) j2))) true)
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields11) o47) j2)))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o45) o47) j2)))) true)))))

;; "H"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and
          (not (= x1 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select (model1 (us_repqtmk1 o45) x1) j2))) true))
        (= (is_concat
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields11) o47) 
                 (peek
                   (us_repqtmk1 param__f__split_fields11)
                   j1
                   d1))))
             (rec__tree_model__path_type__a
               (us_split_fields7 (select (model1 (us_repqtmk1 o45) x1) j2)))
             (rec__tree_model__path_type__a
               (us_split_fields7
                 (select (model1 (us_repqtmk1 param__f__split_fields11) o47) j2)))) true)))))

;; "H"
(assert
  (forall ((t Int))
    (=>
      (and (<= 1 t) (<= t 100))
      (=>
        (and
          (and (= (valid_root (us_repqtmk1 o45) t) true) (not (= o47 t)))
          (not (= x1 t)))
        (= (oeq1
             (model1 (us_repqtmk1 param__f__split_fields11) t)
             (model1 (us_repqtmk1 o45) t)) true)))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk1 param__f__split_fields11)
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused87 () us_split_fields4
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused92 () us_rep2
  (us_repqtmk2 t__split_fields5))

;; "_q 'unused"
(define-fun usq_qtunused5 () us_split_fields4
  t__split_fields5)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused50 () us_split_fields4
  t__split_fields5)

;; "o"
(define-fun o48 () (Array Int natural)
  (rec__search_trees__search_tree__values t__split_fields5))

;; "rec__search_trees__search_tree__values'result'unused"
(define-fun rec__search_trees__search_tree__valuesqtresultqtunused5 () (Array Int natural)
  o48)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused88 () us_split_fields2
  param__f__split_fields11)

;; "o"
(define-fun o49 () us_rep1
  (us_repqtmk1 param__f__split_fields11))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused93 () us_rep1
  o49)

;; "o"
(define-fun o50 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields5))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused8 () extended_index_type
  o50)

;; "o"
(define-fun o51 () us_split_fields4
  (us_split_fieldsqtmk2 o50 o49 o48))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused5 () us_split_fields4
  o51)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused94 () us_rep2
  (us_repqtmk2 o51))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused51 () us_split_fields4
  o51)

(declare-const t__split_fields6 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused7 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields6))

;; "H"
(assert (= t__split_fields6 o51))

;; "Assert"
(assert
  (= (oeq1
       (model1
         (us_repqtmk1 dummy_5__split_fields1)
         (to_rep1 (rec__search_trees__search_tree__root t__split_fields6)))
       (model1
         (us_repqtmk1 dummy_1__split_fields1)
         (to_rep1 (rec__search_trees__search_tree__root t__split_fields6)))) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused20 () Int
  d1)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused89 () us_split_fields4
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused95 () us_rep2
  (us_repqtmk2 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused52 () us_split_fields4
  t__split_fields6)

;; "o"
(define-fun o52 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields6))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused9 () extended_index_type
  o52)

(declare-const o53 Int)

;; "Ensures"
(assert (= (to_rep1 o52) o53))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () Int
  o53)

;; "Ensures"
(assert (in_range4 o53))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused6 () Int
  o53)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused90 () us_split_fields2
  f_old__split_fields)

;; "o"
(define-fun o54 () us_rep1
  (us_repqtmk1 f_old__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused96 () us_rep1
  o54)

;; "temp___2138"
(define-fun temp___2138 () (Array Int us_rep4)
  (model1 o54 o53))

;; "H"
(assert (dynamic_invariant temp___2138 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7 (select temp___2138 o53))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields7 (select temp___2138 o53)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 o53))
        (ite (and
               (not (= (parent o54 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields7 (select temp___2138 (parent o54 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select temp___2138 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields7 (select temp___2138 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields7 (select temp___2138 i1))) true)
             (not (= i1 o53)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2138 (parent o54 i1))))
             (position o54 i1)
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2138 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2138 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select temp___2138 i1))) true)
        (forall ((j2 Int))
          (=>
            (and (<= 1 j2) (<= j2 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields7 (select temp___2138 j2))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___2138 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___2138 j2)))) true))
              (= j2 i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused () (Array Int us_rep4)
  temp___2138)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused21 () Int
  y1)

;; "o"
(define-fun o55 () us_rep4
  (select temp___2138 y1))

;; "get'result'unused"
(define-fun getqtresultqtunused () us_rep4
  o55)

;; "o"
(define-fun o56 () us_split_fields6
  (us_split_fields7 o55))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused53 () us_split_fields6
  o56)

;; "o"
(define-fun o57 () us_rep3
  (rec__tree_model__path_type__a o56))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused () us_rep3
  o57)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused91 () us_split_fields4
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused97 () us_rep2
  (us_repqtmk2 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused54 () us_split_fields4
  t__split_fields6)

;; "o"
(define-fun o58 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields6))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused10 () extended_index_type
  o58)

(declare-const o59 Int)

;; "Ensures"
(assert (= (to_rep1 o58) o59))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () Int
  o59)

;; "Ensures"
(assert (in_range4 o59))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused7 () Int
  o59)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused92 () us_split_fields4
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused98 () us_rep2
  (us_repqtmk2 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused55 () us_split_fields4
  t__split_fields6)

;; "o"
(define-fun o60 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields6))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused19 
  () us_rep1
  o60)

;; "temp___2137"
(define-fun temp___2137 () (Array Int us_rep4)
  (model1 o60 o59))

;; "H"
(assert (dynamic_invariant temp___2137 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7 (select temp___2137 o59))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields7 (select temp___2137 o59)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 o59))
        (ite (and
               (not (= (parent o60 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields7 (select temp___2137 (parent o60 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select temp___2137 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields7 (select temp___2137 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields7 (select temp___2137 i1))) true)
             (not (= i1 o59)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2137 (parent o60 i1))))
             (position o60 i1)
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2137 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2137 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select temp___2137 i1))) true)
        (forall ((j2 Int))
          (=>
            (and (<= 1 j2) (<= j2 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields7 (select temp___2137 j2))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___2137 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___2137 j2)))) true))
              (= j2 i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused1 () (Array Int us_rep4)
  temp___2137)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused22 () Int
  x1)

;; "o"
(define-fun o61 () us_rep4
  (select temp___2137 x1))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () us_rep4
  o61)

;; "o"
(define-fun o62 () us_split_fields6
  (us_split_fields7 o61))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused56 () us_split_fields6
  o62)

;; "o"
(define-fun o63 () us_rep3
  (rec__tree_model__path_type__a o62))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused1 () us_rep3
  o63)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused93 () us_split_fields4
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused99 () us_rep2
  (us_repqtmk2 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused57 () us_split_fields4
  t__split_fields6)

;; "o"
(define-fun o64 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields6))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused11 () extended_index_type
  o64)

(declare-const o65 Int)

;; "Ensures"
(assert (= (to_rep1 o64) o65))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused5 () Int
  o65)

;; "Ensures"
(assert (in_range4 o65))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused8 () Int
  o65)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused94 () us_split_fields2
  f_old__split_fields)

;; "o"
(define-fun o66 () us_rep1
  (us_repqtmk1 f_old__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused100 () us_rep1
  o66)

;; "temp___2136"
(define-fun temp___2136 () (Array Int us_rep4)
  (model1 o66 o65))

;; "H"
(assert (dynamic_invariant temp___2136 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7 (select temp___2136 o65))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields7 (select temp___2136 o65)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 o65))
        (ite (and
               (not (= (parent o66 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields7 (select temp___2136 (parent o66 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select temp___2136 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields7 (select temp___2136 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields7 (select temp___2136 i1))) true)
             (not (= i1 o65)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2136 (parent o66 i1))))
             (position o66 i1)
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2136 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___2136 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select temp___2136 i1))) true)
        (forall ((j2 Int))
          (=>
            (and (<= 1 j2) (<= j2 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields7 (select temp___2136 j2))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___2136 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___2136 j2)))) true))
              (= j2 i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused2 () (Array Int us_rep4)
  temp___2136)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused23 () Int
  j1)

;; "o"
(define-fun o67 () us_rep4
  (select temp___2136 j1))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () us_rep4
  o67)

;; "o"
(define-fun o68 () us_split_fields6
  (us_split_fields7 o67))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused58 () us_split_fields6
  o68)

;; "o"
(define-fun o69 () us_rep3
  (rec__tree_model__path_type__a o68))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused2 () us_rep3
  o69)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused95 () us_split_fields4
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused101 () us_rep2
  (us_repqtmk2 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused59 () us_split_fields4
  t__split_fields6)

;; "o"
(define-fun o70 () extended_index_type
  (rec__search_trees__search_tree__root t__split_fields6))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused12 () extended_index_type
  o70)

(declare-const o71 Int)

;; "Ensures"
(assert (= (to_rep1 o70) o71))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused6 () Int
  o71)

;; "Ensures"
(assert (in_range4 o71))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused9 () Int
  o71)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused96 () us_split_fields4
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused102 () us_rep2
  (us_repqtmk2 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused60 () us_split_fields4
  t__split_fields6)

;; "o"
(define-fun o72 () us_rep1
  (rec__search_trees__search_tree__struct t__split_fields6))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused20 
  () us_rep1
  o72)

;; Goal "def'vc"
;; File "search_trees.ads", line 215, characters 0-0
(assert
  (not (= (valid_root o72 o71) true)))

(check-sat)
