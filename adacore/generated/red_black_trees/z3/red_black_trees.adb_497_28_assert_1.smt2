;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep2 ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep1)(rec__search_trees__search_tree__values (Array Int natural))))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const search_trees__search_tree__root__first__bit Int)

(declare-const search_trees__search_tree__root__last__bit Int)

(declare-const search_trees__search_tree__root__position Int)

;; "search_trees__search_tree__root__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__root__first__bit))

;; "search_trees__search_tree__root__last__bit_axiom"
(assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; "search_trees__search_tree__root__position_axiom"
(assert (<= 0 search_trees__search_tree__root__position))

(declare-const search_trees__search_tree__struct__first__bit Int)

(declare-const search_trees__search_tree__struct__last__bit Int)

(declare-const search_trees__search_tree__struct__position Int)

;; "search_trees__search_tree__struct__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__struct__first__bit))

;; "search_trees__search_tree__struct__last__bit_axiom"
(assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; "search_trees__search_tree__struct__position_axiom"
(assert (<= 0 search_trees__search_tree__struct__position))

(declare-const search_trees__search_tree__values__first__bit Int)

(declare-const search_trees__search_tree__values__last__bit Int)

(declare-const search_trees__search_tree__values__position Int)

;; "search_trees__search_tree__values__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__values__first__bit))

;; "search_trees__search_tree__values__last__bit_axiom"
(assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; "search_trees__search_tree__values__position_axiom"
(assert (<= 0 search_trees__search_tree__values__position))

(declare-const dummy2 us_rep2)

(declare-sort color_type 0)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep3 (color_type) Int)

;; "of_rep"
(declare-fun of_rep3 (Int) color_type)

;; "inversion_axiom"
(assert
  (forall ((x color_type))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x color_type))
    (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-datatypes ()
  ((us_split_fields6
   (us_split_fieldsqtmk3
   (rec__red_black_trees__rbt__struct us_rep2)(rec__red_black_trees__rbt__color (Array Int color_type))))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const red_black_trees__rbt__struct__first__bit Int)

(declare-const red_black_trees__rbt__struct__last__bit Int)

(declare-const red_black_trees__rbt__struct__position Int)

;; "red_black_trees__rbt__struct__first__bit_axiom"
(assert (<= 0 red_black_trees__rbt__struct__first__bit))

;; "red_black_trees__rbt__struct__last__bit_axiom"
(assert
  (< red_black_trees__rbt__struct__first__bit red_black_trees__rbt__struct__last__bit))

;; "red_black_trees__rbt__struct__position_axiom"
(assert (<= 0 red_black_trees__rbt__struct__position))

(declare-const red_black_trees__rbt__color__first__bit Int)

(declare-const red_black_trees__rbt__color__last__bit Int)

(declare-const red_black_trees__rbt__color__position Int)

;; "red_black_trees__rbt__color__first__bit_axiom"
(assert (<= 0 red_black_trees__rbt__color__first__bit))

;; "red_black_trees__rbt__color__last__bit_axiom"
(assert
  (< red_black_trees__rbt__color__first__bit red_black_trees__rbt__color__last__bit))

;; "red_black_trees__rbt__color__position_axiom"
(assert (<= 0 red_black_trees__rbt__color__position))

(declare-const dummy3 us_rep3)

;; "size"
(declare-fun size (us_rep2) Int)

;; "size"
(declare-fun size1 (us_rep1) Int)

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "tree_structure"
(declare-fun tree_structure (us_rep1) Bool)

;; "ordered_leafs"
(declare-fun ordered_leafs (us_rep1
  Int
  (Array Int natural)) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_344 us_rep3) (temp___is_init_340 Bool) (temp___skip_constant_341 Bool) (temp___do_toplevel_342 Bool) (temp___do_typ_inv_343 Bool)) Bool
  (and
    (=>
      (= temp___do_typ_inv_343 true)
      (let ((temp___345 (rec__red_black_trees__rbt__struct
                          (us_split_fields7 temp___expr_344))))
        (ite (= (size1
                  (rec__search_trees__search_tree__struct
                    (us_split_fields5 temp___345))) 0)
          (= (to_rep
               (rec__search_trees__search_tree__root
                 (us_split_fields5 temp___345))) 0)
          (and
            (and
              (not
                (= (to_rep
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 temp___345))) 0))
              (= (valid_root
                   (rec__search_trees__search_tree__struct
                     (us_split_fields5 temp___345))
                   (to_rep
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 temp___345)))) true))
            (= (ordered_leafs
                 (rec__search_trees__search_tree__struct
                   (us_split_fields5 temp___345))
                 (to_rep
                   (rec__search_trees__search_tree__root
                     (us_split_fields5 temp___345)))
                 (rec__search_trees__search_tree__values
                   (us_split_fields5 temp___345))) true)))))
    (=>
      (= temp___do_typ_inv_343 true)
      (= (tree_structure
           (rec__search_trees__search_tree__struct
             (us_split_fields5
               (rec__red_black_trees__rbt__struct
                 (us_split_fields7 temp___expr_344))))) true))))

(declare-sort us_rep4 0)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const dummy4 us_rep4)

(declare-datatypes ()
  ((us_split_fields8
   (us_split_fieldsqtmk4
   (rec__tree_model__path_type__a us_rep4)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep5 (us_repqtmk4 (us_split_fields9 us_split_fields8)))))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy5 us_rep5)

;; "model"
(declare-fun model1 (us_rep2) (Array Int us_rep5))

;; "model"
(declare-fun model2 (us_rep1
  Int) (Array Int us_rep5))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const dummy6 Int)

;; "last"
(declare-fun last (us_rep4) Int)

;; "length"
(define-fun length ((param__container us_rep4)) Int
  (- (+ (last param__container) 1) 1))

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const component__size3 Int)

(declare-const alignment10 Int)

;; "value__size_axiom"
(assert (<= 0 value__size10))

;; "object__size_axiom"
(assert (<= 0 object__size10))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment10))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_497 (Array Int us_rep5)) (temp___is_init_493 Bool) (temp___skip_constant_494 Bool) (temp___do_toplevel_495 Bool) (temp___do_typ_inv_496 Bool)) Bool
  (forall ((temp___498 Int))
    (=>
      (and (<= 1 temp___498) (<= temp___498 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields9 (select temp___expr_497 temp___498)))) 100))))

;; "peek"
(declare-fun peek (us_rep2
  Int
  Int) Int)

;; "peek"
(declare-fun peek1 (us_rep1
  Int
  Int) Int)

(declare-datatypes ()
  ((us_split_fields10
   (us_split_fieldsqtmk5
   (rec__red_black_trees__black_count__status Bool)(rec__red_black_trees__black_count__depth extended_index_type)(rec__red_black_trees__black_count__count extended_index_type)))))

(declare-datatypes ()
  ((us_rep6 (us_repqtmk5 (us_split_fields11 us_split_fields10)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep6) (b us_rep6)) Bool
  (ite (and
         (= (ite (rec__red_black_trees__black_count__status
                   (us_split_fields11 a)) 1 0) (ite (rec__red_black_trees__black_count__status
                                                      (us_split_fields11 b)) 1 0))
         (and
           (= (to_rep
                (rec__red_black_trees__black_count__depth
                  (us_split_fields11 a))) (to_rep
                                            (rec__red_black_trees__black_count__depth
                                              (us_split_fields11 b))))
           (= (to_rep
                (rec__red_black_trees__black_count__count
                  (us_split_fields11 a))) (to_rep
                                            (rec__red_black_trees__black_count__count
                                              (us_split_fields11 b))))))
    true
    false))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const alignment11 Int)

;; "value__size_axiom"
(assert (<= 0 value__size11))

;; "object__size_axiom"
(assert (<= 0 object__size11))

;; "alignment_axiom"
(assert (<= 0 alignment11))

(declare-const red_black_trees__black_count__status__first__bit Int)

(declare-const red_black_trees__black_count__status__last__bit Int)

(declare-const red_black_trees__black_count__status__position Int)

;; "red_black_trees__black_count__status__first__bit_axiom"
(assert (<= 0 red_black_trees__black_count__status__first__bit))

;; "red_black_trees__black_count__status__last__bit_axiom"
(assert
  (< red_black_trees__black_count__status__first__bit red_black_trees__black_count__status__last__bit))

;; "red_black_trees__black_count__status__position_axiom"
(assert (<= 0 red_black_trees__black_count__status__position))

(declare-const red_black_trees__black_count__depth__first__bit Int)

(declare-const red_black_trees__black_count__depth__last__bit Int)

(declare-const red_black_trees__black_count__depth__position Int)

;; "red_black_trees__black_count__depth__first__bit_axiom"
(assert (<= 0 red_black_trees__black_count__depth__first__bit))

;; "red_black_trees__black_count__depth__last__bit_axiom"
(assert
  (< red_black_trees__black_count__depth__first__bit red_black_trees__black_count__depth__last__bit))

;; "red_black_trees__black_count__depth__position_axiom"
(assert (<= 0 red_black_trees__black_count__depth__position))

(declare-const red_black_trees__black_count__count__first__bit Int)

(declare-const red_black_trees__black_count__count__last__bit Int)

(declare-const red_black_trees__black_count__count__position Int)

;; "red_black_trees__black_count__count__first__bit_axiom"
(assert (<= 0 red_black_trees__black_count__count__first__bit))

;; "red_black_trees__black_count__count__last__bit_axiom"
(assert
  (< red_black_trees__black_count__count__first__bit red_black_trees__black_count__count__last__bit))

;; "red_black_trees__black_count__count__position_axiom"
(assert (<= 0 red_black_trees__black_count__count__position))

(declare-const dummy7 us_rep6)

;; "nb_blacks"
(declare-fun nb_blacks (us_rep3) (Array Int us_rep6))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const component__size4 Int)

(declare-const alignment12 Int)

;; "value__size_axiom"
(assert (<= 0 value__size12))

;; "object__size_axiom"
(assert (<= 0 object__size12))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment12))

;; "same_nb_blacks"
(declare-fun same_nb_blacks (us_rep3) Bool)

;; "parent"
(declare-fun parent (us_rep2
  Int) Int)

;; "parent"
(declare-fun parent1 (us_rep1
  Int) Int)

;; "position"
(declare-fun position (us_rep2
  Int) Int)

;; "position"
(declare-fun position1 (us_rep1
  Int) Int)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

(declare-const t_old us_rep3)

(declare-const t us_rep3)

(declare-const x Int)

(declare-const d1 Int)

(declare-const d2 Int)

(declare-const y Int)

;; "get"
(declare-fun get (us_rep4
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep4) (param__right us_rep4)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "olt"
(define-fun olt ((param__left us_rep4) (param__right us_rep4)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep4
  Int
  us_rep4) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_301 us_rep2) (temp___is_init_297 Bool) (temp___skip_constant_298 Bool) (temp___do_toplevel_299 Bool) (temp___do_typ_inv_300 Bool)) Bool
  (and
    (=>
      (= temp___do_typ_inv_300 true)
      (ite (= (size1
                (rec__search_trees__search_tree__struct
                  (us_split_fields5 temp___expr_301))) 0)
        (= (to_rep
             (rec__search_trees__search_tree__root
               (us_split_fields5 temp___expr_301))) 0)
        (and
          (and
            (not
              (= (to_rep
                   (rec__search_trees__search_tree__root
                     (us_split_fields5 temp___expr_301))) 0))
            (= (valid_root
                 (rec__search_trees__search_tree__struct
                   (us_split_fields5 temp___expr_301))
                 (to_rep
                   (rec__search_trees__search_tree__root
                     (us_split_fields5 temp___expr_301)))) true))
          (= (ordered_leafs
               (rec__search_trees__search_tree__struct
                 (us_split_fields5 temp___expr_301))
               (to_rep
                 (rec__search_trees__search_tree__root
                   (us_split_fields5 temp___expr_301)))
               (rec__search_trees__search_tree__values
                 (us_split_fields5 temp___expr_301))) true))))
    (=>
      (= temp___do_typ_inv_300 true)
      (= (tree_structure
           (rec__search_trees__search_tree__struct
             (us_split_fields5 temp___expr_301))) true))))

;; "dynamic_invariant"
(define-fun dynamic_invariant3 ((temp___expr_276 us_rep1) (temp___is_init_272 Bool) (temp___skip_constant_273 Bool) (temp___do_toplevel_274 Bool) (temp___do_typ_inv_275 Bool)) Bool
  (=>
    (= temp___do_typ_inv_275 true)
    (= (tree_structure temp___expr_276) true)))

;; "in_range"
(define-fun in_range7 ((x1 Int)) Bool
  (and (<= 0 x1) (<= x1 2147483647)))

;; "size__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (! (=>
         (dynamic_invariant3 param__f true false true true)
         (in_range1 (size1 param__f))) :pattern ((size1 param__f)) )))

;; "size__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (dynamic_invariant2 param__t true false true true)
         (in_range1 (size param__t))) :pattern ((size param__t)) )))

;; "size__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (size param__t) (size1
                            (rec__search_trees__search_tree__struct
                              (us_split_fields5 param__t)))) :pattern (
    (size
      param__t)) )))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (! (in_range7 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range7 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range6 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant3 param__f true false true true)
             (in_range5 param__i))
           (=>
             (< (size1 param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant3 param__f true false true true)
             (in_range5 param__i))
           (let ((result (parent1 param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size1 param__f) 0) (= result 0)))
               (in_range1 result)))) :pattern ((parent1 param__f param__i)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep4) (param__s2 us_rep4))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "position__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant3 param__f true false true true)
               (in_range5 param__i))
             (not (= (parent1 param__f param__i) 0)))
           (in_range6 (position1 param__f param__i))) :pattern ((position1
                                                                  param__f
                                                                  param__i)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (dynamic_invariant3 param__f true false true true)
               (in_range5 param__root))
             (= (valid_root param__f param__root) true))
           (let ((result (model2 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields9 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields9 (select result param__root)))) 0))
                     (forall ((i Int))
                       (=>
                         (and (<= 1 i) (<= i 100))
                         (=>
                           (not (= i param__root))
                           (ite (and
                                  (not (= (parent1 param__f i) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields9
                                         (select result (parent1 param__f i)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields9 (select result i))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields9 (select result i))) true)))))))
                   (forall ((i Int))
                     (=>
                       (and (<= 1 i) (<= i 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields9 (select result i))) true)
                              (not (= i param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields9
                                  (select result (parent1 param__f i))))
                              (position1 param__f i)
                              (rec__tree_model__path_type__a
                                (us_split_fields9 (select result i)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields9 (select result i)))) 0)))))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields9 (select result i))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields9 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields9 (select result i)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields9 (select result j)))) true))
                             (= j i))))))))
               (dynamic_invariant1 result true false true true)))) :pattern (
      (model2
        param__f
        param__root)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (and
           (dynamic_invariant2 param__t true false true true)
           (not (= (size param__t) 0)))
         (dynamic_invariant1 (model1 param__t) true false true true)) :pattern (
    (model1
      param__t)) )))

;; "model__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (model1 param__t) (model2
                              (rec__search_trees__search_tree__struct
                                (us_split_fields5 param__t))
                              (to_rep
                                (rec__search_trees__search_tree__root
                                  (us_split_fields5 param__t))))) :pattern (
    (model1
      param__t)) )))

;; "peek__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (dynamic_invariant3 param__f true false true true)
               (in_range5 param__i))
             (in_range6 param__d))
           (let ((result (peek1 param__f param__i param__d)))
             (and
               (and
                 (ite (not (= result 0))
                   (and
                     (= (position1 param__f result) param__d)
                     (= (parent1 param__f result) param__i))
                   (forall ((j Int))
                     (=>
                       (and (<= 1 j) (<= j 100))
                       (=>
                         (= (parent1 param__f j) param__i)
                         (not (= (position1 param__f j) param__d))))))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (= (parent1 param__f j) param__i)
                         (= (position1 param__f j) param__d))
                       (= result j)))))
               (in_range1 result)))) :pattern ((peek1
                                                 param__f
                                                 param__i
                                                 param__d)) ))))

;; "peek__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 param__t true false true true)
                 (in_range5 param__i))
               (in_range6 param__d))
             (and
               (not (= (size param__t) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields9
                      (let ((temp___550 (model1 param__t)))
                        (select temp___550 param__i)))) true)))
           (in_range1 (peek param__t param__i param__d))) :pattern ((peek
                                                                    param__t
                                                                    param__i
                                                                    param__d)) ))))

;; "peek__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int) (param__d Int))
      (! (= (peek param__t param__i param__d) (peek1
                                                (rec__search_trees__search_tree__struct
                                                  (us_split_fields5 param__t))
                                                param__i
                                                param__d)) :pattern (
      (peek
        param__t
        param__i
        param__d)) ))))

(declare-const rliteral extended_index_type)

;; "rliteral_axiom"
(assert (= (extended_index_typeqtint rliteral) 0))

;; "nb_blacks__post_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=>
         (and
           (dynamic_invariant param__t true false true true)
           (not
             (= (size
                  (rec__red_black_trees__rbt__struct
                    (us_split_fields7 param__t))) 0)))
         (let ((result (nb_blacks param__t)))
           (and
             (= (bool_eq
                  (select result 0)
                  (us_repqtmk5
                    (us_split_fieldsqtmk5 (distinct 1 0) rliteral rliteral))) true)
             (forall ((i Int))
               (=>
                 (and (<= 1 i) (<= i 100))
                 (=>
                   (= (rec__tree_model__path_type__k
                        (us_split_fields9
                          (let ((temp___560 (model1
                                              (rec__red_black_trees__rbt__struct
                                                (us_split_fields7 param__t)))))
                            (select temp___560 i)))) true)
                   (and
                     (and
                       (=
                         (= (rec__red_black_trees__black_count__status
                              (us_split_fields11 (select result i))) true)
                         (= (to_rep
                              (rec__red_black_trees__black_count__count
                                (us_split_fields11
                                  (select result (peek
                                                   (rec__red_black_trees__rbt__struct
                                                     (us_split_fields7
                                                       param__t))
                                                   i
                                                   0))))) (to_rep
                                                            (rec__red_black_trees__black_count__count
                                                              (us_split_fields11
                                                                (select result 
                                                                (peek
                                                                  (rec__red_black_trees__rbt__struct
                                                                    (us_split_fields7
                                                                    param__t))
                                                                  i
                                                                  1)))))))
                       (= (to_rep
                            (rec__red_black_trees__black_count__depth
                              (us_split_fields11 (select result i)))) (+ 1 
                       (max
                         (to_rep
                           (rec__red_black_trees__black_count__depth
                             (us_split_fields11
                               (select result (peek
                                                (rec__red_black_trees__rbt__struct
                                                  (us_split_fields7 param__t))
                                                i
                                                0)))))
                         (to_rep
                           (rec__red_black_trees__black_count__depth
                             (us_split_fields11
                               (select result (peek
                                                (rec__red_black_trees__rbt__struct
                                                  (us_split_fields7 param__t))
                                                i
                                                1)))))))))
                     (= (to_rep
                          (rec__red_black_trees__black_count__count
                            (us_split_fields11 (select result i)))) (+ 
                     (ite (= (to_rep3
                               (let ((temp___559 (rec__red_black_trees__rbt__color
                                                   (us_split_fields7
                                                     param__t))))
                                 (select temp___559 i))) 0)
                       1
                       0) (to_rep
                            (rec__red_black_trees__black_count__count
                              (us_split_fields11
                                (select result (peek
                                                 (rec__red_black_trees__rbt__struct
                                                   (us_split_fields7
                                                     param__t))
                                                 i
                                                 0)))))))))))))) :pattern (
    (nb_blacks
      param__t)) )))

;; "same_nb_blacks__post_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=>
         (dynamic_invariant param__t true false true true)
         (in_range (ite (same_nb_blacks param__t) 1 0))) :pattern ((same_nb_blacks
                                                                    param__t)) )))

;; "same_nb_blacks__def_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=
         (= (same_nb_blacks param__t) true)
         (or
           (= (size
                (rec__red_black_trees__rbt__struct
                  (us_split_fields7 param__t))) 0)
           (forall ((i Int))
             (=>
               (and (<= 1 i) (<= i 100))
               (=>
                 (= (rec__tree_model__path_type__k
                      (us_split_fields9
                        (let ((temp___566 (model1
                                            (rec__red_black_trees__rbt__struct
                                              (us_split_fields7 param__t)))))
                          (select temp___566 i)))) true)
                 (= (rec__red_black_trees__black_count__status
                      (us_split_fields11
                        (let ((temp___565 (nb_blacks param__t)))
                          (select temp___565 i)))) true)))))) :pattern (
    (same_nb_blacks
      param__t)) )))

;; "parent__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__t true false true true)
             (in_range5 param__i))
           (let ((result (parent param__t param__i)))
             (and (=> (= (size param__t) 0) (= result 0)) (in_range1 result)))) :pattern (
      (parent
        param__t
        param__i)) ))))

;; "parent__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (= (parent param__t param__i) (parent1
                                         (rec__search_trees__search_tree__struct
                                           (us_split_fields5 param__t))
                                         param__i)) :pattern ((parent
                                                                param__t
                                                                param__i)) ))))

;; "tree_structure__post_axiom"
(assert true)

;; "ordered_leafs__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (forall ((param__values (Array Int natural)))
        (! (=>
             (and
               (and
                 (dynamic_invariant3 param__f true false true true)
                 (in_range5 param__root))
               (= (valid_root param__f param__root) true))
             (in_range
               (ite (ordered_leafs param__f param__root param__values) 1 0))) :pattern (
        (ordered_leafs
          param__f
          param__root
          param__values)) )))))

;; "position__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__t true false true true)
               (in_range5 param__i))
             (not (= (parent param__t param__i) 0)))
           (in_range6 (position param__t param__i))) :pattern ((position
                                                                 param__t
                                                                 param__i)) ))))

;; "position__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (= (position param__t param__i) (position1
                                           (rec__search_trees__search_tree__struct
                                             (us_split_fields5 param__t))
                                           param__i)) :pattern ((position
                                                                  param__t
                                                                  param__i)) ))))

;; "Assume"
(assert (dynamic_invariant t_old true false true true))

;; "Assume"
(assert (dynamic_invariant t true false true true))

;; "Assume"
(assert (in_range5 x))

;; "Assume"
(assert (in_range6 d1))

;; "Assume"
(assert (in_range6 d2))

;; "Assume"
(assert
  (and
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (and
                              (and
                                (and
                                  (and
                                    (= (same_nb_blacks t_old) true)
                                    (not (= d1 d2)))
                                  (not
                                    (= (size
                                         (rec__red_black_trees__rbt__struct
                                           (us_split_fields7 t_old))) 0)))
                                (= (rec__tree_model__path_type__k
                                     (us_split_fields9
                                       (select (model1
                                                 (rec__red_black_trees__rbt__struct
                                                   (us_split_fields7 t_old))) 
                                       x))) true))
                              (not
                                (= (peek
                                     (rec__red_black_trees__rbt__struct
                                       (us_split_fields7 t_old))
                                     x
                                     d2) 0)))
                            (not
                              (= (peek
                                   (rec__red_black_trees__rbt__struct
                                     (us_split_fields7 t_old))
                                   (peek
                                     (rec__red_black_trees__rbt__struct
                                       (us_split_fields7 t_old))
                                     x
                                     d2)
                                   d2) 0)))
                          (= (size
                               (rec__red_black_trees__rbt__struct
                                 (us_split_fields7 t))) (size
                                                          (rec__red_black_trees__rbt__struct
                                                            (us_split_fields7
                                                              t_old)))))
                        (forall ((j Int))
                          (=>
                            (and (<= 1 j) (<= j 100))
                            (=
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields9
                                     (select (model1
                                               (rec__red_black_trees__rbt__struct
                                                 (us_split_fields7 t))) j))) true)
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields9
                                     (select (model1
                                               (rec__red_black_trees__rbt__struct
                                                 (us_split_fields7 t_old))) j))) true)))))
                      (= (to_rep3
                           (select (rec__red_black_trees__rbt__color
                                     (us_split_fields7 t_old)) x)) 0))
                    (= (to_rep3
                         (select (rec__red_black_trees__rbt__color
                                   (us_split_fields7 t_old)) (peek
                                                               (rec__red_black_trees__rbt__struct
                                                                 (us_split_fields7
                                                                   t_old))
                                                               x
                                                               d2))) 1))
                  (= (to_rep3
                       (select (rec__red_black_trees__rbt__color
                                 (us_split_fields7 t_old)) (peek
                                                             (rec__red_black_trees__rbt__struct
                                                               (us_split_fields7
                                                                 t_old))
                                                             (peek
                                                               (rec__red_black_trees__rbt__struct
                                                                 (us_split_fields7
                                                                   t_old))
                                                               x
                                                               d2)
                                                             d2))) 1))
                (= (peek
                     (rec__red_black_trees__rbt__struct (us_split_fields7 t))
                     x
                     d2) (peek
                           (rec__red_black_trees__rbt__struct
                             (us_split_fields7 t_old))
                           (peek
                             (rec__red_black_trees__rbt__struct
                               (us_split_fields7 t_old))
                             x
                             d2)
                           d1)))
              (=>
                (not
                  (= (parent
                       (rec__red_black_trees__rbt__struct
                         (us_split_fields7 t_old))
                       x) 0))
                (= (peek
                     (rec__red_black_trees__rbt__struct (us_split_fields7 t))
                     (parent
                       (rec__red_black_trees__rbt__struct
                         (us_split_fields7 t_old))
                       x)
                     (position
                       (rec__red_black_trees__rbt__struct
                         (us_split_fields7 t_old))
                       x)) (peek
                             (rec__red_black_trees__rbt__struct
                               (us_split_fields7 t_old))
                             x
                             d2))))
            (= (peek
                 (rec__red_black_trees__rbt__struct (us_split_fields7 t))
                 (peek
                   (rec__red_black_trees__rbt__struct
                     (us_split_fields7 t_old))
                   x
                   d2)
                 d1) x))
          (forall ((j Int))
            (=>
              (and (<= 1 j) (<= j 100))
              (forall ((d Int))
                (=>
                  (and (<= 0 d) (<= d 1))
                  (=>
                    (and
                      (and
                        (and
                          (or (not (= j x)) (= d d1))
                          (or
                            (not
                              (= j (parent
                                     (rec__red_black_trees__rbt__struct
                                       (us_split_fields7 t_old))
                                     x)))
                            (not
                              (= d (position
                                     (rec__red_black_trees__rbt__struct
                                       (us_split_fields7 t_old))
                                     x)))))
                        (or
                          (not
                            (= j (peek
                                   (rec__red_black_trees__rbt__struct
                                     (us_split_fields7 t_old))
                                   x
                                   d2)))
                          (= d d2)))
                      (= (rec__tree_model__path_type__k
                           (us_split_fields9
                             (select (model1
                                       (rec__red_black_trees__rbt__struct
                                         (us_split_fields7 t))) j))) true))
                    (= (peek
                         (rec__red_black_trees__rbt__struct
                           (us_split_fields7 t))
                         j
                         d) (peek
                              (rec__red_black_trees__rbt__struct
                                (us_split_fields7 t_old))
                              j
                              d))))))))
        (= (to_rep3
             (select (rec__red_black_trees__rbt__color (us_split_fields7 t)) 
             x)) 1))
      (= (to_rep3
           (select (rec__red_black_trees__rbt__color (us_split_fields7 t)) 
           (peek
             (rec__red_black_trees__rbt__struct (us_split_fields7 t_old))
             x
             d2))) 0))
    (forall ((i Int))
      (=>
        (and (<= 1 i) (<= i 100))
        (=>
          (= (not (or (ite (= i x) true false) (ite (= i (peek
                                                           (rec__red_black_trees__rbt__struct
                                                             (us_split_fields7
                                                               t_old))
                                                           x
                                                           d2))
                                                 true
                                                 false))) true)
          (= (to_rep3
               (select (rec__red_black_trees__rbt__color
                         (us_split_fields7 t)) i)) (to_rep3
                                                     (select (rec__red_black_trees__rbt__color
                                                               (us_split_fields7
                                                                 t_old)) i))))))))

;; "o"
(define-fun o () Int
  d2)

;; "o"
(define-fun o1 () Int
  x)

;; "o"
(define-fun o2 () us_split_fields6
  (us_split_fields7 t_old))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields6
  o2)

;; "o"
(define-fun o3 () us_rep2
  (rec__red_black_trees__rbt__struct o2))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused () us_rep2
  o3)

;; "o"
(define-fun o4 () Int
  (peek o3 o1 o))

;; "H"
(assert (in_range1 o4))

;; "H"
(assert
  (= o4 (peek1
          (rec__search_trees__search_tree__struct (us_split_fields5 o3))
          o1
          o)))

;; "peek'result'unused"
(define-fun peekqtresultqtunused () Int
  o4)

;; "red_black_trees__prove_same_nb_blacks_rotate_swap__y__assume'unused"
(define-fun red_black_trees__prove_same_nb_blacks_rotate_swap__y__assumeqtunused 
  () Int
  o4)

;; "Ensures"
(assert (in_range5 o4))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o4)

;; "Assume"
(assert (= o4 y))

;; "Assume"
(assert (in_range5 y))

(declare-const n Int)

;; "n'unused"
(define-fun nqtunused () int__ref
  (int__refqtmk n))

;; "H"
(assert (= n 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  n)

;; "o"
(define-fun o5 () Bool
  (ite (<= n 100) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o5)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  n)

;; "o"
(define-fun o6 () Bool
  (ite (<= 1 n) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o6)

;; "o"
(define-fun o7 () Bool
  (and o6 o5))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o7)

;; "H"
(assert (= o7 true))

(declare-const usf Int)

(declare-const anyqtresultqtunused Int)

;; "H"
(assert (= anyqtresultqtunused usf))

(declare-const iqtunused Int)

;; "H"
(assert (= iqtunused usf))

(declare-const o8 Bool)

;; "H"
(assert (= o8 (ite (<= usf 100) true false)))

(declare-const infix_lseqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused2 o8))

(declare-const o9 Bool)

;; "H"
(assert (= o9 (ite (<= 1 usf) true false)))

(declare-const infix_lseqqtresultqtunused3 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused3 o9))

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert (= andbqtresultqtunused1 (and o9 o8)))

;; "_f'unused"
(define-fun usfqtunused () Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (=>
             (and
               (and
                 (and
                   (= (rec__tree_model__path_type__k
                        (us_split_fields9
                          (select (model1
                                    (rec__red_black_trees__rbt__struct
                                      (us_split_fields7 t_old))) i))) true)
                   (< (to_rep
                        (rec__red_black_trees__black_count__depth
                          (us_split_fields11 (select (nb_blacks t_old) i)))) 
                   n))
                 (not (= i y)))
               (not (= i x)))
             (= (to_rep
                  (rec__red_black_trees__black_count__count
                    (us_split_fields11 (select (nb_blacks t) i)))) (to_rep
                                                                    (rec__red_black_trees__black_count__count
                                                                    (us_split_fields11
                                                                    (select 
                                                                    (nb_blacks
                                                                    t_old) i))))))))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused1 () Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (=>
             (and
               (and
                 (and
                   (= (rec__tree_model__path_type__k
                        (us_split_fields9
                          (select (model1
                                    (rec__red_black_trees__rbt__struct
                                      (us_split_fields7 t_old))) i))) true)
                   (< (to_rep
                        (rec__red_black_trees__black_count__depth
                          (us_split_fields11 (select (nb_blacks t_old) i)))) 
                   n))
                 (not (= i y)))
               (not (= i x)))
             (= (to_rep
                  (rec__red_black_trees__black_count__count
                    (us_split_fields11 (select (nb_blacks t) i)))) (to_rep
                                                                    (rec__red_black_trees__black_count__count
                                                                    (us_split_fields11
                                                                    (select 
                                                                    (nb_blacks
                                                                    t_old) i))))))))
    true
    false))

(declare-const n1 Int)

;; "n'unused"
(define-fun nqtunused1 () int__ref
  (int__refqtmk n1))

;; "LoopInvariant"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (and
          (and
            (and
              (= (rec__tree_model__path_type__k
                   (us_split_fields9
                     (select (model1
                               (rec__red_black_trees__rbt__struct
                                 (us_split_fields7 t_old))) i))) true)
              (< (to_rep
                   (rec__red_black_trees__black_count__depth
                     (us_split_fields11 (select (nb_blacks t_old) i)))) 
              n1))
            (not (= i y)))
          (not (= i x)))
        (= (to_rep
             (rec__red_black_trees__black_count__count
               (us_split_fields11 (select (nb_blacks t) i)))) (to_rep
                                                                (rec__red_black_trees__black_count__count
                                                                  (us_split_fields11
                                                                    (select 
                                                                    (nb_blacks
                                                                    t_old) i)))))))))

;; "LoopInvariant"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (and
          (and
            (and
              (= (rec__tree_model__path_type__k
                   (us_split_fields9
                     (select (model1
                               (rec__red_black_trees__rbt__struct
                                 (us_split_fields7 t_old))) i))) true)
              (< (to_rep
                   (rec__red_black_trees__black_count__depth
                     (us_split_fields11 (select (nb_blacks t_old) i)))) 
              n1))
            (not (= i y)))
          (not (= i x)))
        (= (rec__red_black_trees__black_count__status
             (us_split_fields11 (select (nb_blacks t) i))) true)))))

;; "LoopInvariant"
(assert
  (=>
    (< (to_rep
         (rec__red_black_trees__black_count__depth
           (us_split_fields11 (select (nb_blacks t_old) x)))) n1)
    (and
      (and
        (and
          (= (rec__red_black_trees__black_count__status
               (us_split_fields11 (select (nb_blacks t) x))) true)
          (= (to_rep
               (rec__red_black_trees__black_count__count
                 (us_split_fields11 (select (nb_blacks t) x)))) (to_rep
                                                                  (rec__red_black_trees__black_count__count
                                                                    (us_split_fields11
                                                                    (select 
                                                                    (nb_blacks
                                                                    t_old) 
                                                                    y))))))
        (= (rec__red_black_trees__black_count__status
             (us_split_fields11 (select (nb_blacks t) y))) true))
      (= (to_rep
           (rec__red_black_trees__black_count__count
             (us_split_fields11 (select (nb_blacks t) y)))) (to_rep
                                                              (rec__red_black_trees__black_count__count
                                                                (us_split_fields11
                                                                  (select 
                                                                  (nb_blacks
                                                                    t_old) 
                                                                  x))))))))

;; "Assume"
(assert (and (<= 1 n1) (<= n1 100)))

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

(declare-const int__contentqtresultqtunused2 Int)

;; "H"
(assert (= int__contentqtresultqtunused2 n1))

(declare-const o10 us_rep3)

;; "H"
(assert (= o10 t_old))

(declare-const temp___1244 (Array Int us_rep6))

;; "H"
(assert (= temp___1244 (nb_blacks o10)))

;; "H"
(assert true)

;; "H"
(assert
  (= (bool_eq
       (select temp___1244 0)
       (us_repqtmk5 (us_split_fieldsqtmk5 (distinct 1 0) rliteral rliteral))) true))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields9
               (select (model1
                         (rec__red_black_trees__rbt__struct
                           (us_split_fields7 o10))) i))) true)
        (and
          (and
            (=
              (= (rec__red_black_trees__black_count__status
                   (us_split_fields11 (select temp___1244 i))) true)
              (= (to_rep
                   (rec__red_black_trees__black_count__count
                     (us_split_fields11
                       (select temp___1244 (peek
                                             (rec__red_black_trees__rbt__struct
                                               (us_split_fields7 o10))
                                             i
                                             0))))) (to_rep
                                                      (rec__red_black_trees__black_count__count
                                                        (us_split_fields11
                                                          (select temp___1244 
                                                          (peek
                                                            (rec__red_black_trees__rbt__struct
                                                              (us_split_fields7
                                                                o10))
                                                            i
                                                            1)))))))
            (= (to_rep
                 (rec__red_black_trees__black_count__depth
                   (us_split_fields11 (select temp___1244 i)))) (+ 1 
            (max
              (to_rep
                (rec__red_black_trees__black_count__depth
                  (us_split_fields11
                    (select temp___1244 (peek
                                          (rec__red_black_trees__rbt__struct
                                            (us_split_fields7 o10))
                                          i
                                          0)))))
              (to_rep
                (rec__red_black_trees__black_count__depth
                  (us_split_fields11
                    (select temp___1244 (peek
                                          (rec__red_black_trees__rbt__struct
                                            (us_split_fields7 o10))
                                          i
                                          1)))))))))
          (= (to_rep
               (rec__red_black_trees__black_count__count
                 (us_split_fields11 (select temp___1244 i)))) (+ (ite (= 
                                                                   (to_rep3
                                                                    (select 
                                                                    (rec__red_black_trees__rbt__color
                                                                    (us_split_fields7
                                                                    o10)) i)) 0)
                                                                   1
                                                                   0) 
          (to_rep
            (rec__red_black_trees__black_count__count
              (us_split_fields11
                (select temp___1244 (peek
                                      (rec__red_black_trees__rbt__struct
                                        (us_split_fields7 o10))
                                      i
                                      0))))))))))))

(declare-const nb_blacksqtresultqtunused (Array Int us_rep6))

;; "H"
(assert (= nb_blacksqtresultqtunused temp___1244))

(declare-const o11 us_rep6)

;; "H"
(assert (= o11 (select temp___1244 x)))

(declare-const getqtresultqtunused us_rep6)

;; "H"
(assert (= getqtresultqtunused o11))

(declare-const o12 us_split_fields10)

;; "H"
(assert (= o12 (us_split_fields11 o11)))

(declare-const us_split_fieldsqtresultqtunused1 us_split_fields10)

;; "H"
(assert (= us_split_fieldsqtresultqtunused1 o12))

(declare-const o13 extended_index_type)

;; "H"
(assert (= o13 (rec__red_black_trees__black_count__depth o12)))

(declare-const rec__red_black_trees__black_count__depthqtresultqtunused extended_index_type)

;; "H"
(assert (= rec__red_black_trees__black_count__depthqtresultqtunused o13))

(declare-const o14 Int)

;; "Ensures"
(assert (= (to_rep o13) o14))

(declare-const to_repqtresultqtunused Int)

;; "H"
(assert (= to_repqtresultqtunused o14))

(declare-const o15 Bool)

;; "H"
(assert (= o15 (ite (= o14 n1) true false)))

(declare-const infix_eqqtresultqtunused Bool)

;; "H"
(assert (= infix_eqqtresultqtunused o15))

;; "H"
(assert (= spark__branch o15))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

;; "H"
(assert
  (=>
    (= spark__branch true)
    (and
      (and
        (= (rec__red_black_trees__black_count__status
             (us_split_fields11 (select (nb_blacks t) x))) true)
        (= (to_rep
             (rec__red_black_trees__black_count__count
               (us_split_fields11 (select (nb_blacks t) x)))) (- (to_rep
                                                                   (rec__red_black_trees__black_count__count
                                                                    (us_split_fields11
                                                                    (select 
                                                                    (nb_blacks
                                                                    t_old) 
                                                                    x)))) 1)))
      (and
        (= (rec__red_black_trees__black_count__status
             (us_split_fields11 (select (nb_blacks t) y))) true)
        (= (to_rep
             (rec__red_black_trees__black_count__count
               (us_split_fields11 (select (nb_blacks t) y)))) (+ (to_rep
                                                                   (rec__red_black_trees__black_count__count
                                                                    (us_split_fields11
                                                                    (select 
                                                                    (nb_blacks
                                                                    t) 
                                                                    x)))) 1))))))

(declare-const o16 Bool)

(declare-const o17 Int)

;; "H"
(assert (= o17 x))

(declare-const o18 us_split_fields6)

;; "H"
(assert (= o18 (us_split_fields7 t_old)))

(declare-const us_split_fieldsqtresultqtunused2 us_split_fields6)

;; "H"
(assert (= us_split_fieldsqtresultqtunused2 o18))

(declare-const o19 us_rep2)

;; "H"
(assert (= o19 (rec__red_black_trees__rbt__struct o18)))

(declare-const rec__red_black_trees__rbt__structqtresultqtunused1 us_rep2)

;; "H"
(assert (= rec__red_black_trees__rbt__structqtresultqtunused1 o19))

(declare-const o20 Int)

;; "H"
(assert (= o20 (parent o19 o17)))

;; "H"
(assert (in_range1 o20))

;; "H"
(assert
  (= o20 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o19))
           o17)))

;; "H"
(assert (=> (= (size o19) 0) (= o20 0)))

(declare-const parentqtresultqtunused Int)

;; "H"
(assert (= parentqtresultqtunused o20))

(declare-const infix_eqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused1 (ite (= o20 0) true false)))

(declare-const int__contentqtresultqtunused3 Int)

(declare-const o21 us_rep3)

(declare-const temp___1253 (Array Int us_rep6))

(declare-const nb_blacksqtresultqtunused1 (Array Int us_rep6))

(declare-const o22 Int)

(declare-const o23 us_split_fields6)

(declare-const us_split_fieldsqtresultqtunused3 us_split_fields6)

(declare-const o24 us_rep2)

(declare-const rec__red_black_trees__rbt__structqtresultqtunused2 us_rep2)

(declare-const o25 Int)

(declare-const parentqtresultqtunused1 Int)

(declare-const o26 us_rep6)

(declare-const getqtresultqtunused1 us_rep6)

(declare-const o27 us_split_fields10)

(declare-const us_split_fieldsqtresultqtunused4 us_split_fields10)

(declare-const o28 extended_index_type)

(declare-const rec__red_black_trees__black_count__depthqtresultqtunused1 extended_index_type)

(declare-const o29 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const infix_eqqtresultqtunused2 Bool)

;; "H"
(assert
  (ite (not (= o20 0))
    (and
      (= int__contentqtresultqtunused3 n1)
      (and
        (= o21 t_old)
        (and
          (= temp___1253 (nb_blacks o21))
          (and
            (and
              (= (bool_eq
                   (select temp___1253 0)
                   (us_repqtmk5
                     (us_split_fieldsqtmk5 (distinct 1 0) rliteral rliteral))) true)
              (forall ((i Int))
                (=>
                  (and (<= 1 i) (<= i 100))
                  (=>
                    (= (rec__tree_model__path_type__k
                         (us_split_fields9
                           (select (model1
                                     (rec__red_black_trees__rbt__struct
                                       (us_split_fields7 o21))) i))) true)
                    (and
                      (and
                        (=
                          (= (rec__red_black_trees__black_count__status
                               (us_split_fields11 (select temp___1253 i))) true)
                          (= (to_rep
                               (rec__red_black_trees__black_count__count
                                 (us_split_fields11
                                   (select temp___1253 (peek
                                                         (rec__red_black_trees__rbt__struct
                                                           (us_split_fields7
                                                             o21))
                                                         i
                                                         0))))) (to_rep
                                                                  (rec__red_black_trees__black_count__count
                                                                    (us_split_fields11
                                                                    (select 
                                                                    temp___1253 
                                                                    (peek
                                                                    (rec__red_black_trees__rbt__struct
                                                                    (us_split_fields7
                                                                    o21))
                                                                    i
                                                                    1)))))))
                        (= (to_rep
                             (rec__red_black_trees__black_count__depth
                               (us_split_fields11 (select temp___1253 i)))) (+ 1 
                        (max
                          (to_rep
                            (rec__red_black_trees__black_count__depth
                              (us_split_fields11
                                (select temp___1253 (peek
                                                      (rec__red_black_trees__rbt__struct
                                                        (us_split_fields7
                                                          o21))
                                                      i
                                                      0)))))
                          (to_rep
                            (rec__red_black_trees__black_count__depth
                              (us_split_fields11
                                (select temp___1253 (peek
                                                      (rec__red_black_trees__rbt__struct
                                                        (us_split_fields7
                                                          o21))
                                                      i
                                                      1)))))))))
                      (= (to_rep
                           (rec__red_black_trees__black_count__count
                             (us_split_fields11 (select temp___1253 i)))) (+ 
                      (ite (= (to_rep3
                                (select (rec__red_black_trees__rbt__color
                                          (us_split_fields7 o21)) i)) 0)
                        1
                        0) (to_rep
                             (rec__red_black_trees__black_count__count
                               (us_split_fields11
                                 (select temp___1253 (peek
                                                       (rec__red_black_trees__rbt__struct
                                                         (us_split_fields7
                                                           o21))
                                                       i
                                                       0))))))))))))
            (and
              (= nb_blacksqtresultqtunused1 temp___1253)
              (and
                (= o22 x)
                (and
                  (= o23 (us_split_fields7 t_old))
                  (and
                    (= us_split_fieldsqtresultqtunused3 o23)
                    (and
                      (= o24 (rec__red_black_trees__rbt__struct o23))
                      (and
                        (= rec__red_black_trees__rbt__structqtresultqtunused2 
                        o24)
                        (and
                          (= o25 (parent o24 o22))
                          (and
                            (and
                              (in_range1 o25)
                              (and
                                (= o25 (parent1
                                         (rec__search_trees__search_tree__struct
                                           (us_split_fields5 o24))
                                         o22))
                                (=> (= (size o24) 0) (= o25 0))))
                            (and
                              (= parentqtresultqtunused1 o25)
                              (and
                                (= o26 (select temp___1253 o25))
                                (and
                                  (= getqtresultqtunused1 o26)
                                  (and
                                    (= o27 (us_split_fields11 o26))
                                    (and
                                      (= us_split_fieldsqtresultqtunused4 
                                      o27)
                                      (and
                                        (= o28 (rec__red_black_trees__black_count__depth
                                                 o27))
                                        (and
                                          (= rec__red_black_trees__black_count__depthqtresultqtunused1 
                                          o28)
                                          (and
                                            (= (to_rep o28) o29)
                                            (and
                                              (= to_repqtresultqtunused1 
                                              o29)
                                              (and
                                                (= o16 (ite (= o29 n1)
                                                         true
                                                         false))
                                                (= infix_eqqtresultqtunused2 
                                                o16)))))))))))))))))))))))
    (= o16 false)))

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o16))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (= spark__branch1 true))

;; Goal "def'vc"
;; File "red_black_trees.adb", line 413, characters 0-0
(assert
  (not
  (< (to_rep
       (rec__red_black_trees__black_count__depth
         (us_split_fields11 (select (nb_blacks t_old) x)))) n1)))

(check-sat)
