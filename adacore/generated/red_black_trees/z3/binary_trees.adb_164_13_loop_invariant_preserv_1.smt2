;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ()
  ((tuple0 (Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 a))) 
         (to_rep
           (rec__binary_trees__cell__left (us_split_fields1 b))))
         (and
           (and
             (= (to_rep
                  (rec__binary_trees__cell__right (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__right (us_split_fields1 b))))
             (= (to_rep
                  (rec__binary_trees__cell__parent (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__parent (us_split_fields1 b)))))
           (= (to_rep1
                (rec__binary_trees__cell__position (us_split_fields1 a))) 
           (to_rep1
             (rec__binary_trees__cell__position (us_split_fields1 b))))))
    true
    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "size"
(define-fun size ((param__f us_rep1)) Int
  (to_rep (rec__binary_trees__forest__s (us_split_fields3 param__f))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

(declare-const f us_rep1)

(declare-const root Int)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 us_rep2)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const dummy3 Int)

;; "last"
(declare-fun last (us_rep2) Int)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "length"
(define-fun length ((param__container us_rep2)) Int
  (- (+ (last param__container) 1) 1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_380 Int) (temp___is_init_376 Bool) (temp___skip_constant_377 Bool) (temp___do_toplevel_378 Bool) (temp___do_typ_inv_379 Bool)) Bool
  (=>
    (= temp___is_init_376 true)
    (=> (= temp___do_toplevel_378 true) (<= 0 temp___expr_380))))

;; "get"
(declare-fun get (us_rep2
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "olt"
(define-fun olt ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_319 us_rep1) (temp___is_init_315 Bool) (temp___skip_constant_316 Bool) (temp___do_toplevel_317 Bool) (temp___do_typ_inv_318 Bool)) Bool
  true)

(declare-const rliteral extended_index_type)

;; "rliteral_axiom"
(assert (= (extended_index_typeqtint rliteral) 0))

;; "tree_structure"
(define-fun tree_structure ((param__f us_rep1)) Bool
  (and (and (and (and (and (and (and (and (ite (forall ((i Int))
                                                 (=>
                                                   (and
                                                     (<= (+ (to_rep
                                                              (rec__binary_trees__forest__s
                                                                (us_split_fields3
                                                                  param__f))) 1) i)
                                                     (<= i 100))
                                                   (= (bool_eq
                                                        (let ((temp___191 
                                                          (rec__binary_trees__forest__c
                                                            (us_split_fields3
                                                              param__f))))
                                                          (select temp___191 i))
                                                        (us_repqtmk
                                                          (us_split_fieldsqtmk
                                                            rliteral
                                                            rliteral
                                                            rliteral
                                                            (of_rep1 2)))) true)))
                                            true
                                            false) (ite (forall ((i Int))
                                                          (=>
                                                            (and
                                                              (<= 1 i)
                                                              (<= i 100))
                                                            (let ((temp___196 
                                                              (to_rep
                                                                (rec__binary_trees__cell__parent
                                                                  (us_split_fields1
                                                                    (let ((temp___194 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___194 i)))))))
                                                              (and
                                                                (<= 0 temp___196)
                                                                (<= temp___196 
                                                                (to_rep
                                                                  (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                     true
                                                     false)) (ite (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 100))
                                                                    (let ((temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___197 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___197 i)))))))
                                                                    (and
                                                                    (<= 0 temp___199)
                                                                    (<= temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                               true
                                                               false)) 
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (let ((temp___202 (to_rep
                               (rec__binary_trees__cell__right
                                 (us_split_fields1
                                   (let ((temp___200 (rec__binary_trees__forest__c
                                                       (us_split_fields3
                                                         param__f))))
                                     (select temp___200 i)))))))
             (and
               (<= 0 temp___202)
               (<= temp___202 (to_rep
                                (rec__binary_trees__forest__s
                                  (us_split_fields3 param__f))))))))
    true
    false)) (ite (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (to_rep1
                            (rec__binary_trees__cell__position
                              (us_split_fields1
                                (let ((temp___204 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___204 i))))) 2)
                       (= (to_rep
                            (rec__binary_trees__cell__parent
                              (us_split_fields1
                                (let ((temp___203 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___203 i))))) 0))))
              true
              false)) (ite (forall ((i Int))
                             (=>
                               (and (<= 1 i) (<= i 100))
                               (=>
                                 (not
                                   (= (to_rep
                                        (rec__binary_trees__cell__left
                                          (us_split_fields1
                                            (let ((temp___209 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___209 i))))) 0))
                                 (and
                                   (= (to_rep1
                                        (rec__binary_trees__cell__position
                                          (us_split_fields1
                                            (let ((temp___205 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___205 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___206 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___206 i)))))))))) 0)
                                   (= (to_rep
                                        (rec__binary_trees__cell__parent
                                          (us_split_fields1
                                            (let ((temp___207 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___207 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___208 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___208 i)))))))))) i)))))
                        true
                        false)) (ite (forall ((i Int))
                                       (=>
                                         (and (<= 1 i) (<= i 100))
                                         (=>
                                           (not
                                             (= (to_rep
                                                  (rec__binary_trees__cell__right
                                                    (us_split_fields1
                                                      (let ((temp___214 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___214 i))))) 0))
                                           (and
                                             (= (to_rep1
                                                  (rec__binary_trees__cell__position
                                                    (us_split_fields1
                                                      (let ((temp___210 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___210 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___211 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___211 i)))))))))) 1)
                                             (= (to_rep
                                                  (rec__binary_trees__cell__parent
                                                    (us_split_fields1
                                                      (let ((temp___212 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___212 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___213 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___213 i)))))))))) i)))))
                                  true
                                  false)) (ite (forall ((i Int))
                                                 (=>
                                                   (and (<= 1 i) (<= i 100))
                                                   (=>
                                                     (and
                                                       (not
                                                         (= (to_rep
                                                              (rec__binary_trees__cell__parent
                                                                (us_split_fields1
                                                                  (let ((temp___217 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___217 i))))) 0))
                                                       (= (to_rep1
                                                            (rec__binary_trees__cell__position
                                                              (us_split_fields1
                                                                (let ((temp___218 
                                                                  (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                  (select temp___218 i))))) 0))
                                                     (= (to_rep
                                                          (rec__binary_trees__cell__left
                                                            (us_split_fields1
                                                              (let ((temp___215 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___215 
                                                                (to_rep
                                                                  (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___216 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___216 i)))))))))) i))))
                                            true
                                            false)) (ite (forall ((i Int))
                                                           (=>
                                                             (and
                                                               (<= 1 i)
                                                               (<= i 100))
                                                             (=>
                                                               (and
                                                                 (not
                                                                   (= 
                                                                   (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___221 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___221 i))))) 0))
                                                                 (= (to_rep1
                                                                    (rec__binary_trees__cell__position
                                                                    (us_split_fields1
                                                                    (let ((temp___222 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___222 i))))) 1))
                                                               (= (to_rep
                                                                    (rec__binary_trees__cell__right
                                                                    (us_split_fields1
                                                                    (let ((temp___219 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___219 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___220 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___220 i)))))))))) i))))
                                                      true
                                                      false)))

;; "type_invariant"
(define-fun type_invariant ((temp___327 us_rep1)) Bool
  (= (tree_structure temp___327) true))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__tree_model__path_type__a us_rep2)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy4 us_rep3)

(declare-sort us_rep4 0)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const dummy5 us_rep4)

(declare-datatypes ()
  ((set__ref (set__refqtmk (set__content us_rep4)))))

;; "contains"
(declare-fun contains (us_rep4
  Int) Bool)

;; "length"
(declare-fun length1 (us_rep4) Int)

;; "is_empty"
(declare-fun is_empty (us_rep4) Bool)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

;; "ole"
(declare-fun ole (us_rep4
  us_rep4) Bool)

;; "included_except"
(declare-fun included_except (us_rep4
  us_rep4
  Int) Bool)

;; "remove"
(declare-fun remove (us_rep4
  Int) us_rep4)

;; "all_indexes"
(declare-fun all_indexes (tuple0) us_rep4)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int Bool))))))

;; "next"
(declare-fun next ((Array Int Bool)) Int)

(declare-datatypes ()
  ((map__ref1 (map__refqtmk1 (map__content1 (Array Int us_rep3))))))

;; "equal_prefix"
(define-fun equal_prefix ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (<= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                              (=>
                                                                (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last
                                                                    param__left)))
                                                                (= (get
                                                                    param__left
                                                                    n) 
                                                                (get
                                                                  param__right
                                                                  n))))
                                                         true
                                                         false)))

;; "add"
(declare-fun add (us_rep2
  Int) us_rep2)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size1 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment7))

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_414 (Array Int us_rep3)) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool
  (forall ((temp___415 Int))
    (=>
      (and (<= 1 temp___415) (<= temp___415 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields5 (select temp___expr_414 temp___415)))) 100))))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_419 (Array Int us_rep3)) (temp___skip_top_level_420 Bool)) Bool
  (forall ((temp___421 Int))
    (=>
      (and (<= 1 temp___421) (<= temp___421 100))
      (and
        (= (length
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___expr_419 temp___421)))) 0)
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___expr_419 temp___421))) (distinct 0 0))))))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size2 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const component__size3 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment9))

;; "binary_trees__model__todo__aggregate_def"
(declare-fun binary_trees__model__todo__aggregate_def (Bool) (Array Int Bool))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range4 param__i))
             (type_invariant param__f))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "valid_root__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=
           (= (valid_root param__f param__i) true)
           (and
             (<= param__i (to_rep
                            (rec__binary_trees__forest__s
                              (us_split_fields3 param__f))))
             (= (to_rep1
                  (rec__binary_trees__cell__position
                    (us_split_fields1
                      (let ((temp___332 (rec__binary_trees__forest__c
                                          (us_split_fields3 param__f))))
                        (select temp___332 param__i))))) 2))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (in_range3 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range3 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range2 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep2) (param__s2 us_rep2))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "contains__post_axiom"
(assert true)

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (forall ((param__item Int))
      (=>
        (and
          (in_range4 param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range4 e) (= (contains param__container e) true))
            (not (= param__item e))))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (! (dynamic_invariant (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((item Int))
               (not
                 (and
                   (in_range4 item)
                   (= (contains param__container item) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep4) (param__right us_rep4))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((item Int))
           (=>
             (and (in_range4 item) (= (contains param__left item) true))
             (= (contains param__right item) true)))) :pattern ((ole
                                                                  param__left
                                                                  param__right)) )))

;; "included_except__post_axiom"
(assert
  (forall ((param__left us_rep4) (param__right us_rep4))
    (forall ((param__item Int))
      (! (=>
           (in_range4 param__item)
           (=
             (= (included_except param__left param__right param__item) true)
             (forall ((e Int))
               (=>
                 (and (in_range4 e) (= (contains param__left e) true))
                 (or (= (contains param__right e) true) (= e param__item)))))) :pattern (
      (included_except
        param__left
        param__right
        param__item)) ))))

(declare-const r (Array Int us_rep3))

;; "r'unused"
(define-fun rqtunused () map__ref1
  (map__refqtmk1 r))

;; "Assume"
(assert (dynamic_invariant1 f true false true true))

;; "Assume"
(assert (in_range4 root))

;; "Assume"
(assert (type_invariant f))

;; "Assume"
(assert (= (valid_root f root) true))

;; "o"
(define-fun o () Bool
  (distinct 0 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () Bool
  o)

(declare-const temp___799 (Array Int Bool))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___798 Int))
    (! (=>
         (and (<= 1 temp___798) (<= temp___798 100))
         (= (select temp___799 temp___798) o)) :pattern ((select temp___799 temp___798)) )))

;; "H"
(assert (= temp___799 (binary_trees__model__todo__aggregate_def o)))

;; "binary_trees__model__todo__aggregate_def'result'unused"
(define-fun binary_trees__model__todo__aggregate_defqtresultqtunused 
  () (Array Int Bool)
  temp___799)

(declare-const todo (Array Int Bool))

;; "todo'unused"
(define-fun todoqtunused () map__ref
  (map__refqtmk todo))

;; "H"
(assert (= todo temp___799))

;; "Assume"
(assert true)

;; "o"
(define-fun o1 () us_rep4
  (all_indexes Tuple0))

;; "H"
(assert true)

;; "H"
(assert
  (forall ((i Int)) (=> (and (<= 1 i) (<= i 100)) (= (contains o1 i) true))))

;; "H"
(assert (= (length1 o1) 100))

;; "all_indexes'result'unused"
(define-fun all_indexesqtresultqtunused () us_rep4
  o1)

(declare-const unseen us_rep4)

;; "unseen'unused"
(define-fun unseenqtunused () set__ref
  (set__refqtmk unseen))

;; "H"
(assert (= unseen o1))

;; "Assume"
(assert true)

;; "Assume"
(assert (default_initial_assumption r false))

;; "Assume"
(assert (dynamic_invariant2 r false false true true))

;; "o"
(define-fun o2 () Int
  root)

;; "Ensures"
(assert (in_range o2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o2)

(declare-const i Int)

;; "i'unused"
(define-fun iqtunused () int__ref
  (int__refqtmk i))

;; "H"
(assert (= i o2))

;; "Assume"
(assert (in_range i))

;; "o"
(define-fun o3 () Bool
  (distinct 1 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused1 () Bool
  o3)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int Bool)
  todo)

;; "o"
(define-fun o4 () (Array Int Bool)
  (store todo root o3))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int Bool)
  o4)

(declare-const todo1 (Array Int Bool))

;; "todo'unused"
(define-fun todoqtunused1 () map__ref
  (map__refqtmk todo1))

;; "H"
(assert (= todo1 o4))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int us_rep3)
  r)

;; "temp___807"
(define-fun temp___807 () us_rep3
  (select r root))

;; "get'result'unused"
(define-fun getqtresultqtunused () us_rep3
  temp___807)

;; "_q "
(define-fun usq_ () us_split_fields4
  (us_split_fields5 temp___807))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields4
  usq_)

;; "o"
(define-fun o5 () Bool
  (distinct 1 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused2 () Bool
  o5)

;; "o"
(define-fun o6 () us_rep2
  (rec__tree_model__path_type__a usq_))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused () us_rep2
  o6)

;; "o"
(define-fun o7 () us_split_fields4
  (us_split_fieldsqtmk2 o6 o5))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields4
  o7)

;; "temp___809"
(define-fun temp___809 () us_rep3
  (us_repqtmk2 o7))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep3
  temp___809)

;; "Assert"
(assert (< (length o6) 100))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int us_rep3)
  r)

;; "o"
(define-fun o8 () (Array Int us_rep3)
  (store r root temp___809))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int us_rep3)
  o8)

(declare-const r1 (Array Int us_rep3))

;; "r'unused"
(define-fun rqtunused1 () map__ref1
  (map__refqtmk1 r1))

;; "H"
(assert (= r1 o8))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  i)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  (ite (= i 0) true false))

;; "H"
(assert (not (= i 0)))

;; "temp___loop_entry_837'unused"
(define-fun temp___loop_entry_837qtunused () us_rep4
  unseen)

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused () us_rep4
  unseen)

;; "temp___loop_entry_835'unused"
(define-fun temp___loop_entry_835qtunused () (Array Int Bool)
  todo1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int Bool)
  todo1)

;; "temp___loop_entry_834'unused"
(define-fun temp___loop_entry_834qtunused () Int
  i)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  i)

;; "temp___loop_entry_832'unused"
(define-fun temp___loop_entry_832qtunused () (Array Int us_rep3)
  r1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused4 () (Array Int us_rep3)
  r1)

;; "Assert"
(assert (and (<= 1 i) (<= i 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  i)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused5 () (Array Int Bool)
  todo1)

;; "get'result'unused"
(define-fun getqtresultqtunused1 () Bool
  (select todo1 i))

(declare-const todo2 (Array Int Bool))

(declare-const unseen1 us_rep4)

(declare-const r2 (Array Int us_rep3))

(declare-const i1 Int)

(declare-const j Int)

;; "j'unused"
(define-fun jqtunused () int__ref
  (int__refqtmk j))

;; "i'unused"
(define-fun iqtunused1 () int__ref
  (int__refqtmk i1))

;; "r'unused"
(define-fun rqtunused2 () map__ref1
  (map__refqtmk1 r2))

;; "unseen'unused"
(define-fun unseenqtunused1 () set__ref
  (set__refqtmk unseen1))

;; "todo'unused"
(define-fun todoqtunused2 () map__ref
  (map__refqtmk todo2))

;; "LoopInvariant"
(assert (= (select todo2 i1) true))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=>
        (= (select todo2 j1) true)
        (= (rec__tree_model__path_type__k (us_split_fields5 (select r2 j1))) true)))))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=>
        (= (select todo2 j1) true)
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (= (rec__tree_model__path_type__k
                   (us_split_fields5 (select r2 k))) true)
              (not
                (= (olt
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r2 j1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r2 k)))) true)))))))))

;; "LoopInvariant"
(assert
  (and
    (= (rec__tree_model__path_type__k (us_split_fields5 (select r2 root))) true)
    (= (length
         (rec__tree_model__path_type__a (us_split_fields5 (select r2 root)))) 0)))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=>
        (and
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select r2 j1))) true)
          (not (= j1 root)))
        (and
          (not
            (= (to_rep
                 (rec__binary_trees__cell__parent
                   (us_split_fields1
                     (select (rec__binary_trees__forest__c
                               (us_split_fields3 f)) j1)))) 0))
          (= (rec__tree_model__path_type__k
               (us_split_fields5
                 (select r2 (to_rep
                              (rec__binary_trees__cell__parent
                                (us_split_fields1
                                  (select (rec__binary_trees__forest__c
                                            (us_split_fields3 f)) j1))))))) true))))))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select r2 j1))) true)
             (not (= j1 root)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select r2 (to_rep
                              (rec__binary_trees__cell__parent
                                (us_split_fields1
                                  (select (rec__binary_trees__forest__c
                                            (us_split_fields3 f)) j1)))))))
             (to_rep1
               (rec__binary_trees__cell__position
                 (us_split_fields1
                   (select (rec__binary_trees__forest__c
                             (us_split_fields3 f)) j1))))
             (rec__tree_model__path_type__a
               (us_split_fields5 (select r2 j1)))) true)
        (= (length
             (rec__tree_model__path_type__a
               (us_split_fields5 (select r2 j1)))) 0)))))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=>
        (not (= j1 root))
        (ite (and
               (not
                 (= (to_rep
                      (rec__binary_trees__cell__parent
                        (us_split_fields1
                          (select (rec__binary_trees__forest__c
                                    (us_split_fields3 f)) j1)))) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select r2 (to_rep
                                   (rec__binary_trees__cell__parent
                                     (us_split_fields1
                                       (select (rec__binary_trees__forest__c
                                                 (us_split_fields3 f)) j1))))))) true))
          (or
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select r2 j1))) true)
            (= (select todo2 (to_rep
                               (rec__binary_trees__cell__parent
                                 (us_split_fields1
                                   (select (rec__binary_trees__forest__c
                                             (us_split_fields3 f)) j1))))) true))
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select r2 j1))) true)))))))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=>
        (and
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select r2 j1))) true)
          (not (= j1 root)))
        (not
          (= (select todo2 (to_rep
                             (rec__binary_trees__cell__parent
                               (us_split_fields1
                                 (select (rec__binary_trees__forest__c
                                           (us_split_fields3 f)) j1))))) true))))))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=>
        (= (rec__tree_model__path_type__k (us_split_fields5 (select r2 j1))) true)
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select r2 k))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r2 k)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r2 j1)))) true))
              (= j1 k))))))))

;; "LoopInvariant"
(assert
  (and
    (= (rec__tree_model__path_type__k (us_split_fields5 (select r2 root))) true)
    (= (length
         (rec__tree_model__path_type__a (us_split_fields5 (select r2 root)))) 0)))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (<= (length
            (rec__tree_model__path_type__a (us_split_fields5 (select r2 j1)))) (- 100 
      (length1
        unseen1))))))

;; "LoopInvariant"
(assert
  (forall ((j1 Int))
    (=>
      (and (<= 1 j1) (<= j1 100))
      (=
        (= (contains unseen1 j1) true)
        (or
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select r2 j1))) true))
          (= (select todo2 j1) true))))))

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused1 () us_rep4
  unseen1)

;; "loop_var___83304"
(define-fun loop_var___83304 () Int
  (length1 unseen1))

;; "length'result'unused"
(define-fun lengthqtresultqtunused () Int
  loop_var___83304)

;; "Assume"
(assert
  (= (and (ite (and
                 (dynamic_invariant2 r2 false true true true)
                 (in_range i1))
            true
            false) (ite (not (= i1 0)) true false)) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  i1)

;; "Ensures"
(assert (in_range4 i1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  i1)

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused2 () us_rep4
  unseen1)

;; "o"
(define-fun o9 () us_rep4
  (remove unseen1 i1))

;; "H"
(assert true)

;; "H"
(assert (= (length1 o9) (- (length1 unseen1) 1)))

;; "H"
(assert (not (= (contains o9 i1) true)))

;; "H"
(assert (= (ole o9 unseen1) true))

;; "H"
(assert (= (included_except unseen1 o9 i1) true))

;; "remove'result'unused"
(define-fun removeqtresultqtunused () us_rep4
  o9)

(declare-const unseen2 us_rep4)

;; "unseen'unused"
(define-fun unseenqtunused2 () set__ref
  (set__refqtmk unseen2))

;; "H"
(assert (= unseen2 o9))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range j))

;; "o"
(define-fun o10 () us_split_fields2
  (us_split_fields3 f))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields2
  o10)

;; "temp___815"
(define-fun temp___815 () (Array Int us_rep)
  (rec__binary_trees__forest__c o10))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused () (Array Int us_rep)
  temp___815)

;; "Assert"
(assert (and (<= 1 i1) (<= i1 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  i1)

;; "o"
(define-fun o11 () us_rep
  (select temp___815 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () us_rep
  o11)

;; "o"
(define-fun o12 () us_split_fields
  (us_split_fields1 o11))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields
  o12)

;; "o"
(define-fun o13 () extended_index_type
  (rec__binary_trees__cell__left o12))

;; "rec__binary_trees__cell__left'result'unused"
(define-fun rec__binary_trees__cell__leftqtresultqtunused () extended_index_type
  o13)

(declare-const o14 Int)

;; "Ensures"
(assert (= (to_rep o13) o14))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o14)

(declare-const j1 Int)

;; "j'unused"
(define-fun jqtunused1 () int__ref
  (int__refqtmk j1))

;; "H"
(assert (= j1 o14))

(declare-const spark__branch Bool)

(declare-const todo3 (Array Int Bool))

(declare-const r3 (Array Int us_rep3))

;; "r'unused"
(define-fun rqtunused3 () map__ref1
  (map__refqtmk1 r3))

;; "todo'unused"
(define-fun todoqtunused3 () map__ref
  (map__refqtmk todo3))

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

(declare-const int__contentqtresultqtunused5 Int)

;; "H"
(assert (= int__contentqtresultqtunused5 j1))

(declare-const infix_eqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused1 (ite (= j1 0) true false)))

;; "H"
(assert (= spark__branch (ite (= j1 0) false true)))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const o15 Bool)

(declare-const of_intqtresultqtunused3 Bool)

(declare-const int__contentqtresultqtunused6 Int)

(declare-const map__contentqtresultqtunused6 (Array Int us_rep3))

(declare-const o16 us_rep3)

(declare-const getqtresultqtunused3 us_rep3)

(declare-const o17 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused3 us_split_fields4)

(declare-const o18 us_rep2)

(declare-const rec__tree_model__path_type__aqtresultqtunused1 us_rep2)

(declare-const o19 us_rep2)

(declare-const addqtresultqtunused us_rep2)

(declare-const o20 us_split_fields4)

(declare-const us_split_fieldsqtmkqtresultqtunused1 us_split_fields4)

(declare-const temp___817 us_rep3)

(declare-const us_repqtmkqtresultqtunused1 us_rep3)

(declare-const int__contentqtresultqtunused7 Int)

(declare-const map__contentqtresultqtunused7 (Array Int us_rep3))

(declare-const o21 (Array Int us_rep3))

(declare-const setqtresultqtunused2 (Array Int us_rep3))

(declare-const o22 Bool)

(declare-const of_intqtresultqtunused4 Bool)

(declare-const int__contentqtresultqtunused8 Int)

(declare-const map__contentqtresultqtunused8 (Array Int Bool))

(declare-const o23 (Array Int Bool))

(declare-const setqtresultqtunused3 (Array Int Bool))

;; "H"
(assert
  (ite (= spark__branch true)
    (and
      (not (= (is_empty unseen2) true))
      (and
        (= o15 (distinct 1 0))
        (and
          (= of_intqtresultqtunused3 o15)
          (and
            (and (<= 1 i1) (<= i1 100))
            (and
              (= int__contentqtresultqtunused6 i1)
              (and
                (= map__contentqtresultqtunused6 r2)
                (and
                  (= o16 (select r2 i1))
                  (and
                    (= getqtresultqtunused3 o16)
                    (and
                      (= o17 (us_split_fields5 o16))
                      (and
                        (= us_split_fieldsqtresultqtunused3 o17)
                        (and
                          (= o18 (rec__tree_model__path_type__a o17))
                          (and
                            (= rec__tree_model__path_type__aqtresultqtunused1 
                            o18)
                            (and
                              (= o19 (add o18 0))
                              (and
                                (and
                                  (and
                                    (= (last o19) (+ (last o18) 1))
                                    (= (get o19 (last o19)) 0))
                                  (= (equal_prefix o18 o19) true))
                                (and
                                  (= addqtresultqtunused o19)
                                  (and
                                    (= o20 (us_split_fieldsqtmk2 o19 o15))
                                    (and
                                      (= us_split_fieldsqtmkqtresultqtunused1 
                                      o20)
                                      (and
                                        (= temp___817 (us_repqtmk2 o20))
                                        (and
                                          (= us_repqtmkqtresultqtunused1 
                                          temp___817)
                                          (and
                                            (< (length o19) 100)
                                            (and
                                              (and (<= 1 j1) (<= j1 100))
                                              (and
                                                (= int__contentqtresultqtunused7 
                                                j1)
                                                (and
                                                  (= map__contentqtresultqtunused7 
                                                  r2)
                                                  (and
                                                    (= o21 (store r2 
                                                    j1 temp___817))
                                                    (and
                                                      (= setqtresultqtunused2 
                                                      o21)
                                                      (and
                                                        (= r3 o21)
                                                        (and
                                                          (= o22 (distinct 1 0))
                                                          (and
                                                            (= of_intqtresultqtunused4 
                                                            o22)
                                                            (and
                                                              (and
                                                                (<= 1 
                                                                j1)
                                                                (<= j1 100))
                                                              (and
                                                                (= int__contentqtresultqtunused8 
                                                                j1)
                                                                (and
                                                                  (= 
                                                                  map__contentqtresultqtunused8 
                                                                  todo2)
                                                                  (and
                                                                    (= 
                                                                    o23 (store 
                                                                    todo2 
                                                                    j1 
                                                                    o22))
                                                                    (and
                                                                    (= 
                                                                    setqtresultqtunused3 
                                                                    o23)
                                                                    (= 
                                                                    todo3 
                                                                    o23))))))))))))))))))))))))))))))))))
    (and (= todo3 todo2) (= r3 r2))))

;; "Assert"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (= (rec__tree_model__path_type__k (us_split_fields5 (select r3 j2))) true)
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select r3 k))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r3 k)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r3 j2)))) true))
              (= j2 k))))))))

;; "Assert"
(assert
  (forall ((j2 Int))
    (=>
      (and (<= 1 j2) (<= j2 100))
      (=>
        (and (= (select todo3 j2) true) (not (= i1 j2)))
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (= (rec__tree_model__path_type__k
                   (us_split_fields5 (select r3 k))) true)
              (not
                (= (olt
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r3 j2)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r3 k)))) true)))))))))

;; "o"
(define-fun o24 () us_split_fields2
  (us_split_fields3 f))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields2
  o24)

;; "temp___823"
(define-fun temp___823 () (Array Int us_rep)
  (rec__binary_trees__forest__c o24))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused1 () (Array Int us_rep)
  temp___823)

;; "Assert"
(assert (and (<= 1 i1) (<= i1 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  i1)

;; "o"
(define-fun o25 () us_rep
  (select temp___823 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused4 () us_rep
  o25)

;; "o"
(define-fun o26 () us_split_fields
  (us_split_fields1 o25))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields
  o26)

;; "o"
(define-fun o27 () extended_index_type
  (rec__binary_trees__cell__right o26))

;; "rec__binary_trees__cell__right'result'unused"
(define-fun rec__binary_trees__cell__rightqtresultqtunused () extended_index_type
  o27)

(declare-const o28 Int)

;; "Ensures"
(assert (= (to_rep o27) o28))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o28)

(declare-const j2 Int)

;; "j'unused"
(define-fun jqtunused2 () int__ref
  (int__refqtmk j2))

;; "H"
(assert (= j2 o28))

(declare-const todo4 (Array Int Bool))

(declare-const r4 (Array Int us_rep3))

;; "r'unused"
(define-fun rqtunused4 () map__ref1
  (map__refqtmk1 r4))

;; "todo'unused"
(define-fun todoqtunused4 () map__ref
  (map__refqtmk todo4))

(declare-const int__contentqtresultqtunused10 Int)

;; "H"
(assert (= int__contentqtresultqtunused10 j2))

(declare-const infix_eqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused2 (ite (= j2 0) true false)))

(declare-const spark__branch1 Bool)

(declare-const spark__branchqtunused1 bool__ref)

;; "H"
(assert (= spark__branchqtunused1 (bool__refqtmk spark__branch1)))

;; "H"
(assert (= spark__branch1 (ite (= j2 0) false true)))

(declare-const bool__contentqtresultqtunused1 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused1 spark__branch1))

(declare-const o29 Bool)

(declare-const of_intqtresultqtunused5 Bool)

(declare-const int__contentqtresultqtunused11 Int)

(declare-const map__contentqtresultqtunused9 (Array Int us_rep3))

(declare-const o30 us_rep3)

(declare-const getqtresultqtunused5 us_rep3)

(declare-const o31 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused6 us_split_fields4)

(declare-const o32 us_rep2)

(declare-const rec__tree_model__path_type__aqtresultqtunused2 us_rep2)

(declare-const o33 us_rep2)

(declare-const addqtresultqtunused1 us_rep2)

(declare-const o34 us_split_fields4)

(declare-const us_split_fieldsqtmkqtresultqtunused2 us_split_fields4)

(declare-const temp___825 us_rep3)

(declare-const us_repqtmkqtresultqtunused2 us_rep3)

(declare-const int__contentqtresultqtunused12 Int)

(declare-const map__contentqtresultqtunused10 (Array Int us_rep3))

(declare-const o35 (Array Int us_rep3))

(declare-const setqtresultqtunused4 (Array Int us_rep3))

(declare-const o36 Bool)

(declare-const of_intqtresultqtunused6 Bool)

(declare-const int__contentqtresultqtunused13 Int)

(declare-const map__contentqtresultqtunused11 (Array Int Bool))

(declare-const o37 (Array Int Bool))

(declare-const setqtresultqtunused5 (Array Int Bool))

;; "H"
(assert
  (ite (= spark__branch1 true)
    (and
      (not (= (is_empty unseen2) true))
      (and
        (= o29 (distinct 1 0))
        (and
          (= of_intqtresultqtunused5 o29)
          (and
            (and (<= 1 i1) (<= i1 100))
            (and
              (= int__contentqtresultqtunused11 i1)
              (and
                (= map__contentqtresultqtunused9 r3)
                (and
                  (= o30 (select r3 i1))
                  (and
                    (= getqtresultqtunused5 o30)
                    (and
                      (= o31 (us_split_fields5 o30))
                      (and
                        (= us_split_fieldsqtresultqtunused6 o31)
                        (and
                          (= o32 (rec__tree_model__path_type__a o31))
                          (and
                            (= rec__tree_model__path_type__aqtresultqtunused2 
                            o32)
                            (and
                              (= o33 (add o32 1))
                              (and
                                (and
                                  (and
                                    (= (last o33) (+ (last o32) 1))
                                    (= (get o33 (last o33)) 1))
                                  (= (equal_prefix o32 o33) true))
                                (and
                                  (= addqtresultqtunused1 o33)
                                  (and
                                    (= o34 (us_split_fieldsqtmk2 o33 o29))
                                    (and
                                      (= us_split_fieldsqtmkqtresultqtunused2 
                                      o34)
                                      (and
                                        (= temp___825 (us_repqtmk2 o34))
                                        (and
                                          (= us_repqtmkqtresultqtunused2 
                                          temp___825)
                                          (and
                                            (< (length o33) 100)
                                            (and
                                              (and (<= 1 j2) (<= j2 100))
                                              (and
                                                (= int__contentqtresultqtunused12 
                                                j2)
                                                (and
                                                  (= map__contentqtresultqtunused10 
                                                  r3)
                                                  (and
                                                    (= o35 (store r3 
                                                    j2 temp___825))
                                                    (and
                                                      (= setqtresultqtunused4 
                                                      o35)
                                                      (and
                                                        (= r4 o35)
                                                        (and
                                                          (= o36 (distinct 1 0))
                                                          (and
                                                            (= of_intqtresultqtunused6 
                                                            o36)
                                                            (and
                                                              (and
                                                                (<= 1 
                                                                j2)
                                                                (<= j2 100))
                                                              (and
                                                                (= int__contentqtresultqtunused13 
                                                                j2)
                                                                (and
                                                                  (= 
                                                                  map__contentqtresultqtunused11 
                                                                  todo3)
                                                                  (and
                                                                    (= 
                                                                    o37 (store 
                                                                    todo3 
                                                                    j2 
                                                                    o36))
                                                                    (and
                                                                    (= 
                                                                    setqtresultqtunused5 
                                                                    o37)
                                                                    (= 
                                                                    todo4 
                                                                    o37))))))))))))))))))))))))))))))))))
    (and (= todo4 todo3) (= r4 r3))))

;; "Assert"
(assert
  (forall ((j3 Int))
    (=>
      (and (<= 1 j3) (<= j3 100))
      (=>
        (= (rec__tree_model__path_type__k (us_split_fields5 (select r4 j3))) true)
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select r4 k))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r4 k)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r4 j3)))) true))
              (= j3 k))))))))

;; "Assert"
(assert
  (forall ((j3 Int))
    (=>
      (and (<= 1 j3) (<= j3 100))
      (=>
        (and (= (select todo4 j3) true) (not (= i1 j3)))
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (= (rec__tree_model__path_type__k
                   (us_split_fields5 (select r4 k))) true)
              (not
                (= (olt
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r4 j3)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r4 k)))) true)))))))))

;; "o"
(define-fun o38 () Bool
  (distinct 0 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused7 () Bool
  o38)

;; "Assert"
(assert (and (<= 1 i1) (<= i1 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused14 () Int
  i1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused12 () (Array Int Bool)
  todo4)

;; "o"
(define-fun o39 () (Array Int Bool)
  (store todo4 i1 o38))

;; "set'result'unused"
(define-fun setqtresultqtunused6 () (Array Int Bool)
  o39)

(declare-const todo5 (Array Int Bool))

;; "todo'unused"
(define-fun todoqtunused5 () map__ref
  (map__refqtmk todo5))

;; "H"
(assert (= todo5 o39))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused13 () (Array Int Bool)
  todo5)

;; "o"
(define-fun o40 () Int
  (next todo5))

;; "H"
(assert (in_range o40))

;; "H"
(assert
  (ite (= o40 0)
    (forall ((i2 Int))
      (=> (and (<= 1 i2) (<= i2 100)) (not (= (select todo5 i2) true))))
    (= (select todo5 o40) true)))

;; "next'result'unused"
(define-fun nextqtresultqtunused () Int
  o40)

(declare-const i2 Int)

;; "i'unused"
(define-fun iqtunused2 () int__ref
  (int__refqtmk i2))

;; "H"
(assert (= i2 o40))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused15 () Int
  i2)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused3 () Bool
  (ite (= i2 0) true false))

;; "H"
(assert (not (= i2 0)))

;; "Assert"
(assert (and (<= 1 i2) (<= i2 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused16 () Int
  i2)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused14 () (Array Int Bool)
  todo5)

;; "get'result'unused"
(define-fun getqtresultqtunused6 () Bool
  (select todo5 i2))

;; "set__content'result'unused"
(define-fun set__contentqtresultqtunused3 () us_rep4
  unseen2)

;; "loop_var_new___83304"
(define-fun loop_var_new___83304 () Int
  (length1 unseen2))

;; "length'result'unused"
(define-fun lengthqtresultqtunused1 () Int
  loop_var_new___83304)

;; "H"
(assert (< loop_var_new___83304 loop_var___83304))

;; "LoopInvariant"
(assert (= (select todo5 i2) true))

;; "LoopInvariant"
(assert
  (forall ((j3 Int))
    (=>
      (and (<= 1 j3) (<= j3 100))
      (=>
        (= (select todo5 j3) true)
        (= (rec__tree_model__path_type__k (us_split_fields5 (select r4 j3))) true)))))

;; "LoopInvariant"
(assert
  (forall ((j3 Int))
    (=>
      (and (<= 1 j3) (<= j3 100))
      (=>
        (= (select todo5 j3) true)
        (forall ((k Int))
          (=>
            (and (<= 1 k) (<= k 100))
            (=>
              (= (rec__tree_model__path_type__k
                   (us_split_fields5 (select r4 k))) true)
              (not
                (= (olt
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r4 j3)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select r4 k)))) true)))))))))

;; "LoopInvariant"
(assert
  (and
    (= (rec__tree_model__path_type__k (us_split_fields5 (select r4 root))) true)
    (= (length
         (rec__tree_model__path_type__a (us_split_fields5 (select r4 root)))) 0)))

(declare-const j3 Int)

;; "H"
(assert (<= 1 j3))

;; "H"
(assert (<= j3 100))

;; "H"
(assert
  (= (rec__tree_model__path_type__k (us_split_fields5 (select r4 j3))) true))

;; "H"
(assert (not (= j3 root)))

;; Goal "def'vc"
;; File "binary_trees.ads", line 45, characters 0-0
(assert
  (not
  (not
    (= (to_rep
         (rec__binary_trees__cell__parent
           (us_split_fields1
             (select (rec__binary_trees__forest__c (us_split_fields3 f)) 
             j3)))) 0))))

(check-sat)
