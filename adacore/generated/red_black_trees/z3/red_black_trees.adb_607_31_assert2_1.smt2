;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

;; "to_rep"
(define-fun to_rep2 ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep1)(rec__search_trees__search_tree__values (Array Int natural))))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields4)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const search_trees__search_tree__root__first__bit Int)

(declare-const search_trees__search_tree__root__last__bit Int)

(declare-const search_trees__search_tree__root__position Int)

;; "search_trees__search_tree__root__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__root__first__bit))

;; "search_trees__search_tree__root__last__bit_axiom"
(assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; "search_trees__search_tree__root__position_axiom"
(assert (<= 0 search_trees__search_tree__root__position))

(declare-const search_trees__search_tree__struct__first__bit Int)

(declare-const search_trees__search_tree__struct__last__bit Int)

(declare-const search_trees__search_tree__struct__position Int)

;; "search_trees__search_tree__struct__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__struct__first__bit))

;; "search_trees__search_tree__struct__last__bit_axiom"
(assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; "search_trees__search_tree__struct__position_axiom"
(assert (<= 0 search_trees__search_tree__struct__position))

(declare-const search_trees__search_tree__values__first__bit Int)

(declare-const search_trees__search_tree__values__last__bit Int)

(declare-const search_trees__search_tree__values__position Int)

;; "search_trees__search_tree__values__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__values__first__bit))

;; "search_trees__search_tree__values__last__bit_axiom"
(assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; "search_trees__search_tree__values__position_axiom"
(assert (<= 0 search_trees__search_tree__values__position))

(declare-const dummy2 us_rep2)

(declare-sort color_type 0)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "to_rep"
(declare-fun to_rep3 (color_type) Int)

;; "of_rep"
(declare-fun of_rep3 (Int) color_type)

;; "inversion_axiom"
(assert
  (forall ((x color_type))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x color_type))
    (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-datatypes ()
  ((us_split_fields6
   (us_split_fieldsqtmk3
   (rec__red_black_trees__rbt__struct us_rep2)(rec__red_black_trees__rbt__color (Array Int color_type))))))

(declare-datatypes ()
  ((us_split_fields__ref1
   (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields6)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const red_black_trees__rbt__struct__first__bit Int)

(declare-const red_black_trees__rbt__struct__last__bit Int)

(declare-const red_black_trees__rbt__struct__position Int)

;; "red_black_trees__rbt__struct__first__bit_axiom"
(assert (<= 0 red_black_trees__rbt__struct__first__bit))

;; "red_black_trees__rbt__struct__last__bit_axiom"
(assert
  (< red_black_trees__rbt__struct__first__bit red_black_trees__rbt__struct__last__bit))

;; "red_black_trees__rbt__struct__position_axiom"
(assert (<= 0 red_black_trees__rbt__struct__position))

(declare-const red_black_trees__rbt__color__first__bit Int)

(declare-const red_black_trees__rbt__color__last__bit Int)

(declare-const red_black_trees__rbt__color__position Int)

;; "red_black_trees__rbt__color__first__bit_axiom"
(assert (<= 0 red_black_trees__rbt__color__first__bit))

;; "red_black_trees__rbt__color__last__bit_axiom"
(assert
  (< red_black_trees__rbt__color__first__bit red_black_trees__rbt__color__last__bit))

;; "red_black_trees__rbt__color__position_axiom"
(assert (<= 0 red_black_trees__rbt__color__position))

(declare-const dummy3 us_rep3)

;; "size"
(declare-fun size (us_rep2) Int)

;; "size"
(declare-fun size1 (us_rep1) Int)

;; "size"
(declare-fun size2 (us_rep3) Int)

(declare-sort us_rep4 0)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const dummy4 us_rep4)

(declare-datatypes ()
  ((value_set__ref (value_set__refqtmk (value_set__content us_rep4)))))

;; "values"
(declare-fun values (us_rep2) us_rep4)

;; "is_empty"
(declare-fun is_empty (us_rep4) Bool)

;; "values"
(declare-fun values1 (us_rep3) us_rep4)

;; "contains"
(declare-fun contains (us_rep4
  Int) Bool)

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "tree_structure"
(declare-fun tree_structure (us_rep1) Bool)

;; "ordered_leafs"
(declare-fun ordered_leafs (us_rep1
  Int
  (Array Int natural)) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_344 us_rep3) (temp___is_init_340 Bool) (temp___skip_constant_341 Bool) (temp___do_toplevel_342 Bool) (temp___do_typ_inv_343 Bool)) Bool
  (and
    (=>
      (= temp___do_typ_inv_343 true)
      (let ((temp___345 (rec__red_black_trees__rbt__struct
                          (us_split_fields7 temp___expr_344))))
        (ite (= (size1
                  (rec__search_trees__search_tree__struct
                    (us_split_fields5 temp___345))) 0)
          (= (to_rep
               (rec__search_trees__search_tree__root
                 (us_split_fields5 temp___345))) 0)
          (and
            (and
              (not
                (= (to_rep
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 temp___345))) 0))
              (= (valid_root
                   (rec__search_trees__search_tree__struct
                     (us_split_fields5 temp___345))
                   (to_rep
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 temp___345)))) true))
            (= (ordered_leafs
                 (rec__search_trees__search_tree__struct
                   (us_split_fields5 temp___345))
                 (to_rep
                   (rec__search_trees__search_tree__root
                     (us_split_fields5 temp___345)))
                 (rec__search_trees__search_tree__values
                   (us_split_fields5 temp___345))) true)))))
    (=>
      (= temp___do_typ_inv_343 true)
      (= (tree_structure
           (rec__search_trees__search_tree__struct
             (us_split_fields5
               (rec__red_black_trees__rbt__struct
                 (us_split_fields7 temp___expr_344))))) true))))

;; "invariant__"
(declare-fun invariant__ (us_rep3) Bool)

;; "type_invariant"
(define-fun type_invariant ((temp___370 us_rep3)) Bool
  (= (invariant__ temp___370) true))

(declare-const v Int)

;; "oeq"
(declare-fun oeq (us_rep4
  us_rep4) Bool)

;; "ole"
(declare-fun ole (us_rep4
  us_rep4) Bool)

;; "is_add"
(declare-fun is_add (us_rep4
  Int
  us_rep4) Bool)

;; "included_except"
(declare-fun included_except (us_rep4
  us_rep4
  Int) Bool)

;; "color"
(define-fun color ((param__t us_rep3) (param__i Int)) Int
  (ite (= param__i 0)
    0
    (to_rep3
      (let ((temp___188 (rec__red_black_trees__rbt__color
                          (us_split_fields7 param__t))))
        (select temp___188 param__i)))))

(declare-sort us_rep5 0)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const dummy5 us_rep5)

(declare-datatypes ()
  ((us_split_fields8
   (us_split_fieldsqtmk4
   (rec__tree_model__path_type__a us_rep5)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep6 (us_repqtmk4 (us_split_fields9 us_split_fields8)))))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy6 us_rep6)

;; "model"
(declare-fun model1 (us_rep2) (Array Int us_rep6))

;; "model"
(declare-fun model2 (us_rep1
  Int) (Array Int us_rep6))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; "value__size_axiom"
(assert (<= 0 value__size10))

;; "object__size_axiom"
(assert (<= 0 object__size10))

;; "alignment_axiom"
(assert (<= 0 alignment10))

(declare-const dummy7 Int)

;; "last"
(declare-fun last (us_rep5) Int)

;; "length"
(define-fun length ((param__container us_rep5)) Int
  (- (+ (last param__container) 1) 1))

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const component__size3 Int)

(declare-const alignment11 Int)

;; "value__size_axiom"
(assert (<= 0 value__size11))

;; "object__size_axiom"
(assert (<= 0 object__size11))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment11))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_497 (Array Int us_rep6)) (temp___is_init_493 Bool) (temp___skip_constant_494 Bool) (temp___do_toplevel_495 Bool) (temp___do_typ_inv_496 Bool)) Bool
  (forall ((temp___498 Int))
    (=>
      (and (<= 1 temp___498) (<= temp___498 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields9 (select temp___expr_497 temp___498)))) 100))))

;; "peek"
(declare-fun peek (us_rep2
  Int
  Int) Int)

;; "peek"
(declare-fun peek1 (us_rep1
  Int
  Int) Int)

(declare-datatypes ()
  ((us_split_fields10
   (us_split_fieldsqtmk5
   (rec__red_black_trees__black_count__status Bool)(rec__red_black_trees__black_count__depth extended_index_type)(rec__red_black_trees__black_count__count extended_index_type)))))

(declare-datatypes ()
  ((us_rep7 (us_repqtmk5 (us_split_fields11 us_split_fields10)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep7) (b us_rep7)) Bool
  (ite (and
         (= (ite (rec__red_black_trees__black_count__status
                   (us_split_fields11 a)) 1 0) (ite (rec__red_black_trees__black_count__status
                                                      (us_split_fields11 b)) 1 0))
         (and
           (= (to_rep
                (rec__red_black_trees__black_count__depth
                  (us_split_fields11 a))) (to_rep
                                            (rec__red_black_trees__black_count__depth
                                              (us_split_fields11 b))))
           (= (to_rep
                (rec__red_black_trees__black_count__count
                  (us_split_fields11 a))) (to_rep
                                            (rec__red_black_trees__black_count__count
                                              (us_split_fields11 b))))))
    true
    false))

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const alignment12 Int)

;; "value__size_axiom"
(assert (<= 0 value__size12))

;; "object__size_axiom"
(assert (<= 0 object__size12))

;; "alignment_axiom"
(assert (<= 0 alignment12))

(declare-const red_black_trees__black_count__status__first__bit Int)

(declare-const red_black_trees__black_count__status__last__bit Int)

(declare-const red_black_trees__black_count__status__position Int)

;; "red_black_trees__black_count__status__first__bit_axiom"
(assert (<= 0 red_black_trees__black_count__status__first__bit))

;; "red_black_trees__black_count__status__last__bit_axiom"
(assert
  (< red_black_trees__black_count__status__first__bit red_black_trees__black_count__status__last__bit))

;; "red_black_trees__black_count__status__position_axiom"
(assert (<= 0 red_black_trees__black_count__status__position))

(declare-const red_black_trees__black_count__depth__first__bit Int)

(declare-const red_black_trees__black_count__depth__last__bit Int)

(declare-const red_black_trees__black_count__depth__position Int)

;; "red_black_trees__black_count__depth__first__bit_axiom"
(assert (<= 0 red_black_trees__black_count__depth__first__bit))

;; "red_black_trees__black_count__depth__last__bit_axiom"
(assert
  (< red_black_trees__black_count__depth__first__bit red_black_trees__black_count__depth__last__bit))

;; "red_black_trees__black_count__depth__position_axiom"
(assert (<= 0 red_black_trees__black_count__depth__position))

(declare-const red_black_trees__black_count__count__first__bit Int)

(declare-const red_black_trees__black_count__count__last__bit Int)

(declare-const red_black_trees__black_count__count__position Int)

;; "red_black_trees__black_count__count__first__bit_axiom"
(assert (<= 0 red_black_trees__black_count__count__first__bit))

;; "red_black_trees__black_count__count__last__bit_axiom"
(assert
  (< red_black_trees__black_count__count__first__bit red_black_trees__black_count__count__last__bit))

;; "red_black_trees__black_count__count__position_axiom"
(assert (<= 0 red_black_trees__black_count__count__position))

(declare-const dummy8 us_rep7)

;; "nb_blacks"
(declare-fun nb_blacks (us_rep3) (Array Int us_rep7))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const component__size4 Int)

(declare-const alignment13 Int)

;; "value__size_axiom"
(assert (<= 0 value__size13))

;; "object__size_axiom"
(assert (<= 0 object__size13))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment13))

;; "same_nb_blacks"
(declare-fun same_nb_blacks (us_rep3) Bool)

;; "parent"
(declare-fun parent (us_rep2
  Int) Int)

;; "parent"
(declare-fun parent1 (us_rep1
  Int) Int)

;; "root"
(declare-fun root (us_rep2) Int)

;; "position"
(declare-fun position (us_rep1
  Int) Int)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "position"
(declare-fun position1 (us_rep2
  Int) Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_301 us_rep2) (temp___is_init_297 Bool) (temp___skip_constant_298 Bool) (temp___do_toplevel_299 Bool) (temp___do_typ_inv_300 Bool)) Bool
  (and
    (=>
      (= temp___do_typ_inv_300 true)
      (ite (= (size1
                (rec__search_trees__search_tree__struct
                  (us_split_fields5 temp___expr_301))) 0)
        (= (to_rep
             (rec__search_trees__search_tree__root
               (us_split_fields5 temp___expr_301))) 0)
        (and
          (and
            (not
              (= (to_rep
                   (rec__search_trees__search_tree__root
                     (us_split_fields5 temp___expr_301))) 0))
            (= (valid_root
                 (rec__search_trees__search_tree__struct
                   (us_split_fields5 temp___expr_301))
                 (to_rep
                   (rec__search_trees__search_tree__root
                     (us_split_fields5 temp___expr_301)))) true))
          (= (ordered_leafs
               (rec__search_trees__search_tree__struct
                 (us_split_fields5 temp___expr_301))
               (to_rep
                 (rec__search_trees__search_tree__root
                   (us_split_fields5 temp___expr_301)))
               (rec__search_trees__search_tree__values
                 (us_split_fields5 temp___expr_301))) true))))
    (=>
      (= temp___do_typ_inv_300 true)
      (= (tree_structure
           (rec__search_trees__search_tree__struct
             (us_split_fields5 temp___expr_301))) true))))

;; "length"
(declare-fun length1 (us_rep4) Int)

;; "get"
(declare-fun get (us_rep5
  Int) Int)

;; "oeq"
(define-fun oeq1 ((param__left us_rep5) (param__right us_rep5)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "olt"
(define-fun olt ((param__left us_rep5) (param__right us_rep5)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add1 (us_rep5
  Int
  us_rep5) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant3 ((temp___expr_276 us_rep1) (temp___is_init_272 Bool) (temp___skip_constant_273 Bool) (temp___do_toplevel_274 Bool) (temp___do_typ_inv_275 Bool)) Bool
  (=>
    (= temp___do_typ_inv_275 true)
    (= (tree_structure temp___expr_276) true)))

;; "dynamic_invariant"
(define-fun dynamic_invariant4 ((temp___expr_413 Int) (temp___is_init_409 Bool) (temp___skip_constant_410 Bool) (temp___do_toplevel_411 Bool) (temp___do_typ_inv_412 Bool)) Bool
  (=>
    (= temp___is_init_409 true)
    (=> (= temp___do_toplevel_411 true) (<= 0 temp___expr_413))))

;; "in_range"
(define-fun in_range7 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "size__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (! (=>
         (dynamic_invariant3 param__f true false true true)
         (in_range2 (size1 param__f))) :pattern ((size1 param__f)) )))

;; "size__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (dynamic_invariant2 param__t true false true true)
         (in_range2 (size param__t))) :pattern ((size param__t)) )))

;; "size__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (size param__t) (size1
                            (rec__search_trees__search_tree__struct
                              (us_split_fields5 param__t)))) :pattern (
    (size
      param__t)) )))

;; "size__post_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=>
         (and
           (dynamic_invariant param__t true false true true)
           (type_invariant param__t))
         (in_range2 (size2 param__t))) :pattern ((size2 param__t)) )))

;; "size__def_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (= (size2 param__t) (size
                             (rec__red_black_trees__rbt__struct
                               (us_split_fields7 param__t)))) :pattern (
    (size2
      param__t)) )))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (! (dynamic_invariant4 (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((item Int))
               (not
                 (and
                   (in_range1 item)
                   (= (contains param__container item) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "values__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (dynamic_invariant2 param__t true false true true)
         (=> (= (size param__t) 0) (= (is_empty (values param__t)) true))) :pattern (
    (values
      param__t)) )))

;; "values__post_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=>
         (and
           (dynamic_invariant param__t true false true true)
           (type_invariant param__t))
         (=> (= (size2 param__t) 0) (= (is_empty (values1 param__t)) true))) :pattern (
    (values1
      param__t)) )))

;; "values__def_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (= (values1 param__t) (values
                               (rec__red_black_trees__rbt__struct
                                 (us_split_fields7 param__t)))) :pattern (
    (values1
      param__t)) )))

;; "contains__post_axiom"
(assert true)

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep4) (param__right us_rep4))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((item Int))
           (=>
             (and (in_range1 item) (= (contains param__left item) true))
             (= (contains param__right item) true)))) :pattern ((ole
                                                                  param__left
                                                                  param__right)) )))

;; "oeq__post_axiom"
(assert
  (forall ((param__left us_rep4) (param__right us_rep4))
    (! (=
         (= (oeq param__left param__right) true)
         (and
           (= (ole param__left param__right) true)
           (= (ole param__right param__left) true))) :pattern ((oeq
                                                                 param__left
                                                                 param__right)) )))

;; "included_except__post_axiom"
(assert
  (forall ((param__left us_rep4) (param__right us_rep4))
    (forall ((param__item Int))
      (! (=>
           (in_range1 param__item)
           (=
             (= (included_except param__left param__right param__item) true)
             (forall ((e Int))
               (=>
                 (and (in_range1 e) (= (contains param__left e) true))
                 (or (= (contains param__right e) true) (= e param__item)))))) :pattern (
      (included_except
        param__left
        param__right
        param__item)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep4) (param__s2 us_rep4))
    (forall ((param__e Int))
      (! (=
           (= (is_add param__s1 param__e param__s2) true)
           (and
             (and
               (and
                 (not (= (contains param__s1 param__e) true))
                 (= (contains param__s2 param__e) true))
               (= (ole param__s1 param__s2) true))
             (= (included_except param__s2 param__s1 param__e) true))) :pattern (
      (is_add
        param__s1
        param__e
        param__s2)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep5))
    (! (in_range7 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep5))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range7 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range6 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant3 param__f true false true true)
             (in_range5 param__i))
           (=>
             (< (size1 param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant3 param__f true false true true)
             (in_range5 param__i))
           (let ((result (parent1 param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size1 param__f) 0) (= result 0)))
               (in_range2 result)))) :pattern ((parent1 param__f param__i)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep5) (param__s2 us_rep5))
    (forall ((param__d Int))
      (! (=
           (= (is_add1 param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add1
        param__s1
        param__d
        param__s2)) ))))

;; "position__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant3 param__f true false true true)
               (in_range5 param__i))
             (not (= (parent1 param__f param__i) 0)))
           (in_range6 (position param__f param__i))) :pattern ((position
                                                                 param__f
                                                                 param__i)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (dynamic_invariant3 param__f true false true true)
               (in_range5 param__root))
             (= (valid_root param__f param__root) true))
           (let ((result (model2 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields9 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields9 (select result param__root)))) 0))
                     (forall ((i Int))
                       (=>
                         (and (<= 1 i) (<= i 100))
                         (=>
                           (not (= i param__root))
                           (ite (and
                                  (not (= (parent1 param__f i) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields9
                                         (select result (parent1 param__f i)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields9 (select result i))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields9 (select result i))) true)))))))
                   (forall ((i Int))
                     (=>
                       (and (<= 1 i) (<= i 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields9 (select result i))) true)
                              (not (= i param__root)))
                         (= (is_add1
                              (rec__tree_model__path_type__a
                                (us_split_fields9
                                  (select result (parent1 param__f i))))
                              (position param__f i)
                              (rec__tree_model__path_type__a
                                (us_split_fields9 (select result i)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields9 (select result i)))) 0)))))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields9 (select result i))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields9 (select result j))) true)
                               (= (oeq1
                                    (rec__tree_model__path_type__a
                                      (us_split_fields9 (select result i)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields9 (select result j)))) true))
                             (= j i))))))))
               (dynamic_invariant1 result true false true true)))) :pattern (
      (model2
        param__f
        param__root)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (and
           (dynamic_invariant2 param__t true false true true)
           (not (= (size param__t) 0)))
         (dynamic_invariant1 (model1 param__t) true false true true)) :pattern (
    (model1
      param__t)) )))

;; "model__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (model1 param__t) (model2
                              (rec__search_trees__search_tree__struct
                                (us_split_fields5 param__t))
                              (to_rep
                                (rec__search_trees__search_tree__root
                                  (us_split_fields5 param__t))))) :pattern (
    (model1
      param__t)) )))

;; "peek__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (dynamic_invariant3 param__f true false true true)
               (in_range5 param__i))
             (in_range6 param__d))
           (let ((result (peek1 param__f param__i param__d)))
             (and
               (and
                 (ite (not (= result 0))
                   (and
                     (= (position param__f result) param__d)
                     (= (parent1 param__f result) param__i))
                   (forall ((j Int))
                     (=>
                       (and (<= 1 j) (<= j 100))
                       (=>
                         (= (parent1 param__f j) param__i)
                         (not (= (position param__f j) param__d))))))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (= (parent1 param__f j) param__i)
                         (= (position param__f j) param__d))
                       (= result j)))))
               (in_range2 result)))) :pattern ((peek1
                                                 param__f
                                                 param__i
                                                 param__d)) ))))

;; "peek__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant2 param__t true false true true)
                 (in_range5 param__i))
               (in_range6 param__d))
             (and
               (not (= (size param__t) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields9
                      (let ((temp___550 (model1 param__t)))
                        (select temp___550 param__i)))) true)))
           (in_range2 (peek param__t param__i param__d))) :pattern ((peek
                                                                    param__t
                                                                    param__i
                                                                    param__d)) ))))

;; "peek__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int) (param__d Int))
      (! (= (peek param__t param__i param__d) (peek1
                                                (rec__search_trees__search_tree__struct
                                                  (us_split_fields5 param__t))
                                                param__i
                                                param__d)) :pattern (
      (peek
        param__t
        param__i
        param__d)) ))))

(declare-const rliteral extended_index_type)

;; "rliteral_axiom"
(assert (= (extended_index_typeqtint rliteral) 0))

;; "nb_blacks__post_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=>
         (and
           (dynamic_invariant param__t true false true true)
           (not
             (= (size
                  (rec__red_black_trees__rbt__struct
                    (us_split_fields7 param__t))) 0)))
         (let ((result (nb_blacks param__t)))
           (and
             (= (bool_eq
                  (select result 0)
                  (us_repqtmk5
                    (us_split_fieldsqtmk5 (distinct 1 0) rliteral rliteral))) true)
             (forall ((i Int))
               (=>
                 (and (<= 1 i) (<= i 100))
                 (=>
                   (= (rec__tree_model__path_type__k
                        (us_split_fields9
                          (let ((temp___560 (model1
                                              (rec__red_black_trees__rbt__struct
                                                (us_split_fields7 param__t)))))
                            (select temp___560 i)))) true)
                   (and
                     (and
                       (=
                         (= (rec__red_black_trees__black_count__status
                              (us_split_fields11 (select result i))) true)
                         (= (to_rep
                              (rec__red_black_trees__black_count__count
                                (us_split_fields11
                                  (select result (peek
                                                   (rec__red_black_trees__rbt__struct
                                                     (us_split_fields7
                                                       param__t))
                                                   i
                                                   0))))) (to_rep
                                                            (rec__red_black_trees__black_count__count
                                                              (us_split_fields11
                                                                (select result 
                                                                (peek
                                                                  (rec__red_black_trees__rbt__struct
                                                                    (us_split_fields7
                                                                    param__t))
                                                                  i
                                                                  1)))))))
                       (= (to_rep
                            (rec__red_black_trees__black_count__depth
                              (us_split_fields11 (select result i)))) (+ 1 
                       (max
                         (to_rep
                           (rec__red_black_trees__black_count__depth
                             (us_split_fields11
                               (select result (peek
                                                (rec__red_black_trees__rbt__struct
                                                  (us_split_fields7 param__t))
                                                i
                                                0)))))
                         (to_rep
                           (rec__red_black_trees__black_count__depth
                             (us_split_fields11
                               (select result (peek
                                                (rec__red_black_trees__rbt__struct
                                                  (us_split_fields7 param__t))
                                                i
                                                1)))))))))
                     (= (to_rep
                          (rec__red_black_trees__black_count__count
                            (us_split_fields11 (select result i)))) (+ 
                     (ite (= (to_rep3
                               (let ((temp___559 (rec__red_black_trees__rbt__color
                                                   (us_split_fields7
                                                     param__t))))
                                 (select temp___559 i))) 0)
                       1
                       0) (to_rep
                            (rec__red_black_trees__black_count__count
                              (us_split_fields11
                                (select result (peek
                                                 (rec__red_black_trees__rbt__struct
                                                   (us_split_fields7
                                                     param__t))
                                                 i
                                                 0)))))))))))))) :pattern (
    (nb_blacks
      param__t)) )))

;; "same_nb_blacks__post_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=>
         (dynamic_invariant param__t true false true true)
         (in_range (ite (same_nb_blacks param__t) 1 0))) :pattern ((same_nb_blacks
                                                                    param__t)) )))

;; "same_nb_blacks__def_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=
         (= (same_nb_blacks param__t) true)
         (or
           (= (size
                (rec__red_black_trees__rbt__struct
                  (us_split_fields7 param__t))) 0)
           (forall ((i Int))
             (=>
               (and (<= 1 i) (<= i 100))
               (=>
                 (= (rec__tree_model__path_type__k
                      (us_split_fields9
                        (let ((temp___566 (model1
                                            (rec__red_black_trees__rbt__struct
                                              (us_split_fields7 param__t)))))
                          (select temp___566 i)))) true)
                 (= (rec__red_black_trees__black_count__status
                      (us_split_fields11
                        (let ((temp___565 (nb_blacks param__t)))
                          (select temp___565 i)))) true)))))) :pattern (
    (same_nb_blacks
      param__t)) )))

;; "parent__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__t true false true true)
             (in_range5 param__i))
           (let ((result (parent param__t param__i)))
             (and (=> (= (size param__t) 0) (= result 0)) (in_range2 result)))) :pattern (
      (parent
        param__t
        param__i)) ))))

;; "parent__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (= (parent param__t param__i) (parent1
                                         (rec__search_trees__search_tree__struct
                                           (us_split_fields5 param__t))
                                         param__i)) :pattern ((parent
                                                                param__t
                                                                param__i)) ))))

;; "invariant____post_axiom"
(assert true)

;; "invariant____def_axiom"
(assert
  (forall ((param__t us_rep3))
    (! (=
         (= (invariant__ param__t) true)
         (and
           (forall ((i Int))
             (=>
               (and (<= 1 i) (<= i 100))
               (=>
                 (or
                   (= (parent
                        (rec__red_black_trees__rbt__struct
                          (us_split_fields7 param__t))
                        i) 0)
                   (= (to_rep3
                        (let ((temp___572 (rec__red_black_trees__rbt__color
                                            (us_split_fields7 param__t))))
                          (select temp___572 (parent
                                               (rec__red_black_trees__rbt__struct
                                                 (us_split_fields7 param__t))
                                               i)))) 1))
                 (= (to_rep3
                      (let ((temp___571 (rec__red_black_trees__rbt__color
                                          (us_split_fields7 param__t))))
                        (select temp___571 i))) 0))))
           (= (same_nb_blacks param__t) true))) :pattern ((invariant__
                                                            param__t)) )))

;; "lemma_contains_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep4))
    (forall ((param__item Int))
      (=>
        (and
          (in_range1 param__item)
          (and
            (= (distinct 1 0) true)
            (not (= (contains param__container param__item) true))))
        (forall ((e Int))
          (=>
            (and (in_range1 e) (= (contains param__container e) true))
            (not (= param__item e))))))))

;; "tree_structure__post_axiom"
(assert true)

;; "ordered_leafs__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (forall ((param__values (Array Int natural)))
        (! (=>
             (and
               (and
                 (dynamic_invariant3 param__f true false true true)
                 (in_range5 param__root))
               (= (valid_root param__f param__root) true))
             (in_range
               (ite (ordered_leafs param__f param__root param__values) 1 0))) :pattern (
        (ordered_leafs
          param__f
          param__root
          param__values)) )))))

;; "root__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (=>
         (and
           (dynamic_invariant2 param__t true false true true)
           (not (= (size param__t) 0)))
         (in_range5 (root param__t))) :pattern ((root param__t)) )))

;; "root__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (! (= (root param__t) (to_rep
                            (rec__search_trees__search_tree__root
                              (us_split_fields5 param__t)))) :pattern (
    (root
      param__t)) )))

;; "position__post_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__t true false true true)
               (in_range5 param__i))
             (not (= (parent param__t param__i) 0)))
           (in_range6 (position1 param__t param__i))) :pattern ((position1
                                                                  param__t
                                                                  param__i)) ))))

;; "position__def_axiom"
(assert
  (forall ((param__t us_rep2))
    (forall ((param__i Int))
      (! (= (position1 param__t param__i) (position
                                            (rec__search_trees__search_tree__struct
                                              (us_split_fields5 param__t))
                                            param__i)) :pattern ((position1
                                                                   param__t
                                                                   param__i)) ))))

(declare-const t__split_fields us_split_fields6)

(declare-const x Int)

(declare-const y Int)

;; "y'unused"
(define-fun yqtunused () int__ref
  (int__refqtmk y))

;; "x'unused"
(define-fun xqtunused () int__ref
  (int__refqtmk x))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused1 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields))

;; "Assume"
(assert
  (dynamic_invariant (us_repqtmk3 t__split_fields) true false true true))

;; "Assume"
(assert (in_range1 v))

;; "Assume"
(assert (type_invariant (us_repqtmk3 t__split_fields)))

;; "Assume"
(assert (< (size2 (us_repqtmk3 t__split_fields)) 100))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields6
  t__split_fields)

;; "temp___old_881"
(define-fun temp___old_881 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep3
  temp___old_881)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields6
  t__split_fields)

;; "temp___old_874"
(define-fun temp___old_874 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep3
  temp___old_874)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields6
  t__split_fields)

;; "temp___old_894"
(define-fun temp___old_894 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep3
  temp___old_894)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 x))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 y))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused3 () us_split_fields6
  t__split_fields)

;; "red_black_trees__insert__t_old__assume'unused"
(define-fun red_black_trees__insert__t_old__assumeqtunused () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields6
  t__split_fields)

(declare-const t_old__split_fields us_split_fields6)

;; "t_old__split_fields'unused"
(define-fun t_old__split_fieldsqtunused () us_split_fields__ref1
  (us_split_fields__refqtmk1 t_old__split_fields))

;; "H"
(assert (= t_old__split_fields t__split_fields))

;; "Assume"
(assert
  (dynamic_invariant (us_repqtmk3 t_old__split_fields) true false true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused4 () us_split_fields6
  t__split_fields)

;; "temp___compl_688"
(define-fun temp___compl_688 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep3
  temp___compl_688)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused5 () us_split_fields6
  t__split_fields)

;; "temp___689"
(define-fun temp___689 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep3
  temp___689)

;; "Assert"
(assert (type_invariant temp___689))

;; "temp___693"
(define-fun temp___693 () us_rep4
  (values1 temp___compl_688))

;; "H"
(assert true)

;; "H"
(assert
  (= temp___693 (values (rec__red_black_trees__rbt__struct t__split_fields))))

;; "H"
(assert (=> (= (size2 temp___compl_688) 0) (= (is_empty temp___693) true)))

;; "values'result'unused"
(define-fun valuesqtresultqtunused () us_rep4
  temp___693)

(declare-const v_old us_rep4)

;; "v_old'unused"
(define-fun v_oldqtunused () value_set__ref
  (value_set__refqtmk v_old))

;; "H"
(assert (= v_old temp___693))

;; "Assume"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused6 () us_split_fields6
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused6 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields6
  t__split_fields)

;; "temp___compl_694"
(define-fun temp___compl_694 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused () us_rep2
  temp___compl_694)

;; "o"
(define-fun o () us_split_fields4
  (us_split_fields5 temp___compl_694))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields4
  o)

;; "param__t__split_fields"
(define-fun param__t__split_fields () us_split_fields__ref
  (us_split_fields__refqtmk o))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused () us_split_fields__ref
  param__t__split_fields)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  x)

;; "o"
(define-fun o1 () Int
  v)

;; "param__t__split_fields'unused"
(define-fun param__t__split_fieldsqtunused () us_split_fields__ref
  param__t__split_fields)

(declare-const x1 Int)

(declare-const param__t__split_fields1 us_split_fields4)

;; "param__t__split_fields'unused"
(define-fun param__t__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk param__t__split_fields1))

;; "x'unused"
(define-fun xqtunused1 () int__ref
  (int__refqtmk x1))

;; "H"
(assert
  (ite (= (contains (values (us_repqtmk2 o)) o1) true)
    (and
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (= x1 0)
                    (= (root (us_repqtmk2 param__t__split_fields1)) (root
                                                                    (us_repqtmk2
                                                                    o))))
                  (= (size (us_repqtmk2 param__t__split_fields1)) (size
                                                                    (us_repqtmk2
                                                                    o))))
                (= (oeq
                     (values (us_repqtmk2 param__t__split_fields1))
                     (values (us_repqtmk2 o))) true))
              (forall ((j Int))
                (=>
                  (and (<= 1 j) (<= j 100))
                  (= (parent (us_repqtmk2 param__t__split_fields1) j) 
                  (parent
                    (us_repqtmk2 o)
                    j)))))
            (forall ((j Int))
              (=>
                (and (<= 1 j) (<= j 100))
                (=>
                  (not
                    (= (parent (us_repqtmk2 param__t__split_fields1) j) 0))
                  (= (position1 (us_repqtmk2 param__t__split_fields1) j) 
                  (position1
                    (us_repqtmk2 o)
                    j))))))
          (forall ((j Int))
            (=>
              (and (<= 1 j) (<= j 100))
              (=>
                (= (rec__tree_model__path_type__k
                     (us_split_fields9
                       (select (model1 (us_repqtmk2 param__t__split_fields1)) j))) true)
                (= (rec__tree_model__path_type__k
                     (us_split_fields9 (select (model1 (us_repqtmk2 o)) j))) true)))))
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (= (rec__tree_model__path_type__k
                   (us_split_fields9 (select (model1 (us_repqtmk2 o)) j))) true)
              (= (rec__tree_model__path_type__k
                   (us_split_fields9
                     (select (model1 (us_repqtmk2 param__t__split_fields1)) j))) true)))))
      (forall ((j Int))
        (=>
          (and (<= 1 j) (<= j 100))
          (forall ((d Int))
            (=>
              (and (<= 0 d) (<= d 1))
              (=>
                (= (rec__tree_model__path_type__k
                     (us_split_fields9
                       (select (model1 (us_repqtmk2 param__t__split_fields1)) j))) true)
                (= (peek (us_repqtmk2 o) j d) (peek
                                                (us_repqtmk2
                                                  param__t__split_fields1)
                                                j
                                                d))))))))
    (ite (= (= (size (us_repqtmk2 o)) 0) true)
      (and
        (and
          (and
            (and
              (and
                (not (= x1 0))
                (= (size (us_repqtmk2 param__t__split_fields1)) 1))
              (= (root (us_repqtmk2 param__t__split_fields1)) x1))
            (= (is_add
                 (values (us_repqtmk2 o))
                 o1
                 (values (us_repqtmk2 param__t__split_fields1))) true))
          (forall ((i Int))
            (=>
              (and (<= 1 i) (<= i 100))
              (=>
                (not (= i (root (us_repqtmk2 param__t__split_fields1))))
                (not
                  (= (rec__tree_model__path_type__k
                       (us_split_fields9
                         (select (model1
                                   (us_repqtmk2 param__t__split_fields1)) i))) true))))))
        (forall ((i Int))
          (=>
            (and (<= 1 i) (<= i 100))
            (= (parent (us_repqtmk2 param__t__split_fields1) i) (parent
                                                                  (us_repqtmk2
                                                                    o)
                                                                  i)))))
      (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (and
                      (and
                        (and
                          (and
                            (not (= x1 0))
                            (= (rec__tree_model__path_type__k
                                 (us_split_fields9
                                   (select (model1
                                             (us_repqtmk2
                                               param__t__split_fields1)) 
                                   x1))) true))
                          (= (root (us_repqtmk2 param__t__split_fields1)) 
                          (root
                            (us_repqtmk2 o))))
                        (= (size (us_repqtmk2 param__t__split_fields1)) (+ 
                        (size
                          (us_repqtmk2 o)) 1)))
                      (= (is_add
                           (values (us_repqtmk2 o))
                           o1
                           (values (us_repqtmk2 param__t__split_fields1))) true))
                    (forall ((j Int))
                      (=>
                        (and (<= 1 j) (<= j 100))
                        (=>
                          (not (= x1 j))
                          (= (parent (us_repqtmk2 param__t__split_fields1) j) 
                          (parent
                            (us_repqtmk2 o)
                            j))))))
                  (forall ((j Int))
                    (=>
                      (and (<= 1 j) (<= j 100))
                      (=>
                        (and
                          (not (= x1 j))
                          (not
                            (= (parent
                                 (us_repqtmk2 param__t__split_fields1)
                                 j) 0)))
                        (= (position1
                             (us_repqtmk2 param__t__split_fields1)
                             j) (position1 (us_repqtmk2 o) j))))))
                (forall ((j Int))
                  (=>
                    (and (<= 1 j) (<= j 100))
                    (=>
                      (and
                        (not (= x1 j))
                        (= (rec__tree_model__path_type__k
                             (us_split_fields9
                               (select (model1
                                         (us_repqtmk2
                                           param__t__split_fields1)) j))) true))
                      (= (rec__tree_model__path_type__k
                           (us_split_fields9
                             (select (model1 (us_repqtmk2 o)) j))) true)))))
              (forall ((j Int))
                (=>
                  (and (<= 1 j) (<= j 100))
                  (=>
                    (= (rec__tree_model__path_type__k
                         (us_split_fields9
                           (select (model1 (us_repqtmk2 o)) j))) true)
                    (and
                      (= (rec__tree_model__path_type__k
                           (us_split_fields9
                             (select (model1
                                       (us_repqtmk2 param__t__split_fields1)) j))) true)
                      (not (= x1 j)))))))
            (forall ((d Int))
              (=>
                (and (<= 0 d) (<= d 1))
                (= (peek (us_repqtmk2 param__t__split_fields1) x1 d) 0))))
          (= (peek
               (us_repqtmk2 o)
               (parent (us_repqtmk2 param__t__split_fields1) x1)
               (position1 (us_repqtmk2 param__t__split_fields1) x1)) 0))
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (forall ((d Int))
              (=>
                (and (<= 0 d) (<= d 1))
                (=>
                  (and
                    (and
                      (= (rec__tree_model__path_type__k
                           (us_split_fields9
                             (select (model1
                                       (us_repqtmk2 param__t__split_fields1)) j))) true)
                      (not (= x1 j)))
                    (or
                      (not
                        (= j (parent
                               (us_repqtmk2 param__t__split_fields1)
                               x1)))
                      (not
                        (= d (position1
                               (us_repqtmk2 param__t__split_fields1)
                               x1)))))
                  (= (peek (us_repqtmk2 o) j d) (peek
                                                  (us_repqtmk2
                                                    param__t__split_fields1)
                                                  j
                                                  d)))))))))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk2 param__t__split_fields1)
    true
    true
    true
    true))

;; "H"
(assert (in_range2 x1))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused7 () us_split_fields6
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused7 () us_rep3
  (us_repqtmk3 t__split_fields))

;; "_q 'unused"
(define-fun usq_qtunused () us_split_fields6
  t__split_fields)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields6
  t__split_fields)

;; "o"
(define-fun o2 () (Array Int color_type)
  (rec__red_black_trees__rbt__color t__split_fields))

;; "rec__red_black_trees__rbt__color'result'unused"
(define-fun rec__red_black_trees__rbt__colorqtresultqtunused () (Array Int color_type)
  o2)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused8 () us_split_fields4
  param__t__split_fields1)

;; "o"
(define-fun o3 () us_rep2
  (us_repqtmk2 param__t__split_fields1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused8 () us_rep2
  o3)

;; "o"
(define-fun o4 () us_split_fields6
  (us_split_fieldsqtmk3 o3 o2))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields6
  o4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused9 () us_rep3
  (us_repqtmk3 o4))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields6
  o4)

(declare-const t__split_fields1 us_split_fields6)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused2 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields1))

;; "H"
(assert (= t__split_fields1 o4))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  x1)

;; "o"
(define-fun o5 () Bool
  (ite (= x1 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o5)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o5))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused9 () us_split_fields6
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused10 () us_rep3
  (us_repqtmk3 t__split_fields1))

;; "_q 'unused"
(define-fun usq_qtunused1 () us_split_fields6
  t__split_fields1)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields6
  t__split_fields1)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused10 () us_split_fields6
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused11 () us_rep3
  (us_repqtmk3 t__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields6
  t__split_fields1)

;; "temp___700"
(define-fun temp___700 () (Array Int color_type)
  (rec__red_black_trees__rbt__color t__split_fields1))

;; "rec__red_black_trees__rbt__color'result'unused"
(define-fun rec__red_black_trees__rbt__colorqtresultqtunused1 () (Array Int color_type)
  temp___700)

(declare-const o6 color_type)

;; "Ensures"
(assert (= (to_rep3 o6) 1))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () color_type
  o6)

;; "Assert"
(assert (and (<= 1 x1) (<= x1 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  x1)

;; "o"
(define-fun o7 () (Array Int color_type)
  (store temp___700 x1 o6))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int color_type)
  o7)

;; "o"
(define-fun o8 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields1))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused1 () us_rep2
  o8)

;; "o"
(define-fun o9 () us_split_fields6
  (us_split_fieldsqtmk3 o8 o7))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields6
  o9)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused12 () us_rep3
  (us_repqtmk3 o9))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields6
  o9)

(declare-const t__split_fields2 us_split_fields6)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused3 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields2))

;; "H"
(assert (= t__split_fields2 o9))

;; "Assert"
(assert
  (= (rec__red_black_trees__black_count__status
       (us_split_fields11
         (select (nb_blacks (us_repqtmk3 t__split_fields2)) x1))) true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused11 () us_split_fields6
  t__split_fields2)

;; "o"
(define-fun o10 () us_rep3
  (us_repqtmk3 t__split_fields2))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused13 () us_rep3
  o10)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused12 () us_split_fields6
  t_old__split_fields)

;; "o"
(define-fun o11 () us_rep3
  (us_repqtmk3 t_old__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused14 () us_rep3
  o11)

;; "H"
(assert (= (same_nb_blacks o10) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "Assert"
(assert
  (= (is_add
       v_old
       v
       (values (rec__red_black_trees__rbt__struct t__split_fields2))) true))

;; "Assert"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (and
          (not (= i x1))
          (or
            (= (parent
                 (rec__red_black_trees__rbt__struct t__split_fields2)
                 i) 0)
            (= (to_rep3
                 (select (rec__red_black_trees__rbt__color t__split_fields2) 
                 (parent
                   (rec__red_black_trees__rbt__struct t__split_fields2)
                   i))) 1)))
        (= (to_rep3
             (select (rec__red_black_trees__rbt__color t__split_fields2) i)) 0)))))

(declare-const o12 Bool)

(declare-const us_split_fields__contentqtresultqtunused13 us_split_fields6)

;; "H"
(assert (= us_split_fields__contentqtresultqtunused13 t__split_fields2))

(declare-const us_repqtmkqtresultqtunused15 us_rep3)

;; "H"
(assert (= us_repqtmkqtresultqtunused15 (us_repqtmk3 t__split_fields2)))

(declare-const us_split_fieldsqtresultqtunused8 us_split_fields6)

;; "H"
(assert (= us_split_fieldsqtresultqtunused8 t__split_fields2))

(declare-const o13 us_rep2)

;; "H"
(assert (= o13 (rec__red_black_trees__rbt__struct t__split_fields2)))

(declare-const rec__red_black_trees__rbt__structqtresultqtunused2 us_rep2)

;; "H"
(assert (= rec__red_black_trees__rbt__structqtresultqtunused2 o13))

(declare-const o14 Int)

;; "H"
(assert (= o14 (root o13)))

;; "H"
(assert (in_range5 o14))

;; "H"
(assert
  (= o14 (to_rep
           (rec__search_trees__search_tree__root (us_split_fields5 o13)))))

(declare-const rootqtresultqtunused Int)

;; "H"
(assert (= rootqtresultqtunused o14))

(declare-const int__contentqtresultqtunused3 Int)

;; "H"
(assert (= int__contentqtresultqtunused3 x1))

(declare-const infix_eqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused1 (ite (= x1 o14) true false)))

(declare-const int__contentqtresultqtunused4 Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const us_split_fields__contentqtresultqtunused14 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused16 us_rep3)

(declare-const us_split_fieldsqtresultqtunused9 us_split_fields6)

(declare-const o15 us_rep2)

(declare-const rec__red_black_trees__rbt__structqtresultqtunused3 us_rep2)

(declare-const o16 Int)

(declare-const parentqtresultqtunused Int)

(declare-const us_split_fields__contentqtresultqtunused15 us_split_fields6)

(declare-const o17 us_rep3)

(declare-const us_repqtmkqtresultqtunused17 us_rep3)

(declare-const o18 Int)

(declare-const colorqtresultqtunused Int)

(declare-const infix_eqqtresultqtunused2 Bool)

;; "H"
(assert
  (ite (not (= x1 o14))
    (and
      (= int__contentqtresultqtunused4 x1)
      (and
        (in_range5 x1)
        (and
          (= range_check_qtresultqtunused x1)
          (and
            (= us_split_fields__contentqtresultqtunused14 t__split_fields2)
            (and
              (= us_repqtmkqtresultqtunused16 (us_repqtmk3 t__split_fields2))
              (and
                (= us_split_fieldsqtresultqtunused9 t__split_fields2)
                (and
                  (= o15 (rec__red_black_trees__rbt__struct t__split_fields2))
                  (and
                    (= rec__red_black_trees__rbt__structqtresultqtunused3 
                    o15)
                    (and
                      (= o16 (parent o15 x1))
                      (and
                        (and
                          (in_range2 o16)
                          (and
                            (= o16 (parent1
                                     (rec__search_trees__search_tree__struct
                                       (us_split_fields5 o15))
                                     x1))
                            (=> (= (size o15) 0) (= o16 0))))
                        (and
                          (= parentqtresultqtunused o16)
                          (and
                            (= us_split_fields__contentqtresultqtunused15 
                            t__split_fields2)
                            (and
                              (= o17 (us_repqtmk3 t__split_fields2))
                              (and
                                (= us_repqtmkqtresultqtunused17 o17)
                                (and
                                  (= o18 (color o17 o16))
                                  (and
                                    (and
                                      (in_range4 o18)
                                      (= o18 (ite (= o16 0)
                                               0
                                               (to_rep3
                                                 (select (rec__red_black_trees__rbt__color
                                                           t__split_fields2) 
                                                 o16)))))
                                    (and
                                      (= colorqtresultqtunused o18)
                                      (and
                                        (= o12 (ite (= o18 1) true false))
                                        (= infix_eqqtresultqtunused2 
                                        o12)))))))))))))))))))
    (= o12 false)))

;; "H"
(assert (= o12 true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused16 () us_split_fields6
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused18 () us_rep3
  (us_repqtmk3 t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused10 () us_split_fields6
  t__split_fields2)

;; "o"
(define-fun o19 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields2))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused4 () us_rep2
  o19)

;; "temp___loop_entry_846"
(define-fun temp___loop_entry_846 () Int
  (root o19))

;; "H"
(assert (in_range5 temp___loop_entry_846))

;; "H"
(assert
  (= temp___loop_entry_846 (to_rep
                             (rec__search_trees__search_tree__root
                               (us_split_fields5 o19)))))

;; "root'result'unused"
(define-fun rootqtresultqtunused1 () Int
  temp___loop_entry_846)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused17 () us_split_fields6
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused19 () us_rep3
  (us_repqtmk3 t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused11 () us_split_fields6
  t__split_fields2)

;; "o"
(define-fun o20 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields2))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused5 () us_rep2
  o20)

;; "temp___loop_entry_831"
(define-fun temp___loop_entry_831 () us_rep4
  (values o20))

;; "H"
(assert true)

;; "H"
(assert (=> (= (size o20) 0) (= (is_empty temp___loop_entry_831) true)))

;; "values'result'unused"
(define-fun valuesqtresultqtunused1 () us_rep4
  temp___loop_entry_831)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused18 () us_split_fields6
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused20 () us_rep3
  (us_repqtmk3 t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused12 () us_split_fields6
  t__split_fields2)

;; "o"
(define-fun o21 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields2))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused6 () us_rep2
  o21)

;; "temp___loop_entry_848"
(define-fun temp___loop_entry_848 () Int
  (size o21))

;; "H"
(assert (in_range2 temp___loop_entry_848))

;; "H"
(assert
  (= temp___loop_entry_848 (size1
                             (rec__search_trees__search_tree__struct
                               (us_split_fields5 o21)))))

;; "size'result'unused"
(define-fun sizeqtresultqtunused () Int
  temp___loop_entry_848)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused19 () us_split_fields6
  t__split_fields2)

;; "temp___loop_entry_827'unused"
(define-fun temp___loop_entry_827qtunused () us_rep3
  (us_repqtmk3 t__split_fields2))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused21 () us_rep3
  (us_repqtmk3 t__split_fields2))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused20 () us_split_fields6
  t_old__split_fields)

;; "temp___loop_entry_826'unused"
(define-fun temp___loop_entry_826qtunused () us_rep3
  (us_repqtmk3 t_old__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused22 () us_rep3
  (us_repqtmk3 t_old__split_fields))

;; "temp___loop_entry_825'unused"
(define-fun temp___loop_entry_825qtunused () Int
  y)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  y)

;; "temp___loop_entry_824'unused"
(define-fun temp___loop_entry_824qtunused () Int
  x1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  x1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused7 () Int
  x1)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused3 () Bool
  (ite (= x1 0) true false))

(declare-const t__split_fields3 us_split_fields6)

(declare-const x2 Int)

(declare-const y1 Int)

(declare-const t_old__split_fields1 us_split_fields6)

;; "x'unused"
(define-fun xqtunused2 () int__ref
  (int__refqtmk x2))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused4 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields3))

;; "LoopInvariant"
(assert (not (= x2 0)))

;; "LoopInvariant"
(assert
  (= (size (rec__red_black_trees__rbt__struct t__split_fields3)) temp___loop_entry_848))

;; "LoopInvariant"
(assert
  (= (root (rec__red_black_trees__rbt__struct t__split_fields3)) temp___loop_entry_846))

;; "LoopInvariant"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields9
         (select (model1
                   (rec__red_black_trees__rbt__struct t__split_fields3)) 
         x2))) true))

;; "LoopInvariant"
(assert (= (color (us_repqtmk3 t__split_fields3) x2) 1))

;; "LoopInvariant"
(assert
  (= (color
       (us_repqtmk3 t__split_fields3)
       (root (rec__red_black_trees__rbt__struct t__split_fields3))) 0))

;; "LoopInvariant"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (and
          (not (= i x2))
          (or
            (= (parent
                 (rec__red_black_trees__rbt__struct t__split_fields3)
                 i) 0)
            (= (to_rep3
                 (select (rec__red_black_trees__rbt__color t__split_fields3) 
                 (parent
                   (rec__red_black_trees__rbt__struct t__split_fields3)
                   i))) 1)))
        (= (to_rep3
             (select (rec__red_black_trees__rbt__color t__split_fields3) i)) 0)))))

;; "LoopInvariant"
(assert
  (= (oeq
       (values (rec__red_black_trees__rbt__struct t__split_fields3))
       temp___loop_entry_831) true))

;; "LoopInvariant"
(assert (= (same_nb_blacks (us_repqtmk3 t__split_fields3)) true))

;; "Assume"
(assert
  (= (and (ite (and
                 (and
                   (and (in_range2 x2) (in_range2 y1))
                   (dynamic_invariant
                     (us_repqtmk3 t_old__split_fields1)
                     true
                     true
                     true
                     true))
                 (dynamic_invariant
                   (us_repqtmk3 t__split_fields3)
                   true
                   true
                   true
                   true))
            true
            false) (ite (and
                          (not
                            (= x2 (root
                                    (rec__red_black_trees__rbt__struct
                                      t__split_fields3))))
                          (= (color
                               (us_repqtmk3 t__split_fields3)
                               (parent
                                 (rec__red_black_trees__rbt__struct
                                   t__split_fields3)
                                 x2)) 1))
                     true
                     false)) true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused21 () us_split_fields6
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused23 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused13 () us_split_fields6
  t__split_fields3)

(declare-const t_old__split_fields2 us_split_fields6)

;; "t_old__split_fields'unused"
(define-fun t_old__split_fieldsqtunused1 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t_old__split_fields2))

;; "H"
(assert (= t_old__split_fields2 t__split_fields3))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  x2)

;; "Ensures"
(assert (in_range5 x2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  x2)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused22 () us_split_fields6
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused24 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused14 () us_split_fields6
  t__split_fields3)

;; "o"
(define-fun o22 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused7 () us_rep2
  o22)

;; "o"
(define-fun o23 () Int
  (parent o22 x2))

;; "H"
(assert (in_range2 o23))

;; "H"
(assert
  (= o23 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o22))
           x2)))

;; "H"
(assert (=> (= (size o22) 0) (= o23 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused1 () Int
  o23)

;; "Ensures"
(assert (in_range5 o23))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  o23)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused23 () us_split_fields6
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused25 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused15 () us_split_fields6
  t__split_fields3)

;; "o"
(define-fun o24 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused8 () us_rep2
  o24)

;; "o"
(define-fun o25 () Int
  (position1 o24 o23))

;; "H"
(assert (in_range6 o25))

;; "H"
(assert
  (= o25 (position
           (rec__search_trees__search_tree__struct (us_split_fields5 o24))
           o23)))

;; "position'result'unused"
(define-fun positionqtresultqtunused () Int
  o25)

;; "o"
(define-fun o26 () Bool
  (ite (= o25 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused4 () Bool
  o26)

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o26))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (= spark__branch1 true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  x2)

;; "Ensures"
(assert (in_range5 x2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused3 () Int
  x2)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused24 () us_split_fields6
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused26 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused16 () us_split_fields6
  t__split_fields3)

;; "o"
(define-fun o27 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused9 () us_rep2
  o27)

;; "o"
(define-fun o28 () Int
  (parent o27 x2))

;; "H"
(assert (in_range2 o28))

;; "H"
(assert
  (= o28 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o27))
           x2)))

;; "H"
(assert (=> (= (size o27) 0) (= o28 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused2 () Int
  o28)

;; "Ensures"
(assert (in_range5 o28))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused4 () Int
  o28)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused25 () us_split_fields6
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused27 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused17 () us_split_fields6
  t__split_fields3)

;; "o"
(define-fun o29 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused10 () us_rep2
  o29)

;; "o"
(define-fun o30 () Int
  (parent o29 o28))

;; "H"
(assert (in_range2 o30))

;; "H"
(assert
  (= o30 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o29))
           o28)))

;; "H"
(assert (=> (= (size o29) 0) (= o30 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused3 () Int
  o30)

;; "Ensures"
(assert (in_range5 o30))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused5 () Int
  o30)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused26 () us_split_fields6
  t__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused28 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused18 () us_split_fields6
  t__split_fields3)

;; "o"
(define-fun o31 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused11 () us_rep2
  o31)

;; "o"
(define-fun o32 () Int
  (peek o31 o30 1))

;; "H"
(assert (in_range2 o32))

;; "H"
(assert
  (= o32 (peek1
           (rec__search_trees__search_tree__struct (us_split_fields5 o31))
           o30
           1)))

;; "peek'result'unused"
(define-fun peekqtresultqtunused () Int
  o32)

(declare-const y2 Int)

;; "y'unused"
(define-fun yqtunused1 () int__ref
  (int__refqtmk y2))

;; "H"
(assert (= y2 o32))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  y2)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused27 () us_split_fields6
  t__split_fields3)

;; "o"
(define-fun o33 () us_rep3
  (us_repqtmk3 t__split_fields3))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused29 () us_rep3
  o33)

;; "o"
(define-fun o34 () Int
  (color o33 y2))

;; "H"
(assert (in_range4 o34))

;; "H"
(assert
  (= o34 (ite (= y2 0)
           0
           (to_rep3
             (select (rec__red_black_trees__rbt__color t__split_fields3) 
             y2)))))

;; "color'result'unused"
(define-fun colorqtresultqtunused1 () Int
  o34)

;; "o"
(define-fun o35 () Bool
  (ite (= o34 1) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused5 () Bool
  o35)

(declare-const spark__branch2 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused2 () bool__ref
  (bool__refqtmk spark__branch2))

;; "H"
(assert (= spark__branch2 o35))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused2 () Bool
  spark__branch2)

;; "H"
(assert (not (= spark__branch2 true)))

(declare-const t__split_fields4 us_split_fields6)

(declare-const x3 Int)

(declare-const t_old__split_fields3 us_split_fields6)

;; "t_old__split_fields'unused"
(define-fun t_old__split_fieldsqtunused2 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t_old__split_fields3))

;; "x'unused"
(define-fun xqtunused3 () int__ref
  (int__refqtmk x3))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused5 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields4))

(declare-const int__contentqtresultqtunused11 Int)

;; "H"
(assert (= int__contentqtresultqtunused11 x2))

;; "Ensures"
(assert (in_range5 x2))

(declare-const range_check_qtresultqtunused6 Int)

;; "H"
(assert (= range_check_qtresultqtunused6 x2))

(declare-const us_split_fields__contentqtresultqtunused28 us_split_fields6)

;; "H"
(assert (= us_split_fields__contentqtresultqtunused28 t__split_fields3))

(declare-const us_repqtmkqtresultqtunused30 us_rep3)

;; "H"
(assert (= us_repqtmkqtresultqtunused30 (us_repqtmk3 t__split_fields3)))

(declare-const us_split_fieldsqtresultqtunused19 us_split_fields6)

;; "H"
(assert (= us_split_fieldsqtresultqtunused19 t__split_fields3))

(declare-const o36 us_rep2)

;; "H"
(assert (= o36 (rec__red_black_trees__rbt__struct t__split_fields3)))

(declare-const rec__red_black_trees__rbt__structqtresultqtunused12 us_rep2)

;; "H"
(assert (= rec__red_black_trees__rbt__structqtresultqtunused12 o36))

(declare-const o37 Int)

;; "H"
(assert (= o37 (parent o36 x2)))

;; "H"
(assert (in_range2 o37))

;; "H"
(assert
  (= o37 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o36))
           x2)))

;; "H"
(assert (=> (= (size o36) 0) (= o37 0)))

(declare-const parentqtresultqtunused4 Int)

;; "H"
(assert (= parentqtresultqtunused4 o37))

;; "Ensures"
(assert (in_range5 o37))

(declare-const range_check_qtresultqtunused7 Int)

;; "H"
(assert (= range_check_qtresultqtunused7 o37))

(declare-const us_split_fields__contentqtresultqtunused29 us_split_fields6)

;; "H"
(assert (= us_split_fields__contentqtresultqtunused29 t__split_fields3))

(declare-const us_repqtmkqtresultqtunused31 us_rep3)

;; "H"
(assert (= us_repqtmkqtresultqtunused31 (us_repqtmk3 t__split_fields3)))

(declare-const us_split_fieldsqtresultqtunused20 us_split_fields6)

;; "H"
(assert (= us_split_fieldsqtresultqtunused20 t__split_fields3))

(declare-const o38 us_rep2)

;; "H"
(assert (= o38 (rec__red_black_trees__rbt__struct t__split_fields3)))

(declare-const rec__red_black_trees__rbt__structqtresultqtunused13 us_rep2)

;; "H"
(assert (= rec__red_black_trees__rbt__structqtresultqtunused13 o38))

(declare-const o39 Int)

;; "H"
(assert (= o39 (peek o38 o37 1)))

;; "H"
(assert (in_range2 o39))

;; "H"
(assert
  (= o39 (peek1
           (rec__search_trees__search_tree__struct (us_split_fields5 o38))
           o37
           1)))

(declare-const peekqtresultqtunused1 Int)

;; "H"
(assert (= peekqtresultqtunused1 o39))

(declare-const int__contentqtresultqtunused12 Int)

;; "H"
(assert (= int__contentqtresultqtunused12 x2))

(declare-const o40 Bool)

;; "H"
(assert (= o40 (ite (= x2 o39) true false)))

(declare-const infix_eqqtresultqtunused6 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused6 o40))

(declare-const spark__branch3 Bool)

(declare-const spark__branchqtunused3 bool__ref)

;; "H"
(assert (= spark__branchqtunused3 (bool__refqtmk spark__branch3)))

;; "H"
(assert (= spark__branch3 o40))

(declare-const bool__contentqtresultqtunused3 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused3 spark__branch3))

(declare-const int__contentqtresultqtunused13 Int)

(declare-const range_check_qtresultqtunused8 Int)

(declare-const us_split_fields__contentqtresultqtunused30 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused32 us_rep3)

(declare-const us_split_fieldsqtresultqtunused21 us_split_fields6)

(declare-const o41 us_rep2)

(declare-const rec__red_black_trees__rbt__structqtresultqtunused14 us_rep2)

(declare-const o42 Int)

(declare-const parentqtresultqtunused5 Int)

(declare-const us_split_fields__contentqtresultqtunused31 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused33 us_rep3)

(declare-const us_split_fieldsqtresultqtunused22 us_split_fields6)

(declare-const temp___compl_739 us_rep2)

(declare-const rec__red_black_trees__rbt__structqtresultqtunused15 us_rep2)

(declare-const o43 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused23 us_split_fields4)

(declare-const param__t__split_fields2 us_split_fields__ref)

(declare-const us_split_fields__refqtmkqtresultqtunused1 us_split_fields__ref)

(declare-const int__contentqtresultqtunused14 Int)

(declare-const range_check_qtresultqtunused9 Int)

(declare-const param__t__split_fieldsqtunused2 us_split_fields__ref)

(declare-const param__t__split_fields3 us_split_fields4)

(declare-const param__t__split_fieldsqtunused3 us_split_fields__ref)

(declare-const us_split_fields__contentqtresultqtunused32 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused34 us_rep3)

(declare-const usq_qtunused2 us_split_fields6)

(declare-const us_split_fieldsqtresultqtunused24 us_split_fields6)

(declare-const o44 (Array Int color_type))

(declare-const rec__red_black_trees__rbt__colorqtresultqtunused2 (Array Int color_type))

(declare-const us_split_fields__contentqtresultqtunused33 us_split_fields4)

(declare-const o45 us_rep2)

(declare-const us_repqtmkqtresultqtunused35 us_rep2)

(declare-const o46 us_split_fields6)

(declare-const us_split_fieldsqtmkqtresultqtunused2 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused36 us_rep3)

(declare-const us_split_fieldsqtresultqtunused25 us_split_fields6)

(declare-const int__contentqtresultqtunused15 Int)

(declare-const range_check_qtresultqtunused10 Int)

(declare-const us_split_fields__contentqtresultqtunused34 us_split_fields6)

(declare-const o47 us_rep3)

(declare-const us_repqtmkqtresultqtunused37 us_rep3)

(declare-const us_split_fields__contentqtresultqtunused35 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused38 us_rep3)

(declare-const us_split_fields__contentqtresultqtunused36 us_split_fields6)

(declare-const us_repqtmkqtresultqtunused39 us_rep3)

(declare-const us_split_fieldsqtresultqtunused26 us_split_fields6)

;; "H"
(assert
  (ite (= spark__branch3 true)
    (and
      (= int__contentqtresultqtunused13 x2)
      (and
        (in_range5 x2)
        (and
          (= range_check_qtresultqtunused8 x2)
          (and
            (= us_split_fields__contentqtresultqtunused30 t__split_fields3)
            (and
              (= us_repqtmkqtresultqtunused32 (us_repqtmk3 t__split_fields3))
              (and
                (= us_split_fieldsqtresultqtunused21 t__split_fields3)
                (and
                  (= o41 (rec__red_black_trees__rbt__struct t__split_fields3))
                  (and
                    (= rec__red_black_trees__rbt__structqtresultqtunused14 
                    o41)
                    (and
                      (= o42 (parent o41 x2))
                      (and
                        (and
                          (in_range2 o42)
                          (and
                            (= o42 (parent1
                                     (rec__search_trees__search_tree__struct
                                       (us_split_fields5 o41))
                                     x2))
                            (=> (= (size o41) 0) (= o42 0))))
                        (and
                          (= parentqtresultqtunused5 o42)
                          (and
                            (= x3 o42)
                            (and
                              (= us_split_fields__contentqtresultqtunused31 
                              t__split_fields3)
                              (and
                                (= us_repqtmkqtresultqtunused33 (us_repqtmk3
                                                                  t__split_fields3))
                                (and
                                  (= us_split_fieldsqtresultqtunused22 
                                  t__split_fields3)
                                  (and
                                    (= temp___compl_739 (rec__red_black_trees__rbt__struct
                                                          t__split_fields3))
                                    (and
                                      (= rec__red_black_trees__rbt__structqtresultqtunused15 
                                      temp___compl_739)
                                      (and
                                        (= o43 (us_split_fields5
                                                 temp___compl_739))
                                        (and
                                          (= us_split_fieldsqtresultqtunused23 
                                          o43)
                                          (and
                                            (= param__t__split_fields2 
                                            (us_split_fields__refqtmk
                                              o43))
                                            (and
                                              (= us_split_fields__refqtmkqtresultqtunused1 
                                              param__t__split_fields2)
                                              (and
                                                (= int__contentqtresultqtunused14 
                                                x3)
                                                (and
                                                  (in_range5 x3)
                                                  (and
                                                    (= range_check_qtresultqtunused9 
                                                    x3)
                                                    (and
                                                      (= param__t__split_fieldsqtunused2 
                                                      param__t__split_fields2)
                                                      (and
                                                        (= param__t__split_fieldsqtunused3 
                                                        (us_split_fields__refqtmk
                                                          param__t__split_fields3))
                                                        (and
                                                          (and
                                                            (and
                                                              (and
                                                                (and
                                                                  (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (size
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)) 
                                                                    (size
                                                                    (us_repqtmk2
                                                                    o43)))
                                                                    (ite 
                                                                    (not
                                                                    (= 
                                                                    (root
                                                                    (us_repqtmk2
                                                                    o43)) 
                                                                    x3))
                                                                    (= 
                                                                    (root
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)) 
                                                                    (root
                                                                    (us_repqtmk2
                                                                    o43)))
                                                                    (= 
                                                                    (root
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)) 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1))))
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    x3) 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    x3) 0))
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)) 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3)))
                                                                    (=>
                                                                    (not
                                                                    (= 
                                                                    (root
                                                                    (us_repqtmk2
                                                                    o43)) 
                                                                    x3))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)) 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3))))
                                                                    (=>
                                                                    (not
                                                                    (= 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)
                                                                    0) 0))
                                                                    (and
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)
                                                                    0)) 
                                                                    x3)
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)
                                                                    0)) 1))))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 100))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (not
                                                                    (= j 
                                                                    x3))
                                                                    (or
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 
                                                                    x3))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 0)))
                                                                    (or
                                                                    (or
                                                                    (or
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 0)
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j)) 
                                                                    x3)))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j)) 0))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 1)))
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    j) 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j))))))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 100))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (not
                                                                    (= j 
                                                                    x3))
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 0)))
                                                                    (or
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 
                                                                    x3))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 0)))
                                                                    (or
                                                                    (or
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j)) 
                                                                    x3))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j)) 0))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j) 1)))
                                                                    (= 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    j) 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j))))))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 100))
                                                                    (=>
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields9
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)) j))) true)
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields9
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk2
                                                                    o43)) j))) true)))))
                                                                    (forall 
                                                                    ((j Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 j)
                                                                    (<= j 100))
                                                                    (=>
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields9
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk2
                                                                    o43)) j))) true)
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields9
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)) j))) true)))))
                                                                    (= 
                                                                    (oeq
                                                                    (values
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3))
                                                                    (values
                                                                    (us_repqtmk2
                                                                    o43))) true))
                                                                    (= 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    x3
                                                                    1) 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)
                                                                    0)))
                                                                  (=>
                                                                    (not
                                                                    (= 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3) 0))
                                                                    (= 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3)
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3)) 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1))))
                                                                (= (peek
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)
                                                                    0) 
                                                                x3))
                                                              (forall 
                                                                ((j Int))
                                                                (=>
                                                                  (and
                                                                    (<= 1 j)
                                                                    (<= j 100))
                                                                  (forall 
                                                                    ((d Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 d)
                                                                    (<= d 1))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (or
                                                                    (not
                                                                    (= j 
                                                                    x3))
                                                                    (= d 0))
                                                                    (or
                                                                    (not
                                                                    (= j 
                                                                    (parent
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3)))
                                                                    (not
                                                                    (= d 
                                                                    (position1
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3)))))
                                                                    (or
                                                                    (not
                                                                    (= j 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    x3
                                                                    1)))
                                                                    (= d 1)))
                                                                    (= 
                                                                    (rec__tree_model__path_type__k
                                                                    (us_split_fields9
                                                                    (select 
                                                                    (model1
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)) j))) true))
                                                                    (= 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3)
                                                                    j
                                                                    d) 
                                                                    (peek
                                                                    (us_repqtmk2
                                                                    o43)
                                                                    j
                                                                    d))))))))
                                                            (dynamic_invariant2
                                                              (us_repqtmk2
                                                                param__t__split_fields3)
                                                              true
                                                              true
                                                              true
                                                              true))
                                                          (and
                                                            (= us_split_fields__contentqtresultqtunused32 
                                                            t__split_fields3)
                                                            (and
                                                              (= us_repqtmkqtresultqtunused34 
                                                              (us_repqtmk3
                                                                t__split_fields3))
                                                              (and
                                                                (= usq_qtunused2 
                                                                t__split_fields3)
                                                                (and
                                                                  (= 
                                                                  us_split_fieldsqtresultqtunused24 
                                                                  t__split_fields3)
                                                                  (and
                                                                    (= 
                                                                    o44 
                                                                    (rec__red_black_trees__rbt__color
                                                                    t__split_fields3))
                                                                    (and
                                                                    (= 
                                                                    rec__red_black_trees__rbt__colorqtresultqtunused2 
                                                                    o44)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused33 
                                                                    param__t__split_fields3)
                                                                    (and
                                                                    (= 
                                                                    o45 
                                                                    (us_repqtmk2
                                                                    param__t__split_fields3))
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused35 
                                                                    o45)
                                                                    (and
                                                                    (= 
                                                                    o46 
                                                                    (us_split_fieldsqtmk3
                                                                    o45
                                                                    o44))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtmkqtresultqtunused2 
                                                                    o46)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused36 
                                                                    (us_repqtmk3
                                                                    o46))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused25 
                                                                    o46)
                                                                    (and
                                                                    (= 
                                                                    t__split_fields4 
                                                                    o46)
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused15 
                                                                    x3)
                                                                    (and
                                                                    (in_range5
                                                                    x3)
                                                                    (and
                                                                    (= 
                                                                    range_check_qtresultqtunused10 
                                                                    x3)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused34 
                                                                    t__split_fields4)
                                                                    (and
                                                                    (= 
                                                                    o47 
                                                                    (us_repqtmk3
                                                                    t__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused37 
                                                                    o47)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused35 
                                                                    t_old__split_fields2)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused38 
                                                                    (us_repqtmk3
                                                                    t_old__split_fields2))
                                                                    (and
                                                                    (= 
                                                                    (same_nb_blacks
                                                                    o47) true)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused36 
                                                                    t__split_fields4)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused39 
                                                                    (us_repqtmk3
                                                                    t__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused26 
                                                                    t__split_fields4)
                                                                    (= 
                                                                    t_old__split_fields3 
                                                                    t__split_fields4))))))))))))))))))))))))))))))))))))))))))))))))))))))
    (and
      (and (= t__split_fields4 t__split_fields3) (= x3 x2))
      (= t_old__split_fields3 t_old__split_fields2))))

;; "Assert"
(assert
  (not
    (= (parent
         (rec__red_black_trees__rbt__struct t__split_fields4)
         (parent (rec__red_black_trees__rbt__struct t__split_fields4) x3)) 0)))

;; "Assert"
(assert
  (not
    (= (peek
         (rec__red_black_trees__rbt__struct t__split_fields4)
         (parent
           (rec__red_black_trees__rbt__struct t__split_fields4)
           (parent (rec__red_black_trees__rbt__struct t__split_fields4) x3))
         0) 0)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused37 () us_split_fields6
  t__split_fields4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused40 () us_rep3
  (us_repqtmk3 t__split_fields4))

;; "_q 'unused"
(define-fun usq_qtunused3 () us_split_fields6
  t__split_fields4)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused27 () us_split_fields6
  t__split_fields4)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused38 () us_split_fields6
  t__split_fields4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused41 () us_rep3
  (us_repqtmk3 t__split_fields4))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused28 () us_split_fields6
  t__split_fields4)

;; "temp___746"
(define-fun temp___746 () (Array Int color_type)
  (rec__red_black_trees__rbt__color t__split_fields4))

;; "rec__red_black_trees__rbt__color'result'unused"
(define-fun rec__red_black_trees__rbt__colorqtresultqtunused3 () (Array Int color_type)
  temp___746)

(declare-const o48 color_type)

;; "Ensures"
(assert (= (to_rep3 o48) 0))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused1 () color_type
  o48)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused16 () Int
  x3)

;; "Ensures"
(assert (in_range5 x3))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused11 () Int
  x3)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused39 () us_split_fields6
  t__split_fields4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused42 () us_rep3
  (us_repqtmk3 t__split_fields4))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused29 () us_split_fields6
  t__split_fields4)

;; "o"
(define-fun o49 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields4))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused16 () us_rep2
  o49)

;; "temp___748"
(define-fun temp___748 () Int
  (parent o49 x3))

;; "H"
(assert (in_range2 temp___748))

;; "H"
(assert
  (= temp___748 (parent1
                  (rec__search_trees__search_tree__struct
                    (us_split_fields5 o49))
                  x3)))

;; "H"
(assert (=> (= (size o49) 0) (= temp___748 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused6 () Int
  temp___748)

;; "Assert"
(assert (and (<= 1 temp___748) (<= temp___748 100)))

;; "o"
(define-fun o50 () (Array Int color_type)
  (store temp___746 temp___748 o48))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int color_type)
  o50)

;; "o"
(define-fun o51 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields4))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused17 () us_rep2
  o51)

;; "o"
(define-fun o52 () us_split_fields6
  (us_split_fieldsqtmk3 o51 o50))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused3 () us_split_fields6
  o52)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused43 () us_rep3
  (us_repqtmk3 o52))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused30 () us_split_fields6
  o52)

(declare-const t__split_fields5 us_split_fields6)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused6 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields5))

;; "H"
(assert (= t__split_fields5 o52))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused40 () us_split_fields6
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused44 () us_rep3
  (us_repqtmk3 t__split_fields5))

;; "_q 'unused"
(define-fun usq_qtunused4 () us_split_fields6
  t__split_fields5)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused31 () us_split_fields6
  t__split_fields5)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused41 () us_split_fields6
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused45 () us_rep3
  (us_repqtmk3 t__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused32 () us_split_fields6
  t__split_fields5)

;; "temp___753"
(define-fun temp___753 () (Array Int color_type)
  (rec__red_black_trees__rbt__color t__split_fields5))

;; "rec__red_black_trees__rbt__color'result'unused"
(define-fun rec__red_black_trees__rbt__colorqtresultqtunused4 () (Array Int color_type)
  temp___753)

(declare-const o53 color_type)

;; "Ensures"
(assert (= (to_rep3 o53) 1))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused2 () color_type
  o53)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused17 () Int
  x3)

;; "Ensures"
(assert (in_range5 x3))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused12 () Int
  x3)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused42 () us_split_fields6
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused46 () us_rep3
  (us_repqtmk3 t__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused33 () us_split_fields6
  t__split_fields5)

;; "o"
(define-fun o54 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields5))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused18 () us_rep2
  o54)

;; "o"
(define-fun o55 () Int
  (parent o54 x3))

;; "H"
(assert (in_range2 o55))

;; "H"
(assert
  (= o55 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o54))
           x3)))

;; "H"
(assert (=> (= (size o54) 0) (= o55 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused7 () Int
  o55)

;; "Ensures"
(assert (in_range5 o55))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused13 () Int
  o55)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused43 () us_split_fields6
  t__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused47 () us_rep3
  (us_repqtmk3 t__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused34 () us_split_fields6
  t__split_fields5)

;; "o"
(define-fun o56 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields5))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused19 () us_rep2
  o56)

;; "temp___755"
(define-fun temp___755 () Int
  (parent o56 o55))

;; "H"
(assert (in_range2 temp___755))

;; "H"
(assert
  (= temp___755 (parent1
                  (rec__search_trees__search_tree__struct
                    (us_split_fields5 o56))
                  o55)))

;; "H"
(assert (=> (= (size o56) 0) (= temp___755 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused8 () Int
  temp___755)

;; "Assert"
(assert (and (<= 1 temp___755) (<= temp___755 100)))

;; "o"
(define-fun o57 () (Array Int color_type)
  (store temp___753 temp___755 o53))

;; "set'result'unused"
(define-fun setqtresultqtunused2 () (Array Int color_type)
  o57)

;; "o"
(define-fun o58 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields5))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused20 () us_rep2
  o58)

;; "o"
(define-fun o59 () us_split_fields6
  (us_split_fieldsqtmk3 o58 o57))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused4 () us_split_fields6
  o59)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused48 () us_rep3
  (us_repqtmk3 o59))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused35 () us_split_fields6
  o59)

(declare-const t__split_fields6 us_split_fields6)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused7 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields6))

;; "H"
(assert (= t__split_fields6 o59))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused44 () us_split_fields6
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused49 () us_rep3
  (us_repqtmk3 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused36 () us_split_fields6
  t__split_fields6)

;; "temp___compl_759"
(define-fun temp___compl_759 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields6))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused21 () us_rep2
  temp___compl_759)

;; "o"
(define-fun o60 () us_split_fields4
  (us_split_fields5 temp___compl_759))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused37 () us_split_fields4
  o60)

;; "param__t__split_fields"
(define-fun param__t__split_fields4 () us_split_fields__ref
  (us_split_fields__refqtmk o60))

;; "__split_fields__ref'mk'result'unused"
(define-fun us_split_fields__refqtmkqtresultqtunused2 () us_split_fields__ref
  param__t__split_fields4)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused18 () Int
  x3)

;; "Ensures"
(assert (in_range5 x3))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused14 () Int
  x3)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused45 () us_split_fields6
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused50 () us_rep3
  (us_repqtmk3 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused38 () us_split_fields6
  t__split_fields6)

;; "o"
(define-fun o61 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields6))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused22 () us_rep2
  o61)

;; "o"
(define-fun o62 () Int
  (parent o61 x3))

;; "H"
(assert (in_range2 o62))

;; "H"
(assert
  (= o62 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o61))
           x3)))

;; "H"
(assert (=> (= (size o61) 0) (= o62 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused9 () Int
  o62)

;; "Ensures"
(assert (in_range5 o62))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused15 () Int
  o62)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused46 () us_split_fields6
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused51 () us_rep3
  (us_repqtmk3 t__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused39 () us_split_fields6
  t__split_fields6)

;; "o"
(define-fun o63 () us_rep2
  (rec__red_black_trees__rbt__struct t__split_fields6))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused23 () us_rep2
  o63)

;; "o"
(define-fun o64 () Int
  (parent o63 o62))

;; "H"
(assert (in_range2 o64))

;; "H"
(assert
  (= o64 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o63))
           o62)))

;; "H"
(assert (=> (= (size o63) 0) (= o64 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused10 () Int
  o64)

;; "Ensures"
(assert (in_range5 o64))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused16 () Int
  o64)

;; "param__t__split_fields'unused"
(define-fun param__t__split_fieldsqtunused4 () us_split_fields__ref
  param__t__split_fields4)

(declare-const param__t__split_fields5 us_split_fields4)

;; "param__t__split_fields'unused"
(define-fun param__t__split_fieldsqtunused5 () us_split_fields__ref
  (us_split_fields__refqtmk param__t__split_fields5))

;; "H"
(assert
  (= (size (us_repqtmk2 param__t__split_fields5)) (size (us_repqtmk2 o60))))

;; "H"
(assert
  (ite (not (= (root (us_repqtmk2 o60)) o64))
    (= (root (us_repqtmk2 param__t__split_fields5)) (root (us_repqtmk2 o60)))
    (= (root (us_repqtmk2 param__t__split_fields5)) (peek
                                                      (us_repqtmk2 o60)
                                                      o64
                                                      0))))

;; "H"
(assert
  (= (parent (us_repqtmk2 param__t__split_fields5) o64) (peek
                                                          (us_repqtmk2 o60)
                                                          o64
                                                          0)))

;; "H"
(assert (= (position1 (us_repqtmk2 param__t__split_fields5) o64) 1))

;; "H"
(assert
  (= (parent
       (us_repqtmk2 param__t__split_fields5)
       (peek (us_repqtmk2 o60) o64 0)) (parent (us_repqtmk2 o60) o64)))

;; "H"
(assert
  (=>
    (not (= (root (us_repqtmk2 o60)) o64))
    (= (position1
         (us_repqtmk2 param__t__split_fields5)
         (peek (us_repqtmk2 o60) o64 0)) (position1 (us_repqtmk2 o60) o64))))

;; "H"
(assert
  (=>
    (not (= (peek (us_repqtmk2 o60) (peek (us_repqtmk2 o60) o64 0) 1) 0))
    (and
      (= (parent
           (us_repqtmk2 param__t__split_fields5)
           (peek (us_repqtmk2 o60) (peek (us_repqtmk2 o60) o64 0) 1)) 
      o64)
      (= (position1
           (us_repqtmk2 param__t__split_fields5)
           (peek (us_repqtmk2 o60) (peek (us_repqtmk2 o60) o64 0) 1)) 0))))

;; "H"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 100))
      (=>
        (and
          (and
            (not (= j o64))
            (or
              (not (= (parent (us_repqtmk2 o60) j) o64))
              (= (position1 (us_repqtmk2 o60) j) 1)))
          (or
            (or
              (or
                (= (parent (us_repqtmk2 o60) j) 0)
                (not
                  (= (parent (us_repqtmk2 o60) (parent (us_repqtmk2 o60) j)) 
                  o64)))
              (= (position1 (us_repqtmk2 o60) (parent (us_repqtmk2 o60) j)) 1))
            (= (position1 (us_repqtmk2 o60) j) 0)))
        (= (parent (us_repqtmk2 param__t__split_fields5) j) (parent
                                                              (us_repqtmk2
                                                                o60)
                                                              j))))))

;; "H"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 100))
      (=>
        (and
          (and
            (and (not (= j o64)) (not (= (parent (us_repqtmk2 o60) j) 0)))
            (or
              (not (= (parent (us_repqtmk2 o60) j) o64))
              (= (position1 (us_repqtmk2 o60) j) 1)))
          (or
            (or
              (not
                (= (parent (us_repqtmk2 o60) (parent (us_repqtmk2 o60) j)) 
                o64))
              (= (position1 (us_repqtmk2 o60) (parent (us_repqtmk2 o60) j)) 1))
            (= (position1 (us_repqtmk2 o60) j) 0)))
        (= (position1 (us_repqtmk2 param__t__split_fields5) j) (position1
                                                                 (us_repqtmk2
                                                                   o60)
                                                                 j))))))

;; "H"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields9
               (select (model1 (us_repqtmk2 param__t__split_fields5)) j))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields9 (select (model1 (us_repqtmk2 o60)) j))) true)))))

;; "H"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields9 (select (model1 (us_repqtmk2 o60)) j))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields9
               (select (model1 (us_repqtmk2 param__t__split_fields5)) j))) true)))))

;; "H"
(assert
  (= (oeq
       (values (us_repqtmk2 param__t__split_fields5))
       (values (us_repqtmk2 o60))) true))

;; "H"
(assert
  (= (peek (us_repqtmk2 param__t__split_fields5) o64 0) (peek
                                                          (us_repqtmk2 o60)
                                                          (peek
                                                            (us_repqtmk2 o60)
                                                            o64
                                                            0)
                                                          1)))

;; "H"
(assert
  (=>
    (not (= (parent (us_repqtmk2 o60) o64) 0))
    (= (peek
         (us_repqtmk2 param__t__split_fields5)
         (parent (us_repqtmk2 o60) o64)
         (position1 (us_repqtmk2 o60) o64)) (peek (us_repqtmk2 o60) o64 0))))

;; "H"
(assert
  (= (peek
       (us_repqtmk2 param__t__split_fields5)
       (peek (us_repqtmk2 o60) o64 0)
       1) o64))

;; "H"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 100))
      (forall ((d Int))
        (=>
          (and (<= 0 d) (<= d 1))
          (=>
            (and
              (and
                (and
                  (or (not (= j o64)) (= d 1))
                  (or
                    (not (= j (parent (us_repqtmk2 o60) o64)))
                    (not (= d (position1 (us_repqtmk2 o60) o64)))))
                (or (not (= j (peek (us_repqtmk2 o60) o64 0))) (= d 0)))
              (= (rec__tree_model__path_type__k
                   (us_split_fields9
                     (select (model1 (us_repqtmk2 param__t__split_fields5)) j))) true))
            (= (peek (us_repqtmk2 param__t__split_fields5) j d) (peek
                                                                  (us_repqtmk2
                                                                    o60)
                                                                  j
                                                                  d))))))))

;; "H"
(assert
  (dynamic_invariant2
    (us_repqtmk2 param__t__split_fields5)
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused47 () us_split_fields6
  t__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused52 () us_rep3
  (us_repqtmk3 t__split_fields6))

;; "_q 'unused"
(define-fun usq_qtunused5 () us_split_fields6
  t__split_fields6)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused40 () us_split_fields6
  t__split_fields6)

;; "o"
(define-fun o65 () (Array Int color_type)
  (rec__red_black_trees__rbt__color t__split_fields6))

;; "rec__red_black_trees__rbt__color'result'unused"
(define-fun rec__red_black_trees__rbt__colorqtresultqtunused5 () (Array Int color_type)
  o65)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused48 () us_split_fields4
  param__t__split_fields5)

;; "o"
(define-fun o66 () us_rep2
  (us_repqtmk2 param__t__split_fields5))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused53 () us_rep2
  o66)

;; "o"
(define-fun o67 () us_split_fields6
  (us_split_fieldsqtmk3 o66 o65))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused5 () us_split_fields6
  o67)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused54 () us_rep3
  (us_repqtmk3 o67))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused41 () us_split_fields6
  o67)

(declare-const t__split_fields7 us_split_fields6)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused8 () us_split_fields__ref1
  (us_split_fields__refqtmk1 t__split_fields7))

;; "H"
(assert (= t__split_fields7 o67))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused19 () Int
  x3)

;; "Ensures"
(assert (in_range5 x3))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused17 () Int
  x3)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused49 () us_split_fields6
  t_old__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused55 () us_rep3
  (us_repqtmk3 t_old__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused42 () us_split_fields6
  t_old__split_fields3)

;; "o"
(define-fun o68 () us_rep2
  (rec__red_black_trees__rbt__struct t_old__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused24 () us_rep2
  o68)

;; "o"
(define-fun o69 () Int
  (parent o68 x3))

;; "H"
(assert (in_range2 o69))

;; "H"
(assert
  (= o69 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o68))
           x3)))

;; "H"
(assert (=> (= (size o68) 0) (= o69 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused11 () Int
  o69)

;; "Ensures"
(assert (in_range5 o69))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused18 () Int
  o69)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused50 () us_split_fields6
  t_old__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused56 () us_rep3
  (us_repqtmk3 t_old__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused43 () us_split_fields6
  t_old__split_fields3)

;; "o"
(define-fun o70 () us_rep2
  (rec__red_black_trees__rbt__struct t_old__split_fields3))

;; "rec__red_black_trees__rbt__struct'result'unused"
(define-fun rec__red_black_trees__rbt__structqtresultqtunused25 () us_rep2
  o70)

;; "o"
(define-fun o71 () Int
  (parent o70 o69))

;; "H"
(assert (in_range2 o71))

;; "H"
(assert
  (= o71 (parent1
           (rec__search_trees__search_tree__struct (us_split_fields5 o70))
           o69)))

;; "H"
(assert (=> (= (size o70) 0) (= o71 0)))

;; "parent'result'unused"
(define-fun parentqtresultqtunused12 () Int
  o71)

;; "Ensures"
(assert (in_range5 o71))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused19 () Int
  o71)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused51 () us_split_fields6
  t__split_fields7)

;; "o"
(define-fun o72 () us_rep3
  (us_repqtmk3 t__split_fields7))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused57 () us_rep3
  o72)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused52 () us_split_fields6
  t_old__split_fields3)

;; "o"
(define-fun o73 () us_rep3
  (us_repqtmk3 t_old__split_fields3))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused58 () us_rep3
  o73)

;; "H"
(assert (= (same_nb_blacks o72) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "Assert"
(assert
  (= (color
       (us_repqtmk3 t__split_fields7)
       (parent (rec__red_black_trees__rbt__struct t__split_fields7) x3)) 0))

;; "Assert"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (or
          (= (parent (rec__red_black_trees__rbt__struct t__split_fields7) i) 0)
          (= (to_rep3
               (select (rec__red_black_trees__rbt__color t__split_fields7) 
               (parent
                 (rec__red_black_trees__rbt__struct t__split_fields7)
                 i))) 1))
        (= (to_rep3
             (select (rec__red_black_trees__rbt__color t__split_fields7) i)) 0)))))

;; "dummy"
(define-fun dummy9 () Bool
  true)

;; Goal "def'vc"
;; File "red_black_trees.ads", line 27, characters 0-0
(assert
  (not
  (= (contains
       (values (rec__red_black_trees__rbt__struct t__split_fields7))
       v) true)))

(check-sat)
