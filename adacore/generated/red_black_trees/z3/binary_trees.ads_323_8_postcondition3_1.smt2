;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 a))) 
         (to_rep
           (rec__binary_trees__cell__left (us_split_fields1 b))))
         (and
           (and
             (= (to_rep
                  (rec__binary_trees__cell__right (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__right (us_split_fields1 b))))
             (= (to_rep
                  (rec__binary_trees__cell__parent (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__parent (us_split_fields1 b)))))
           (= (to_rep1
                (rec__binary_trees__cell__position (us_split_fields1 a))) 
           (to_rep1
             (rec__binary_trees__cell__position (us_split_fields1 b))))))
    true
    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields2)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

;; "size"
(define-fun size ((param__f us_rep1)) Int
  (to_rep (rec__binary_trees__forest__s (us_split_fields3 param__f))))

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

;; "position"
(define-fun position ((param__f us_rep1) (param__i Int)) Int
  (to_rep1
    (rec__binary_trees__cell__position
      (us_split_fields1
        (let ((temp___173 (rec__binary_trees__forest__c
                            (us_split_fields3 param__f))))
          (select temp___173 param__i))))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "peek"
(declare-fun peek (us_rep1
  Int
  Int) Int)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 us_rep2)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const dummy3 Int)

;; "last"
(declare-fun last (us_rep2) Int)

;; "length"
(define-fun length ((param__container us_rep2)) Int
  (- (+ (last param__container) 1) 1))

;; "get"
(declare-fun get (us_rep2
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "olt"
(define-fun olt ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__tree_model__path_type__a us_rep2)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy4 us_rep3)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep3))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment6))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_414 (Array Int us_rep3)) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool
  (forall ((temp___415 Int))
    (=>
      (and (<= 1 temp___415) (<= temp___415 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields5 (select temp___expr_414 temp___415)))) 100))))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_319 us_rep1) (temp___is_init_315 Bool) (temp___skip_constant_316 Bool) (temp___do_toplevel_317 Bool) (temp___do_typ_inv_318 Bool)) Bool
  true)

(declare-const rliteral extended_index_type)

;; "rliteral_axiom"
(assert (= (extended_index_typeqtint rliteral) 0))

;; "tree_structure"
(define-fun tree_structure ((param__f us_rep1)) Bool
  (and (and (and (and (and (and (and (and (ite (forall ((i Int))
                                                 (=>
                                                   (and
                                                     (<= (+ (to_rep
                                                              (rec__binary_trees__forest__s
                                                                (us_split_fields3
                                                                  param__f))) 1) i)
                                                     (<= i 100))
                                                   (= (bool_eq
                                                        (let ((temp___191 
                                                          (rec__binary_trees__forest__c
                                                            (us_split_fields3
                                                              param__f))))
                                                          (select temp___191 i))
                                                        (us_repqtmk
                                                          (us_split_fieldsqtmk
                                                            rliteral
                                                            rliteral
                                                            rliteral
                                                            (of_rep1 2)))) true)))
                                            true
                                            false) (ite (forall ((i Int))
                                                          (=>
                                                            (and
                                                              (<= 1 i)
                                                              (<= i 100))
                                                            (let ((temp___196 
                                                              (to_rep
                                                                (rec__binary_trees__cell__parent
                                                                  (us_split_fields1
                                                                    (let ((temp___194 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___194 i)))))))
                                                              (and
                                                                (<= 0 temp___196)
                                                                (<= temp___196 
                                                                (to_rep
                                                                  (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                     true
                                                     false)) (ite (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 100))
                                                                    (let ((temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___197 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___197 i)))))))
                                                                    (and
                                                                    (<= 0 temp___199)
                                                                    (<= temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                               true
                                                               false)) 
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (let ((temp___202 (to_rep
                               (rec__binary_trees__cell__right
                                 (us_split_fields1
                                   (let ((temp___200 (rec__binary_trees__forest__c
                                                       (us_split_fields3
                                                         param__f))))
                                     (select temp___200 i)))))))
             (and
               (<= 0 temp___202)
               (<= temp___202 (to_rep
                                (rec__binary_trees__forest__s
                                  (us_split_fields3 param__f))))))))
    true
    false)) (ite (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (to_rep1
                            (rec__binary_trees__cell__position
                              (us_split_fields1
                                (let ((temp___204 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___204 i))))) 2)
                       (= (to_rep
                            (rec__binary_trees__cell__parent
                              (us_split_fields1
                                (let ((temp___203 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___203 i))))) 0))))
              true
              false)) (ite (forall ((i Int))
                             (=>
                               (and (<= 1 i) (<= i 100))
                               (=>
                                 (not
                                   (= (to_rep
                                        (rec__binary_trees__cell__left
                                          (us_split_fields1
                                            (let ((temp___209 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___209 i))))) 0))
                                 (and
                                   (= (to_rep1
                                        (rec__binary_trees__cell__position
                                          (us_split_fields1
                                            (let ((temp___205 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___205 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___206 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___206 i)))))))))) 0)
                                   (= (to_rep
                                        (rec__binary_trees__cell__parent
                                          (us_split_fields1
                                            (let ((temp___207 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___207 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___208 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___208 i)))))))))) i)))))
                        true
                        false)) (ite (forall ((i Int))
                                       (=>
                                         (and (<= 1 i) (<= i 100))
                                         (=>
                                           (not
                                             (= (to_rep
                                                  (rec__binary_trees__cell__right
                                                    (us_split_fields1
                                                      (let ((temp___214 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___214 i))))) 0))
                                           (and
                                             (= (to_rep1
                                                  (rec__binary_trees__cell__position
                                                    (us_split_fields1
                                                      (let ((temp___210 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___210 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___211 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___211 i)))))))))) 1)
                                             (= (to_rep
                                                  (rec__binary_trees__cell__parent
                                                    (us_split_fields1
                                                      (let ((temp___212 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___212 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___213 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___213 i)))))))))) i)))))
                                  true
                                  false)) (ite (forall ((i Int))
                                                 (=>
                                                   (and (<= 1 i) (<= i 100))
                                                   (=>
                                                     (and
                                                       (not
                                                         (= (to_rep
                                                              (rec__binary_trees__cell__parent
                                                                (us_split_fields1
                                                                  (let ((temp___217 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___217 i))))) 0))
                                                       (= (to_rep1
                                                            (rec__binary_trees__cell__position
                                                              (us_split_fields1
                                                                (let ((temp___218 
                                                                  (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                  (select temp___218 i))))) 0))
                                                     (= (to_rep
                                                          (rec__binary_trees__cell__left
                                                            (us_split_fields1
                                                              (let ((temp___215 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___215 
                                                                (to_rep
                                                                  (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___216 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___216 i)))))))))) i))))
                                            true
                                            false)) (ite (forall ((i Int))
                                                           (=>
                                                             (and
                                                               (<= 1 i)
                                                               (<= i 100))
                                                             (=>
                                                               (and
                                                                 (not
                                                                   (= 
                                                                   (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___221 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___221 i))))) 0))
                                                                 (= (to_rep1
                                                                    (rec__binary_trees__cell__position
                                                                    (us_split_fields1
                                                                    (let ((temp___222 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___222 i))))) 1))
                                                               (= (to_rep
                                                                    (rec__binary_trees__cell__right
                                                                    (us_split_fields1
                                                                    (let ((temp___219 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___219 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___220 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___220 i)))))))))) i))))
                                                      true
                                                      false)))

;; "type_invariant"
(define-fun type_invariant ((temp___327 us_rep1)) Bool
  (= (tree_structure temp___327) true))

;; "oeq"
(declare-fun oeq1 ((Array Int us_rep3)
  (Array Int us_rep3)) Bool)

(declare-const root Int)

(declare-const i Int)

(declare-const d Int)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range3 param__i))
             (type_invariant param__f))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "valid_root__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=
           (= (valid_root param__f param__i) true)
           (and
             (<= param__i (to_rep
                            (rec__binary_trees__forest__s
                              (us_split_fields3 param__f))))
             (= (to_rep1
                  (rec__binary_trees__cell__position
                    (us_split_fields1
                      (let ((temp___332 (rec__binary_trees__forest__c
                                          (us_split_fields3 param__f))))
                        (select temp___332 param__i))))) 2))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range3 param__i))
             (type_invariant param__f))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size param__f) 0) (= result 0)))
               (in_range result)))) :pattern ((parent param__f param__i)) ))))

;; "parent__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (= (parent param__f param__i) (to_rep
                                         (rec__binary_trees__cell__parent
                                           (us_split_fields1
                                             (let ((temp___335 (rec__binary_trees__forest__c
                                                                 (us_split_fields3
                                                                   param__f))))
                                               (select temp___335 param__i)))))) :pattern (
      (parent
        param__f
        param__i)) ))))

;; "peek__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant1 param__f true false true true)
                 (in_range3 param__i))
               (in_range2 param__d))
             (type_invariant param__f))
           (let ((result (peek param__f param__i param__d)))
             (and
               (and
                 (ite (not (= result 0))
                   (and
                     (= (position param__f result) param__d)
                     (= (parent param__f result) param__i))
                   (forall ((j Int))
                     (=>
                       (and (<= 1 j) (<= j 100))
                       (=>
                         (= (parent param__f j) param__i)
                         (not (= (position param__f j) param__d))))))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (= (parent param__f j) param__i)
                         (= (position param__f j) param__d))
                       (= result j)))))
               (in_range result)))) :pattern ((peek
                                                param__f
                                                param__i
                                                param__d)) ))))

;; "peek__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int) (param__d Int))
      (! (= (peek param__f param__i param__d) (ite (= param__d 0)
                                                (to_rep
                                                  (rec__binary_trees__cell__left
                                                    (us_split_fields1
                                                      (let ((temp___348 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___348 param__i)))))
                                                (to_rep
                                                  (rec__binary_trees__cell__right
                                                    (us_split_fields1
                                                      (let ((temp___349 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___349 param__i))))))) :pattern (
      (peek
        param__f
        param__i
        param__d)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (in_range4 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range4 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range2 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep2) (param__s2 us_rep2))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant1 param__f true false true true)
                 (in_range3 param__root))
               (type_invariant param__f))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields5 (select result param__root)))) 0))
                     (forall ((i1 Int))
                       (=>
                         (and (<= 1 i1) (<= i1 100))
                         (=>
                           (not (= i1 param__root))
                           (ite (and
                                  (not (= (parent param__f i1) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields5
                                         (select result (parent param__f i1)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields5 (select result i1))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result i1))) true)))))))
                   (forall ((i1 Int))
                     (=>
                       (and (<= 1 i1) (<= i1 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5 (select result i1))) true)
                              (not (= i1 param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields5
                                  (select result (parent param__f i1))))
                              (position param__f i1)
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i1)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i1)))) 0)))))
                 (forall ((i1 Int))
                   (=>
                     (and (<= 1 i1) (<= i1 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result i1))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result i1)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result j)))) true))
                             (= j i1))))))))
               (dynamic_invariant result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "oeq__post_axiom"
(assert true)

;; "oeq__def_axiom"
(assert
  (forall ((param__m1 (Array Int us_rep3)) (param__m2 (Array Int us_rep3)))
    (! (=
         (= (oeq1 param__m1 param__m2) true)
         (forall ((i1 Int))
           (=>
             (and (<= 1 i1) (<= i1 100))
             (and
               (= (oeq
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select param__m1 i1)))
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select param__m2 i1)))) true)
               (=
                 (= (rec__tree_model__path_type__k
                      (us_split_fields5 (select param__m1 i1))) true)
                 (= (rec__tree_model__path_type__k
                      (us_split_fields5 (select param__m2 i1))) true)))))) :pattern (
    (oeq1
      param__m1
      param__m2)) )))

(declare-const f__split_fields us_split_fields2)

(declare-const v Int)

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields))

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk1 f__split_fields) true false true true))

;; "Assume"
(assert (in_range3 root))

;; "Assume"
(assert (in_range3 i))

;; "Assume"
(assert (in_range2 d))

;; "Assume"
(assert (in_range3 v))

;; "Assume"
(assert (type_invariant (us_repqtmk1 f__split_fields)))

;; "Assume"
(assert
  (and
    (and
      (and
        (= (valid_root (us_repqtmk1 f__split_fields) root) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields5
               (select (model1 (us_repqtmk1 f__split_fields) root) i))) true))
      (= (peek (us_repqtmk1 f__split_fields) i d) 0))
    (< (size (us_repqtmk1 f__split_fields)) 100)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields2
  f__split_fields)

;; "temp___old_1803"
(define-fun temp___old_1803 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep1
  temp___old_1803)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields2
  f__split_fields)

;; "temp___old_1809"
(define-fun temp___old_1809 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep1
  temp___old_1809)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields2
  f__split_fields)

;; "temp___compl_1834"
(define-fun temp___compl_1834 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep1
  temp___compl_1834)

;; "temp___compl_1835"
(define-fun temp___compl_1835 () Int
  root)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused3 () us_split_fields2
  f__split_fields)

;; "temp___1836"
(define-fun temp___1836 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep1
  temp___1836)

;; "Assert"
(assert (type_invariant temp___1836))

;; "temp___1838"
(define-fun temp___1838 () (Array Int us_rep3)
  (model1 temp___compl_1834 temp___compl_1835))

;; "H"
(assert (dynamic_invariant temp___1838 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___1838 temp___compl_1835))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___1838 temp___compl_1835)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 temp___compl_1835))
        (ite (and
               (not (= (parent temp___compl_1834 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___1838 (parent temp___compl_1834 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___1838 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___1838 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___1838 i1))) true)
             (not (= i1 temp___compl_1835)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___1838 (parent temp___compl_1834 i1))))
             (position temp___compl_1834 i1)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1838 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1838 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___1838 i1))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___1838 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1838 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1838 j)))) true))
              (= j i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused () (Array Int us_rep3)
  temp___1838)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused4 () us_split_fields2
  f__split_fields)

;; "temp___compl_1829"
(define-fun temp___compl_1829 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep1
  temp___compl_1829)

;; "temp___compl_1830"
(define-fun temp___compl_1830 () Int
  root)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused5 () us_split_fields2
  f__split_fields)

;; "temp___1831"
(define-fun temp___1831 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep1
  temp___1831)

;; "Assert"
(assert (type_invariant temp___1831))

;; "temp___1833"
(define-fun temp___1833 () (Array Int us_rep3)
  (model1 temp___compl_1829 temp___compl_1830))

;; "H"
(assert (dynamic_invariant temp___1833 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___1833 temp___compl_1830))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___1833 temp___compl_1830)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 temp___compl_1830))
        (ite (and
               (not (= (parent temp___compl_1829 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___1833 (parent temp___compl_1829 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___1833 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___1833 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___1833 i1))) true)
             (not (= i1 temp___compl_1830)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___1833 (parent temp___compl_1829 i1))))
             (position temp___compl_1829 i1)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1833 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1833 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___1833 i1))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___1833 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1833 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1833 j)))) true))
              (= j i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused1 () (Array Int us_rep3)
  temp___1833)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused6 () us_split_fields2
  f__split_fields)

;; "temp___compl_1824"
(define-fun temp___compl_1824 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused6 () us_rep1
  temp___compl_1824)

;; "temp___compl_1825"
(define-fun temp___compl_1825 () Int
  root)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused7 () us_split_fields2
  f__split_fields)

;; "temp___1826"
(define-fun temp___1826 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused7 () us_rep1
  temp___1826)

;; "Assert"
(assert (type_invariant temp___1826))

;; "temp___1828"
(define-fun temp___1828 () (Array Int us_rep3)
  (model1 temp___compl_1824 temp___compl_1825))

;; "H"
(assert (dynamic_invariant temp___1828 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___1828 temp___compl_1825))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___1828 temp___compl_1825)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 temp___compl_1825))
        (ite (and
               (not (= (parent temp___compl_1824 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___1828 (parent temp___compl_1824 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___1828 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___1828 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___1828 i1))) true)
             (not (= i1 temp___compl_1825)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___1828 (parent temp___compl_1824 i1))))
             (position temp___compl_1824 i1)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1828 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1828 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___1828 i1))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___1828 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1828 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1828 j)))) true))
              (= j i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused2 () (Array Int us_rep3)
  temp___1828)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused8 () us_split_fields2
  f__split_fields)

;; "temp___old_1748"
(define-fun temp___old_1748 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused8 () us_rep1
  temp___old_1748)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused9 () us_split_fields2
  f__split_fields)

;; "temp___old_1730"
(define-fun temp___old_1730 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused9 () us_rep1
  temp___old_1730)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused10 () us_split_fields2
  f__split_fields)

;; "temp___old_1736"
(define-fun temp___old_1736 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused10 () us_rep1
  temp___old_1736)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused11 () us_split_fields2
  f__split_fields)

;; "temp___old_1719"
(define-fun temp___old_1719 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused11 () us_rep1
  temp___old_1719)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused12 () us_split_fields2
  f__split_fields)

;; "temp___compl_1819"
(define-fun temp___compl_1819 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused12 () us_rep1
  temp___compl_1819)

;; "temp___compl_1820"
(define-fun temp___compl_1820 () Int
  root)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused13 () us_split_fields2
  f__split_fields)

;; "temp___1821"
(define-fun temp___1821 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused13 () us_rep1
  temp___1821)

;; "Assert"
(assert (type_invariant temp___1821))

;; "temp___1823"
(define-fun temp___1823 () (Array Int us_rep3)
  (model1 temp___compl_1819 temp___compl_1820))

;; "H"
(assert (dynamic_invariant temp___1823 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___1823 temp___compl_1820))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___1823 temp___compl_1820)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 temp___compl_1820))
        (ite (and
               (not (= (parent temp___compl_1819 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___1823 (parent temp___compl_1819 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___1823 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___1823 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___1823 i1))) true)
             (not (= i1 temp___compl_1820)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___1823 (parent temp___compl_1819 i1))))
             (position temp___compl_1819 i1)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1823 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___1823 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___1823 i1))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___1823 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1823 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___1823 j)))) true))
              (= j i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused3 () (Array Int us_rep3)
  temp___1823)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused14 () us_split_fields2
  f__split_fields)

;; "temp___old_1701"
(define-fun temp___old_1701 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused14 () us_rep1
  temp___old_1701)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused15 () us_split_fields2
  f__split_fields)

;; "temp___compl_1815"
(define-fun temp___compl_1815 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused15 () us_rep1
  temp___compl_1815)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused16 () us_split_fields2
  f__split_fields)

;; "temp___1816"
(define-fun temp___1816 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused16 () us_rep1
  temp___1816)

;; "Assert"
(assert (type_invariant temp___1816))

;; "temp___1818"
(define-fun temp___1818 () Int
  (size temp___compl_1815))

;; "H"
(assert (in_range temp___1818))

;; "H"
(assert
  (= temp___1818 (to_rep (rec__binary_trees__forest__s f__split_fields))))

;; "size'result'unused"
(define-fun sizeqtresultqtunused () Int
  temp___1818)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused17 () us_split_fields2
  f__split_fields)

;; "binary_trees__insert__f_old__assume'unused"
(define-fun binary_trees__insert__f_old__assumeqtunused () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused17 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields2
  f__split_fields)

(declare-const f_old__split_fields us_split_fields2)

;; "f_old__split_fields'unused"
(define-fun f_old__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk f_old__split_fields))

;; "H"
(assert (= f_old__split_fields f__split_fields))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk1 f_old__split_fields) true false true true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused18 () us_split_fields2
  f__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused18 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields2
  f__split_fields)

;; "o"
(define-fun o () extended_index_type
  (rec__binary_trees__forest__s f__split_fields))

;; "rec__binary_trees__forest__s'result'unused"
(define-fun rec__binary_trees__forest__sqtresultqtunused () extended_index_type
  o)

(declare-const o1 Int)

;; "Ensures"
(assert (= (to_rep o) o1))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o1)

;; "o"
(define-fun o2 () Int
  (+ o1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o2)

;; "Ensures"
(assert (in_range3 o2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o2)

(declare-const v1 Int)

;; "v'unused"
(define-fun vqtunused () int__ref
  (int__refqtmk v1))

;; "H"
(assert (= v1 o2))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused19 () us_split_fields2
  f__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused19 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "_q 'unused"
(define-fun usq_qtunused () us_split_fields2
  f__split_fields)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields2
  f__split_fields)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused20 () us_split_fields2
  f__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused20 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields2
  f__split_fields)

;; "temp___1635"
(define-fun temp___1635 () (Array Int us_rep)
  (rec__binary_trees__forest__c f__split_fields))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused () (Array Int us_rep)
  temp___1635)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused21 () us_split_fields2
  f__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused21 () us_rep1
  (us_repqtmk1 f__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields2
  f__split_fields)

;; "temp___1632"
(define-fun temp___1632 () (Array Int us_rep)
  (rec__binary_trees__forest__c f__split_fields))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused1 () (Array Int us_rep)
  temp___1632)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  v1)

;; "temp___1633"
(define-fun temp___1633 () us_rep
  (select temp___1632 v1))

;; "get'result'unused"
(define-fun getqtresultqtunused () us_rep
  temp___1633)

;; "_q "
(define-fun usq_ () us_split_fields
  (us_split_fields1 temp___1633))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields
  usq_)

(declare-const o3 position_type)

;; "Ensures"
(assert (= (to_rep1 o3) d))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () position_type
  o3)

;; "o"
(define-fun o4 () extended_index_type
  (rec__binary_trees__cell__parent usq_))

;; "rec__binary_trees__cell__parent'result'unused"
(define-fun rec__binary_trees__cell__parentqtresultqtunused () extended_index_type
  o4)

;; "o"
(define-fun o5 () extended_index_type
  (rec__binary_trees__cell__right usq_))

;; "rec__binary_trees__cell__right'result'unused"
(define-fun rec__binary_trees__cell__rightqtresultqtunused () extended_index_type
  o5)

;; "o"
(define-fun o6 () extended_index_type
  (rec__binary_trees__cell__left usq_))

;; "rec__binary_trees__cell__left'result'unused"
(define-fun rec__binary_trees__cell__leftqtresultqtunused () extended_index_type
  o6)

;; "o"
(define-fun o7 () us_split_fields
  (us_split_fieldsqtmk o6 o5 o4 o3))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o7)

;; "o"
(define-fun o8 () us_rep
  (us_repqtmk o7))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused22 () us_rep
  o8)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  v1)

;; "o"
(define-fun o9 () (Array Int us_rep)
  (store temp___1635 v1 o8))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int us_rep)
  o9)

;; "o"
(define-fun o10 () extended_index_type
  (rec__binary_trees__forest__s f__split_fields))

;; "rec__binary_trees__forest__s'result'unused"
(define-fun rec__binary_trees__forest__sqtresultqtunused1 () extended_index_type
  o10)

;; "o"
(define-fun o11 () us_split_fields2
  (us_split_fieldsqtmk1 o10 o9))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields2
  o11)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused23 () us_rep1
  (us_repqtmk1 o11))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields2
  o11)

(declare-const f__split_fields1 us_split_fields2)

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused2 () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields1))

;; "H"
(assert (= f__split_fields1 o11))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused22 () us_split_fields2
  f__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused24 () us_rep1
  (us_repqtmk1 f__split_fields1))

;; "_q 'unused"
(define-fun usq_qtunused1 () us_split_fields2
  f__split_fields1)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields2
  f__split_fields1)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused23 () us_split_fields2
  f__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused25 () us_rep1
  (us_repqtmk1 f__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused8 () us_split_fields2
  f__split_fields1)

;; "temp___1644"
(define-fun temp___1644 () (Array Int us_rep)
  (rec__binary_trees__forest__c f__split_fields1))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused2 () (Array Int us_rep)
  temp___1644)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused24 () us_split_fields2
  f__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused26 () us_rep1
  (us_repqtmk1 f__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused9 () us_split_fields2
  f__split_fields1)

;; "temp___1641"
(define-fun temp___1641 () (Array Int us_rep)
  (rec__binary_trees__forest__c f__split_fields1))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused3 () (Array Int us_rep)
  temp___1641)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  v1)

;; "temp___1642"
(define-fun temp___1642 () us_rep
  (select temp___1641 v1))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () us_rep
  temp___1642)

;; "_q "
(define-fun usq_1 () us_split_fields
  (us_split_fields1 temp___1642))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused10 () us_split_fields
  usq_1)

;; "o"
(define-fun o12 () position_type
  (rec__binary_trees__cell__position usq_1))

;; "rec__binary_trees__cell__position'result'unused"
(define-fun rec__binary_trees__cell__positionqtresultqtunused () position_type
  o12)

(declare-const o13 extended_index_type)

;; "Ensures"
(assert (= (to_rep o13) i))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused1 () extended_index_type
  o13)

;; "o"
(define-fun o14 () extended_index_type
  (rec__binary_trees__cell__right usq_1))

;; "rec__binary_trees__cell__right'result'unused"
(define-fun rec__binary_trees__cell__rightqtresultqtunused1 () extended_index_type
  o14)

;; "o"
(define-fun o15 () extended_index_type
  (rec__binary_trees__cell__left usq_1))

;; "rec__binary_trees__cell__left'result'unused"
(define-fun rec__binary_trees__cell__leftqtresultqtunused1 () extended_index_type
  o15)

;; "o"
(define-fun o16 () us_split_fields
  (us_split_fieldsqtmk o15 o14 o13 o12))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused2 () us_split_fields
  o16)

;; "o"
(define-fun o17 () us_rep
  (us_repqtmk o16))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused27 () us_rep
  o17)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  v1)

;; "o"
(define-fun o18 () (Array Int us_rep)
  (store temp___1644 v1 o17))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int us_rep)
  o18)

;; "o"
(define-fun o19 () extended_index_type
  (rec__binary_trees__forest__s f__split_fields1))

;; "rec__binary_trees__forest__s'result'unused"
(define-fun rec__binary_trees__forest__sqtresultqtunused2 () extended_index_type
  o19)

;; "o"
(define-fun o20 () us_split_fields2
  (us_split_fieldsqtmk1 o19 o18))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused3 () us_split_fields2
  o20)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused28 () us_rep1
  (us_repqtmk1 o20))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused11 () us_split_fields2
  o20)

(declare-const f__split_fields2 us_split_fields2)

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused3 () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields2))

;; "H"
(assert (= f__split_fields2 o20))

(declare-const f__split_fields3 us_split_fields2)

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused4 () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields3))

(declare-const o21 Bool)

;; "H"
(assert (= o21 (ite (= d 0) true false)))

(declare-const infix_eqqtresultqtunused Bool)

;; "H"
(assert (= infix_eqqtresultqtunused o21))

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

;; "H"
(assert (= spark__branchqtunused (bool__refqtmk spark__branch)))

;; "H"
(assert (= spark__branch o21))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const us_split_fields__contentqtresultqtunused25 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused29 us_rep1)

(declare-const usq_qtunused2 us_split_fields2)

(declare-const us_split_fieldsqtresultqtunused12 us_split_fields2)

(declare-const us_split_fields__contentqtresultqtunused26 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused30 us_rep1)

(declare-const us_split_fieldsqtresultqtunused13 us_split_fields2)

(declare-const temp___1662 (Array Int us_rep))

(declare-const rec__binary_trees__forest__cqtresultqtunused4 (Array Int us_rep))

(declare-const us_split_fields__contentqtresultqtunused27 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused31 us_rep1)

(declare-const us_split_fieldsqtresultqtunused14 us_split_fields2)

(declare-const temp___1659 (Array Int us_rep))

(declare-const rec__binary_trees__forest__cqtresultqtunused5 (Array Int us_rep))

(declare-const temp___1660 us_rep)

(declare-const getqtresultqtunused2 us_rep)

(declare-const usq_2 us_split_fields)

(declare-const us_split_fieldsqtresultqtunused15 us_split_fields)

(declare-const o22 position_type)

(declare-const rec__binary_trees__cell__positionqtresultqtunused1 position_type)

(declare-const o23 extended_index_type)

(declare-const rec__binary_trees__cell__parentqtresultqtunused1 extended_index_type)

(declare-const int__contentqtresultqtunused4 Int)

(declare-const o24 extended_index_type)

(declare-const of_repqtresultqtunused2 extended_index_type)

(declare-const o25 extended_index_type)

(declare-const rec__binary_trees__cell__leftqtresultqtunused2 extended_index_type)

(declare-const o26 us_split_fields)

(declare-const us_split_fieldsqtmkqtresultqtunused4 us_split_fields)

(declare-const o27 us_rep)

(declare-const us_repqtmkqtresultqtunused32 us_rep)

(declare-const o28 (Array Int us_rep))

(declare-const setqtresultqtunused2 (Array Int us_rep))

(declare-const o29 extended_index_type)

(declare-const rec__binary_trees__forest__sqtresultqtunused3 extended_index_type)

(declare-const o30 us_split_fields2)

(declare-const us_split_fieldsqtmkqtresultqtunused5 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused33 us_rep1)

(declare-const us_split_fieldsqtresultqtunused16 us_split_fields2)

(declare-const us_split_fields__contentqtresultqtunused28 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused34 us_rep1)

(declare-const usq_qtunused3 us_split_fields2)

(declare-const us_split_fieldsqtresultqtunused17 us_split_fields2)

(declare-const us_split_fields__contentqtresultqtunused29 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused35 us_rep1)

(declare-const us_split_fieldsqtresultqtunused18 us_split_fields2)

(declare-const temp___1653 (Array Int us_rep))

(declare-const rec__binary_trees__forest__cqtresultqtunused6 (Array Int us_rep))

(declare-const us_split_fields__contentqtresultqtunused30 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused36 us_rep1)

(declare-const us_split_fieldsqtresultqtunused19 us_split_fields2)

(declare-const temp___1650 (Array Int us_rep))

(declare-const rec__binary_trees__forest__cqtresultqtunused7 (Array Int us_rep))

(declare-const temp___1651 us_rep)

(declare-const getqtresultqtunused3 us_rep)

(declare-const usq_3 us_split_fields)

(declare-const us_split_fieldsqtresultqtunused20 us_split_fields)

(declare-const o31 position_type)

(declare-const rec__binary_trees__cell__positionqtresultqtunused2 position_type)

(declare-const o32 extended_index_type)

(declare-const rec__binary_trees__cell__parentqtresultqtunused2 extended_index_type)

(declare-const o33 extended_index_type)

(declare-const rec__binary_trees__cell__rightqtresultqtunused2 extended_index_type)

(declare-const int__contentqtresultqtunused5 Int)

(declare-const o34 extended_index_type)

(declare-const of_repqtresultqtunused3 extended_index_type)

(declare-const o35 us_split_fields)

(declare-const us_split_fieldsqtmkqtresultqtunused6 us_split_fields)

(declare-const o36 us_rep)

(declare-const us_repqtmkqtresultqtunused37 us_rep)

(declare-const o37 (Array Int us_rep))

(declare-const setqtresultqtunused3 (Array Int us_rep))

(declare-const o38 extended_index_type)

(declare-const rec__binary_trees__forest__sqtresultqtunused4 extended_index_type)

(declare-const o39 us_split_fields2)

(declare-const us_split_fieldsqtmkqtresultqtunused7 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused38 us_rep1)

(declare-const us_split_fieldsqtresultqtunused21 us_split_fields2)

;; "H"
(assert
  (ite (= spark__branch true)
    (and
      (= us_split_fields__contentqtresultqtunused28 f__split_fields2)
      (and
        (= us_repqtmkqtresultqtunused34 (us_repqtmk1 f__split_fields2))
        (and
          (= usq_qtunused3 f__split_fields2)
          (and
            (= us_split_fieldsqtresultqtunused17 f__split_fields2)
            (and
              (= us_split_fields__contentqtresultqtunused29 f__split_fields2)
              (and
                (= us_repqtmkqtresultqtunused35 (us_repqtmk1
                                                  f__split_fields2))
                (and
                  (= us_split_fieldsqtresultqtunused18 f__split_fields2)
                  (and
                    (= temp___1653 (rec__binary_trees__forest__c
                                     f__split_fields2))
                    (and
                      (= rec__binary_trees__forest__cqtresultqtunused6 
                      temp___1653)
                      (and
                        (= us_split_fields__contentqtresultqtunused30 
                        f__split_fields2)
                        (and
                          (= us_repqtmkqtresultqtunused36 (us_repqtmk1
                                                            f__split_fields2))
                          (and
                            (= us_split_fieldsqtresultqtunused19 f__split_fields2)
                            (and
                              (= temp___1650 (rec__binary_trees__forest__c
                                               f__split_fields2))
                              (and
                                (= rec__binary_trees__forest__cqtresultqtunused7 
                                temp___1650)
                                (and
                                  (= temp___1651 (select temp___1650 
                                  i))
                                  (and
                                    (= getqtresultqtunused3 temp___1651)
                                    (and
                                      (= usq_3 (us_split_fields1 temp___1651))
                                      (and
                                        (= us_split_fieldsqtresultqtunused20 
                                        usq_3)
                                        (and
                                          (= o31 (rec__binary_trees__cell__position
                                                   usq_3))
                                          (and
                                            (= rec__binary_trees__cell__positionqtresultqtunused2 
                                            o31)
                                            (and
                                              (= o32 (rec__binary_trees__cell__parent
                                                       usq_3))
                                              (and
                                                (= rec__binary_trees__cell__parentqtresultqtunused2 
                                                o32)
                                                (and
                                                  (= o33 (rec__binary_trees__cell__right
                                                           usq_3))
                                                  (and
                                                    (= rec__binary_trees__cell__rightqtresultqtunused2 
                                                    o33)
                                                    (and
                                                      (= int__contentqtresultqtunused5 
                                                      v1)
                                                      (and
                                                        (= (to_rep o34) 
                                                        v1)
                                                        (and
                                                          (= of_repqtresultqtunused3 
                                                          o34)
                                                          (and
                                                            (= o35 (us_split_fieldsqtmk
                                                                    o34
                                                                    o33
                                                                    o32
                                                                    o31))
                                                            (and
                                                              (= us_split_fieldsqtmkqtresultqtunused6 
                                                              o35)
                                                              (and
                                                                (= o36 
                                                                (us_repqtmk
                                                                  o35))
                                                                (and
                                                                  (= 
                                                                  us_repqtmkqtresultqtunused37 
                                                                  o36)
                                                                  (and
                                                                    (= 
                                                                    o37 (store 
                                                                    temp___1653 
                                                                    i 
                                                                    o36))
                                                                    (and
                                                                    (= 
                                                                    setqtresultqtunused3 
                                                                    o37)
                                                                    (and
                                                                    (= 
                                                                    o38 
                                                                    (rec__binary_trees__forest__s
                                                                    f__split_fields2))
                                                                    (and
                                                                    (= 
                                                                    rec__binary_trees__forest__sqtresultqtunused4 
                                                                    o38)
                                                                    (and
                                                                    (= 
                                                                    o39 
                                                                    (us_split_fieldsqtmk1
                                                                    o38
                                                                    o37))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtmkqtresultqtunused7 
                                                                    o39)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused38 
                                                                    (us_repqtmk1
                                                                    o39))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused21 
                                                                    o39)
                                                                    (= 
                                                                    f__split_fields3 
                                                                    o39))))))))))))))))))))))))))))))))))))))))
    (and
      (= us_split_fields__contentqtresultqtunused25 f__split_fields2)
      (and
        (= us_repqtmkqtresultqtunused29 (us_repqtmk1 f__split_fields2))
        (and
          (= usq_qtunused2 f__split_fields2)
          (and
            (= us_split_fieldsqtresultqtunused12 f__split_fields2)
            (and
              (= us_split_fields__contentqtresultqtunused26 f__split_fields2)
              (and
                (= us_repqtmkqtresultqtunused30 (us_repqtmk1
                                                  f__split_fields2))
                (and
                  (= us_split_fieldsqtresultqtunused13 f__split_fields2)
                  (and
                    (= temp___1662 (rec__binary_trees__forest__c
                                     f__split_fields2))
                    (and
                      (= rec__binary_trees__forest__cqtresultqtunused4 
                      temp___1662)
                      (and
                        (= us_split_fields__contentqtresultqtunused27 
                        f__split_fields2)
                        (and
                          (= us_repqtmkqtresultqtunused31 (us_repqtmk1
                                                            f__split_fields2))
                          (and
                            (= us_split_fieldsqtresultqtunused14 f__split_fields2)
                            (and
                              (= temp___1659 (rec__binary_trees__forest__c
                                               f__split_fields2))
                              (and
                                (= rec__binary_trees__forest__cqtresultqtunused5 
                                temp___1659)
                                (and
                                  (= temp___1660 (select temp___1659 
                                  i))
                                  (and
                                    (= getqtresultqtunused2 temp___1660)
                                    (and
                                      (= usq_2 (us_split_fields1 temp___1660))
                                      (and
                                        (= us_split_fieldsqtresultqtunused15 
                                        usq_2)
                                        (and
                                          (= o22 (rec__binary_trees__cell__position
                                                   usq_2))
                                          (and
                                            (= rec__binary_trees__cell__positionqtresultqtunused1 
                                            o22)
                                            (and
                                              (= o23 (rec__binary_trees__cell__parent
                                                       usq_2))
                                              (and
                                                (= rec__binary_trees__cell__parentqtresultqtunused1 
                                                o23)
                                                (and
                                                  (= int__contentqtresultqtunused4 
                                                  v1)
                                                  (and
                                                    (= (to_rep o24) v1)
                                                    (and
                                                      (= of_repqtresultqtunused2 
                                                      o24)
                                                      (and
                                                        (= o25 (rec__binary_trees__cell__left
                                                                 usq_2))
                                                        (and
                                                          (= rec__binary_trees__cell__leftqtresultqtunused2 
                                                          o25)
                                                          (and
                                                            (= o26 (us_split_fieldsqtmk
                                                                    o25
                                                                    o24
                                                                    o23
                                                                    o22))
                                                            (and
                                                              (= us_split_fieldsqtmkqtresultqtunused4 
                                                              o26)
                                                              (and
                                                                (= o27 
                                                                (us_repqtmk
                                                                  o26))
                                                                (and
                                                                  (= 
                                                                  us_repqtmkqtresultqtunused32 
                                                                  o27)
                                                                  (and
                                                                    (= 
                                                                    o28 (store 
                                                                    temp___1662 
                                                                    i 
                                                                    o27))
                                                                    (and
                                                                    (= 
                                                                    setqtresultqtunused2 
                                                                    o28)
                                                                    (and
                                                                    (= 
                                                                    o29 
                                                                    (rec__binary_trees__forest__s
                                                                    f__split_fields2))
                                                                    (and
                                                                    (= 
                                                                    rec__binary_trees__forest__sqtresultqtunused3 
                                                                    o29)
                                                                    (and
                                                                    (= 
                                                                    o30 
                                                                    (us_split_fieldsqtmk1
                                                                    o29
                                                                    o28))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtmkqtresultqtunused5 
                                                                    o30)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused33 
                                                                    (us_repqtmk1
                                                                    o30))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused16 
                                                                    o30)
                                                                    (= 
                                                                    f__split_fields3 
                                                                    o30))))))))))))))))))))))))))))))))))))))))))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused31 () us_split_fields2
  f__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused39 () us_rep1
  (us_repqtmk1 f__split_fields3))

;; "_q 'unused"
(define-fun usq_qtunused4 () us_split_fields2
  f__split_fields3)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused22 () us_split_fields2
  f__split_fields3)

;; "o"
(define-fun o40 () (Array Int us_rep)
  (rec__binary_trees__forest__c f__split_fields3))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused8 () (Array Int us_rep)
  o40)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused32 () us_split_fields2
  f__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused40 () us_rep1
  (us_repqtmk1 f__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused23 () us_split_fields2
  f__split_fields3)

;; "o"
(define-fun o41 () extended_index_type
  (rec__binary_trees__forest__s f__split_fields3))

;; "rec__binary_trees__forest__s'result'unused"
(define-fun rec__binary_trees__forest__sqtresultqtunused5 () extended_index_type
  o41)

(declare-const o42 Int)

;; "Ensures"
(assert (= (to_rep o41) o42))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o42)

;; "o"
(define-fun o43 () Int
  (+ o42 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused1 () Int
  o43)

;; "Ensures"
(assert (in_range o43))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o43)

(declare-const o44 extended_index_type)

;; "Ensures"
(assert (= (to_rep o44) o43))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused4 () extended_index_type
  o44)

;; "o"
(define-fun o45 () us_split_fields2
  (us_split_fieldsqtmk1 o44 o40))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused8 () us_split_fields2
  o45)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused41 () us_rep1
  (us_repqtmk1 o45))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused24 () us_split_fields2
  o45)

(declare-const f__split_fields4 us_split_fields2)

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused5 () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields4))

;; "H"
(assert (= f__split_fields4 o45))

;; "Assert"
(assert (type_invariant (us_repqtmk1 f__split_fields4)))

;; "Assert"
(assert (type_invariant (us_repqtmk1 f_old__split_fields)))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5
               (select (model1 (us_repqtmk1 f_old__split_fields) root) i1))) true)
        (= (rec__tree_model__path_type__k
             (us_split_fields5
               (select (model1 (us_repqtmk1 f__split_fields4) root) i1))) true)))))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5
         (select (model1 (us_repqtmk1 f__split_fields4) root) v1))) true))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (and
          (= (rec__tree_model__path_type__k
               (us_split_fields5
                 (select (model1 (us_repqtmk1 f__split_fields4) root) i1))) true)
          (not (= i1 v1)))
        (= (rec__tree_model__path_type__k
             (us_split_fields5
               (select (model1 (us_repqtmk1 f_old__split_fields) root) i1))) true)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5
               (select (model1 (us_repqtmk1 f_old__split_fields) root) i1))) true)
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select (model1 (us_repqtmk1 f__split_fields4) root) i1)))
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select (model1 (us_repqtmk1 f_old__split_fields) root) i1)))) true)))))

;; "H"
(assert
  (forall ((r Int))
    (=>
      (and
        (<= 1 r)
        (<= r (to_rep (rec__binary_trees__forest__s f_old__split_fields))))
      (=>
        (and
          (and
            (not (= r root))
            (= (to_rep1
                 (rec__binary_trees__cell__position
                   (us_split_fields1
                     (select (rec__binary_trees__forest__c
                               f_old__split_fields) r)))) 2))
          (not (= r v1)))
        (= (oeq1
             (model1 (us_repqtmk1 f_old__split_fields) r)
             (model1 (us_repqtmk1 f__split_fields4) r)) true)))))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "Assert"
(assert (type_invariant (us_repqtmk1 f__split_fields4)))

;; Goal "def'vc"
;; File "binary_trees.ads", line 301, characters 0-0
(assert
  (not
  (not
    (= (rec__tree_model__path_type__k
         (us_split_fields5
           (select (model1 (us_repqtmk1 f__split_fields) root) v1))) true))))

(check-sat)
