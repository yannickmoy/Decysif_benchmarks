;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep1 ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep2 (position_type) Int)

;; "of_rep"
(declare-fun of_rep2 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "size"
(declare-fun size (us_rep1) Int)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 us_rep2)

;; "last"
(declare-fun last (us_rep2) Int)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "get"
(declare-fun get (us_rep2
  Int) Int)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const dummy3 Int)

;; "length"
(define-fun length ((param__container us_rep2)) Int
  (- (+ (last param__container) 1) 1))

;; "olt"
(define-fun olt ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__tree_model__path_type__a us_rep2)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy4 us_rep3)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep3))

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

;; "position"
(declare-fun position (us_rep1
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment6))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_403 (Array Int us_rep3)) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool) (temp___do_typ_inv_402 Bool)) Bool
  (forall ((temp___404 Int))
    (=>
      (and (<= 1 temp___404) (<= temp___404 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields5 (select temp___expr_403 temp___404)))) 100))))

;; "all_less_than"
(declare-fun all_less_than (us_rep1
  Int
  (Array Int natural)
  Int) Bool)

;; "all_more_than"
(declare-fun all_more_than (us_rep1
  Int
  (Array Int natural)
  Int) Bool)

;; "correct_place"
(declare-fun correct_place (us_rep1
  us_rep2
  Int
  Int
  (Array Int natural)) Bool)

(declare-const f1 us_rep1)

(declare-const f2 us_rep1)

(declare-const a us_rep2)

(declare-const root Int)

(declare-const v1 Int)

(declare-const v2 Int)

(declare-const values (Array Int natural))

;; "oeq"
(declare-fun oeq1 ((Array Int us_rep3)
  (Array Int us_rep3)) Bool)

;; "tree_structure"
(declare-fun tree_structure (us_rep1) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_274 us_rep1) (temp___is_init_270 Bool) (temp___skip_constant_271 Bool) (temp___do_toplevel_272 Bool) (temp___do_typ_inv_273 Bool)) Bool
  (=>
    (= temp___do_typ_inv_273 true)
    (= (tree_structure temp___expr_274) true)))

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size2 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment7))

;; "size__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (! (=>
         (dynamic_invariant1 param__f true false true true)
         (in_range1 (size param__f))) :pattern ((size param__f)) )))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant1 param__f true false true true)
             (in_range5 param__i))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant1 param__f true false true true)
             (in_range5 param__i))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size param__f) 0) (= result 0)))
               (in_range1 result)))) :pattern ((parent param__f param__i)) ))))

;; "position__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range5 param__i))
             (not (= (parent param__f param__i) 0)))
           (in_range4 (position param__f param__i))) :pattern ((position
                                                                 param__f
                                                                 param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (in_range3 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range3 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range4 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep2) (param__s2 us_rep2))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range5 param__root))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields5 (select result param__root)))) 0))
                     (forall ((i Int))
                       (=>
                         (and (<= 1 i) (<= i 100))
                         (=>
                           (not (= i param__root))
                           (ite (and
                                  (not (= (parent param__f i) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields5
                                         (select result (parent param__f i)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields5 (select result i))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result i))) true)))))))
                   (forall ((i Int))
                     (=>
                       (and (<= 1 i) (<= i 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5 (select result i))) true)
                              (not (= i param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields5
                                  (select result (parent param__f i))))
                              (position param__f i)
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i)))) 0)))))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result i))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result i)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result j)))) true))
                             (= j i))))))))
               (dynamic_invariant result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "tree_structure__post_axiom"
(assert true)

;; "all_less_than__post_axiom"
(assert true)

;; "all_less_than__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int) (param__v Int))
      (forall ((param__values (Array Int natural)))
        (! (=
             (= (all_less_than param__f param__root param__values param__v) true)
             (forall ((j Int))
               (=>
                 (and (<= 1 j) (<= j 100))
                 (=>
                   (= (rec__tree_model__path_type__k
                        (us_split_fields5
                          (let ((temp___529 (model1 param__f param__root)))
                            (select temp___529 j)))) true)
                   (< (to_rep (select param__values j)) param__v))))) :pattern (
        (all_less_than
          param__f
          param__root
          param__values
          param__v)) )))))

;; "all_more_than__post_axiom"
(assert true)

;; "all_more_than__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int) (param__v Int))
      (forall ((param__values (Array Int natural)))
        (! (=
             (= (all_more_than param__f param__root param__values param__v) true)
             (forall ((j Int))
               (=>
                 (and (<= 1 j) (<= j 100))
                 (=>
                   (= (rec__tree_model__path_type__k
                        (us_split_fields5
                          (let ((temp___531 (model1 param__f param__root)))
                            (select temp___531 j)))) true)
                   (< param__v (to_rep (select param__values j))))))) :pattern (
        (all_more_than
          param__f
          param__root
          param__values
          param__v)) )))))

;; "correct_place__post_axiom"
(assert true)

;; "correct_place__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__a us_rep2))
      (forall ((param__root Int) (param__v Int))
        (forall ((param__values (Array Int natural)))
          (! (=
               (= (correct_place
                    param__f
                    param__a
                    param__root
                    param__v
                    param__values) true)
               (and
                 (and
                   (= (valid_root param__f param__root) true)
                   (= (valid_root param__f param__v) true))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (and
                         (= (rec__tree_model__path_type__k
                              (us_split_fields5
                                (let ((temp___536 (model1
                                                    param__f
                                                    param__root)))
                                  (select temp___536 i)))) true)
                         (= (olt
                              (rec__tree_model__path_type__a
                                (us_split_fields5
                                  (let ((temp___537 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___537 i))))
                              param__a) true))
                       (ite (= (get
                                 param__a
                                 (+ (last
                                      (rec__tree_model__path_type__a
                                        (us_split_fields5
                                          (let ((temp___535 (model1
                                                              param__f
                                                              param__root)))
                                            (select temp___535 i))))) 1)) 0)
                         (= (all_less_than
                              param__f
                              param__v
                              param__values
                              (to_rep (select param__values i))) true)
                         (= (all_more_than
                              param__f
                              param__v
                              param__values
                              (to_rep (select param__values i))) true))))))) :pattern (
          (correct_place
            param__f
            param__a
            param__root
            param__v
            param__values)) ))))))

;; "oeq__post_axiom"
(assert true)

;; "oeq__def_axiom"
(assert
  (forall ((param__m1 (Array Int us_rep3)) (param__m2 (Array Int us_rep3)))
    (! (=
         (= (oeq1 param__m1 param__m2) true)
         (forall ((i Int))
           (=>
             (and (<= 1 i) (<= i 100))
             (and
               (= (oeq
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select param__m1 i)))
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select param__m2 i)))) true)
               (=
                 (= (rec__tree_model__path_type__k
                      (us_split_fields5 (select param__m1 i))) true)
                 (= (rec__tree_model__path_type__k
                      (us_split_fields5 (select param__m2 i))) true)))))) :pattern (
    (oeq1
      param__m1
      param__m2)) )))

;; "Assume"
(assert (dynamic_invariant1 f1 true false true true))

;; "Assume"
(assert (dynamic_invariant1 f2 true false true true))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range5 root))

;; "Assume"
(assert (in_range5 v1))

;; "Assume"
(assert (in_range5 v2))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (and
    (and
      (and
        (and
          (= (correct_place f1 a root v1 values) true)
          (= (valid_root f2 root) true))
        (= (valid_root f2 v2) true))
      (= (oeq1 (model1 f1 root) (model1 f2 root)) true))
    (forall ((i Int))
      (=>
        (and (<= 1 i) (<= i 100))
        (=>
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select (model1 f2 v2) i))) true)
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select (model1 f1 v1) i))) true))))))

(declare-const i Int)

;; "i'unused"
(define-fun iqtunused () int__ref
  (int__refqtmk i))

;; "H"
(assert (= i 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  i)

;; "o"
(define-fun o () Bool
  (ite (<= i 100) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  i)

;; "o"
(define-fun o1 () Bool
  (ite (<= 1 i) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o1)

;; "o"
(define-fun o2 () Bool
  (and o1 o))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o2)

;; "H"
(assert (= o2 true))

(declare-const o3 Bool)

(declare-const o4 Int)

;; "H"
(assert (= o4 root))

(declare-const o5 us_rep1)

;; "H"
(assert (= o5 f2))

(declare-const temp___3123 (Array Int us_rep3))

;; "H"
(assert (= temp___3123 (model1 o5 o4)))

;; "H"
(assert (dynamic_invariant temp___3123 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___3123 o4))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___3123 o4)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 o4))
        (ite (and
               (not (= (parent o5 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5 (select temp___3123 (parent o5 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___3123 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___3123 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___3123 i1))) true)
             (not (= i1 o4)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___3123 (parent o5 i1))))
             (position o5 i1)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___3123 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___3123 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___3123 i1))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___3123 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___3123 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___3123 j)))) true))
              (= j i1))))))))

(declare-const modelqtresultqtunused (Array Int us_rep3))

;; "H"
(assert (= modelqtresultqtunused temp___3123))

(declare-const int__contentqtresultqtunused2 Int)

;; "H"
(assert (= int__contentqtresultqtunused2 i))

(declare-const o6 us_rep3)

;; "H"
(assert (= o6 (select temp___3123 i)))

(declare-const getqtresultqtunused us_rep3)

;; "H"
(assert (= getqtresultqtunused o6))

(declare-const o7 us_split_fields4)

;; "H"
(assert (= o7 (us_split_fields5 o6)))

(declare-const us_split_fieldsqtresultqtunused us_split_fields4)

;; "H"
(assert (= us_split_fieldsqtresultqtunused o7))

(declare-const o8 Bool)

;; "H"
(assert (= o8 (rec__tree_model__path_type__k o7)))

(declare-const rec__tree_model__path_type__kqtresultqtunused Bool)

;; "H"
(assert (= rec__tree_model__path_type__kqtresultqtunused o8))

(declare-const o9 us_rep2)

(declare-const o10 Int)

(declare-const o11 us_rep1)

(declare-const temp___3124 (Array Int us_rep3))

(declare-const modelqtresultqtunused1 (Array Int us_rep3))

(declare-const int__contentqtresultqtunused3 Int)

(declare-const o12 us_rep3)

(declare-const getqtresultqtunused1 us_rep3)

(declare-const o13 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused1 us_split_fields4)

(declare-const o14 us_rep2)

(declare-const rec__tree_model__path_type__aqtresultqtunused us_rep2)

(declare-const oltqtresultqtunused Bool)

;; "H"
(assert
  (ite (= o8 true)
    (and
      (= o9 a)
      (and
        (= o10 root)
        (and
          (= o11 f2)
          (and
            (= temp___3124 (model1 o11 o10))
            (and
              (and
                (dynamic_invariant temp___3124 true false true true)
                (and
                  (and
                    (and
                      (and
                        (= (rec__tree_model__path_type__k
                             (us_split_fields5 (select temp___3124 o10))) true)
                        (= (last
                             (rec__tree_model__path_type__a
                               (us_split_fields5 (select temp___3124 o10)))) 0))
                      (forall ((i1 Int))
                        (=>
                          (and (<= 1 i1) (<= i1 100))
                          (=>
                            (not (= i1 o10))
                            (ite (and
                                   (not (= (parent o11 i1) 0))
                                   (= (rec__tree_model__path_type__k
                                        (us_split_fields5
                                          (select temp___3124 (parent o11 i1)))) true))
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5 (select temp___3124 i1))) true)
                              (not
                                (= (rec__tree_model__path_type__k
                                     (us_split_fields5
                                       (select temp___3124 i1))) true)))))))
                    (forall ((i1 Int))
                      (=>
                        (and (<= 1 i1) (<= i1 100))
                        (ite (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5
                                      (select temp___3124 i1))) true)
                               (not (= i1 o10)))
                          (= (is_add
                               (rec__tree_model__path_type__a
                                 (us_split_fields5
                                   (select temp___3124 (parent o11 i1))))
                               (position o11 i1)
                               (rec__tree_model__path_type__a
                                 (us_split_fields5 (select temp___3124 i1)))) true)
                          (= (last
                               (rec__tree_model__path_type__a
                                 (us_split_fields5 (select temp___3124 i1)))) 0)))))
                  (forall ((i1 Int))
                    (=>
                      (and (<= 1 i1) (<= i1 100))
                      (=>
                        (= (rec__tree_model__path_type__k
                             (us_split_fields5 (select temp___3124 i1))) true)
                        (forall ((j Int))
                          (=>
                            (and (<= 1 j) (<= j 100))
                            (=>
                              (and
                                (= (rec__tree_model__path_type__k
                                     (us_split_fields5
                                       (select temp___3124 j))) true)
                                (= (oeq
                                     (rec__tree_model__path_type__a
                                       (us_split_fields5
                                         (select temp___3124 i1)))
                                     (rec__tree_model__path_type__a
                                       (us_split_fields5
                                         (select temp___3124 j)))) true))
                              (= j i1)))))))))
              (and
                (= modelqtresultqtunused1 temp___3124)
                (and
                  (= int__contentqtresultqtunused3 i)
                  (and
                    (= o12 (select temp___3124 i))
                    (and
                      (= getqtresultqtunused1 o12)
                      (and
                        (= o13 (us_split_fields5 o12))
                        (and
                          (= us_split_fieldsqtresultqtunused1 o13)
                          (and
                            (= o14 (rec__tree_model__path_type__a o13))
                            (and
                              (= rec__tree_model__path_type__aqtresultqtunused 
                              o14)
                              (and
                                (= o3 (olt o14 o9))
                                (and
                                  (=
                                    (= o3 true)
                                    (and
                                      (< (length o14) (length o9))
                                      (forall ((n Int))
                                        (=>
                                          (and (<= 1 n) (<= n (last o14)))
                                          (= (get o14 n) (get o9 n))))))
                                  (= oltqtresultqtunused o3))))))))))))))))
    (= o3 false)))

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o3))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (= spark__branch true))

;; "Assert"
(assert
  (and
    (= (rec__tree_model__path_type__k
         (us_split_fields5 (select (model1 f1 root) i))) true)
    (= (olt
         (rec__tree_model__path_type__a
           (us_split_fields5 (select (model1 f1 root) i)))
         a) true)))

;; "o"
(define-fun o15 () Int
  root)

;; "o"
(define-fun o16 () us_rep1
  f2)

;; "temp___3122"
(define-fun temp___3122 () (Array Int us_rep3)
  (model1 o16 o15))

;; "H"
(assert (dynamic_invariant temp___3122 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___3122 o15))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___3122 o15)))) 0))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (not (= i1 o15))
        (ite (and
               (not (= (parent o16 i1) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5 (select temp___3122 (parent o16 i1)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___3122 i1))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___3122 i1))) true)))))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___3122 i1))) true)
             (not (= i1 o15)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___3122 (parent o16 i1))))
             (position o16 i1)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___3122 i1)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___3122 i1)))) 0)))))

;; "H"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___3122 i1))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___3122 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___3122 i1)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___3122 j)))) true))
              (= j i1))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused2 () (Array Int us_rep3)
  temp___3122)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  i)

;; "o"
(define-fun o17 () us_rep3
  (select temp___3122 i))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () us_rep3
  o17)

;; "o"
(define-fun o18 () us_split_fields4
  (us_split_fields5 o17))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields4
  o18)

;; "o"
(define-fun o19 () us_rep2
  (rec__tree_model__path_type__a o18))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused1 () us_rep2
  o19)

;; "o"
(define-fun o20 () Int
  (last o19))

;; "Ensures"
(assert (in_range3 o20))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  o20)

;; "o"
(define-fun o21 () Int
  (+ o20 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o21)

;; "Ensures"
(assert (in_range6 o21))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o21)

;; "o"
(define-fun o22 () us_rep2
  a)

;; "o"
(define-fun o23 () Int
  (get o22 o21))

;; "Ensures"
(assert (in_range4 o23))

;; "get'result'unused"
(define-fun getqtresultqtunused3 () Int
  o23)

;; "o"
(define-fun o24 () Bool
  (ite (= o23 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o24)

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o24))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (= spark__branch1 true))

;; "Assert"
(assert
  (= (get
       a
       (+ (last
            (rec__tree_model__path_type__a
              (us_split_fields5 (select (model1 f1 root) i)))) 1)) 0))

;; "dummy"
(define-fun dummy5 () Bool
  true)

(declare-const j Int)

;; "H"
(assert (<= 1 j))

;; "H"
(assert (<= j 100))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5
         (let ((temp___529 (model1 f1 v1))) (select temp___529 j)))) true))

;; Goal "def'vc"
;; File "search_trees.adb", line 541, characters 0-0
(assert
  (not (< (to_rep (select values j)) (to_rep (select values i)))))

(check-sat)
