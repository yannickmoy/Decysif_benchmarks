;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 a))) 
         (to_rep
           (rec__binary_trees__cell__left (us_split_fields1 b))))
         (and
           (and
             (= (to_rep
                  (rec__binary_trees__cell__right (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__right (us_split_fields1 b))))
             (= (to_rep
                  (rec__binary_trees__cell__parent (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__parent (us_split_fields1 b)))))
           (= (to_rep1
                (rec__binary_trees__cell__position (us_split_fields1 a))) 
           (to_rep1
             (rec__binary_trees__cell__position (us_split_fields1 b))))))
    true
    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 us_rep2)

;; "last"
(declare-fun last (us_rep2) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const dummy3 Int)

;; "length"
(define-fun length ((param__container us_rep2)) Int
  (- (+ (last param__container) 1) 1))

;; "get"
(declare-fun get (us_rep2
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__tree_model__path_type__a us_rep2)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy4 us_rep3)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep3))

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

;; "position"
(define-fun position ((param__f us_rep1) (param__i Int)) Int
  (to_rep1
    (rec__binary_trees__cell__position
      (us_split_fields1
        (let ((temp___173 (rec__binary_trees__forest__c
                            (us_split_fields3 param__f))))
          (select temp___173 param__i))))))

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment6))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_414 (Array Int us_rep3)) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool
  (forall ((temp___415 Int))
    (=>
      (and (<= 1 temp___415) (<= temp___415 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields5 (select temp___expr_414 temp___415)))) 100))))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_319 us_rep1) (temp___is_init_315 Bool) (temp___skip_constant_316 Bool) (temp___do_toplevel_317 Bool) (temp___do_typ_inv_318 Bool)) Bool
  true)

(declare-const rliteral extended_index_type)

;; "rliteral_axiom"
(assert (= (extended_index_typeqtint rliteral) 0))

;; "tree_structure"
(define-fun tree_structure ((param__f us_rep1)) Bool
  (and (and (and (and (and (and (and (and (ite (forall ((i Int))
                                                 (=>
                                                   (and
                                                     (<= (+ (to_rep
                                                              (rec__binary_trees__forest__s
                                                                (us_split_fields3
                                                                  param__f))) 1) i)
                                                     (<= i 100))
                                                   (= (bool_eq
                                                        (let ((temp___191 
                                                          (rec__binary_trees__forest__c
                                                            (us_split_fields3
                                                              param__f))))
                                                          (select temp___191 i))
                                                        (us_repqtmk
                                                          (us_split_fieldsqtmk
                                                            rliteral
                                                            rliteral
                                                            rliteral
                                                            (of_rep1 2)))) true)))
                                            true
                                            false) (ite (forall ((i Int))
                                                          (=>
                                                            (and
                                                              (<= 1 i)
                                                              (<= i 100))
                                                            (let ((temp___196 
                                                              (to_rep
                                                                (rec__binary_trees__cell__parent
                                                                  (us_split_fields1
                                                                    (let ((temp___194 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___194 i)))))))
                                                              (and
                                                                (<= 0 temp___196)
                                                                (<= temp___196 
                                                                (to_rep
                                                                  (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                     true
                                                     false)) (ite (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 100))
                                                                    (let ((temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___197 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___197 i)))))))
                                                                    (and
                                                                    (<= 0 temp___199)
                                                                    (<= temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                               true
                                                               false)) 
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (let ((temp___202 (to_rep
                               (rec__binary_trees__cell__right
                                 (us_split_fields1
                                   (let ((temp___200 (rec__binary_trees__forest__c
                                                       (us_split_fields3
                                                         param__f))))
                                     (select temp___200 i)))))))
             (and
               (<= 0 temp___202)
               (<= temp___202 (to_rep
                                (rec__binary_trees__forest__s
                                  (us_split_fields3 param__f))))))))
    true
    false)) (ite (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (to_rep1
                            (rec__binary_trees__cell__position
                              (us_split_fields1
                                (let ((temp___204 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___204 i))))) 2)
                       (= (to_rep
                            (rec__binary_trees__cell__parent
                              (us_split_fields1
                                (let ((temp___203 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___203 i))))) 0))))
              true
              false)) (ite (forall ((i Int))
                             (=>
                               (and (<= 1 i) (<= i 100))
                               (=>
                                 (not
                                   (= (to_rep
                                        (rec__binary_trees__cell__left
                                          (us_split_fields1
                                            (let ((temp___209 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___209 i))))) 0))
                                 (and
                                   (= (to_rep1
                                        (rec__binary_trees__cell__position
                                          (us_split_fields1
                                            (let ((temp___205 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___205 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___206 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___206 i)))))))))) 0)
                                   (= (to_rep
                                        (rec__binary_trees__cell__parent
                                          (us_split_fields1
                                            (let ((temp___207 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___207 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___208 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___208 i)))))))))) i)))))
                        true
                        false)) (ite (forall ((i Int))
                                       (=>
                                         (and (<= 1 i) (<= i 100))
                                         (=>
                                           (not
                                             (= (to_rep
                                                  (rec__binary_trees__cell__right
                                                    (us_split_fields1
                                                      (let ((temp___214 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___214 i))))) 0))
                                           (and
                                             (= (to_rep1
                                                  (rec__binary_trees__cell__position
                                                    (us_split_fields1
                                                      (let ((temp___210 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___210 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___211 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___211 i)))))))))) 1)
                                             (= (to_rep
                                                  (rec__binary_trees__cell__parent
                                                    (us_split_fields1
                                                      (let ((temp___212 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___212 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___213 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___213 i)))))))))) i)))))
                                  true
                                  false)) (ite (forall ((i Int))
                                                 (=>
                                                   (and (<= 1 i) (<= i 100))
                                                   (=>
                                                     (and
                                                       (not
                                                         (= (to_rep
                                                              (rec__binary_trees__cell__parent
                                                                (us_split_fields1
                                                                  (let ((temp___217 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___217 i))))) 0))
                                                       (= (to_rep1
                                                            (rec__binary_trees__cell__position
                                                              (us_split_fields1
                                                                (let ((temp___218 
                                                                  (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                  (select temp___218 i))))) 0))
                                                     (= (to_rep
                                                          (rec__binary_trees__cell__left
                                                            (us_split_fields1
                                                              (let ((temp___215 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___215 
                                                                (to_rep
                                                                  (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___216 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___216 i)))))))))) i))))
                                            true
                                            false)) (ite (forall ((i Int))
                                                           (=>
                                                             (and
                                                               (<= 1 i)
                                                               (<= i 100))
                                                             (=>
                                                               (and
                                                                 (not
                                                                   (= 
                                                                   (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___221 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___221 i))))) 0))
                                                                 (= (to_rep1
                                                                    (rec__binary_trees__cell__position
                                                                    (us_split_fields1
                                                                    (let ((temp___222 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___222 i))))) 1))
                                                               (= (to_rep
                                                                    (rec__binary_trees__cell__right
                                                                    (us_split_fields1
                                                                    (let ((temp___219 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___219 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___220 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___220 i)))))))))) i))))
                                                      true
                                                      false)))

;; "type_invariant"
(define-fun type_invariant ((temp___327 us_rep1)) Bool
  (= (tree_structure temp___327) true))

(declare-const f1 us_rep1)

(declare-const f2 us_rep1)

(declare-const root Int)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "size"
(define-fun size ((param__f us_rep1)) Int
  (to_rep (rec__binary_trees__forest__s (us_split_fields3 param__f))))

;; "olt"
(define-fun olt ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range3 param__i))
             (type_invariant param__f))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "valid_root__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=
           (= (valid_root param__f param__i) true)
           (and
             (<= param__i (to_rep
                            (rec__binary_trees__forest__s
                              (us_split_fields3 param__f))))
             (= (to_rep1
                  (rec__binary_trees__cell__position
                    (us_split_fields1
                      (let ((temp___332 (rec__binary_trees__forest__c
                                          (us_split_fields3 param__f))))
                        (select temp___332 param__i))))) 2))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range3 param__i))
             (type_invariant param__f))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size param__f) 0) (= result 0)))
               (in_range result)))) :pattern ((parent param__f param__i)) ))))

;; "parent__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (= (parent param__f param__i) (to_rep
                                         (rec__binary_trees__cell__parent
                                           (us_split_fields1
                                             (let ((temp___335 (rec__binary_trees__forest__c
                                                                 (us_split_fields3
                                                                   param__f))))
                                               (select temp___335 param__i)))))) :pattern (
      (parent
        param__f
        param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range4 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep2) (param__s2 us_rep2))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant1 param__f true false true true)
                 (in_range3 param__root))
               (type_invariant param__f))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields5 (select result param__root)))) 0))
                     (forall ((i Int))
                       (=>
                         (and (<= 1 i) (<= i 100))
                         (=>
                           (not (= i param__root))
                           (ite (and
                                  (not (= (parent param__f i) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields5
                                         (select result (parent param__f i)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields5 (select result i))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result i))) true)))))))
                   (forall ((i Int))
                     (=>
                       (and (<= 1 i) (<= i 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5 (select result i))) true)
                              (not (= i param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields5
                                  (select result (parent param__f i))))
                              (position param__f i)
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i)))) 0)))))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result i))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result i)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result j)))) true))
                             (= j i))))))))
               (dynamic_invariant result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "Assume"
(assert (dynamic_invariant1 f1 true false true true))

;; "Assume"
(assert (dynamic_invariant1 f2 true false true true))

;; "Assume"
(assert (in_range3 root))

;; "Assume"
(assert
  (and
    (and
      (and
        (and
          (and (= (tree_structure f1) true) (= (tree_structure f2) true))
          (= (to_rep1
               (rec__binary_trees__cell__position
                 (us_split_fields1
                   (select (rec__binary_trees__forest__c
                             (us_split_fields3 f1)) root)))) 2))
        (and
          (<= 1 root)
          (<= root (to_rep
                     (rec__binary_trees__forest__s (us_split_fields3 f1))))))
      (<= (to_rep (rec__binary_trees__forest__s (us_split_fields3 f1))) 
      (to_rep
        (rec__binary_trees__forest__s (us_split_fields3 f2)))))
    (forall ((i Int))
      (=>
        (and (<= 1 i) (<= i 100))
        (=>
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select (model1 f1 root) i))) true)
          (= (bool_eq
               (select (rec__binary_trees__forest__c (us_split_fields3 f1)) i)
               (select (rec__binary_trees__forest__c (us_split_fields3 f2)) i)) true))))))

(declare-const n Int)

(declare-const nqtunused int__ref)

;; "H"
(assert (= nqtunused (int__refqtmk n)))

;; "H"
(assert (= n 1))

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused n))

(declare-const o Bool)

;; "H"
(assert (= o (ite (<= n 100) true false)))

(declare-const infix_lseqqtresultqtunused Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused o))

(declare-const int__contentqtresultqtunused1 Int)

;; "H"
(assert (= int__contentqtresultqtunused1 n))

(declare-const o1 Bool)

;; "H"
(assert (= o1 (ite (<= 1 n) true false)))

(declare-const infix_lseqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused1 o1))

(declare-const o2 Bool)

;; "H"
(assert (= o2 (and o1 o)))

(declare-const andbqtresultqtunused Bool)

;; "H"
(assert (= andbqtresultqtunused o2))

(declare-const usfqtunused Bool)

(declare-const anyqtresultqtunused Bool)

(declare-const n1 Int)

(declare-const nqtunused1 int__ref)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const infix_eqqtresultqtunused Bool)

(declare-const usf Int)

(declare-const anyqtresultqtunused1 Int)

(declare-const iqtunused Int)

(declare-const o3 Bool)

(declare-const infix_lseqqtresultqtunused2 Bool)

(declare-const o4 Bool)

(declare-const infix_lseqqtresultqtunused3 Bool)

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert
  (=>
    (= o2 true)
    (and
      (and
        (= anyqtresultqtunused1 usf)
        (and
          (= iqtunused usf)
          (and
            (= o3 (ite (<= usf 100) true false))
            (and
              (= infix_lseqqtresultqtunused2 o3)
              (and
                (= o4 (ite (<= 1 usf) true false))
                (and
                  (= infix_lseqqtresultqtunused3 o4)
                  (= andbqtresultqtunused1 (and o4 o3))))))))
      (and
        (= usfqtunused (ite (forall ((i Int))
                              (=>
                                (and (<= 1 i) (<= i 100))
                                (=>
                                  (and
                                    (= (rec__tree_model__path_type__k
                                         (us_split_fields5
                                           (select (model1 f1 root) i))) true)
                                    (< (last
                                         (rec__tree_model__path_type__a
                                           (us_split_fields5
                                             (select (model1 f1 root) i)))) 
                                    n))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields5
                                         (select (model1 f2 root) i))) true))))
                         true
                         false))
        (and
          (= anyqtresultqtunused (ite (forall ((i Int))
                                        (=>
                                          (and (<= 1 i) (<= i 100))
                                          (=>
                                            (and
                                              (= (rec__tree_model__path_type__k
                                                   (us_split_fields5
                                                     (select (model1 f1 root) i))) true)
                                              (< (last
                                                   (rec__tree_model__path_type__a
                                                     (us_split_fields5
                                                       (select (model1
                                                                 f1
                                                                 root) i)))) 
                                              n))
                                            (= (rec__tree_model__path_type__k
                                                 (us_split_fields5
                                                   (select (model1 f2 root) i))) true))))
                                   true
                                   false))
          (and
            (= nqtunused1 (int__refqtmk n1))
            (and
              (and
                (forall ((i Int))
                  (=>
                    (and (<= 1 i) (<= i 100))
                    (=>
                      (and
                        (= (rec__tree_model__path_type__k
                             (us_split_fields5 (select (model1 f1 root) i))) true)
                        (< (last
                             (rec__tree_model__path_type__a
                               (us_split_fields5 (select (model1 f1 root) i)))) 
                        n1))
                      (= (rec__tree_model__path_type__k
                           (us_split_fields5 (select (model1 f2 root) i))) true))))
                (forall ((i Int))
                  (=>
                    (and (<= 1 i) (<= i 100))
                    (=>
                      (and
                        (= (rec__tree_model__path_type__k
                             (us_split_fields5 (select (model1 f2 root) i))) true)
                        (< (last
                             (rec__tree_model__path_type__a
                               (us_split_fields5 (select (model1 f2 root) i)))) 
                        n1))
                      (= (rec__tree_model__path_type__k
                           (us_split_fields5 (select (model1 f1 root) i))) true)))))
              (and
                (and (<= 1 n1) (<= n1 100))
                (and
                  (= int__contentqtresultqtunused2 n1)
                  (and
                    (= infix_eqqtresultqtunused (ite (= n1 100) true false))
                    (= n1 100)))))))))))

(declare-const n2 Int)

;; "n'unused"
(define-fun nqtunused2 () int__ref
  (int__refqtmk n2))

;; "H"
(assert (= n2 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  n2)

;; "o"
(define-fun o5 () Bool
  (ite (<= n2 100) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused4 () Bool
  o5)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  n2)

;; "o"
(define-fun o6 () Bool
  (ite (<= 1 n2) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused5 () Bool
  o6)

;; "o"
(define-fun o7 () Bool
  (and o6 o5))

;; "andb'result'unused"
(define-fun andbqtresultqtunused2 () Bool
  o7)

;; "H"
(assert (= o7 true))

(declare-const usf1 Int)

(declare-const anyqtresultqtunused2 Int)

;; "H"
(assert (= anyqtresultqtunused2 usf1))

(declare-const iqtunused1 Int)

;; "H"
(assert (= iqtunused1 usf1))

(declare-const o8 Bool)

;; "H"
(assert (= o8 (ite (<= usf1 100) true false)))

(declare-const infix_lseqqtresultqtunused6 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused6 o8))

(declare-const o9 Bool)

;; "H"
(assert (= o9 (ite (<= 1 usf1) true false)))

(declare-const infix_lseqqtresultqtunused7 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused7 o9))

(declare-const andbqtresultqtunused3 Bool)

;; "H"
(assert (= andbqtresultqtunused3 (and o9 o8)))

;; "_f'unused"
(define-fun usfqtunused1 () Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (=>
             (and
               (= (rec__tree_model__path_type__k
                    (us_split_fields5 (select (model1 f1 root) i))) true)
               (< (last
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select (model1 f1 root) i)))) 
               n2))
             (= (oeq
                  (rec__tree_model__path_type__a
                    (us_split_fields5 (select (model1 f2 root) i)))
                  (rec__tree_model__path_type__a
                    (us_split_fields5 (select (model1 f1 root) i)))) true))))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused3 () Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (=>
             (and
               (= (rec__tree_model__path_type__k
                    (us_split_fields5 (select (model1 f1 root) i))) true)
               (< (last
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select (model1 f1 root) i)))) 
               n2))
             (= (oeq
                  (rec__tree_model__path_type__a
                    (us_split_fields5 (select (model1 f2 root) i)))
                  (rec__tree_model__path_type__a
                    (us_split_fields5 (select (model1 f1 root) i)))) true))))
    true
    false))

(declare-const n3 Int)

;; "n'unused"
(define-fun nqtunused3 () int__ref
  (int__refqtmk n3))

;; "LoopInvariant"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (and
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select (model1 f1 root) i))) true)
          (< (last
               (rec__tree_model__path_type__a
                 (us_split_fields5 (select (model1 f1 root) i)))) n3))
        (= (oeq
             (rec__tree_model__path_type__a
               (us_split_fields5 (select (model1 f2 root) i)))
             (rec__tree_model__path_type__a
               (us_split_fields5 (select (model1 f1 root) i)))) true)))))

;; "Assume"
(assert (and (<= 1 n3) (<= n3 100)))

(declare-const j Int)

;; "j'unused"
(define-fun jqtunused () int__ref
  (int__refqtmk j))

;; "H"
(assert (= j 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  j)

;; "o"
(define-fun o10 () Bool
  (ite (<= j 100) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused8 () Bool
  o10)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  j)

;; "o"
(define-fun o11 () Bool
  (ite (<= 1 j) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused9 () Bool
  o11)

;; "o"
(define-fun o12 () Bool
  (and o11 o10))

;; "andb'result'unused"
(define-fun andbqtresultqtunused4 () Bool
  o12)

;; "H"
(assert (= o12 true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused7 () Int
  n3)

;; "temp___compl_2174"
(define-fun temp___compl_2174 () us_rep1
  f1)

;; "temp___compl_2175"
(define-fun temp___compl_2175 () Int
  root)

;; "temp___2176"
(define-fun temp___2176 () us_rep1
  f1)

;; "Assert"
(assert (type_invariant temp___2176))

;; "temp___2178"
(define-fun temp___2178 () (Array Int us_rep3)
  (model1 temp___compl_2174 temp___compl_2175))

;; "H"
(assert (dynamic_invariant temp___2178 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___2178 temp___compl_2175))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___2178 temp___compl_2175)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i temp___compl_2175))
        (ite (and
               (not (= (parent temp___compl_2174 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___2178 (parent temp___compl_2174 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___2178 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___2178 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___2178 i))) true)
             (not (= i temp___compl_2175)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___2178 (parent temp___compl_2174 i))))
             (position temp___compl_2174 i)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2178 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2178 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___2178 i))) true)
        (forall ((j1 Int))
          (=>
            (and (<= 1 j1) (<= j1 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___2178 j1))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2178 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2178 j1)))) true))
              (= j1 i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused () (Array Int us_rep3)
  temp___2178)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  j)

;; "o"
(define-fun o13 () us_rep3
  (select temp___2178 j))

;; "get'result'unused"
(define-fun getqtresultqtunused () us_rep3
  o13)

;; "o"
(define-fun o14 () us_split_fields4
  (us_split_fields5 o13))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields4
  o14)

;; "o"
(define-fun o15 () us_rep2
  (rec__tree_model__path_type__a o14))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused () us_rep2
  o15)

;; "o"
(define-fun o16 () Int
  (last o15))

;; "Ensures"
(assert (in_range2 o16))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  o16)

;; "o"
(define-fun o17 () Bool
  (ite (= o16 n3) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused1 () Bool
  o17)

;; "temp___compl_2168"
(define-fun temp___compl_2168 () us_rep1
  f1)

;; "temp___compl_2169"
(define-fun temp___compl_2169 () Int
  root)

;; "temp___2170"
(define-fun temp___2170 () us_rep1
  f1)

;; "Assert"
(assert (type_invariant temp___2170))

;; "temp___2172"
(define-fun temp___2172 () (Array Int us_rep3)
  (model1 temp___compl_2168 temp___compl_2169))

;; "H"
(assert (dynamic_invariant temp___2172 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___2172 temp___compl_2169))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___2172 temp___compl_2169)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i temp___compl_2169))
        (ite (and
               (not (= (parent temp___compl_2168 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___2172 (parent temp___compl_2168 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___2172 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___2172 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___2172 i))) true)
             (not (= i temp___compl_2169)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___2172 (parent temp___compl_2168 i))))
             (position temp___compl_2168 i)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2172 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2172 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___2172 i))) true)
        (forall ((j1 Int))
          (=>
            (and (<= 1 j1) (<= j1 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___2172 j1))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2172 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2172 j1)))) true))
              (= j1 i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused1 () (Array Int us_rep3)
  temp___2172)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  j)

;; "o"
(define-fun o18 () us_rep3
  (select temp___2172 j))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () us_rep3
  o18)

;; "o"
(define-fun o19 () us_split_fields4
  (us_split_fields5 o18))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields4
  o19)

;; "o"
(define-fun o20 () Bool
  (rec__tree_model__path_type__k o19))

;; "rec__tree_model__path_type__k'result'unused"
(define-fun rec__tree_model__path_type__kqtresultqtunused () Bool
  o20)

;; "o"
(define-fun o21 () Bool
  (and o20 o17))

;; "andb'result'unused"
(define-fun andbqtresultqtunused5 () Bool
  o21)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o21))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (= spark__branch true))

;; "o"
(define-fun o22 () us_split_fields2
  (us_split_fields3 f1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields2
  o22)

;; "temp___2167"
(define-fun temp___2167 () (Array Int us_rep)
  (rec__binary_trees__forest__c o22))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused () (Array Int us_rep)
  temp___2167)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  j)

;; "o"
(define-fun o23 () us_rep
  (select temp___2167 j))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () us_rep
  o23)

;; "o"
(define-fun o24 () us_split_fields
  (us_split_fields1 o23))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields
  o24)

;; "o"
(define-fun o25 () position_type
  (rec__binary_trees__cell__position o24))

;; "rec__binary_trees__cell__position'result'unused"
(define-fun rec__binary_trees__cell__positionqtresultqtunused () position_type
  o25)

(declare-const o26 Int)

;; "Ensures"
(assert (= (to_rep1 o25) o26))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o26)

;; "Ensures"
(assert (in_range4 o26))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o26)

;; "temp___compl_2161"
(define-fun temp___compl_2161 () us_rep1
  f2)

;; "temp___compl_2162"
(define-fun temp___compl_2162 () Int
  root)

;; "temp___2163"
(define-fun temp___2163 () us_rep1
  f2)

;; "Assert"
(assert (type_invariant temp___2163))

;; "temp___2165"
(define-fun temp___2165 () (Array Int us_rep3)
  (model1 temp___compl_2161 temp___compl_2162))

;; "H"
(assert (dynamic_invariant temp___2165 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___2165 temp___compl_2162))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___2165 temp___compl_2162)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i temp___compl_2162))
        (ite (and
               (not (= (parent temp___compl_2161 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___2165 (parent temp___compl_2161 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___2165 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___2165 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___2165 i))) true)
             (not (= i temp___compl_2162)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___2165 (parent temp___compl_2161 i))))
             (position temp___compl_2161 i)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2165 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2165 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___2165 i))) true)
        (forall ((j1 Int))
          (=>
            (and (<= 1 j1) (<= j1 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___2165 j1))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2165 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2165 j1)))) true))
              (= j1 i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused2 () (Array Int us_rep3)
  temp___2165)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  j)

;; "o"
(define-fun o27 () us_rep3
  (select temp___2165 j))

;; "get'result'unused"
(define-fun getqtresultqtunused3 () us_rep3
  o27)

;; "o"
(define-fun o28 () us_split_fields4
  (us_split_fields5 o27))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields4
  o28)

;; "o"
(define-fun o29 () us_rep2
  (rec__tree_model__path_type__a o28))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused1 () us_rep2
  o29)

;; "temp___compl_2155"
(define-fun temp___compl_2155 () us_rep1
  f1)

;; "temp___compl_2156"
(define-fun temp___compl_2156 () Int
  root)

;; "temp___2157"
(define-fun temp___2157 () us_rep1
  f1)

;; "Assert"
(assert (type_invariant temp___2157))

;; "temp___2159"
(define-fun temp___2159 () (Array Int us_rep3)
  (model1 temp___compl_2155 temp___compl_2156))

;; "H"
(assert (dynamic_invariant temp___2159 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___2159 temp___compl_2156))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___2159 temp___compl_2156)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i temp___compl_2156))
        (ite (and
               (not (= (parent temp___compl_2155 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___2159 (parent temp___compl_2155 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___2159 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___2159 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___2159 i))) true)
             (not (= i temp___compl_2156)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___2159 (parent temp___compl_2155 i))))
             (position temp___compl_2155 i)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2159 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2159 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___2159 i))) true)
        (forall ((j1 Int))
          (=>
            (and (<= 1 j1) (<= j1 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___2159 j1))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2159 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2159 j1)))) true))
              (= j1 i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused3 () (Array Int us_rep3)
  temp___2159)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  j)

;; "o"
(define-fun o30 () us_rep3
  (select temp___2159 j))

;; "get'result'unused"
(define-fun getqtresultqtunused4 () us_rep3
  o30)

;; "o"
(define-fun o31 () us_split_fields4
  (us_split_fields5 o30))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields4
  o31)

;; "o"
(define-fun o32 () us_rep2
  (rec__tree_model__path_type__a o31))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused2 () us_rep2
  o32)

;; "temp___compl_2147"
(define-fun temp___compl_2147 () us_rep1
  f2)

;; "temp___compl_2148"
(define-fun temp___compl_2148 () Int
  root)

;; "temp___2149"
(define-fun temp___2149 () us_rep1
  f2)

;; "Assert"
(assert (type_invariant temp___2149))

;; "temp___2151"
(define-fun temp___2151 () (Array Int us_rep3)
  (model1 temp___compl_2147 temp___compl_2148))

;; "H"
(assert (dynamic_invariant temp___2151 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___2151 temp___compl_2148))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___2151 temp___compl_2148)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i temp___compl_2148))
        (ite (and
               (not (= (parent temp___compl_2147 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___2151 (parent temp___compl_2147 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___2151 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___2151 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___2151 i))) true)
             (not (= i temp___compl_2148)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___2151 (parent temp___compl_2147 i))))
             (position temp___compl_2147 i)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2151 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2151 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___2151 i))) true)
        (forall ((j1 Int))
          (=>
            (and (<= 1 j1) (<= j1 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___2151 j1))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2151 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2151 j1)))) true))
              (= j1 i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused4 () (Array Int us_rep3)
  temp___2151)

;; "o"
(define-fun o33 () us_split_fields2
  (us_split_fields3 f1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields2
  o33)

;; "temp___2153"
(define-fun temp___2153 () (Array Int us_rep)
  (rec__binary_trees__forest__c o33))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused1 () (Array Int us_rep)
  temp___2153)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused13 () Int
  j)

;; "o"
(define-fun o34 () us_rep
  (select temp___2153 j))

;; "get'result'unused"
(define-fun getqtresultqtunused5 () us_rep
  o34)

;; "o"
(define-fun o35 () us_split_fields
  (us_split_fields1 o34))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields
  o35)

;; "o"
(define-fun o36 () extended_index_type
  (rec__binary_trees__cell__parent o35))

;; "rec__binary_trees__cell__parent'result'unused"
(define-fun rec__binary_trees__cell__parentqtresultqtunused () extended_index_type
  o36)

(declare-const temp___2154 Int)

;; "Ensures"
(assert (= (to_rep o36) temp___2154))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  temp___2154)

;; "Assert"
(assert (and (<= 1 temp___2154) (<= temp___2154 100)))

;; "o"
(define-fun o37 () us_rep3
  (select temp___2151 temp___2154))

;; "get'result'unused"
(define-fun getqtresultqtunused6 () us_rep3
  o37)

;; "o"
(define-fun o38 () us_split_fields4
  (us_split_fields5 o37))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused8 () us_split_fields4
  o38)

;; "o"
(define-fun o39 () us_rep2
  (rec__tree_model__path_type__a o38))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused3 () us_rep2
  o39)

;; "temp___compl_2139"
(define-fun temp___compl_2139 () us_rep1
  f1)

;; "temp___compl_2140"
(define-fun temp___compl_2140 () Int
  root)

;; "temp___2141"
(define-fun temp___2141 () us_rep1
  f1)

;; "Assert"
(assert (type_invariant temp___2141))

;; "temp___2143"
(define-fun temp___2143 () (Array Int us_rep3)
  (model1 temp___compl_2139 temp___compl_2140))

;; "H"
(assert (dynamic_invariant temp___2143 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields5 (select temp___2143 temp___compl_2140))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields5 (select temp___2143 temp___compl_2140)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i temp___compl_2140))
        (ite (and
               (not (= (parent temp___compl_2139 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields5
                      (select temp___2143 (parent temp___compl_2139 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields5 (select temp___2143 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields5 (select temp___2143 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields5 (select temp___2143 i))) true)
             (not (= i temp___compl_2140)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields5
                 (select temp___2143 (parent temp___compl_2139 i))))
             (position temp___compl_2139 i)
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2143 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields5 (select temp___2143 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields5 (select temp___2143 i))) true)
        (forall ((j1 Int))
          (=>
            (and (<= 1 j1) (<= j1 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields5 (select temp___2143 j1))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2143 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields5 (select temp___2143 j1)))) true))
              (= j1 i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused5 () (Array Int us_rep3)
  temp___2143)

;; "o"
(define-fun o40 () us_split_fields2
  (us_split_fields3 f1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused9 () us_split_fields2
  o40)

;; "temp___2145"
(define-fun temp___2145 () (Array Int us_rep)
  (rec__binary_trees__forest__c o40))

;; "rec__binary_trees__forest__c'result'unused"
(define-fun rec__binary_trees__forest__cqtresultqtunused2 () (Array Int us_rep)
  temp___2145)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused14 () Int
  j)

;; "o"
(define-fun o41 () us_rep
  (select temp___2145 j))

;; "get'result'unused"
(define-fun getqtresultqtunused7 () us_rep
  o41)

;; "o"
(define-fun o42 () us_split_fields
  (us_split_fields1 o41))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused10 () us_split_fields
  o42)

;; "o"
(define-fun o43 () extended_index_type
  (rec__binary_trees__cell__parent o42))

;; "rec__binary_trees__cell__parent'result'unused"
(define-fun rec__binary_trees__cell__parentqtresultqtunused1 () extended_index_type
  o43)

(declare-const temp___2146 Int)

;; "Ensures"
(assert (= (to_rep o43) temp___2146))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  temp___2146)

;; "Assert"
(assert (and (<= 1 temp___2146) (<= temp___2146 100)))

;; "o"
(define-fun o44 () us_rep3
  (select temp___2143 temp___2146))

;; "get'result'unused"
(define-fun getqtresultqtunused8 () us_rep3
  o44)

;; "o"
(define-fun o45 () us_split_fields4
  (us_split_fields5 o44))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused11 () us_split_fields4
  o45)

;; "o"
(define-fun o46 () us_rep2
  (rec__tree_model__path_type__a o45))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused4 () us_rep2
  o46)

;; "dummy"
(define-fun dummy5 () Bool
  true)

;; Goal "def'vc"
;; File "binary_trees.adb", line 301, characters 0-0
(assert
  (not (= (olt o39 o29) true)))

(check-sat)
