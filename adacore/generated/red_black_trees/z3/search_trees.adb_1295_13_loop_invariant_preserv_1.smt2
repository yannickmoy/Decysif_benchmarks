;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (or (= x 0) (= x 1)))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep1 ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep2 (position_type) Int)

;; "of_rep"
(declare-fun of_rep2 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep1)(rec__search_trees__search_tree__values (Array Int natural))))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const search_trees__search_tree__root__first__bit Int)

(declare-const search_trees__search_tree__root__last__bit Int)

(declare-const search_trees__search_tree__root__position Int)

;; "search_trees__search_tree__root__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__root__first__bit))

;; "search_trees__search_tree__root__last__bit_axiom"
(assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; "search_trees__search_tree__root__position_axiom"
(assert (<= 0 search_trees__search_tree__root__position))

(declare-const search_trees__search_tree__struct__first__bit Int)

(declare-const search_trees__search_tree__struct__last__bit Int)

(declare-const search_trees__search_tree__struct__position Int)

;; "search_trees__search_tree__struct__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__struct__first__bit))

;; "search_trees__search_tree__struct__last__bit_axiom"
(assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; "search_trees__search_tree__struct__position_axiom"
(assert (<= 0 search_trees__search_tree__struct__position))

(declare-const search_trees__search_tree__values__first__bit Int)

(declare-const search_trees__search_tree__values__last__bit Int)

(declare-const search_trees__search_tree__values__position Int)

;; "search_trees__search_tree__values__first__bit_axiom"
(assert (<= 0 search_trees__search_tree__values__first__bit))

;; "search_trees__search_tree__values__last__bit_axiom"
(assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; "search_trees__search_tree__values__position_axiom"
(assert (<= 0 search_trees__search_tree__values__position))

(declare-const dummy2 us_rep2)

;; "size"
(declare-fun size (us_rep1) Int)

(declare-sort us_rep3 0)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const dummy3 us_rep3)

;; "last"
(declare-fun last (us_rep3) Int)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "get"
(declare-fun get (us_rep3
  Int) Int)

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const dummy4 Int)

;; "length"
(define-fun length ((param__container us_rep3)) Int
  (- (+ (last param__container) 1) 1))

;; "olt"
(define-fun olt ((param__left us_rep3) (param__right us_rep3)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

(declare-datatypes ()
  ((us_split_fields6
   (us_split_fieldsqtmk3
   (rec__tree_model__path_type__a us_rep3)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep4 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy5 us_rep4)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep4))

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

;; "position"
(declare-fun position (us_rep1
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep3) (param__right us_rep3)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep3
  Int
  us_rep3) Bool)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size2 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment8))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_403 (Array Int us_rep4)) (temp___is_init_399 Bool) (temp___skip_constant_400 Bool) (temp___do_toplevel_401 Bool) (temp___do_typ_inv_402 Bool)) Bool
  (forall ((temp___404 Int))
    (=>
      (and (<= 1 temp___404) (<= temp___404 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields7 (select temp___expr_403 temp___404)))) 100))))

;; "peek"
(declare-fun peek (us_rep1
  Int
  Int) Int)

(declare-sort us_rep5 0)

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const dummy6 us_rep5)

(declare-const t us_rep2)

(declare-const v Int)

;; "tree_structure"
(declare-fun tree_structure (us_rep1) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_299 us_rep2) (temp___is_init_295 Bool) (temp___skip_constant_296 Bool) (temp___do_toplevel_297 Bool) (temp___do_typ_inv_298 Bool)) Bool
  (=>
    (= temp___do_typ_inv_298 true)
    (= (tree_structure
         (rec__search_trees__search_tree__struct
           (us_split_fields5 temp___expr_299))) true)))

;; "ordered_leafs"
(declare-fun ordered_leafs (us_rep1
  Int
  (Array Int natural)) Bool)

;; "type_invariant"
(define-fun type_invariant ((temp___318 us_rep2)) Bool
  (ite (= (size
            (rec__search_trees__search_tree__struct
              (us_split_fields5 temp___318))) 0)
    (= (to_rep1
         (rec__search_trees__search_tree__root (us_split_fields5 temp___318))) 0)
    (and
      (and
        (not
          (= (to_rep1
               (rec__search_trees__search_tree__root
                 (us_split_fields5 temp___318))) 0))
        (= (valid_root
             (rec__search_trees__search_tree__struct
               (us_split_fields5 temp___318))
             (to_rep1
               (rec__search_trees__search_tree__root
                 (us_split_fields5 temp___318)))) true))
      (= (ordered_leafs
           (rec__search_trees__search_tree__struct
             (us_split_fields5 temp___318))
           (to_rep1
             (rec__search_trees__search_tree__root
               (us_split_fields5 temp___318)))
           (rec__search_trees__search_tree__values
             (us_split_fields5 temp___318))) true))))

;; "ordered_prefix"
(declare-fun ordered_prefix ((Array Int us_rep4)
  (Array Int natural)
  Int
  Int) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_274 us_rep1) (temp___is_init_270 Bool) (temp___skip_constant_271 Bool) (temp___do_toplevel_272 Bool) (temp___do_typ_inv_273 Bool)) Bool
  (=>
    (= temp___do_typ_inv_273 true)
    (= (tree_structure temp___expr_274) true)))

;; "size__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (! (=>
         (dynamic_invariant2 param__f true false true true)
         (in_range2 (size param__f))) :pattern ((size param__f)) )))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__f true false true true)
             (in_range6 param__i))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (dynamic_invariant2 param__f true false true true)
             (in_range6 param__i))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size param__f) 0) (= result 0)))
               (in_range2 result)))) :pattern ((parent param__f param__i)) ))))

;; "position__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range6 param__i))
             (not (= (parent param__f param__i) 0)))
           (in_range5 (position param__f param__i))) :pattern ((position
                                                                 param__f
                                                                 param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep3))
    (! (in_range4 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep3))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range4 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range5 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep3) (param__s2 us_rep3))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range6 param__root))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields7 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields7 (select result param__root)))) 0))
                     (forall ((i Int))
                       (=>
                         (and (<= 1 i) (<= i 100))
                         (=>
                           (not (= i param__root))
                           (ite (and
                                  (not (= (parent param__f i) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields7
                                         (select result (parent param__f i)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields7 (select result i))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields7 (select result i))) true)))))))
                   (forall ((i Int))
                     (=>
                       (and (<= 1 i) (<= i 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields7 (select result i))) true)
                              (not (= i param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields7
                                  (select result (parent param__f i))))
                              (position param__f i)
                              (rec__tree_model__path_type__a
                                (us_split_fields7 (select result i)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields7 (select result i)))) 0)))))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields7 (select result i))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields7 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields7 (select result i)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields7 (select result j)))) true))
                             (= j i))))))))
               (dynamic_invariant result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "peek__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int) (param__d Int))
      (! (=>
           (and
             (and
               (dynamic_invariant2 param__f true false true true)
               (in_range6 param__i))
             (in_range5 param__d))
           (let ((result (peek param__f param__i param__d)))
             (and
               (and
                 (ite (not (= result 0))
                   (and
                     (= (position param__f result) param__d)
                     (= (parent param__f result) param__i))
                   (forall ((j Int))
                     (=>
                       (and (<= 1 j) (<= j 100))
                       (=>
                         (= (parent param__f j) param__i)
                         (not (= (position param__f j) param__d))))))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (= (parent param__f j) param__i)
                         (= (position param__f j) param__d))
                       (= result j)))))
               (in_range2 result)))) :pattern ((peek
                                                 param__f
                                                 param__i
                                                 param__d)) ))))

;; "ordered_prefix__post_axiom"
(assert
  (forall ((param__model (Array Int us_rep4)))
    (forall ((param__values (Array Int natural)))
      (forall ((param__i Int) (param__j Int))
        (! (=>
             (and
               (and
                 (and
                   (dynamic_invariant param__model true false true true)
                   (in_range6 param__i))
                 (in_range6 param__j))
               (and
                 (and
                   (= (rec__tree_model__path_type__k
                        (us_split_fields7 (select param__model param__i))) true)
                   (= (rec__tree_model__path_type__k
                        (us_split_fields7 (select param__model param__j))) true))
                 (= (olt
                      (rec__tree_model__path_type__a
                        (us_split_fields7 (select param__model param__i)))
                      (rec__tree_model__path_type__a
                        (us_split_fields7 (select param__model param__j)))) true)))
             (in_range
               (ite (ordered_prefix
                      param__model
                      param__values
                      param__i
                      param__j) 1 0))) :pattern ((ordered_prefix
                                                   param__model
                                                   param__values
                                                   param__i
                                                   param__j)) )))))

;; "ordered_prefix__def_axiom"
(assert
  (forall ((param__model (Array Int us_rep4)))
    (forall ((param__values (Array Int natural)))
      (forall ((param__i Int) (param__j Int))
        (! (=
             (= (ordered_prefix param__model param__values param__i param__j) true)
             (ite (= (get
                       (rec__tree_model__path_type__a
                         (us_split_fields7 (select param__model param__j)))
                       (+ (last
                            (rec__tree_model__path_type__a
                              (us_split_fields7
                                (select param__model param__i)))) 1)) 0)
               (< (to_rep (select param__values param__j)) (to_rep
                                                             (select param__values param__i)))
               (< (to_rep (select param__values param__i)) (to_rep
                                                             (select param__values param__j))))) :pattern (
        (ordered_prefix
          param__model
          param__values
          param__i
          param__j)) )))))

;; "ordered_leafs__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (forall ((param__values (Array Int natural)))
        (! (=>
             (and
               (and
                 (dynamic_invariant2 param__f true false true true)
                 (in_range6 param__root))
               (= (valid_root param__f param__root) true))
             (in_range
               (ite (ordered_leafs param__f param__root param__values) 1 0))) :pattern (
        (ordered_leafs
          param__f
          param__root
          param__values)) )))))

;; "ordered_leafs__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (forall ((param__values (Array Int natural)))
        (! (=
             (= (ordered_leafs param__f param__root param__values) true)
             (forall ((i Int))
               (=>
                 (and (<= 1 i) (<= i 100))
                 (forall ((j Int))
                   (=>
                     (and (<= 1 j) (<= j 100))
                     (=>
                       (and
                         (and
                           (= (rec__tree_model__path_type__k
                                (us_split_fields7
                                  (let ((temp___517 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___517 i)))) true)
                           (= (rec__tree_model__path_type__k
                                (us_split_fields7
                                  (let ((temp___518 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___518 j)))) true))
                         (= (olt
                              (rec__tree_model__path_type__a
                                (us_split_fields7
                                  (let ((temp___519 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___519 i))))
                              (rec__tree_model__path_type__a
                                (us_split_fields7
                                  (let ((temp___520 (model1
                                                      param__f
                                                      param__root)))
                                    (select temp___520 j))))) true))
                       (= (ordered_prefix
                            (model1 param__f param__root)
                            param__values
                            i
                            j) true))))))) :pattern ((ordered_leafs
                                                       param__f
                                                       param__root
                                                       param__values)) )))))

;; "tree_structure__post_axiom"
(assert true)

(declare-const spark__branch Bool)

(declare-const search_trees__contains__result Bool)

;; "search_trees__contains__result'unused"
(define-fun search_trees__contains__resultqtunused () bool__ref
  (bool__refqtmk search_trees__contains__result))

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "Assume"
(assert (dynamic_invariant1 t true false true true))

;; "Assume"
(assert (in_range1 v))

;; "Assume"
(assert (type_invariant t))

;; "o"
(define-fun o () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields4
  o)

;; "o"
(define-fun o1 () extended_index_type
  (rec__search_trees__search_tree__root o))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused () extended_index_type
  o1)

(declare-const o2 Int)

;; "Ensures"
(assert (= (to_rep1 o1) o2))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o2)

(declare-const current Int)

;; "current'unused"
(define-fun currentqtunused () int__ref
  (int__refqtmk current))

;; "H"
(assert (= current o2))

;; "Assume"
(assert (in_range2 current))

;; "o"
(define-fun o3 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields4
  o3)

;; "o"
(define-fun o4 () extended_index_type
  (rec__search_trees__search_tree__root o3))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused1 () extended_index_type
  o4)

(declare-const o5 Int)

;; "Ensures"
(assert (= (to_rep1 o4) o5))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o5)

(declare-const previous Int)

;; "previous'unused"
(define-fun previousqtunused () int__ref
  (int__refqtmk previous))

;; "H"
(assert (= previous o5))

;; "Assume"
(assert (in_range2 previous))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  current)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  (ite (= current 0) true false))

;; "H"
(assert (not (= current 0)))

;; "temp___loop_entry_836'unused"
(define-fun temp___loop_entry_836qtunused () Int
  previous)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  previous)

;; "temp___loop_entry_835'unused"
(define-fun temp___loop_entry_835qtunused () Int
  current)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  current)

;; "o"
(define-fun o6 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields4
  o6)

;; "o"
(define-fun o7 () extended_index_type
  (rec__search_trees__search_tree__root o6))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused2 () extended_index_type
  o7)

(declare-const o8 Int)

;; "Ensures"
(assert (= (to_rep1 o7) o8))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o8)

;; "Ensures"
(assert (in_range6 o8))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o8)

;; "o"
(define-fun o9 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields4
  o9)

;; "o"
(define-fun o10 () us_rep1
  (rec__search_trees__search_tree__struct o9))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused () us_rep1
  o10)

;; "temp___860"
(define-fun temp___860 () (Array Int us_rep4)
  (model1 o10 o8))

;; "H"
(assert (dynamic_invariant temp___860 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7 (select temp___860 o8))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields7 (select temp___860 o8)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i o8))
        (ite (and
               (not (= (parent o10 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields7 (select temp___860 (parent o10 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select temp___860 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields7 (select temp___860 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields7 (select temp___860 i))) true)
             (not (= i o8)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___860 (parent o10 i))))
             (position o10 i)
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___860 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___860 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select temp___860 i))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields7 (select temp___860 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___860 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___860 j)))) true))
              (= j i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused () (Array Int us_rep4)
  temp___860)

;; "Assert"
(assert (and (<= 1 current) (<= current 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  current)

;; "o"
(define-fun o11 () us_rep4
  (select temp___860 current))

;; "get'result'unused"
(define-fun getqtresultqtunused () us_rep4
  o11)

;; "o"
(define-fun o12 () us_split_fields6
  (us_split_fields7 o11))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields6
  o12)

;; "rec__tree_model__path_type__k'result'unused"
(define-fun rec__tree_model__path_type__kqtresultqtunused () Bool
  (rec__tree_model__path_type__k o12))

(declare-const current1 Int)

(declare-const previous1 Int)

;; "current'unused"
(define-fun currentqtunused1 () int__ref
  (int__refqtmk current1))

;; "LoopInvariant"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7
         (select (model1
                   (rec__search_trees__search_tree__struct
                     (us_split_fields5 t))
                   (to_rep1
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 t)))) current1))) true))

;; "LoopInvariant"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7
               (select (model1
                         (rec__search_trees__search_tree__struct
                           (us_split_fields5 t))
                         (to_rep1
                           (rec__search_trees__search_tree__root
                             (us_split_fields5 t)))) i))) true)
        (=>
          (= (olt
               (rec__tree_model__path_type__a
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               (us_split_fields5 t))
                             (to_rep1
                               (rec__search_trees__search_tree__root
                                 (us_split_fields5 t)))) i)))
               (rec__tree_model__path_type__a
                 (us_split_fields7
                   (select (model1
                             (rec__search_trees__search_tree__struct
                               (us_split_fields5 t))
                             (to_rep1
                               (rec__search_trees__search_tree__root
                                 (us_split_fields5 t)))) current1)))) true)
          (ite (= (get
                    (rec__tree_model__path_type__a
                      (us_split_fields7
                        (select (model1
                                  (rec__search_trees__search_tree__struct
                                    (us_split_fields5 t))
                                  (to_rep1
                                    (rec__search_trees__search_tree__root
                                      (us_split_fields5 t)))) current1)))
                    (+ (last
                         (rec__tree_model__path_type__a
                           (us_split_fields7
                             (select (model1
                                       (rec__search_trees__search_tree__struct
                                         (us_split_fields5 t))
                                       (to_rep1
                                         (rec__search_trees__search_tree__root
                                           (us_split_fields5 t)))) i)))) 1)) 0)
            (< v (to_rep
                   (select (rec__search_trees__search_tree__values
                             (us_split_fields5 t)) i)))
            (< (to_rep
                 (select (rec__search_trees__search_tree__values
                           (us_split_fields5 t)) i)) v)))))))

;; "o"
(define-fun o13 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields4
  o13)

;; "o"
(define-fun o14 () extended_index_type
  (rec__search_trees__search_tree__root o13))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused3 () extended_index_type
  o14)

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep1 o14) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () Int
  o15)

;; "o"
(define-fun o16 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields4
  o16)

;; "o"
(define-fun o17 () us_rep1
  (rec__search_trees__search_tree__struct o16))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused1 () us_rep1
  o17)

;; "temp___863"
(define-fun temp___863 () (Array Int us_rep4)
  (model1 o17 o15))

;; "model'result'unused"
(define-fun modelqtresultqtunused1 () (Array Int us_rep4)
  temp___863)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  current1)

;; "o"
(define-fun o18 () us_rep4
  (select temp___863 current1))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () us_rep4
  o18)

;; "o"
(define-fun o19 () us_split_fields6
  (us_split_fields7 o18))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields6
  o19)

;; "o"
(define-fun o20 () us_rep3
  (rec__tree_model__path_type__a o19))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused () us_rep3
  o20)

;; "loop_var___172870"
(define-fun loop_var___172870 () Int
  (last o20))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  loop_var___172870)

;; "Assume"
(assert
  (= (and (ite (and (in_range2 current1) (in_range2 previous1)) true false) 
  (ite (not (= current1 0))
    true
    false)) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  current1)

(declare-const previous2 Int)

;; "H"
(assert (= previous2 current1))

(declare-const spark__branch1 Bool)

(declare-const current2 Int)

;; "current'unused"
(define-fun currentqtunused2 () int__ref
  (int__refqtmk current2))

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

(declare-const o21 us_split_fields4)

;; "H"
(assert (= o21 (us_split_fields5 t)))

(declare-const us_split_fieldsqtresultqtunused8 us_split_fields4)

;; "H"
(assert (= us_split_fieldsqtresultqtunused8 o21))

(declare-const temp___834 (Array Int natural))

;; "H"
(assert (= temp___834 (rec__search_trees__search_tree__values o21)))

(declare-const rec__search_trees__search_tree__valuesqtresultqtunused (Array Int natural))

;; "H"
(assert
  (= rec__search_trees__search_tree__valuesqtresultqtunused temp___834))

;; "Assert"
(assert (and (<= 1 current1) (<= current1 100)))

(declare-const int__contentqtresultqtunused6 Int)

;; "H"
(assert (= int__contentqtresultqtunused6 current1))

(declare-const o22 natural)

;; "H"
(assert (= o22 (select temp___834 current1)))

(declare-const getqtresultqtunused2 natural)

;; "H"
(assert (= getqtresultqtunused2 o22))

(declare-const o23 Int)

;; "Ensures"
(assert (= (to_rep o22) o23))

(declare-const to_repqtresultqtunused4 Int)

;; "H"
(assert (= to_repqtresultqtunused4 o23))

(declare-const o24 Bool)

;; "H"
(assert (= o24 (ite (= v o23) true false)))

(declare-const infix_eqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused1 o24))

(declare-const spark__branch2 Bool)

(declare-const spark__branchqtunused2 bool__ref)

;; "H"
(assert (= spark__branchqtunused2 (bool__refqtmk spark__branch2)))

;; "H"
(assert (= spark__branch2 o24))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch2))

;; "H"
(assert (not (= spark__branch2 true)))

(declare-const o25 us_split_fields4)

;; "H"
(assert (= o25 (us_split_fields5 t)))

(declare-const us_split_fieldsqtresultqtunused9 us_split_fields4)

;; "H"
(assert (= us_split_fieldsqtresultqtunused9 o25))

(declare-const temp___831 (Array Int natural))

;; "H"
(assert (= temp___831 (rec__search_trees__search_tree__values o25)))

(declare-const rec__search_trees__search_tree__valuesqtresultqtunused1 (Array Int natural))

;; "H"
(assert
  (= rec__search_trees__search_tree__valuesqtresultqtunused1 temp___831))

;; "Assert"
(assert (and (<= 1 current1) (<= current1 100)))

(declare-const int__contentqtresultqtunused7 Int)

;; "H"
(assert (= int__contentqtresultqtunused7 current1))

(declare-const o26 natural)

;; "H"
(assert (= o26 (select temp___831 current1)))

(declare-const getqtresultqtunused3 natural)

;; "H"
(assert (= getqtresultqtunused3 o26))

(declare-const o27 Int)

;; "Ensures"
(assert (= (to_rep o26) o27))

(declare-const to_repqtresultqtunused5 Int)

;; "H"
(assert (= to_repqtresultqtunused5 o27))

(declare-const o28 Bool)

;; "H"
(assert (= o28 (ite (< v o27) true false)))

(declare-const infix_lsqtresultqtunused Bool)

;; "H"
(assert (= infix_lsqtresultqtunused o28))

;; "H"
(assert (= spark__branch1 o28))

(declare-const bool__contentqtresultqtunused1 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused1 spark__branch1))

(declare-const int__contentqtresultqtunused8 Int)

(declare-const range_check_qtresultqtunused1 Int)

(declare-const o29 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused10 us_split_fields4)

(declare-const o30 us_rep1)

(declare-const rec__search_trees__search_tree__structqtresultqtunused2 us_rep1)

(declare-const o31 Int)

(declare-const peekqtresultqtunused Int)

(declare-const int__contentqtresultqtunused9 Int)

(declare-const range_check_qtresultqtunused2 Int)

(declare-const o32 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused11 us_split_fields4)

(declare-const o33 us_rep1)

(declare-const rec__search_trees__search_tree__structqtresultqtunused3 us_rep1)

(declare-const o34 Int)

(declare-const peekqtresultqtunused1 Int)

;; "H"
(assert
  (ite (= spark__branch1 true)
    (and
      (= int__contentqtresultqtunused9 current1)
      (and
        (in_range6 current1)
        (and
          (= range_check_qtresultqtunused2 current1)
          (and
            (= o32 (us_split_fields5 t))
            (and
              (= us_split_fieldsqtresultqtunused11 o32)
              (and
                (= o33 (rec__search_trees__search_tree__struct o32))
                (and
                  (= rec__search_trees__search_tree__structqtresultqtunused3 
                  o33)
                  (and
                    (= o34 (peek o33 current1 0))
                    (and
                      (and
                        (in_range2 o34)
                        (and
                          (ite (not (= o34 0))
                            (and
                              (= (position o33 o34) 0)
                              (= (parent o33 o34) current1))
                            (forall ((j Int))
                              (=>
                                (and (<= 1 j) (<= j 100))
                                (=>
                                  (= (parent o33 j) current1)
                                  (not (= (position o33 j) 0))))))
                          (forall ((j Int))
                            (=>
                              (and (<= 1 j) (<= j 100))
                              (=>
                                (and
                                  (= (parent o33 j) current1)
                                  (= (position o33 j) 0))
                                (= o34 j))))))
                      (and (= peekqtresultqtunused1 o34) (= current2 o34)))))))))))
    (and
      (= int__contentqtresultqtunused8 current1)
      (and
        (in_range6 current1)
        (and
          (= range_check_qtresultqtunused1 current1)
          (and
            (= o29 (us_split_fields5 t))
            (and
              (= us_split_fieldsqtresultqtunused10 o29)
              (and
                (= o30 (rec__search_trees__search_tree__struct o29))
                (and
                  (= rec__search_trees__search_tree__structqtresultqtunused2 
                  o30)
                  (and
                    (= o31 (peek o30 current1 1))
                    (and
                      (and
                        (in_range2 o31)
                        (and
                          (ite (not (= o31 0))
                            (and
                              (= (position o30 o31) 1)
                              (= (parent o30 o31) current1))
                            (forall ((j Int))
                              (=>
                                (and (<= 1 j) (<= j 100))
                                (=>
                                  (= (parent o30 j) current1)
                                  (not (= (position o30 j) 1))))))
                          (forall ((j Int))
                            (=>
                              (and (<= 1 j) (<= j 100))
                              (=>
                                (and
                                  (= (parent o30 j) current1)
                                  (= (position o30 j) 1))
                                (= o31 j))))))
                      (and (= peekqtresultqtunused o31) (= current2 o31)))))))))))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  current2)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused2 () Bool
  (ite (= current2 0) true false))

;; "H"
(assert (not (= current2 0)))

;; "o"
(define-fun o35 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused12 () us_split_fields4
  o35)

;; "o"
(define-fun o36 () extended_index_type
  (rec__search_trees__search_tree__root o35))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused4 () extended_index_type
  o36)

(declare-const o37 Int)

;; "Ensures"
(assert (= (to_rep1 o36) o37))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused6 () Int
  o37)

;; "Ensures"
(assert (in_range6 o37))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused3 () Int
  o37)

;; "o"
(define-fun o38 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused13 () us_split_fields4
  o38)

;; "o"
(define-fun o39 () us_rep1
  (rec__search_trees__search_tree__struct o38))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused4 () us_rep1
  o39)

;; "temp___860"
(define-fun temp___8601 () (Array Int us_rep4)
  (model1 o39 o37))

;; "H"
(assert (dynamic_invariant temp___8601 true false true true))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7 (select temp___8601 o37))) true))

;; "H"
(assert
  (= (last
       (rec__tree_model__path_type__a
         (us_split_fields7 (select temp___8601 o37)))) 0))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (not (= i o37))
        (ite (and
               (not (= (parent o39 i) 0))
               (= (rec__tree_model__path_type__k
                    (us_split_fields7 (select temp___8601 (parent o39 i)))) true))
          (= (rec__tree_model__path_type__k
               (us_split_fields7 (select temp___8601 i))) true)
          (not
            (= (rec__tree_model__path_type__k
                 (us_split_fields7 (select temp___8601 i))) true)))))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (ite (and
             (= (rec__tree_model__path_type__k
                  (us_split_fields7 (select temp___8601 i))) true)
             (not (= i o37)))
        (= (is_add
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___8601 (parent o39 i))))
             (position o39 i)
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___8601 i)))) true)
        (= (last
             (rec__tree_model__path_type__a
               (us_split_fields7 (select temp___8601 i)))) 0)))))

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 100))
      (=>
        (= (rec__tree_model__path_type__k
             (us_split_fields7 (select temp___8601 i))) true)
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j 100))
            (=>
              (and
                (= (rec__tree_model__path_type__k
                     (us_split_fields7 (select temp___8601 j))) true)
                (= (oeq
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___8601 i)))
                     (rec__tree_model__path_type__a
                       (us_split_fields7 (select temp___8601 j)))) true))
              (= j i))))))))

;; "model'result'unused"
(define-fun modelqtresultqtunused2 () (Array Int us_rep4)
  temp___8601)

;; "Assert"
(assert (and (<= 1 current2) (<= current2 100)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  current2)

;; "o"
(define-fun o40 () us_rep4
  (select temp___8601 current2))

;; "get'result'unused"
(define-fun getqtresultqtunused4 () us_rep4
  o40)

;; "o"
(define-fun o41 () us_split_fields6
  (us_split_fields7 o40))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused14 () us_split_fields6
  o41)

;; "rec__tree_model__path_type__k'result'unused"
(define-fun rec__tree_model__path_type__kqtresultqtunused1 () Bool
  (rec__tree_model__path_type__k o41))

;; "o"
(define-fun o42 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused15 () us_split_fields4
  o42)

;; "o"
(define-fun o43 () extended_index_type
  (rec__search_trees__search_tree__root o42))

;; "rec__search_trees__search_tree__root'result'unused"
(define-fun rec__search_trees__search_tree__rootqtresultqtunused5 () extended_index_type
  o43)

(declare-const o44 Int)

;; "Ensures"
(assert (= (to_rep1 o43) o44))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused7 () Int
  o44)

;; "o"
(define-fun o45 () us_split_fields4
  (us_split_fields5 t))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused16 () us_split_fields4
  o45)

;; "o"
(define-fun o46 () us_rep1
  (rec__search_trees__search_tree__struct o45))

;; "rec__search_trees__search_tree__struct'result'unused"
(define-fun rec__search_trees__search_tree__structqtresultqtunused5 () us_rep1
  o46)

;; "temp___863"
(define-fun temp___8631 () (Array Int us_rep4)
  (model1 o46 o44))

;; "model'result'unused"
(define-fun modelqtresultqtunused3 () (Array Int us_rep4)
  temp___8631)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  current2)

;; "o"
(define-fun o47 () us_rep4
  (select temp___8631 current2))

;; "get'result'unused"
(define-fun getqtresultqtunused5 () us_rep4
  o47)

;; "o"
(define-fun o48 () us_split_fields6
  (us_split_fields7 o47))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused17 () us_split_fields6
  o48)

;; "o"
(define-fun o49 () us_rep3
  (rec__tree_model__path_type__a o48))

;; "rec__tree_model__path_type__a'result'unused"
(define-fun rec__tree_model__path_type__aqtresultqtunused1 () us_rep3
  o49)

;; "loop_var_new___172870"
(define-fun loop_var_new___172870 () Int
  (last o49))

;; "last'result'unused"
(define-fun lastqtresultqtunused1 () Int
  loop_var_new___172870)

;; "H"
(assert (< loop_var___172870 loop_var_new___172870))

;; "LoopInvariant"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7
         (select (model1
                   (rec__search_trees__search_tree__struct
                     (us_split_fields5 t))
                   (to_rep1
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 t)))) current2))) true))

(declare-const i Int)

;; "H"
(assert (<= 1 i))

;; "H"
(assert (<= i 100))

;; "H"
(assert
  (= (rec__tree_model__path_type__k
       (us_split_fields7
         (select (model1
                   (rec__search_trees__search_tree__struct
                     (us_split_fields5 t))
                   (to_rep1
                     (rec__search_trees__search_tree__root
                       (us_split_fields5 t)))) i))) true))

;; "H"
(assert
  (= (olt
       (rec__tree_model__path_type__a
         (us_split_fields7
           (select (model1
                     (rec__search_trees__search_tree__struct
                       (us_split_fields5 t))
                     (to_rep1
                       (rec__search_trees__search_tree__root
                         (us_split_fields5 t)))) i)))
       (rec__tree_model__path_type__a
         (us_split_fields7
           (select (model1
                     (rec__search_trees__search_tree__struct
                       (us_split_fields5 t))
                     (to_rep1
                       (rec__search_trees__search_tree__root
                         (us_split_fields5 t)))) current2)))) true))

;; "H"
(assert
  (= (get
       (rec__tree_model__path_type__a
         (us_split_fields7
           (select (model1
                     (rec__search_trees__search_tree__struct
                       (us_split_fields5 t))
                     (to_rep1
                       (rec__search_trees__search_tree__root
                         (us_split_fields5 t)))) current2)))
       (+ (last
            (rec__tree_model__path_type__a
              (us_split_fields7
                (select (model1
                          (rec__search_trees__search_tree__struct
                            (us_split_fields5 t))
                          (to_rep1
                            (rec__search_trees__search_tree__root
                              (us_split_fields5 t)))) i)))) 1)) 0))

;; Goal "def'vc"
;; File "search_trees.ads", line 42, characters 0-0
(assert
  (not
  (< v (to_rep
         (select (rec__search_trees__search_tree__values
                   (us_split_fields5 t)) i)))))

(check-sat)
