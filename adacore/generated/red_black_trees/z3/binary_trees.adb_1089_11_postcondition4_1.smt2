;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort extended_index_type 0)

;; "extended_index_type'int"
(declare-fun extended_index_typeqtint (extended_index_type) Int)

;; "extended_index_type'axiom"
(assert
  (forall ((i extended_index_type))
    (and
      (<= 0 (extended_index_typeqtint i))
      (<= (extended_index_typeqtint i) 100))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x extended_index_type)) Int
  (extended_index_typeqtint x))

;; "of_rep"
(declare-fun of_rep (Int) extended_index_type)

;; "inversion_axiom"
(assert
  (forall ((x extended_index_type))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x extended_index_type))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort position_type 0)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep1 (position_type) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) position_type)

;; "inversion_axiom"
(assert
  (forall ((x position_type))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x position_type))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_rep (rec__binary_trees__cell__left (us_split_fields1 a))) 
         (to_rep
           (rec__binary_trees__cell__left (us_split_fields1 b))))
         (and
           (and
             (= (to_rep
                  (rec__binary_trees__cell__right (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__right (us_split_fields1 b))))
             (= (to_rep
                  (rec__binary_trees__cell__parent (us_split_fields1 a))) 
             (to_rep
               (rec__binary_trees__cell__parent (us_split_fields1 b)))))
           (= (to_rep1
                (rec__binary_trees__cell__position (us_split_fields1 a))) 
           (to_rep1
             (rec__binary_trees__cell__position (us_split_fields1 b))))))
    true
    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const binary_trees__cell__left__first__bit Int)

(declare-const binary_trees__cell__left__last__bit Int)

(declare-const binary_trees__cell__left__position Int)

;; "binary_trees__cell__left__first__bit_axiom"
(assert (<= 0 binary_trees__cell__left__first__bit))

;; "binary_trees__cell__left__last__bit_axiom"
(assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; "binary_trees__cell__left__position_axiom"
(assert (<= 0 binary_trees__cell__left__position))

(declare-const binary_trees__cell__right__first__bit Int)

(declare-const binary_trees__cell__right__last__bit Int)

(declare-const binary_trees__cell__right__position Int)

;; "binary_trees__cell__right__first__bit_axiom"
(assert (<= 0 binary_trees__cell__right__first__bit))

;; "binary_trees__cell__right__last__bit_axiom"
(assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; "binary_trees__cell__right__position_axiom"
(assert (<= 0 binary_trees__cell__right__position))

(declare-const binary_trees__cell__parent__first__bit Int)

(declare-const binary_trees__cell__parent__last__bit Int)

(declare-const binary_trees__cell__parent__position Int)

;; "binary_trees__cell__parent__first__bit_axiom"
(assert (<= 0 binary_trees__cell__parent__first__bit))

;; "binary_trees__cell__parent__last__bit_axiom"
(assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; "binary_trees__cell__parent__position_axiom"
(assert (<= 0 binary_trees__cell__parent__position))

(declare-const binary_trees__cell__position__first__bit Int)

(declare-const binary_trees__cell__position__last__bit Int)

(declare-const binary_trees__cell__position__position Int)

;; "binary_trees__cell__position__first__bit_axiom"
(assert (<= 0 binary_trees__cell__position__first__bit))

;; "binary_trees__cell__position__last__bit_axiom"
(assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; "binary_trees__cell__position__position_axiom"
(assert (<= 0 binary_trees__cell__position__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep))))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields2)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const binary_trees__forest__s__first__bit Int)

(declare-const binary_trees__forest__s__last__bit Int)

(declare-const binary_trees__forest__s__position Int)

;; "binary_trees__forest__s__first__bit_axiom"
(assert (<= 0 binary_trees__forest__s__first__bit))

;; "binary_trees__forest__s__last__bit_axiom"
(assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; "binary_trees__forest__s__position_axiom"
(assert (<= 0 binary_trees__forest__s__position))

(declare-const binary_trees__forest__c__first__bit Int)

(declare-const binary_trees__forest__c__last__bit Int)

(declare-const binary_trees__forest__c__position Int)

;; "binary_trees__forest__c__first__bit_axiom"
(assert (<= 0 binary_trees__forest__c__first__bit))

;; "binary_trees__forest__c__last__bit_axiom"
(assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; "binary_trees__forest__c__position_axiom"
(assert (<= 0 binary_trees__forest__c__position))

(declare-const dummy1 us_rep1)

(declare-sort us_rep2 0)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 us_rep2)

;; "last"
(declare-fun last (us_rep2) Int)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__tree_model__path_type__a us_rep2)(rec__tree_model__path_type__k Bool)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const tree_model__path_type__a__first__bit Int)

(declare-const tree_model__path_type__a__last__bit Int)

(declare-const tree_model__path_type__a__position Int)

;; "tree_model__path_type__a__first__bit_axiom"
(assert (<= 0 tree_model__path_type__a__first__bit))

;; "tree_model__path_type__a__last__bit_axiom"
(assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; "tree_model__path_type__a__position_axiom"
(assert (<= 0 tree_model__path_type__a__position))

(declare-const tree_model__path_type__k__first__bit Int)

(declare-const tree_model__path_type__k__last__bit Int)

(declare-const tree_model__path_type__k__position Int)

;; "tree_model__path_type__k__first__bit_axiom"
(assert (<= 0 tree_model__path_type__k__first__bit))

;; "tree_model__path_type__k__last__bit_axiom"
(assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; "tree_model__path_type__k__position_axiom"
(assert (<= 0 tree_model__path_type__k__position))

(declare-const dummy3 us_rep3)

;; "model"
(declare-fun model1 (us_rep1
  Int) (Array Int us_rep3))

;; "valid_root"
(declare-fun valid_root (us_rep1
  Int) Bool)

;; "parent"
(declare-fun parent (us_rep1
  Int) Int)

;; "position"
(define-fun position ((param__f us_rep1) (param__i Int)) Int
  (to_rep1
    (rec__binary_trees__cell__position
      (us_split_fields1
        (let ((temp___173 (rec__binary_trees__forest__c
                            (us_split_fields3 param__f))))
          (select temp___173 param__i))))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const dummy4 Int)

;; "length"
(define-fun length ((param__container us_rep2)) Int
  (- (+ (last param__container) 1) 1))

;; "get"
(declare-fun get (us_rep2
  Int) Int)

;; "oeq"
(define-fun oeq ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (= (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "is_add"
(declare-fun is_add (us_rep2
  Int
  us_rep2) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 100)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment6))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_414 (Array Int us_rep3)) (temp___is_init_410 Bool) (temp___skip_constant_411 Bool) (temp___do_toplevel_412 Bool) (temp___do_typ_inv_413 Bool)) Bool
  (forall ((temp___415 Int))
    (=>
      (and (<= 1 temp___415) (<= temp___415 100))
      (< (length
           (rec__tree_model__path_type__a
             (us_split_fields5 (select temp___expr_414 temp___415)))) 100))))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_319 us_rep1) (temp___is_init_315 Bool) (temp___skip_constant_316 Bool) (temp___do_toplevel_317 Bool) (temp___do_typ_inv_318 Bool)) Bool
  true)

(declare-const rliteral extended_index_type)

;; "rliteral_axiom"
(assert (= (extended_index_typeqtint rliteral) 0))

;; "tree_structure"
(define-fun tree_structure ((param__f us_rep1)) Bool
  (and (and (and (and (and (and (and (and (ite (forall ((i Int))
                                                 (=>
                                                   (and
                                                     (<= (+ (to_rep
                                                              (rec__binary_trees__forest__s
                                                                (us_split_fields3
                                                                  param__f))) 1) i)
                                                     (<= i 100))
                                                   (= (bool_eq
                                                        (let ((temp___191 
                                                          (rec__binary_trees__forest__c
                                                            (us_split_fields3
                                                              param__f))))
                                                          (select temp___191 i))
                                                        (us_repqtmk
                                                          (us_split_fieldsqtmk
                                                            rliteral
                                                            rliteral
                                                            rliteral
                                                            (of_rep1 2)))) true)))
                                            true
                                            false) (ite (forall ((i Int))
                                                          (=>
                                                            (and
                                                              (<= 1 i)
                                                              (<= i 100))
                                                            (let ((temp___196 
                                                              (to_rep
                                                                (rec__binary_trees__cell__parent
                                                                  (us_split_fields1
                                                                    (let ((temp___194 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___194 i)))))))
                                                              (and
                                                                (<= 0 temp___196)
                                                                (<= temp___196 
                                                                (to_rep
                                                                  (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                     true
                                                     false)) (ite (forall 
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 100))
                                                                    (let ((temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___197 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___197 i)))))))
                                                                    (and
                                                                    (<= 0 temp___199)
                                                                    (<= temp___199 
                                                                    (to_rep
                                                                    (rec__binary_trees__forest__s
                                                                    (us_split_fields3
                                                                    param__f))))))))
                                                               true
                                                               false)) 
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i 100))
           (let ((temp___202 (to_rep
                               (rec__binary_trees__cell__right
                                 (us_split_fields1
                                   (let ((temp___200 (rec__binary_trees__forest__c
                                                       (us_split_fields3
                                                         param__f))))
                                     (select temp___200 i)))))))
             (and
               (<= 0 temp___202)
               (<= temp___202 (to_rep
                                (rec__binary_trees__forest__s
                                  (us_split_fields3 param__f))))))))
    true
    false)) (ite (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (to_rep1
                            (rec__binary_trees__cell__position
                              (us_split_fields1
                                (let ((temp___204 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___204 i))))) 2)
                       (= (to_rep
                            (rec__binary_trees__cell__parent
                              (us_split_fields1
                                (let ((temp___203 (rec__binary_trees__forest__c
                                                    (us_split_fields3
                                                      param__f))))
                                  (select temp___203 i))))) 0))))
              true
              false)) (ite (forall ((i Int))
                             (=>
                               (and (<= 1 i) (<= i 100))
                               (=>
                                 (not
                                   (= (to_rep
                                        (rec__binary_trees__cell__left
                                          (us_split_fields1
                                            (let ((temp___209 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___209 i))))) 0))
                                 (and
                                   (= (to_rep1
                                        (rec__binary_trees__cell__position
                                          (us_split_fields1
                                            (let ((temp___205 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___205 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___206 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___206 i)))))))))) 0)
                                   (= (to_rep
                                        (rec__binary_trees__cell__parent
                                          (us_split_fields1
                                            (let ((temp___207 (rec__binary_trees__forest__c
                                                                (us_split_fields3
                                                                  param__f))))
                                              (select temp___207 (to_rep
                                                                   (rec__binary_trees__cell__left
                                                                    (us_split_fields1
                                                                    (let ((temp___208 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___208 i)))))))))) i)))))
                        true
                        false)) (ite (forall ((i Int))
                                       (=>
                                         (and (<= 1 i) (<= i 100))
                                         (=>
                                           (not
                                             (= (to_rep
                                                  (rec__binary_trees__cell__right
                                                    (us_split_fields1
                                                      (let ((temp___214 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___214 i))))) 0))
                                           (and
                                             (= (to_rep1
                                                  (rec__binary_trees__cell__position
                                                    (us_split_fields1
                                                      (let ((temp___210 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___210 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___211 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___211 i)))))))))) 1)
                                             (= (to_rep
                                                  (rec__binary_trees__cell__parent
                                                    (us_split_fields1
                                                      (let ((temp___212 
                                                        (rec__binary_trees__forest__c
                                                          (us_split_fields3
                                                            param__f))))
                                                        (select temp___212 
                                                        (to_rep
                                                          (rec__binary_trees__cell__right
                                                            (us_split_fields1
                                                              (let ((temp___213 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___213 i)))))))))) i)))))
                                  true
                                  false)) (ite (forall ((i Int))
                                                 (=>
                                                   (and (<= 1 i) (<= i 100))
                                                   (=>
                                                     (and
                                                       (not
                                                         (= (to_rep
                                                              (rec__binary_trees__cell__parent
                                                                (us_split_fields1
                                                                  (let ((temp___217 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___217 i))))) 0))
                                                       (= (to_rep1
                                                            (rec__binary_trees__cell__position
                                                              (us_split_fields1
                                                                (let ((temp___218 
                                                                  (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                  (select temp___218 i))))) 0))
                                                     (= (to_rep
                                                          (rec__binary_trees__cell__left
                                                            (us_split_fields1
                                                              (let ((temp___215 
                                                                (rec__binary_trees__forest__c
                                                                  (us_split_fields3
                                                                    param__f))))
                                                                (select temp___215 
                                                                (to_rep
                                                                  (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___216 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___216 i)))))))))) i))))
                                            true
                                            false)) (ite (forall ((i Int))
                                                           (=>
                                                             (and
                                                               (<= 1 i)
                                                               (<= i 100))
                                                             (=>
                                                               (and
                                                                 (not
                                                                   (= 
                                                                   (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___221 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___221 i))))) 0))
                                                                 (= (to_rep1
                                                                    (rec__binary_trees__cell__position
                                                                    (us_split_fields1
                                                                    (let ((temp___222 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___222 i))))) 1))
                                                               (= (to_rep
                                                                    (rec__binary_trees__cell__right
                                                                    (us_split_fields1
                                                                    (let ((temp___219 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___219 
                                                                    (to_rep
                                                                    (rec__binary_trees__cell__parent
                                                                    (us_split_fields1
                                                                    (let ((temp___220 
                                                                    (rec__binary_trees__forest__c
                                                                    (us_split_fields3
                                                                    param__f))))
                                                                    (select temp___220 i)))))))))) i))))
                                                      true
                                                      false)))

;; "type_invariant"
(define-fun type_invariant ((temp___327 us_rep1)) Bool
  (= (tree_structure temp___327) true))

;; "oeq"
(declare-fun oeq1 ((Array Int us_rep3)
  (Array Int us_rep3)) Bool)

(declare-const r310b Int)

;; "size"
(define-fun size ((param__f us_rep1)) Int
  (to_rep (rec__binary_trees__forest__s (us_split_fields3 param__f))))

;; "olt"
(define-fun olt ((param__left us_rep2) (param__right us_rep2)) Bool
  (and (< (length param__left) (length param__right)) (ite (forall ((n Int))
                                                             (=>
                                                               (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last
                                                                   param__left)))
                                                               (= (get
                                                                    param__left
                                                                    n) 
                                                               (get
                                                                 param__right
                                                                 n))))
                                                        true
                                                        false)))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 1)))

;; "valid_root__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range3 param__i))
             (type_invariant param__f))
           (=>
             (< (size param__f) param__i)
             (not (= (valid_root param__f param__i) true)))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "valid_root__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=
           (= (valid_root param__f param__i) true)
           (and
             (<= param__i (to_rep
                            (rec__binary_trees__forest__s
                              (us_split_fields3 param__f))))
             (= (to_rep1
                  (rec__binary_trees__cell__position
                    (us_split_fields1
                      (let ((temp___332 (rec__binary_trees__forest__c
                                          (us_split_fields3 param__f))))
                        (select temp___332 param__i))))) 2))) :pattern (
      (valid_root
        param__f
        param__i)) ))))

;; "parent__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (=>
           (and
             (and
               (dynamic_invariant1 param__f true false true true)
               (in_range3 param__i))
             (type_invariant param__f))
           (let ((result (parent param__f param__i)))
             (and
               (and
                 (=> (= (valid_root param__f param__i) true) (= result 0))
                 (=> (= (size param__f) 0) (= result 0)))
               (in_range result)))) :pattern ((parent param__f param__i)) ))))

;; "parent__def_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__i Int))
      (! (= (parent param__f param__i) (to_rep
                                         (rec__binary_trees__cell__parent
                                           (us_split_fields1
                                             (let ((temp___335 (rec__binary_trees__forest__c
                                                                 (us_split_fields3
                                                                   param__f))))
                                               (select temp___335 param__i)))))) :pattern (
      (parent
        param__f
        param__i)) ))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (! (in_range2 (last param__container)) :pattern ((last param__container)) )))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep2))
    (forall ((param__position Int))
      (! (=>
           (and
             (in_range2 param__position)
             (and
               (<= 1 param__position)
               (<= param__position (last param__container))))
           (in_range4 (get param__container param__position))) :pattern (
      (get
        param__container
        param__position)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__s1 us_rep2) (param__s2 us_rep2))
    (forall ((param__d Int))
      (! (=
           (= (is_add param__s1 param__d param__s2) true)
           (and
             (and
               (= (- (length param__s2) 1) (length param__s1))
               (= (olt param__s1 param__s2) true))
             (= (get param__s2 (last param__s2)) param__d))) :pattern (
      (is_add
        param__s1
        param__d
        param__s2)) ))))

;; "model__post_axiom"
(assert
  (forall ((param__f us_rep1))
    (forall ((param__root Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant1 param__f true false true true)
                 (in_range3 param__root))
               (type_invariant param__f))
             (= (valid_root param__f param__root) true))
           (let ((result (model1 param__f param__root)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result param__root))) true)
                       (= (last
                            (rec__tree_model__path_type__a
                              (us_split_fields5 (select result param__root)))) 0))
                     (forall ((i Int))
                       (=>
                         (and (<= 1 i) (<= i 100))
                         (=>
                           (not (= i param__root))
                           (ite (and
                                  (not (= (parent param__f i) 0))
                                  (= (rec__tree_model__path_type__k
                                       (us_split_fields5
                                         (select result (parent param__f i)))) true))
                             (= (rec__tree_model__path_type__k
                                  (us_split_fields5 (select result i))) true)
                             (not
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result i))) true)))))))
                   (forall ((i Int))
                     (=>
                       (and (<= 1 i) (<= i 100))
                       (ite (and
                              (= (rec__tree_model__path_type__k
                                   (us_split_fields5 (select result i))) true)
                              (not (= i param__root)))
                         (= (is_add
                              (rec__tree_model__path_type__a
                                (us_split_fields5
                                  (select result (parent param__f i))))
                              (position param__f i)
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i)))) true)
                         (= (last
                              (rec__tree_model__path_type__a
                                (us_split_fields5 (select result i)))) 0)))))
                 (forall ((i Int))
                   (=>
                     (and (<= 1 i) (<= i 100))
                     (=>
                       (= (rec__tree_model__path_type__k
                            (us_split_fields5 (select result i))) true)
                       (forall ((j Int))
                         (=>
                           (and (<= 1 j) (<= j 100))
                           (=>
                             (and
                               (= (rec__tree_model__path_type__k
                                    (us_split_fields5 (select result j))) true)
                               (= (oeq
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result i)))
                                    (rec__tree_model__path_type__a
                                      (us_split_fields5 (select result j)))) true))
                             (= j i))))))))
               (dynamic_invariant result true false true true)))) :pattern (
      (model1
        param__f
        param__root)) ))))

;; "oeq__post_axiom"
(assert true)

;; "oeq__def_axiom"
(assert
  (forall ((param__m1 (Array Int us_rep3)) (param__m2 (Array Int us_rep3)))
    (! (=
         (= (oeq1 param__m1 param__m2) true)
         (forall ((i Int))
           (=>
             (and (<= 1 i) (<= i 100))
             (and
               (= (oeq
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select param__m1 i)))
                    (rec__tree_model__path_type__a
                      (us_split_fields5 (select param__m2 i)))) true)
               (=
                 (= (rec__tree_model__path_type__k
                      (us_split_fields5 (select param__m1 i))) true)
                 (= (rec__tree_model__path_type__k
                      (us_split_fields5 (select param__m2 i))) true)))))) :pattern (
    (oeq1
      param__m1
      param__m2)) )))

(declare-const f__split_fields us_split_fields2)

(declare-const root Int)

(declare-const f_old__split_fields us_split_fields2)

;; "f_old__split_fields'unused"
(define-fun f_old__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk f_old__split_fields))

;; "root'unused"
(define-fun rootqtunused () int__ref
  (int__refqtmk root))

;; "f__split_fields'unused"
(define-fun f__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk f__split_fields))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk1 f_old__split_fields) true false true true))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk1 f__split_fields) true false true true))

;; "Assume"
(assert (in_range3 root))

;; "Assume"
(assert
  (and
    (type_invariant (us_repqtmk1 f_old__split_fields))
    (type_invariant (us_repqtmk1 f__split_fields))))

;; "Assume"
(assert
  (and
    (and
      (and
        (and
          (and
            (<= (+ (to_rep
                     (rec__binary_trees__forest__s f_old__split_fields)) 1) 
            root)
            (<= root (to_rep (rec__binary_trees__forest__s f__split_fields))))
          (forall ((i Int))
            (=>
              (and (<= 1 i) (<= i 100))
              (= (to_rep
                   (rec__binary_trees__cell__parent
                     (us_split_fields1
                       (select (rec__binary_trees__forest__c f__split_fields) i)))) 
              (to_rep
                (rec__binary_trees__cell__parent
                  (us_split_fields1
                    (select (rec__binary_trees__forest__c
                              f_old__split_fields) i))))))))
        (forall ((i Int))
          (=>
            (and (<= 1 i) (<= i 100))
            (= (to_rep1
                 (rec__binary_trees__cell__position
                   (us_split_fields1
                     (select (rec__binary_trees__forest__c f__split_fields) i)))) 
            (to_rep1
              (rec__binary_trees__cell__position
                (us_split_fields1
                  (select (rec__binary_trees__forest__c f_old__split_fields) i))))))))
      (forall ((i Int))
        (=>
          (and (<= 1 i) (<= i 100))
          (= (to_rep
               (rec__binary_trees__cell__left
                 (us_split_fields1
                   (select (rec__binary_trees__forest__c f__split_fields) i)))) 
          (to_rep
            (rec__binary_trees__cell__left
              (us_split_fields1
                (select (rec__binary_trees__forest__c f_old__split_fields) i))))))))
    (forall ((i Int))
      (=>
        (and (<= 1 i) (<= i 100))
        (= (to_rep
             (rec__binary_trees__cell__right
               (us_split_fields1
                 (select (rec__binary_trees__forest__c f__split_fields) i)))) 
        (to_rep
          (rec__binary_trees__cell__right
            (us_split_fields1
              (select (rec__binary_trees__forest__c f_old__split_fields) i)))))))))

(declare-const n Int)

(declare-const nqtunused int__ref)

;; "H"
(assert (= nqtunused (int__refqtmk n)))

;; "H"
(assert (= n 0))

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused n))

(declare-const o Bool)

;; "H"
(assert (= o (ite (<= n 100) true false)))

(declare-const infix_lseqqtresultqtunused Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused o))

(declare-const int__contentqtresultqtunused1 Int)

;; "H"
(assert (= int__contentqtresultqtunused1 n))

(declare-const o1 Bool)

;; "H"
(assert (= o1 (ite (<= 0 n) true false)))

(declare-const infix_lseqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused1 o1))

(declare-const o2 Bool)

;; "H"
(assert (= o2 (and o1 o)))

(declare-const andbqtresultqtunused Bool)

;; "H"
(assert (= andbqtresultqtunused o2))

(declare-const usfqtunused Bool)

(declare-const anyqtresultqtunused Bool)

(declare-const n1 Int)

(declare-const nqtunused1 int__ref)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const infix_eqqtresultqtunused Bool)

(declare-const usf Int)

(declare-const anyqtresultqtunused1 Int)

(declare-const jqtunused Int)

(declare-const o3 Bool)

(declare-const infix_lseqqtresultqtunused2 Bool)

(declare-const o4 Bool)

(declare-const infix_lseqqtresultqtunused3 Bool)

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert
  (=>
    (= o2 true)
    (and
      (and
        (= anyqtresultqtunused1 usf)
        (and
          (= jqtunused usf)
          (and
            (= o3 (ite (<= usf 100) true false))
            (and
              (= infix_lseqqtresultqtunused2 o3)
              (and
                (= o4 (ite (<= 1 usf) true false))
                (and
                  (= infix_lseqqtresultqtunused3 o4)
                  (= andbqtresultqtunused1 (and o4 o3))))))))
      (and
        (= usfqtunused (ite (forall ((j Int))
                              (=>
                                (and (<= 1 j) (<= j 100))
                                (=>
                                  (and
                                    (= (rec__tree_model__path_type__k
                                         (us_split_fields5
                                           (select (model1
                                                     (us_repqtmk1
                                                       f__split_fields)
                                                     root) j))) true)
                                    (not (= j root)))
                                  (< n (last
                                         (rec__tree_model__path_type__a
                                           (us_split_fields5
                                             (select (model1
                                                       (us_repqtmk1
                                                         f__split_fields)
                                                       root) j))))))))
                         true
                         false))
        (and
          (= anyqtresultqtunused (ite (forall ((j Int))
                                        (=>
                                          (and (<= 1 j) (<= j 100))
                                          (=>
                                            (and
                                              (= (rec__tree_model__path_type__k
                                                   (us_split_fields5
                                                     (select (model1
                                                               (us_repqtmk1
                                                                 f__split_fields)
                                                               root) j))) true)
                                              (not (= j root)))
                                            (< n (last
                                                   (rec__tree_model__path_type__a
                                                     (us_split_fields5
                                                       (select (model1
                                                                 (us_repqtmk1
                                                                   f__split_fields)
                                                                 root) j))))))))
                                   true
                                   false))
          (and
            (= nqtunused1 (int__refqtmk n1))
            (and
              (forall ((j Int))
                (=>
                  (and (<= 1 j) (<= j 100))
                  (=>
                    (and
                      (= (rec__tree_model__path_type__k
                           (us_split_fields5
                             (select (model1
                                       (us_repqtmk1 f__split_fields)
                                       root) j))) true)
                      (not (= j root)))
                    (< n1 (last
                            (rec__tree_model__path_type__a
                              (us_split_fields5
                                (select (model1
                                          (us_repqtmk1 f__split_fields)
                                          root) j))))))))
              (and
                (and (<= 0 n1) (<= n1 100))
                (and
                  (= int__contentqtresultqtunused2 n1)
                  (and
                    (= infix_eqqtresultqtunused (ite (= n1 100) true false))
                    (= n1 100)))))))))))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields2
  f_old__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep1
  (us_repqtmk1 f_old__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields2
  f_old__split_fields)

;; "o"
(define-fun o5 () extended_index_type
  (rec__binary_trees__forest__s f_old__split_fields))

;; "rec__binary_trees__forest__s'result'unused"
(define-fun rec__binary_trees__forest__sqtresultqtunused () extended_index_type
  o5)

(declare-const binary_trees__init__prove_post__L_22__R310b__assume Int)

;; "Ensures"
(assert (= (to_rep o5) binary_trees__init__prove_post__L_22__R310b__assume))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  binary_trees__init__prove_post__L_22__R310b__assume)

;; "Assume"
(assert (= binary_trees__init__prove_post__L_22__R310b__assume r310b))

;; "Assume"
(assert (in_range r310b))

(declare-const temp___4034 Int)

;; "H"
(assert (= temp___4034 r310b))

(declare-const r Int)

(declare-const rqtunused int__ref)

;; "H"
(assert (= rqtunused (int__refqtmk r)))

;; "H"
(assert (= r 1))

(declare-const int__contentqtresultqtunused3 Int)

;; "H"
(assert (= int__contentqtresultqtunused3 r))

(declare-const o6 Bool)

;; "H"
(assert (= o6 (ite (<= r temp___4034) true false)))

(declare-const infix_lseqqtresultqtunused4 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused4 o6))

(declare-const int__contentqtresultqtunused4 Int)

;; "H"
(assert (= int__contentqtresultqtunused4 r))

(declare-const o7 Bool)

;; "H"
(assert (= o7 (ite (<= 1 r) true false)))

(declare-const infix_lseqqtresultqtunused5 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused5 o7))

(declare-const o8 Bool)

;; "H"
(assert (= o8 (and o7 o6)))

(declare-const andbqtresultqtunused2 Bool)

;; "H"
(assert (= andbqtresultqtunused2 o8))

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

(declare-const usfqtunused1 Bool)

(declare-const anyqtresultqtunused2 Bool)

(declare-const r1 Int)

(declare-const rqtunused1 int__ref)

(declare-const int__contentqtresultqtunused5 Int)

(declare-const infix_eqqtresultqtunused1 Bool)

(declare-const usf1 Int)

(declare-const anyqtresultqtunused3 Int)

(declare-const pqtunused Int)

(declare-const int__contentqtresultqtunused6 Int)

(declare-const o9 Bool)

(declare-const infix_lseqqtresultqtunused6 Bool)

(declare-const o10 Bool)

(declare-const infix_lseqqtresultqtunused7 Bool)

(declare-const andbqtresultqtunused3 Bool)

(declare-const us_split_fields__contentqtresultqtunused1 us_split_fields2)

(declare-const us_repqtmkqtresultqtunused1 us_rep1)

(declare-const us_split_fieldsqtresultqtunused1 us_split_fields2)

(declare-const temp___4035 (Array Int us_rep))

(declare-const rec__binary_trees__forest__cqtresultqtunused (Array Int us_rep))

(declare-const int__contentqtresultqtunused7 Int)

(declare-const o11 us_rep)

(declare-const getqtresultqtunused us_rep)

(declare-const o12 us_split_fields)

(declare-const us_split_fieldsqtresultqtunused2 us_split_fields)

(declare-const o13 position_type)

(declare-const rec__binary_trees__cell__positionqtresultqtunused position_type)

(declare-const o14 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const o15 Bool)

(declare-const infix_eqqtresultqtunused2 Bool)

(declare-const bool__contentqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused8 Int)

(declare-const us_split_fields__contentqtresultqtunused2 us_split_fields2)

(declare-const o16 us_rep1)

(declare-const us_repqtmkqtresultqtunused2 us_rep1)

(declare-const us_split_fields__contentqtresultqtunused3 us_split_fields2)

(declare-const o17 us_rep1)

(declare-const us_repqtmkqtresultqtunused3 us_rep1)

;; "H"
(assert
  (=>
    (= o8 true)
    (and
      (= spark__branchqtunused (bool__refqtmk spark__branch))
      (and
        (and
          (= us_split_fields__contentqtresultqtunused1 f_old__split_fields)
          (and
            (= us_repqtmkqtresultqtunused1 (us_repqtmk1 f_old__split_fields))
            (and
              (= us_split_fieldsqtresultqtunused1 f_old__split_fields)
              (and
                (= temp___4035 (rec__binary_trees__forest__c
                                 f_old__split_fields))
                (and
                  (= rec__binary_trees__forest__cqtresultqtunused temp___4035)
                  (and
                    (= int__contentqtresultqtunused7 r)
                    (and
                      (= o11 (select temp___4035 r))
                      (and
                        (= getqtresultqtunused o11)
                        (and
                          (= o12 (us_split_fields1 o11))
                          (and
                            (= us_split_fieldsqtresultqtunused2 o12)
                            (and
                              (= o13 (rec__binary_trees__cell__position o12))
                              (and
                                (= rec__binary_trees__cell__positionqtresultqtunused 
                                o13)
                                (and
                                  (= (to_rep1 o13) o14)
                                  (and
                                    (= to_repqtresultqtunused1 o14)
                                    (and
                                      (= o15 (ite (= o14 2) true false))
                                      (and
                                        (= infix_eqqtresultqtunused2 
                                        o15)
                                        (and
                                          (= spark__branch o15)
                                          (and
                                            (= bool__contentqtresultqtunused 
                                            spark__branch)
                                            (=>
                                              (= spark__branch true)
                                              (and
                                                (= int__contentqtresultqtunused8 
                                                r)
                                                (and
                                                  (= us_split_fields__contentqtresultqtunused2 
                                                  f__split_fields)
                                                  (and
                                                    (= o16 (us_repqtmk1
                                                             f__split_fields))
                                                    (and
                                                      (= us_repqtmkqtresultqtunused2 
                                                      o16)
                                                      (and
                                                        (= us_split_fields__contentqtresultqtunused3 
                                                        f_old__split_fields)
                                                        (and
                                                          (= o17 (us_repqtmk1
                                                                   f_old__split_fields))
                                                          (and
                                                            (= us_repqtmkqtresultqtunused3 
                                                            o17)
                                                            (and
                                                              (= (to_rep1
                                                                   (rec__binary_trees__cell__position
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (rec__binary_trees__forest__c
                                                                    f__split_fields) 
                                                                    r)))) 2)
                                                              (= (oeq1
                                                                   (model1
                                                                    o17
                                                                    r)
                                                                   (model1
                                                                    o16
                                                                    r)) true))))))))))))))))))))))))))))
        (and
          (and
            (= anyqtresultqtunused3 usf1)
            (and
              (= pqtunused usf1)
              (and
                (= int__contentqtresultqtunused6 r)
                (and
                  (= o9 (ite (<= usf1 r) true false))
                  (and
                    (= infix_lseqqtresultqtunused6 o9)
                    (and
                      (= o10 (ite (<= 1 usf1) true false))
                      (and
                        (= infix_lseqqtresultqtunused7 o10)
                        (= andbqtresultqtunused3 (and o10 o9)))))))))
          (and
            (= usfqtunused1 (ite (forall ((p Int))
                                   (=>
                                     (and (<= 1 p) (<= p r))
                                     (=>
                                       (= (to_rep1
                                            (rec__binary_trees__cell__position
                                              (us_split_fields1
                                                (select (rec__binary_trees__forest__c
                                                          f_old__split_fields) p)))) 2)
                                       (= (oeq1
                                            (model1
                                              (us_repqtmk1
                                                f_old__split_fields)
                                              p)
                                            (model1
                                              (us_repqtmk1 f__split_fields)
                                              p)) true))))
                              true
                              false))
            (and
              (= anyqtresultqtunused2 (ite (forall ((p Int))
                                             (=>
                                               (and (<= 1 p) (<= p r))
                                               (=>
                                                 (= (to_rep1
                                                      (rec__binary_trees__cell__position
                                                        (us_split_fields1
                                                          (select (rec__binary_trees__forest__c
                                                                    f_old__split_fields) p)))) 2)
                                                 (= (oeq1
                                                      (model1
                                                        (us_repqtmk1
                                                          f_old__split_fields)
                                                        p)
                                                      (model1
                                                        (us_repqtmk1
                                                          f__split_fields)
                                                        p)) true))))
                                        true
                                        false))
              (and
                (= rqtunused1 (int__refqtmk r1))
                (and
                  (forall ((p Int))
                    (=>
                      (and (<= 1 p) (<= p r1))
                      (=>
                        (= (to_rep1
                             (rec__binary_trees__cell__position
                               (us_split_fields1
                                 (select (rec__binary_trees__forest__c
                                           f_old__split_fields) p)))) 2)
                        (= (oeq1
                             (model1 (us_repqtmk1 f_old__split_fields) p)
                             (model1 (us_repqtmk1 f__split_fields) p)) true))))
                  (and
                    (and (<= 1 r1) (<= r1 r310b))
                    (and
                      (= int__contentqtresultqtunused5 r1)
                      (and
                        (= infix_eqqtresultqtunused1 (ite (= r1 temp___4034)
                                                       true
                                                       false))
                        (= r1 temp___4034)))))))))))))

(declare-const i Int)

;; "H"
(assert (<= 1 i))

;; "H"
(assert (<= i 100))

;; "H"
(assert (not (= i root)))

;; Goal "def'vc"
;; File "binary_trees.adb", line 1074, characters 0-0
(assert
  (not
  (not
    (= (rec__tree_model__path_type__k
         (us_split_fields5
           (select (model1 (us_repqtmk1 f__split_fields) root) i))) true))))

(check-sat)
