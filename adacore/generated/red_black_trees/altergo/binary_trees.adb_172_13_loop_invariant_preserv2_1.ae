(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

logic bool_eq : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

function of_int(i: int) : bool = (if (i = 0) then false else true)

type extended_index_type

logic extended_index_typeqtint : extended_index_type -> int

axiom extended_index_typeqtaxiom :
  (forall i:extended_index_type. ((0 <= extended_index_typeqtint(i)) and
  (extended_index_typeqtint(i) <= 100)))

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

function to_rep(x: extended_index_type) : int = extended_index_typeqtint(x)

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type position_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__binary_trees__cell__left : extended_index_type;
rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type }

type us_rep = { us_split_fields1 : us_split_fields
}

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__left)) and
  (((to_rep(((a).us_split_fields1).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__right)) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields1).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields1).rec__binary_trees__cell__position)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic dummy : us_rep

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

type us_split_fields2 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep) farray }

type us_rep1 = { us_split_fields3 : us_split_fields2
}

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic dummy1 : us_rep1

logic valid_root : us_rep1, int -> bool

function size(param__f: us_rep1) : int =
  to_rep(((param__f).us_split_fields3).rec__binary_trees__forest__s)

predicate in_range2(x: int) = ((0 <= x) and (x <= 1))

logic f : us_rep1

logic root : int

type us_rep2

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic dummy2 : us_rep2

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic dummy3 : int

logic last : us_rep2 -> int

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((0 <= extended_indexqtint(i)) and
  (extended_indexqtint(i) <= 2147483647)))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function length(param__container: us_rep2) : int =
  ((last(param__container) + 1) - 1)

predicate dynamic_invariant(temp___expr_380: int, temp___is_init_376: bool,
  temp___skip_constant_377: bool, temp___do_toplevel_378: bool,
  temp___do_typ_inv_379: bool) = ((temp___is_init_376 = true) ->
  ((temp___do_toplevel_378 = true) -> (0 <= temp___expr_380)))

logic get : us_rep2, int -> int

function oeq(param__left: us_rep2, param__right: us_rep2) : bool =
  andb(bool_eq(length(param__left), length(param__right)),
  (if (forall n:int. (((1 <= n) and (n <= last(param__left))) ->
      (get(param__left, n) = get(param__right, n)))) then true else false))

function olt(param__left: us_rep2, param__right: us_rep2) : bool =
  andb(bool_lt(length(param__left), length(param__right)),
  (if (forall n:int. (((1 <= n) and (n <= last(param__left))) ->
      (get(param__left, n) = get(param__right, n)))) then true else false))

logic is_add : us_rep2, int, us_rep2 -> bool

predicate dynamic_invariant1(temp___expr_319: us_rep1,
  temp___is_init_315: bool, temp___skip_constant_316: bool,
  temp___do_toplevel_317: bool, temp___do_typ_inv_318: bool) = true

logic rliteral : extended_index_type

axiom rliteral_axiom : (extended_index_typeqtint(rliteral) = 0)

function tree_structure(param__f: us_rep1) : bool =
  andb(andb(andb(andb(andb(andb(andb(andb((if (forall i:int.
                                              ((((to_rep(((param__f).us_split_fields3).rec__binary_trees__forest__s) + 1) <= i) and
                                              (i <= 100)) ->
                                              (bool_eq1((let temp___191 =
                                              ((param__f).us_split_fields3).rec__binary_trees__forest__c
                                              : (int,us_rep) farray in
                                              (temp___191[i])), {
                                              us_split_fields1 = {
                                              rec__binary_trees__cell__left =
                                              rliteral;
                                              rec__binary_trees__cell__right =
                                              rliteral;
                                              rec__binary_trees__cell__parent =
                                              rliteral;
                                              rec__binary_trees__cell__position =
                                              of_rep1(2) } }) = true))) then true else false),
  (if (forall i:int. (((1 <= i) and (i <= 100)) -> (let temp___196 =
      to_rep((((let temp___194 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___194[i]))).us_split_fields1).rec__binary_trees__cell__parent)
      : int in ((0 <= temp___196) and
      (temp___196 <= to_rep(((param__f).us_split_fields3).rec__binary_trees__forest__s)))))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) -> (let temp___199 =
      to_rep((((let temp___197 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___197[i]))).us_split_fields1).rec__binary_trees__cell__left)
      : int in ((0 <= temp___199) and
      (temp___199 <= to_rep(((param__f).us_split_fields3).rec__binary_trees__forest__s)))))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) -> (let temp___202 =
      to_rep((((let temp___200 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___200[i]))).us_split_fields1).rec__binary_trees__cell__right)
      : int in ((0 <= temp___202) and
      (temp___202 <= to_rep(((param__f).us_split_fields3).rec__binary_trees__forest__s)))))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) ->
      ((to_rep1((((let temp___204 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___204[i]))).us_split_fields1).rec__binary_trees__cell__position) = 2) ->
      (to_rep((((let temp___203 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___203[i]))).us_split_fields1).rec__binary_trees__cell__parent) = 0)))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) ->
      ((not (to_rep((((let temp___209 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___209[i]))).us_split_fields1).rec__binary_trees__cell__left) = 0)) ->
      ((to_rep1((((let temp___205 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in (temp___205[to_rep((((let temp___206 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___206[i]))).us_split_fields1).rec__binary_trees__cell__left)]))).us_split_fields1).rec__binary_trees__cell__position) = 0) and
      (to_rep((((let temp___207 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in (temp___207[to_rep((((let temp___208 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___208[i]))).us_split_fields1).rec__binary_trees__cell__left)]))).us_split_fields1).rec__binary_trees__cell__parent) = i))))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) ->
      ((not (to_rep((((let temp___214 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___214[i]))).us_split_fields1).rec__binary_trees__cell__right) = 0)) ->
      ((to_rep1((((let temp___210 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in (temp___210[to_rep((((let temp___211 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___211[i]))).us_split_fields1).rec__binary_trees__cell__right)]))).us_split_fields1).rec__binary_trees__cell__position) = 1) and
      (to_rep((((let temp___212 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in (temp___212[to_rep((((let temp___213 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___213[i]))).us_split_fields1).rec__binary_trees__cell__right)]))).us_split_fields1).rec__binary_trees__cell__parent) = i))))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) ->
      (((not (to_rep((((let temp___217 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___217[i]))).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
      (to_rep1((((let temp___218 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___218[i]))).us_split_fields1).rec__binary_trees__cell__position) = 0)) ->
      (to_rep((((let temp___215 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in (temp___215[to_rep((((let temp___216 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___216[i]))).us_split_fields1).rec__binary_trees__cell__parent)]))).us_split_fields1).rec__binary_trees__cell__left) = i)))) then true else false)),
  (if (forall i:int. (((1 <= i) and (i <= 100)) ->
      (((not (to_rep((((let temp___221 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___221[i]))).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
      (to_rep1((((let temp___222 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___222[i]))).us_split_fields1).rec__binary_trees__cell__position) = 1)) ->
      (to_rep((((let temp___219 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in (temp___219[to_rep((((let temp___220 =
      ((param__f).us_split_fields3).rec__binary_trees__forest__c
      : (int,us_rep) farray in
      (temp___220[i]))).us_split_fields1).rec__binary_trees__cell__parent)]))).us_split_fields1).rec__binary_trees__cell__right) = i)))) then true else false))

predicate type_invariant(temp___327: us_rep1) =
  (tree_structure(temp___327) = true)

type us_split_fields4 = { rec__tree_model__path_type__a : us_rep2;
rec__tree_model__path_type__k : bool }

type us_rep3 = { us_split_fields5 : us_split_fields4
}

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic dummy4 : us_rep3

type us_rep4

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic dummy5 : us_rep4

logic contains : us_rep4, int -> bool

logic length1 : us_rep4 -> int

logic is_empty : us_rep4 -> bool

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom :
  (forall i:index_type. ((1 <= index_typeqtint(i)) and
  (index_typeqtint(i) <= 100)))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

logic ole : us_rep4, us_rep4 -> bool

logic included_except : us_rep4, us_rep4, int -> bool

logic remove : us_rep4, int -> us_rep4

logic all_indexes : unit -> us_rep4

logic next : (int,bool) farray -> int

function equal_prefix(param__left: us_rep2, param__right: us_rep2) : bool =
  andb(bool_le(length(param__left), length(param__right)),
  (if (forall n:int. (((1 <= n) and (n <= last(param__left))) ->
      (get(param__left, n) = get(param__right, n)))) then true else false))

logic add : us_rep2, int -> us_rep2

logic value__size7 : int

logic object__size7 : int

logic component__size1 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom7 : (0 <= alignment7)

predicate dynamic_invariant2(temp___expr_414: (int,us_rep3) farray,
  temp___is_init_410: bool, temp___skip_constant_411: bool,
  temp___do_toplevel_412: bool, temp___do_typ_inv_413: bool) =
  (forall temp___415:int. (((1 <= temp___415) and (temp___415 <= 100)) ->
  (length((((temp___expr_414[temp___415])).us_split_fields5).rec__tree_model__path_type__a) <  100)))

predicate default_initial_assumption(temp___expr_419: (int,us_rep3) farray,
  temp___skip_top_level_420: bool) =
  (forall temp___421:int. (((1 <= temp___421) and (temp___421 <= 100)) ->
  ((length((((temp___expr_419[temp___421])).us_split_fields5).rec__tree_model__path_type__a) = 0) and
  ((((temp___expr_419[temp___421])).us_split_fields5).rec__tree_model__path_type__k = of_int(0)))))

logic value__size8 : int

logic object__size8 : int

logic component__size2 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom8 : (0 <= alignment8)

type t129b

logic t129bqtint : t129b -> int

axiom t129bqtaxiom :
  (forall i:t129b. ((1 <= t129bqtint(i)) and (t129bqtint(i) <= 100)))

logic value__size9 : int

logic object__size9 : int

logic component__size3 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom9 : (0 <= alignment9)

logic binary_trees__model__todo__aggregate_def : bool -> (int,bool) farray

axiom valid_root__post_axiom :
  (forall param__f:us_rep1.
  (forall param__i:int [valid_root(param__f, param__i)].
  (((dynamic_invariant1(param__f, true, false, true, true) and
  in_range4(param__i)) and type_invariant(param__f)) ->
  ((size(param__f) <  param__i) -> (not (valid_root(param__f,
  param__i) = true))))))

axiom valid_root__def_axiom :
  (forall param__f:us_rep1.
  (forall param__i:int [valid_root(param__f, param__i)].
  ((valid_root(param__f, param__i) = true) <->
  ((param__i <= to_rep(((param__f).us_split_fields3).rec__binary_trees__forest__s)) and
  (to_rep1((((let temp___332qtunused =
  ((param__f).us_split_fields3).rec__binary_trees__forest__c
  : (int,us_rep) farray in
  (((param__f).us_split_fields3).rec__binary_trees__forest__c[param__i]))).us_split_fields1).rec__binary_trees__cell__position) = 2)))))

axiom last__post_axiom :
  (forall param__container:us_rep2 [last(param__container)].
  in_range3(last(param__container)))

axiom get__post_axiom :
  (forall param__container:us_rep2.
  (forall param__position:int [get(param__container, param__position)].
  ((in_range3(param__position) and ((1 <= param__position) and
  (param__position <= last(param__container)))) ->
  in_range2(get(param__container, param__position)))))

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall param__s1:us_rep2. forall param__s2:us_rep2.
  (forall param__d:int [is_add(param__s1, param__d, param__s2)].
  ((is_add(param__s1, param__d, param__s2) = true) <->
  ((((length(param__s2) - 1) = length(param__s1)) and (olt(param__s1,
  param__s2) = true)) and (get(param__s2, last(param__s2)) = param__d)))))

axiom contains__post_axiom : true

axiom lemma_contains_equivalent__post_axiom :
  (forall param__container:us_rep4.
  (forall param__item:int. ((in_range4(param__item) and
  ((of_int(1) = true) and (not (contains(param__container,
  param__item) = true)))) ->
  (forall e:int. ((in_range4(e) and (contains(param__container,
  e) = true)) -> (not (param__item = e)))))))

axiom length__post_axiom :
  (forall param__container:us_rep4 [length1(param__container)].
  dynamic_invariant(length1(param__container), true, false, true, true))

axiom is_empty__post_axiom :
  (forall param__container:us_rep4 [is_empty(param__container)].
  (let result = is_empty(param__container) : bool in (((result = true) <->
  (forall item:int. (not (in_range4(item) and (contains(param__container,
  item) = true))))) and ((result = true) <->
  (length1(param__container) = 0)))))

axiom ole__post_axiom :
  (forall param__left:us_rep4. forall param__right:us_rep4 [ole(param__left,
  param__right)]. ((ole(param__left, param__right) = true) <->
  (forall item:int. ((in_range4(item) and (contains(param__left,
  item) = true)) -> (contains(param__right, item) = true)))))

axiom included_except__post_axiom :
  (forall param__left:us_rep4. forall param__right:us_rep4.
  (forall param__item:int [included_except(param__left, param__right,
  param__item)]. (in_range4(param__item) -> ((included_except(param__left,
  param__right, param__item) = true) <->
  (forall e:int. ((in_range4(e) and (contains(param__left, e) = true)) ->
  ((contains(param__right, e) = true) or (e = param__item))))))))

 (* "binary_trees.ads", line 45, characters 0-0 *)
goal defqtvc :
  (forall r:(int,us_rep3) farray. (dynamic_invariant1(f, true, false, true,
  true) -> (in_range4(root) -> (type_invariant(f) -> ((valid_root(f,
  root) = true) -> (let o = of_int(0) : bool in
  (forall temp___799:(int,bool) farray.
  (((forall temp___798:int [(temp___799[temp___798])].
    (((1 <= temp___798) and (temp___798 <= 100)) ->
    ((temp___799[temp___798]) = o))) and
  (temp___799 = binary_trees__model__todo__aggregate_def(o))) ->
  (forall todo:(int,bool) farray. ((todo = temp___799) -> (let o1 =
  all_indexes(void) : us_rep4 in
  (((forall i:int. (((1 <= i) and (i <= 100)) -> (contains(o1, i) = true))) and
  (length1(o1) = 100)) ->
  (forall unseen:us_rep4. ((unseen = o1) -> (default_initial_assumption(r,
  false) -> (dynamic_invariant2(r, false, false, true, true) -> (let o2 =
  root : int in (in_range(o2) ->
  (forall i:int. ((i = o2) -> (in_range(i) ->
  (forall todo1:(int,bool) farray. ((todo1 = (todo[root <- of_int(1)])) ->
  (let o3 = (((r[root])).us_split_fields5).rec__tree_model__path_type__a
  : us_rep2 in ((length(o3) <  100) ->
  (forall r1:(int,us_rep3) farray. ((r1 = (r[root <- { us_split_fields5 = {
  rec__tree_model__path_type__a = o3; rec__tree_model__path_type__k =
  of_int(1) } }])) -> ((not (i = 0)) -> (((1 <= i) and (i <= 100)) ->
  (forall todo2:(int,bool) farray. forall unseen1:us_rep4.
  forall r2:(int,us_rep3) farray. forall i1:int. forall j:int.
  ((((todo2[i1]) = true) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) -> (((todo2[j1]) = true) ->
   ((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true)))) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) -> (((todo2[j1]) = true) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   (((((r2[k])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (not (olt((((r2[j1])).us_split_fields5).rec__tree_model__path_type__a,
   (((r2[k])).us_split_fields5).rec__tree_model__path_type__a) = true)))))))) and
  ((((((r2[root])).us_split_fields5).rec__tree_model__path_type__k = true) and
  (length((((r2[root])).us_split_fields5).rec__tree_model__path_type__a) = 0)) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) ->
   ((((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (not (j1 = root))) ->
   ((not (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
   ((((r2[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields5).rec__tree_model__path_type__k = true))))) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) ->
   (if (((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (not (j1 = root))) then (is_add((((r2[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields5).rec__tree_model__path_type__a,
   to_rep1((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__position),
   (((r2[j1])).us_split_fields5).rec__tree_model__path_type__a) = true) else (length((((r2[j1])).us_split_fields5).rec__tree_model__path_type__a) = 0)))) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) -> ((not (j1 = root)) ->
   (if ((not (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
   ((((r2[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields5).rec__tree_model__path_type__k = true)) then (((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true) or
   ((todo2[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent)]) = true)) else (not ((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true)))))) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) ->
   ((((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (not (j1 = root))) ->
   (not ((todo2[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j1])).us_split_fields1).rec__binary_trees__cell__parent)]) = true))))) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) ->
   (((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   ((((((r2[k])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (oeq((((r2[k])).us_split_fields5).rec__tree_model__path_type__a,
   (((r2[j1])).us_split_fields5).rec__tree_model__path_type__a) = true)) ->
   (j1 = k))))))) and
  ((((((r2[root])).us_split_fields5).rec__tree_model__path_type__k = true) and
  (length((((r2[root])).us_split_fields5).rec__tree_model__path_type__a) = 0)) and
  ((forall j1:int. (((1 <= j1) and (j1 <= 100)) ->
   (length((((r2[j1])).us_split_fields5).rec__tree_model__path_type__a) <= (100 - length1(unseen1))))) and
  (forall j1:int. (((1 <= j1) and (j1 <= 100)) -> ((contains(unseen1,
  j1) = true) <->
  ((not ((((r2[j1])).us_split_fields5).rec__tree_model__path_type__k = true)) or
  ((todo2[j1]) = true)))))))))))))))) -> ((andb((if (dynamic_invariant2(r2,
  false, true, true, true) and in_range(i1)) then true else false),
  (if (not (i1 = 0)) then true else false)) = true) -> (in_range4(i1) ->
  (let o4 = remove(unseen1, i1) : us_rep4 in
  (((((length1(o4) = (length1(unseen1) - 1)) and (not (contains(o4,
  i1) = true))) and (ole(o4, unseen1) = true)) and (included_except(unseen1,
  o4, i1) = true)) ->
  (forall unseen2:us_rep4. ((unseen2 = o4) -> (in_range(j) -> (((1 <= i1) and
  (i1 <= 100)) ->
  (forall o5:int.
  ((to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i1])).us_split_fields1).rec__binary_trees__cell__left) = o5) ->
  (forall j1:int. ((j1 = o5) ->
  (forall spark__branch:bool. forall todo3:(int,bool) farray.
  forall r3:(int,us_rep3) farray.
  (((spark__branch = (if (j1 = 0) then false else true)) and
  (if (spark__branch = true) then ((not (is_empty(unseen2) = true)) and
  (((1 <= i1) and (i1 <= 100)) and (let o6 =
  (((r2[i1])).us_split_fields5).rec__tree_model__path_type__a : us_rep2 in
  (let o7 = add(o6, 0) : us_rep2 in ((((last(o7) = (last(o6) + 1)) and
  (get(o7, last(o7)) = 0)) and (equal_prefix(o6, o7) = true)) and
  ((length(o7) <  100) and (((1 <= j1) and (j1 <= 100)) and
  ((r3 = (r2[j1 <- { us_split_fields5 = { rec__tree_model__path_type__a = o7;
  rec__tree_model__path_type__k = of_int(1) } }])) and (((1 <= j1) and
  (j1 <= 100)) and
  (todo3 = (todo2[j1 <- of_int(1)]))))))))))) else ((todo3 = todo2) and
  (r3 = r2)))) ->
  ((forall j2:int. (((1 <= j2) and (j2 <= 100)) ->
   (((((r3[j2])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   ((((((r3[k])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (oeq((((r3[k])).us_split_fields5).rec__tree_model__path_type__a,
   (((r3[j2])).us_split_fields5).rec__tree_model__path_type__a) = true)) ->
   (j2 = k))))))) ->
  ((forall j2:int. (((1 <= j2) and (j2 <= 100)) -> ((((todo3[j2]) = true) and
   (not (i1 = j2))) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   (((((r3[k])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (not (olt((((r3[j2])).us_split_fields5).rec__tree_model__path_type__a,
   (((r3[k])).us_split_fields5).rec__tree_model__path_type__a) = true)))))))) ->
  (((1 <= i1) and (i1 <= 100)) ->
  (forall o6:int.
  ((to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i1])).us_split_fields1).rec__binary_trees__cell__right) = o6) ->
  (forall j2:int. ((j2 = o6) ->
  (forall todo4:(int,bool) farray. forall r4:(int,us_rep3) farray.
  ((exists spark__branch1:bool.
   ((spark__branch1 = (if (j2 = 0) then false else true)) and
   (if (spark__branch1 = true) then ((not (is_empty(unseen2) = true)) and
   (((1 <= i1) and (i1 <= 100)) and (let o7 =
   (((r3[i1])).us_split_fields5).rec__tree_model__path_type__a : us_rep2 in
   (let o8 = add(o7, 1) : us_rep2 in ((((last(o8) = (last(o7) + 1)) and
   (get(o8, last(o8)) = 1)) and (equal_prefix(o7, o8) = true)) and
   ((length(o8) <  100) and (((1 <= j2) and (j2 <= 100)) and
   ((r4 = (r3[j2 <- { us_split_fields5 = { rec__tree_model__path_type__a =
   o8; rec__tree_model__path_type__k = of_int(1) } }])) and (((1 <= j2) and
   (j2 <= 100)) and
   (todo4 = (todo3[j2 <- of_int(1)]))))))))))) else ((todo4 = todo3) and
   (r4 = r3))))) ->
  ((forall j3:int. (((1 <= j3) and (j3 <= 100)) ->
   (((((r4[j3])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   ((((((r4[k])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (oeq((((r4[k])).us_split_fields5).rec__tree_model__path_type__a,
   (((r4[j3])).us_split_fields5).rec__tree_model__path_type__a) = true)) ->
   (j3 = k))))))) ->
  ((forall j3:int. (((1 <= j3) and (j3 <= 100)) -> ((((todo4[j3]) = true) and
   (not (i1 = j3))) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   (((((r4[k])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (not (olt((((r4[j3])).us_split_fields5).rec__tree_model__path_type__a,
   (((r4[k])).us_split_fields5).rec__tree_model__path_type__a) = true)))))))) ->
  (((1 <= i1) and (i1 <= 100)) ->
  (forall todo5:(int,bool) farray. ((todo5 = (todo4[i1 <- of_int(0)])) ->
  (let o7 = next(todo5) : int in ((in_range(o7) and
  (if (o7 = 0) then (forall i2:int. (((1 <= i2) and (i2 <= 100)) ->
                    (not ((todo5[i2]) = true)))) else ((todo5[o7]) = true))) ->
  (forall i2:int. ((i2 = o7) -> ((not (i2 = 0)) -> (((1 <= i2) and
  (i2 <= 100)) -> ((length1(unseen2) <  length1(unseen1)) ->
  (((todo5[i2]) = true) ->
  ((forall j3:int. (((1 <= j3) and (j3 <= 100)) -> (((todo5[j3]) = true) ->
   ((((r4[j3])).us_split_fields5).rec__tree_model__path_type__k = true)))) ->
  ((forall j3:int. (((1 <= j3) and (j3 <= 100)) -> (((todo5[j3]) = true) ->
   (forall k:int. (((1 <= k) and (k <= 100)) ->
   (((((r4[k])).us_split_fields5).rec__tree_model__path_type__k = true) ->
   (not (olt((((r4[j3])).us_split_fields5).rec__tree_model__path_type__a,
   (((r4[k])).us_split_fields5).rec__tree_model__path_type__a) = true)))))))) ->
  ((((((r4[root])).us_split_fields5).rec__tree_model__path_type__k = true) and
  (length((((r4[root])).us_split_fields5).rec__tree_model__path_type__a) = 0)) ->
  ((forall j3:int. (((1 <= j3) and (j3 <= 100)) ->
   ((((((r4[j3])).us_split_fields5).rec__tree_model__path_type__k = true) and
   (not (j3 = root))) ->
   ((not (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j3])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
   ((((r4[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j3])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields5).rec__tree_model__path_type__k = true))))) ->
  (forall j3:int. (((1 <= j3) and (j3 <= 100)) ->
  ((((((r4[j3])).us_split_fields5).rec__tree_model__path_type__k = true) and
  (not (j3 = root))) ->
  (olt((((r4[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[j3])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields5).rec__tree_model__path_type__a,
  (((r4[j3])).us_split_fields5).rec__tree_model__path_type__a) = true)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
