;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "lsl"
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; "pow2"
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; "lsl_bv_is_lsl"
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; "bit_test"
(declare-fun bit_test ((_ BitVec 64)
  (_ BitVec 64)) Bool)

;; "bit_test__function_guard"
(declare-fun bit_test__function_guard (Bool
  (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const value (_ BitVec 64))

(declare-const pos (_ BitVec 64))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

;; "in_range"
(define-fun in_range ((x (_ BitVec 64))) Bool
  (and (bvule #x0000000000000000 x) (bvule x #x000000000000003F)))

;; "bit_test__post_axiom"
(assert
  (forall ((param__value (_ BitVec 64)) (param__pos (_ BitVec 64)))
    (! (=>
         (in_range param__pos)
         (let ((result (bit_test param__value param__pos)))
           (=>
             (bit_test__function_guard result param__value param__pos)
             (=
               (= result true)
               (not
                 (= (bvand param__value (let ((temp___186qtunused (bv2nat param__pos)))
                                          (ite (< (bv2nat param__pos) 18446744073709551616)
                                            (bvshl #x0000000000000001 param__pos)
                                            #x0000000000000000))) #x0000000000000000)))))) :pattern (
    (bit_test
      param__value
      param__pos)) )))

;; Goal "def'vc"
;; File "bitset.ads", line 18, characters 0-0
(assert
  (not
  (=>
    (in_range pos)
    (forall ((res (_ BitVec 64)))
      (=>
        (= res value)
        (forall ((o (_ BitVec 64)))
          (=>
            (let ((temp___196 (bv2nat pos)))
              (ite (< temp___196 18446744073709551616)
                (= o (bvshl #x0000000000000001 ((_ int2bv 64) temp___196)))
                (= o #x0000000000000000)))
            (forall ((res1 (_ BitVec 64)))
              (=>
                (= res1 (bvor res o))
                (forall ((bitset__bit_set__result (_ BitVec 64)))
                  (=>
                    (= bitset__bit_set__result res1)
                    (=>
                      (bit_test__function_guard
                        (bit_test bitset__bit_set__result pos)
                        bitset__bit_set__result
                        pos)
                      (= (bit_test bitset__bit_set__result pos) true)))))))))))))

(check-sat)
(get-info :reason-unknown)
