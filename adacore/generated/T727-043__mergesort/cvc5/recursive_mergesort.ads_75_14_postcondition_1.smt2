;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

;; "has_key"
(declare-fun has_key (us_rep
  Int) Bool)

;; "get"
(declare-fun get (us_rep
  Int) Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 Int)

;; "length"
(declare-fun length (us_rep) Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_266 Int) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool) (temp___do_typ_inv_265 Bool)) Bool
  (=>
    (= temp___is_init_262 true)
    (=> (= temp___do_toplevel_264 true) (<= 0 temp___expr_266))))

;; "is_empty"
(declare-fun is_empty (us_rep) Bool)

;; "keys_included_except"
(declare-fun keys_included_except (us_rep
  us_rep
  Int) Bool)

;; "elements_equal"
(declare-fun elements_equal (us_rep
  us_rep) Bool)

;; "add"
(declare-fun add (us_rep
  Int
  Int) us_rep)

;; "keys_included"
(declare-fun keys_included (us_rep
  us_rep) Bool)

;; "same_keys"
(define-fun same_keys ((param__left us_rep) (param__right us_rep)) Bool
  (and (keys_included param__left param__right) (keys_included
                                                  param__right
                                                  param__left)))

;; "elements_equal_except"
(declare-fun elements_equal_except (us_rep
  us_rep
  Int) Bool)

;; "set"
(declare-fun set (us_rep
  Int
  Int) us_rep)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy2 us_rep)

;; "is_add"
(declare-fun is_add (us_rep
  Int
  us_rep) Bool)

;; "ole"
(declare-fun ole (us_rep
  us_rep) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int integer))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int integer)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const a us_t)

(declare-const i Int)

(declare-const j Int)

;; "occurrences"
(declare-fun occurrences (us_t
  Int
  Int) us_rep)

;; "occurrences__function_guard"
(declare-fun occurrences__function_guard (us_rep
  us_t
  Int
  Int) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_228 us_t) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool) (temp___do_typ_inv_227 Bool)) Bool
  (=>
    (not (= temp___skip_constant_225 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_228)
      (last temp___expr_228))))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_324 us_rep) (temp___skip_top_level_325 Bool)) Bool
  (=>
    (not (= temp___skip_top_level_325 true))
    (= (is_empty temp___expr_324) true)))

;; "has_key__post_axiom"
(assert true)

;; "lemma_has_key_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (=>
        (and
          (in_range param__key)
          (and
            (= (distinct 1 0) true)
            (not (= (has_key param__container param__key) true))))
        (forall ((k Int))
          (=>
            (and (in_range k) (= (has_key param__container k) true))
            (not (= param__key k))))))))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (! (=>
           (and
             (in_range param__key)
             (= (has_key param__container param__key) true))
           (in_range2 (get param__container param__key))) :pattern ((get
                                                                    param__container
                                                                    param__key)) ))))

;; "lemma_get_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key_1 Int) (param__key_2 Int))
      (=>
        (and
          (and (in_range param__key_1) (in_range param__key_2))
          (and
            (and (= (distinct 1 0) true) (= param__key_1 param__key_2))
            (or
              (= (has_key param__container param__key_1) true)
              (= (has_key param__container param__key_2) true))))
        (= (get param__container param__key_1) (get
                                                 param__container
                                                 param__key_2))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (dynamic_invariant (length param__container) true false true true) :pattern (
    (length
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((key Int))
               (not
                 (and (in_range key) (= (has_key param__container key) true)))))
           (= (= result true) (= (length param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (and
               (= (has_key param__right key) true)
               (= (get param__right key) (get param__left key)))))) :pattern (
    (ole
      param__left
      param__right)) )))

;; "keys_included__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (keys_included param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (= (has_key param__right key) true)))) :pattern ((keys_included
                                                                param__left
                                                                param__right)) )))

;; "keys_included_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (keys_included_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (= (has_key param__right key) true)))))) :pattern (
      (keys_included_except
        param__left
        param__right
        param__new_key)) ))))

;; "elements_equal__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (elements_equal param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (and
               (= (has_key param__right key) true)
               (= (get param__left key) (get param__right key)))))) :pattern (
    (elements_equal
      param__left
      param__right)) )))

;; "elements_equal_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (elements_equal_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (and
                     (= (has_key param__right key) true)
                     (= (get param__left key) (get param__right key)))))))) :pattern (
      (elements_equal_except
        param__left
        param__right
        param__new_key)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__occ us_rep) (param__res us_rep))
    (forall ((param__k Int))
      (! (=
           (= (is_add param__occ param__k param__res) true)
           (ite (= (has_key param__occ param__k) true)
             (and
               (and
                 (= (same_keys param__res param__occ) true)
                 (= (- (get param__res param__k) 1) (get param__occ param__k)))
               (= (elements_equal_except param__res param__occ param__k) true))
             (and
               (and
                 (and
                   (= (has_key param__res param__k) true)
                   (= (get param__res param__k) 1))
                 (= (ole param__occ param__res) true))
               (= (keys_included_except param__res param__occ param__k) true)))) :pattern (
      (is_add
        param__occ
        param__k
        param__res)) ))))

;; Goal "def'vc"
;; File "recursive_mergesort.ads", line 72, characters 0-0
(assert
  (not
  (forall ((res us_rep))
    (=>
      (dynamic_invariant1 a true false true true)
      (=>
        (in_range2 i)
        (=>
          (in_range1 j)
          (=>
            (or
              (< j i)
              (and
                (and (<= (first a) i) (<= i (last a)))
                (and (<= (first a) j) (<= j (last a)))))
            (=>
              (default_initial_assumption res false)
              (forall ((res1 us_rep))
                (=>
                  (forall ((temp___compl_568 us_t) (temp___compl_569 Int) (temp___330 Int))
                    (occurrences__function_guard
                      (occurrences
                        temp___compl_568
                        temp___compl_569
                        temp___330)
                      temp___compl_568
                      temp___compl_569
                      temp___330))
                  (=>
                    (exists ((spark__branch Bool))
                      (and
                        (= spark__branch (ite (<= i j) true false))
                        (ite (= spark__branch true)
                          (let ((temp___compl_568 a))
                            (let ((temp___compl_569 i))
                              (let ((o (- j 1)))
                                (and
                                  (in_range1 o)
                                  (let ((temp___571 (occurrences
                                                      temp___compl_568
                                                      temp___compl_569
                                                      o)))
                                    (and
                                      (and
                                        (occurrences__function_guard
                                          temp___571
                                          temp___compl_568
                                          temp___compl_569
                                          o)
                                        (and
                                          (or
                                            (< o temp___compl_569)
                                            (and
                                              (<= (length temp___571) (+ (- o temp___compl_569) 1))
                                              (forall ((k Int))
                                                (=>
                                                  (and
                                                    (in_range k)
                                                    (= (has_key temp___571 k) true))
                                                  (<= (get temp___571 k) (+ (- o temp___compl_569) 1))))))
                                          (ite (= (< o temp___compl_569) true)
                                            (and
                                              (= (is_empty temp___571) true)
                                              (= (length temp___571) 0))
                                            (= (is_add
                                                 (let ((temp___330 (- o 1)))
                                                   (occurrences
                                                     temp___compl_568
                                                     temp___compl_569
                                                     temp___330))
                                                 (to_rep
                                                   (select (to_array
                                                             temp___compl_568) o))
                                                 temp___571) true))))
                                      (exists ((res2 us_rep))
                                        (and
                                          (= res2 temp___571)
                                          (and
                                            (and
                                              (<= (first a) j)
                                              (<= j (last a)))
                                            (exists ((o1 Int))
                                              (and
                                                (= (to_rep
                                                     (select (to_array a) 
                                                     j)) o1)
                                                (exists ((spark__branch1 Bool))
                                                  (and
                                                    (= spark__branch1 
                                                    (has_key
                                                      res2
                                                      o1))
                                                    (ite (= spark__branch1 true)
                                                      (and
                                                        (and
                                                          (<= (first a) 
                                                          j)
                                                          (<= j (last a)))
                                                        (exists ((o2 Int))
                                                          (and
                                                            (= (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   a) 
                                                                 j)) o2)
                                                            (let ((o3 
                                                              (get
                                                                res2
                                                                o2)))
                                                              (and
                                                                (in_range2
                                                                  o3)
                                                                (let ((o4 (+ o3 1)))
                                                                  (and
                                                                    (in_range
                                                                    o4)
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) 
                                                                    j)
                                                                    (<= 
                                                                    j (last
                                                                    a)))
                                                                    (exists 
                                                                    ((o5 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) 
                                                                    j)) o5)
                                                                    (let ((o6 
                                                                    (set
                                                                    res2
                                                                    o5
                                                                    o4)))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (length
                                                                    res2) 
                                                                    (length
                                                                    o6))
                                                                    (= 
                                                                    (get
                                                                    o6
                                                                    o5) o4))
                                                                    (= 
                                                                    (same_keys
                                                                    res2
                                                                    o6) true))
                                                                    (= 
                                                                    (elements_equal_except
                                                                    res2
                                                                    o6
                                                                    o5) true))
                                                                    (= res1 o6)))))))))))))
                                                      (and
                                                        (and
                                                          (<= (first a) 
                                                          j)
                                                          (<= j (last a)))
                                                        (exists ((o2 Int))
                                                          (and
                                                            (= (to_rep
                                                                 (select 
                                                                 (to_array
                                                                   a) 
                                                                 j)) o2)
                                                            (let ((o3 
                                                              (add
                                                                res2
                                                                o2
                                                                1)))
                                                              (and
                                                                (and
                                                                  (and
                                                                    (and
                                                                    (and
                                                                    (= (+ 
                                                                    (length
                                                                    res2) 1) 
                                                                    (length
                                                                    o3))
                                                                    (= 
                                                                    (has_key
                                                                    o3
                                                                    o2) true))
                                                                    (= 
                                                                    (get
                                                                    o3
                                                                    o2) 1))
                                                                    (= 
                                                                    (elements_equal
                                                                    res2
                                                                    o3) true))
                                                                  (= 
                                                                  (keys_included_except
                                                                    o3
                                                                    res2
                                                                    o2) true))
                                                                (= res1 o3))))))))))))))))))))
                          (= res1 res))))
                    (forall ((recursive_mergesort__occurrences__result us_rep))
                      (=>
                        (= recursive_mergesort__occurrences__result res1)
                        (=>
                          (=>
                            (< j i)
                            (and
                              (= (is_empty
                                   recursive_mergesort__occurrences__result) true)
                              (= (length
                                   recursive_mergesort__occurrences__result) 0)))
                          (=>
                            (forall ((temp___587 Int))
                              (occurrences__function_guard
                                (occurrences a i temp___587)
                                a
                                i
                                temp___587))
                            (=>
                              (=>
                                (not (< j i))
                                (= (is_add
                                     (let ((temp___587 (- j 1)))
                                       (occurrences a i temp___587))
                                     (to_rep (select (to_array a) j))
                                     recursive_mergesort__occurrences__result) true))
                              (or
                                (< j i)
                                (and
                                  (<= (length
                                        recursive_mergesort__occurrences__result) (+ (- 
                                  j i) 1))
                                  (forall ((k Int))
                                    (=>
                                      (and
                                        (in_range k)
                                        (= (has_key
                                             recursive_mergesort__occurrences__result
                                             k) true))
                                      (<= (get
                                            recursive_mergesort__occurrences__result
                                            k) (+ (- j i) 1))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
