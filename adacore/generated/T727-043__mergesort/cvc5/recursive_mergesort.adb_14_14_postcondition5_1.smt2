;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

;; "is_merge"
(declare-fun is_merge (us_rep
  us_rep
  us_rep) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep)

;; "has_key"
(declare-fun has_key (us_rep
  Int) Bool)

;; "get"
(declare-fun get (us_rep
  Int) Int)

;; "keys_included"
(declare-fun keys_included (us_rep
  us_rep) Bool)

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int integer))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int integer)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "occurrences"
(declare-fun occurrences (us_t
  Int
  Int) us_rep)

;; "occurrences__function_guard"
(declare-fun occurrences__function_guard (us_rep
  us_t
  Int
  Int) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 Int)

;; "length"
(declare-fun length (us_rep) Int)

;; "is_empty"
(declare-fun is_empty (us_rep) Bool)

;; "is_add"
(declare-fun is_add (us_rep
  Int
  us_rep) Bool)

(declare-const a us_t)

(declare-const l Int)

(declare-const m Int)

(declare-const r Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_228 us_t) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool) (temp___do_typ_inv_227 Bool)) Bool
  (=>
    (not (= temp___skip_constant_225 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_228)
      (last temp___expr_228))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "ole"
(declare-fun ole (us_rep
  us_rep) Bool)

;; "same_keys"
(define-fun same_keys ((param__left us_rep) (param__right us_rep)) Bool
  (and (keys_included param__left param__right) (keys_included
                                                  param__right
                                                  param__left)))

;; "keys_included_except"
(declare-fun keys_included_except (us_rep
  us_rep
  Int) Bool)

;; "elements_equal_except"
(declare-fun elements_equal_except (us_rep
  us_rep
  Int) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_266 Int) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool) (temp___do_typ_inv_265 Bool)) Bool
  (=>
    (= temp___is_init_262 true)
    (=> (= temp___do_toplevel_264 true) (<= 0 temp___expr_266))))

;; "has_key__post_axiom"
(assert true)

;; "lemma_has_key_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (=>
        (and
          (in_range param__key)
          (and
            (= (distinct 1 0) true)
            (not (= (has_key param__container param__key) true))))
        (forall ((k Int))
          (=>
            (and (in_range k) (= (has_key param__container k) true))
            (not (= param__key k))))))))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (! (=>
           (and
             (in_range param__key)
             (= (has_key param__container param__key) true))
           (in_range1 (get param__container param__key))) :pattern ((get
                                                                    param__container
                                                                    param__key)) ))))

;; "lemma_get_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key_1 Int) (param__key_2 Int))
      (=>
        (and
          (and (in_range param__key_1) (in_range param__key_2))
          (and
            (and (= (distinct 1 0) true) (= param__key_1 param__key_2))
            (or
              (= (has_key param__container param__key_1) true)
              (= (has_key param__container param__key_2) true))))
        (= (get param__container param__key_1) (get
                                                 param__container
                                                 param__key_2))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (dynamic_invariant1 (length param__container) true false true true) :pattern (
    (length
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((key Int))
               (not
                 (and (in_range key) (= (has_key param__container key) true)))))
           (= (= result true) (= (length param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (and
               (= (has_key param__right key) true)
               (= (get param__right key) (get param__left key)))))) :pattern (
    (ole
      param__left
      param__right)) )))

;; "keys_included__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (keys_included param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (= (has_key param__right key) true)))) :pattern ((keys_included
                                                                param__left
                                                                param__right)) )))

;; "keys_included_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (keys_included_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (= (has_key param__right key) true)))))) :pattern (
      (keys_included_except
        param__left
        param__right
        param__new_key)) ))))

;; "elements_equal_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (elements_equal_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (and
                     (= (has_key param__right key) true)
                     (= (get param__left key) (get param__right key)))))))) :pattern (
      (elements_equal_except
        param__left
        param__right
        param__new_key)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__occ us_rep) (param__res us_rep))
    (forall ((param__k Int))
      (! (=
           (= (is_add param__occ param__k param__res) true)
           (ite (= (has_key param__occ param__k) true)
             (and
               (and
                 (= (same_keys param__res param__occ) true)
                 (= (- (get param__res param__k) 1) (get param__occ param__k)))
               (= (elements_equal_except param__res param__occ param__k) true))
             (and
               (and
                 (and
                   (= (has_key param__res param__k) true)
                   (= (get param__res param__k) 1))
                 (= (ole param__occ param__res) true))
               (= (keys_included_except param__res param__occ param__k) true)))) :pattern (
      (is_add
        param__occ
        param__k
        param__res)) ))))

;; "is_merge__post_axiom"
(assert true)

;; "is_merge__def_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep) (param__result__ us_rep))
    (! (=
         (= (is_merge param__left param__right param__result__) true)
         (and
           (and
             (= (keys_included param__left param__result__) true)
             (= (keys_included param__right param__result__) true))
           (forall ((k Int))
             (=>
               (and (in_range k) (= (has_key param__result__ k) true))
               (ite (and
                      (= (has_key param__left k) true)
                      (= (has_key param__right k) true))
                 (= (- (get param__result__ k) (get param__right k)) 
                 (get
                   param__left
                   k))
                 (ite (= (has_key param__left k) true)
                   (= (get param__result__ k) (get param__left k))
                   (and
                     (= (has_key param__right k) true)
                     (= (get param__result__ k) (get param__right k))))))))) :pattern (
    (is_merge
      param__left
      param__right
      param__result__)) )))

;; "occurrences__post_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__i Int) (param__j Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant param__a true false true true)
                 (in_range1 param__i))
               (in_range3 param__j))
             (or
               (< param__j param__i)
               (and
                 (and
                   (<= (first param__a) param__i)
                   (<= param__i (last param__a)))
                 (and
                   (<= (first param__a) param__j)
                   (<= param__j (last param__a))))))
           (let ((result (occurrences param__a param__i param__j)))
             (=>
               (occurrences__function_guard
                 result
                 param__a
                 param__i
                 param__j)
               (and
                 (or
                   (< param__j param__i)
                   (and
                     (<= (length result) (+ (- param__j param__i) 1))
                     (forall ((k Int))
                       (=>
                         (and (in_range k) (= (has_key result k) true))
                         (<= (get result k) (+ (- param__j param__i) 1))))))
                 (and
                   (forall ((temp___336 Int))
                     (occurrences__function_guard
                       (occurrences param__a param__i temp___336)
                       param__a
                       param__i
                       temp___336))
                   (ite (< param__j param__i)
                     (and (= (is_empty result) true) (= (length result) 0))
                     (= (is_add
                          (let ((temp___336 (- param__j 1)))
                            (occurrences param__a param__i temp___336))
                          (to_rep (select (to_array param__a) param__j))
                          result) true))))))) :pattern ((occurrences
                                                          param__a
                                                          param__i
                                                          param__j)) ))))

;; Goal "def'vc"
;; File "recursive_mergesort.adb", line 9, characters 0-0
(assert
  (not
  (=>
    (dynamic_invariant a true false true true)
    (=>
      (in_range1 l)
      (=>
        (in_range1 m)
        (=>
          (in_range1 r)
          (=>
            (and
              (and
                (and
                  (and (<= (first a) l) (<= l (last a)))
                  (and (<= (first a) r) (<= r (last a))))
                (<= l r))
              (and (<= l m) (<= m r)))
            (=>
              (forall ((temp___compl_991 us_t) (temp___compl_992 Int) (temp___compl_993 Int))
                (occurrences__function_guard
                  (occurrences
                    temp___compl_991
                    temp___compl_992
                    temp___compl_993)
                  temp___compl_991
                  temp___compl_992
                  temp___compl_993))
              (=>
                (forall ((temp___compl_991 us_t) (o Int) (temp___429 Int))
                  (occurrences__function_guard
                    (occurrences temp___compl_991 temp___429 o)
                    temp___compl_991
                    temp___429
                    o))
                (=>
                  (forall ((temp___compl_991 us_t) (temp___compl_992 Int) (o Int))
                    (occurrences__function_guard
                      (occurrences temp___compl_991 temp___compl_992 o)
                      temp___compl_991
                      temp___compl_992
                      o))
                  (=>
                    (exists ((spark__branch Bool))
                      (and
                        (= spark__branch (ite (= m r) false true))
                        (=>
                          (= spark__branch true)
                          (let ((temp___compl_991 a))
                            (let ((temp___compl_992 l))
                              (let ((temp___compl_993 m))
                                (let ((o (- r 1)))
                                  (and
                                    (in_range1 o)
                                    (= (is_merge
                                         (occurrences
                                           temp___compl_991
                                           temp___compl_992
                                           temp___compl_993)
                                         (let ((temp___429 (+ temp___compl_993 1)))
                                           (occurrences
                                             temp___compl_991
                                             temp___429
                                             o))
                                         (occurrences
                                           temp___compl_991
                                           temp___compl_992
                                           o)) true)))))))))
                    (forall ((k Int))
                      (=>
                        (forall ((temp___1001 Int))
                          (occurrences__function_guard
                            (occurrences a l temp___1001)
                            a
                            l
                            temp___1001))
                        (=>
                          (and
                            (in_range k)
                            (= (has_key
                                 (let ((temp___1001 r))
                                   (occurrences a l temp___1001))
                                 k) true))
                          (=>
                            (forall ((temp___996 Int))
                              (occurrences__function_guard
                                (occurrences a l temp___996)
                                a
                                l
                                temp___996))
                            (=>
                              (forall ((temp___999 Int) (temp___998 Int))
                                (occurrences__function_guard
                                  (occurrences a temp___998 temp___999)
                                  a
                                  temp___998
                                  temp___999))
                              (=>
                                (not
                                  (and
                                    (= (has_key
                                         (let ((temp___996 m))
                                           (occurrences a l temp___996))
                                         k) true)
                                    (= (has_key
                                         (let ((temp___999 r))
                                           (let ((temp___998 (+ m 1)))
                                             (occurrences
                                               a
                                               temp___998
                                               temp___999)))
                                         k) true)))
                                (=>
                                  (forall ((temp___996 Int))
                                    (occurrences__function_guard
                                      (occurrences a l temp___996)
                                      a
                                      l
                                      temp___996))
                                  (=>
                                    (not
                                      (= (has_key
                                           (let ((temp___996 m))
                                             (occurrences a l temp___996))
                                           k) true))
                                    (=>
                                      (forall ((temp___999 Int) (temp___998 Int))
                                        (occurrences__function_guard
                                          (occurrences
                                            a
                                            temp___998
                                            temp___999)
                                          a
                                          temp___998
                                          temp___999))
                                      (= (has_key
                                           (let ((temp___999 r))
                                             (let ((temp___998 (+ m 1)))
                                               (occurrences
                                                 a
                                                 temp___998
                                                 temp___999)))
                                           k) true)))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
