;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "length"
(define-fun length ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

;; "oeq"
(declare-fun oeq (us_rep
  us_rep) Bool)

;; "has_key"
(declare-fun has_key (us_rep
  Int) Bool)

;; "get"
(declare-fun get (us_rep
  Int) Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep)

;; "is_merge"
(declare-fun is_merge (us_rep
  us_rep
  us_rep) Bool)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int integer))))))

;; "slide"
(declare-fun slide ((Array Int integer)
  Int
  Int) (Array Int integer))

;; "slide_eq"
(assert
  (forall ((a (Array Int integer)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array Int integer)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; "bool_eq"
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_168 Int))
           (=>
             (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last))
             (= (to_rep (select a temp___idx_168)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_168)))))))
    true
    false))

;; "bool_eq_rev"
(assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_168 Int))
            (=>
              (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last))
              (= (to_rep (select a temp___idx_168)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_168)))))))))))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep (rec__first (mk f l))) f)
             (= (to_rep (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int integer))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int integer)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "occurrences"
(declare-fun occurrences (us_t
  Int
  Int) us_rep)

;; "occurrences__function_guard"
(declare-fun occurrences__function_guard (us_rep
  us_t
  Int
  Int) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 Int)

;; "length"
(declare-fun length1 (us_rep) Int)

;; "is_empty"
(declare-fun is_empty (us_rep) Bool)

;; "is_add"
(declare-fun is_add (us_rep
  Int
  us_rep) Bool)

;; "is_sorted"
(define-fun is_sorted ((param__a us_t)) Bool
  (ite (forall ((i Int))
         (=>
           (and (<= (first param__a) i) (<= i (last param__a)))
           (forall ((j Int))
             (=>
               (and (<= (first param__a) j) (<= j (last param__a)))
               (=>
                 (<= i j)
                 (<= (to_rep (select (to_array param__a) i)) (to_rep
                                                               (select 
                                                               (to_array
                                                                 param__a) j))))))))
    true
    false))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_228 us_t) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool) (temp___do_typ_inv_227 Bool)) Bool
  (=>
    (not (= temp___skip_constant_225 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_228)
      (last temp___expr_228))))

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const l Int)

(declare-const r Int)

(declare-const a_old us_t)

(declare-const a_interm__first integer)

(declare-const a_interm__last integer)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_499 us_t) (temp___is_init_495 Bool) (temp___skip_constant_496 Bool) (temp___do_toplevel_497 Bool) (temp___do_typ_inv_498 Bool)) Bool
  (=>
    (not (= temp___skip_constant_496 true))
    (and
      (and
        (dynamic_property
          (to_rep a__first)
          (to_rep a__last)
          (first temp___expr_499)
          (last temp___expr_499))
        (= (first temp___expr_499) (to_rep a__first)))
      (= (last temp___expr_499) (to_rep a__last)))))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_505 us_t) (temp___skip_top_level_506 Bool)) Bool
  (and
    (= (first temp___expr_505) (to_rep a__first))
    (= (last temp___expr_505) (to_rep a__last))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "ole"
(declare-fun ole (us_rep
  us_rep) Bool)

;; "keys_included"
(declare-fun keys_included (us_rep
  us_rep) Bool)

;; "same_keys"
(define-fun same_keys ((param__left us_rep) (param__right us_rep)) Bool
  (and (keys_included param__left param__right) (keys_included
                                                  param__right
                                                  param__left)))

;; "keys_included_except"
(declare-fun keys_included_except (us_rep
  us_rep
  Int) Bool)

;; "elements_equal_except"
(declare-fun elements_equal_except (us_rep
  us_rep
  Int) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_266 Int) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool) (temp___do_typ_inv_265 Bool)) Bool
  (=>
    (= temp___is_init_262 true)
    (=> (= temp___do_toplevel_264 true) (<= 0 temp___expr_266))))

;; "has_key__post_axiom"
(assert true)

;; "lemma_has_key_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (=>
        (and
          (in_range param__key)
          (and
            (= (distinct 1 0) true)
            (not (= (has_key param__container param__key) true))))
        (forall ((k Int))
          (=>
            (and (in_range k) (= (has_key param__container k) true))
            (not (= param__key k))))))))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (! (=>
           (and
             (in_range param__key)
             (= (has_key param__container param__key) true))
           (in_range1 (get param__container param__key))) :pattern ((get
                                                                    param__container
                                                                    param__key)) ))))

;; "lemma_get_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key_1 Int) (param__key_2 Int))
      (=>
        (and
          (and (in_range param__key_1) (in_range param__key_2))
          (and
            (and (= (distinct 1 0) true) (= param__key_1 param__key_2))
            (or
              (= (has_key param__container param__key_1) true)
              (= (has_key param__container param__key_2) true))))
        (= (get param__container param__key_1) (get
                                                 param__container
                                                 param__key_2))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (dynamic_invariant2 (length1 param__container) true false true true) :pattern (
    (length1
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((key Int))
               (not
                 (and (in_range key) (= (has_key param__container key) true)))))
           (= (= result true) (= (length1 param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (and
               (= (has_key param__right key) true)
               (= (get param__right key) (get param__left key)))))) :pattern (
    (ole
      param__left
      param__right)) )))

;; "oeq__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (oeq param__left param__right) true)
         (and
           (forall ((key Int))
             (=>
               (and (in_range key) (= (has_key param__left key) true))
               (and
                 (= (has_key param__right key) true)
                 (= (get param__right key) (get param__left key)))))
           (forall ((key Int))
             (=>
               (and (in_range key) (= (has_key param__right key) true))
               (= (has_key param__left key) true))))) :pattern ((oeq
                                                                  param__left
                                                                  param__right)) )))

;; "keys_included__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (keys_included param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (= (has_key param__right key) true)))) :pattern ((keys_included
                                                                param__left
                                                                param__right)) )))

;; "keys_included_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (keys_included_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (= (has_key param__right key) true)))))) :pattern (
      (keys_included_except
        param__left
        param__right
        param__new_key)) ))))

;; "elements_equal_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (elements_equal_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (and
                     (= (has_key param__right key) true)
                     (= (get param__left key) (get param__right key)))))))) :pattern (
      (elements_equal_except
        param__left
        param__right
        param__new_key)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__occ us_rep) (param__res us_rep))
    (forall ((param__k Int))
      (! (=
           (= (is_add param__occ param__k param__res) true)
           (ite (= (has_key param__occ param__k) true)
             (and
               (and
                 (= (same_keys param__res param__occ) true)
                 (= (- (get param__res param__k) 1) (get param__occ param__k)))
               (= (elements_equal_except param__res param__occ param__k) true))
             (and
               (and
                 (and
                   (= (has_key param__res param__k) true)
                   (= (get param__res param__k) 1))
                 (= (ole param__occ param__res) true))
               (= (keys_included_except param__res param__occ param__k) true)))) :pattern (
      (is_add
        param__occ
        param__k
        param__res)) ))))

;; "is_merge__post_axiom"
(assert true)

;; "is_merge__def_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep) (param__result__ us_rep))
    (! (=
         (= (is_merge param__left param__right param__result__) true)
         (and
           (and
             (= (keys_included param__left param__result__) true)
             (= (keys_included param__right param__result__) true))
           (forall ((k Int))
             (=>
               (and (in_range k) (= (has_key param__result__ k) true))
               (ite (and
                      (= (has_key param__left k) true)
                      (= (has_key param__right k) true))
                 (= (- (get param__result__ k) (get param__right k)) 
                 (get
                   param__left
                   k))
                 (ite (= (has_key param__left k) true)
                   (= (get param__result__ k) (get param__left k))
                   (and
                     (= (has_key param__right k) true)
                     (= (get param__result__ k) (get param__right k))))))))) :pattern (
    (is_merge
      param__left
      param__right
      param__result__)) )))

;; "occurrences__post_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__i Int) (param__j Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant param__a true false true true)
                 (in_range1 param__i))
               (in_range3 param__j))
             (or
               (< param__j param__i)
               (and
                 (and
                   (<= (first param__a) param__i)
                   (<= param__i (last param__a)))
                 (and
                   (<= (first param__a) param__j)
                   (<= param__j (last param__a))))))
           (let ((result (occurrences param__a param__i param__j)))
             (and
               (forall ((temp___336 Int))
                 (occurrences__function_guard
                   (occurrences param__a param__i temp___336)
                   param__a
                   param__i
                   temp___336))
               (=>
                 (occurrences__function_guard
                   result
                   param__a
                   param__i
                   param__j)
                 (and
                   (or
                     (< param__j param__i)
                     (and
                       (<= (length1 result) (+ (- param__j param__i) 1))
                       (forall ((k Int))
                         (=>
                           (and (in_range k) (= (has_key result k) true))
                           (<= (get result k) (+ (- param__j param__i) 1))))))
                   (ite (< param__j param__i)
                     (and (= (is_empty result) true) (= (length1 result) 0))
                     (= (is_add
                          (let ((temp___336 (- param__j 1)))
                            (occurrences param__a param__i temp___336))
                          (to_rep (select (to_array param__a) param__j))
                          result) true))))))) :pattern ((occurrences
                                                          param__a
                                                          param__i
                                                          param__j)) ))))

(declare-const a (Array Int integer))

(declare-const m Int)

(declare-const a_interm (Array Int integer))

;; "a_interm'unused"
(define-fun a_intermqtunused () map__ref
  (map__refqtmk a_interm))

;; "m'unused"
(define-fun mqtunused () int__ref
  (int__refqtmk m))

;; "a"
(define-fun a1 () map__ref
  (map__refqtmk a))

;; "a'unused"
(define-fun aqtunused () map__ref
  a1)

;; "Assume"
(assert (dynamic_property 1 2147483646 (to_rep a__first) (to_rep a__last)))

;; "Assume"
(assert (in_range1 l))

;; "Assume"
(assert (in_range1 r))

;; "Assume"
(assert
  (and
    (and
      (<= 1 (length (to_rep a__first) (to_rep a__last)))
      (and
        (and (<= (to_rep a__first) l) (<= l (to_rep a__last)))
        (and (<= (to_rep a__first) r) (<= r (to_rep a__last)))))
    (<= l r)))

;; "recursive_mergesort__recursive_mergesort__variant_2"
(define-fun recursive_mergesort__recursive_mergesort__variant_2 () Int
  r)

;; "recursive_mergesort__recursive_mergesort__variant"
(define-fun recursive_mergesort__recursive_mergesort__variant () Int
  l)

(declare-const o Int)

;; "Ensures"
(assert (= (to_rep a__last) o))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o)

(declare-const o1 Int)

;; "Ensures"
(assert (= (to_rep a__first) o1))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int integer)
  a)

;; "temp___old_934"
(define-fun temp___old_934 () us_t
  (of_array a o1 o))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused () us_t
  temp___old_934)

(declare-const o2 Int)

;; "Ensures"
(assert (= (to_rep a__last) o2))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o2)

(declare-const o3 Int)

;; "Ensures"
(assert (= (to_rep a__first) o3))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () Int
  o3)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int integer)
  a)

;; "temp___old_922"
(define-fun temp___old_922 () us_t
  (of_array a o3 o2))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused1 () us_t
  temp___old_922)

(declare-const o4 Int)

;; "Ensures"
(assert (= (to_rep a__last) o4))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () Int
  o4)

(declare-const o5 Int)

;; "Ensures"
(assert (= (to_rep a__first) o5))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused5 () Int
  o5)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int integer)
  a)

;; "temp___old_913"
(define-fun temp___old_913 () us_t
  (of_array a o5 o4))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused2 () us_t
  temp___old_913)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 m))

(declare-const o6 Int)

;; "Ensures"
(assert (= (to_rep a__last) o6))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused6 () Int
  o6)

(declare-const o7 Int)

;; "Ensures"
(assert (= (to_rep a__first) o7))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused7 () Int
  o7)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int integer)
  a)

;; "temp___855"
(define-fun temp___855 () us_t
  (of_array a o7 o6))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused3 () us_t
  temp___855)

;; "temp___856"
(define-fun temp___856 () (Array Int integer)
  a)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int integer)
  temp___856)

;; "o"
(define-fun o8 () Int
  o6)

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  o8)

;; "o"
(define-fun o9 () Int
  o7)

;; "first'result'unused"
(define-fun firstqtresultqtunused () Int
  o9)

;; "recursive_mergesort__recursive_mergesort__a_old__assume"
(define-fun recursive_mergesort__recursive_mergesort__a_old__assume () us_t
  (of_array temp___856 o9 o8))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused4 () us_t
  recursive_mergesort__recursive_mergesort__a_old__assume)

;; "Assume"
(assert (= recursive_mergesort__recursive_mergesort__a_old__assume a_old))

;; "Assume"
(assert (dynamic_invariant a_old true false true true))

;; "Assume"
(assert
  (default_initial_assumption
    (of_array a_interm (to_rep a_interm__first) (to_rep a_interm__last))
    false))

;; "Assume"
(assert
  (dynamic_invariant1
    (of_array a_interm (to_rep a_interm__first) (to_rep a_interm__last))
    false
    false
    true
    true))

;; "o"
(define-fun o10 () Bool
  (ite (< l r) true false))

;; "infix <'result'unused"
(define-fun infix_lsqtresultqtunused () Bool
  o10)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o10))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (= spark__branch true))

;; "o"
(define-fun o11 () Int
  (- r l))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused () Int
  o11)

;; "o"
(define-fun o12 () Int
  (__cdiv o11 2))

;; "div_'result'unused"
(define-fun div_qtresultqtunused () Int
  o12)

;; "o"
(define-fun o13 () Int
  (+ l o12))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o13)

;; "Ensures"
(assert (in_range o13))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o13)

;; "Ensures"
(assert (in_range1 o13))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o13)

(declare-const m1 Int)

;; "m'unused"
(define-fun mqtunused1 () int__ref
  (int__refqtmk m1))

;; "H"
(assert (= m1 o13))

(declare-const o14 Int)

;; "Ensures"
(assert (= (to_rep a__last) o14))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused8 () Int
  o14)

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep a__first) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused9 () Int
  o15)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused4 () (Array Int integer)
  a)

;; "temp___863"
(define-fun temp___863 () us_t
  (of_array a o15 o14))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused5 () us_t
  temp___863)

;; "temp___864"
(define-fun temp___864 () (Array Int integer)
  a)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array Int integer)
  temp___864)

;; "o"
(define-fun o16 () Int
  o14)

;; "last'result'unused"
(define-fun lastqtresultqtunused1 () Int
  o16)

;; "o"
(define-fun o17 () Int
  o15)

;; "first'result'unused"
(define-fun firstqtresultqtunused1 () Int
  o17)

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused6 () us_t
  (of_array temp___864 o17 o16))

;; "temp___compl_866"
(define-fun temp___compl_866 () Int
  l)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  m1)

;; "o"
(define-fun o18 () integer
  a__last)

;; "o"
(define-fun o19 () integer
  a__first)

;; "param__a'unused"
(define-fun param__aqtunused () map__ref
  a1)

(declare-const a2 (Array Int integer))

;; "a'unused"
(define-fun aqtunused1 () map__ref
  (map__refqtmk a2))

;; "H"
(assert
  (forall ((temp___compl_8661 Int) (temp___393 us_t))
    (occurrences__function_guard
      (occurrences temp___393 temp___compl_8661 m1)
      temp___393
      temp___compl_8661
      m1)))

;; "H"
(assert
  (forall ((temp___compl_8661 Int) (temp___396 us_t))
    (occurrences__function_guard
      (occurrences temp___396 temp___compl_8661 m1)
      temp___396
      temp___compl_8661
      m1)))

;; "H"
(assert
  (= (oeq
       (let ((temp___393 (of_array a2 (to_rep o19) (to_rep o18))))
         (occurrences temp___393 temp___compl_866 m1))
       (let ((temp___396 (of_array a (to_rep o19) (to_rep o18))))
         (occurrences temp___396 temp___compl_866 m1))) true))

;; "H"
(assert
  (= (is_sorted
       (let ((temp___399 (of_array a2 temp___compl_866 m1)))
         (of_array a2 temp___compl_866 m1))) true))

;; "H"
(assert
  (= (let ((temp___412 (let ((temp___408 (- temp___compl_866 1)))
                         (let ((temp___407 (to_rep o19)))
                           (of_array a temp___407 temp___408)))))
       (let ((temp___410 (let ((temp___404 (- temp___compl_866 1)))
                           (let ((temp___403 (to_rep o19)))
                             (of_array a2 temp___403 temp___404)))))
         (bool_eq
           (to_array temp___410)
           (first temp___410)
           (last temp___410)
           (to_array temp___412)
           (first temp___412)
           (last temp___412)))) true))

;; "H"
(assert
  (= (let ((temp___424 (let ((temp___420 (to_rep o18)))
                         (let ((temp___418 (+ m1 1)))
                           (of_array a temp___418 temp___420)))))
       (let ((temp___422 (let ((temp___416 (to_rep o18)))
                           (let ((temp___414 (+ m1 1)))
                             (of_array a2 temp___414 temp___416)))))
         (bool_eq
           (to_array temp___422)
           (first temp___422)
           (last temp___422)
           (to_array temp___424)
           (first temp___424)
           (last temp___424)))) true))

;; "H"
(assert
  (dynamic_invariant
    (of_array a2 (to_rep o19) (to_rep o18))
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

(declare-const o20 Int)

;; "Ensures"
(assert (= (to_rep a__last) o20))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused10 () Int
  o20)

(declare-const o21 Int)

;; "Ensures"
(assert (= (to_rep a__first) o21))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused11 () Int
  o21)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused5 () (Array Int integer)
  a2)

;; "temp___869"
(define-fun temp___869 () us_t
  (of_array a2 o21 o20))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused7 () us_t
  temp___869)

(declare-const o22 Int)

;; "Ensures"
(assert (= (to_rep a__first) o22))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused12 () Int
  o22)

;; "o"
(define-fun o23 () Int
  o21)

;; "first'result'unused"
(define-fun firstqtresultqtunused2 () Int
  o23)

;; "o"
(define-fun o24 () (Array Int integer)
  a2)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int integer)
  o24)

;; "temp___873"
(define-fun temp___873 () (Array Int integer)
  (slide o24 o23 o22))

;; "slide'result'unused"
(define-fun slideqtresultqtunused () (Array Int integer)
  temp___873)

;; "Assert"
(assert
  (ite (<= o21 o20)
    (and
      (<= (to_rep a__first) (to_rep a__last))
      (= (- o20 o21) (- (to_rep a__last) (to_rep a__first))))
    (< (to_rep a__last) (to_rep a__first))))

(declare-const o25 Int)

;; "Ensures"
(assert (= (to_rep a__last) o25))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused13 () Int
  o25)

(declare-const o26 Int)

;; "Ensures"
(assert (= (to_rep a__first) o26))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused14 () Int
  o26)

;; "temp___876"
(define-fun temp___876 () us_t
  (of_array temp___873 o26 o25))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused8 () us_t
  temp___876)

(declare-const o27 Int)

;; "Ensures"
(assert (= (to_rep a_interm__last) o27))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused15 () Int
  o27)

(declare-const o28 Int)

;; "Ensures"
(assert (= (to_rep a_interm__first) o28))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused16 () Int
  o28)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused6 () (Array Int integer)
  a_interm)

;; "temp___877"
(define-fun temp___877 () us_t
  (of_array a_interm o28 o27))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused9 () us_t
  temp___877)

;; "Assert"
(assert
  (ite (<= o26 o25)
    (and (<= o28 o27) (= (- o25 o26) (- o27 o28)))
    (< o27 o28)))

;; "o"
(define-fun o29 () (Array Int integer)
  temp___873)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused3 () (Array Int integer)
  o29)

(declare-const a_interm1 (Array Int integer))

;; "a_interm'unused"
(define-fun a_intermqtunused1 () map__ref
  (map__refqtmk a_interm1))

;; "H"
(assert (= a_interm1 o29))

(declare-const o30 Int)

;; "Ensures"
(assert (= (to_rep a__last) o30))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused17 () Int
  o30)

(declare-const o31 Int)

;; "Ensures"
(assert (= (to_rep a__first) o31))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused18 () Int
  o31)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused7 () (Array Int integer)
  a2)

;; "temp___878"
(define-fun temp___878 () us_t
  (of_array a2 o31 o30))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused10 () us_t
  temp___878)

;; "temp___879"
(define-fun temp___879 () (Array Int integer)
  a2)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused4 () (Array Int integer)
  temp___879)

;; "o"
(define-fun o32 () Int
  o30)

;; "last'result'unused"
(define-fun lastqtresultqtunused2 () Int
  o32)

;; "o"
(define-fun o33 () Int
  o31)

;; "first'result'unused"
(define-fun firstqtresultqtunused3 () Int
  o33)

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused11 () us_t
  (of_array temp___879 o33 o32))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  m1)

;; "o"
(define-fun o34 () Int
  (+ m1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused1 () Int
  o34)

;; "Ensures"
(assert (in_range o34))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  o34)

;; "temp___compl_882"
(define-fun temp___compl_882 () Int
  r)

;; "o"
(define-fun o35 () integer
  a__last)

;; "o"
(define-fun o36 () integer
  a__first)

;; "param__a'unused"
(define-fun param__aqtunused1 () map__ref
  (map__refqtmk a2))

(declare-const a3 (Array Int integer))

;; "a'unused"
(define-fun aqtunused2 () map__ref
  (map__refqtmk a3))

;; "H"
(assert
  (forall ((o37 Int) (temp___compl_8821 Int) (temp___393 us_t))
    (occurrences__function_guard
      (occurrences temp___393 o37 temp___compl_8821)
      temp___393
      o37
      temp___compl_8821)))

;; "H"
(assert
  (forall ((o37 Int) (temp___compl_8821 Int) (temp___396 us_t))
    (occurrences__function_guard
      (occurrences temp___396 o37 temp___compl_8821)
      temp___396
      o37
      temp___compl_8821)))

;; "H"
(assert
  (= (oeq
       (let ((temp___393 (of_array a3 (to_rep o36) (to_rep o35))))
         (occurrences temp___393 o34 temp___compl_882))
       (let ((temp___396 (of_array a2 (to_rep o36) (to_rep o35))))
         (occurrences temp___396 o34 temp___compl_882))) true))

;; "H"
(assert
  (= (is_sorted
       (let ((temp___399 (of_array a3 o34 temp___compl_882)))
         (of_array a3 o34 temp___compl_882))) true))

;; "H"
(assert
  (= (let ((temp___412 (let ((temp___408 (- o34 1)))
                         (let ((temp___407 (to_rep o36)))
                           (of_array a2 temp___407 temp___408)))))
       (let ((temp___410 (let ((temp___404 (- o34 1)))
                           (let ((temp___403 (to_rep o36)))
                             (of_array a3 temp___403 temp___404)))))
         (bool_eq
           (to_array temp___410)
           (first temp___410)
           (last temp___410)
           (to_array temp___412)
           (first temp___412)
           (last temp___412)))) true))

;; "H"
(assert
  (= (let ((temp___424 (let ((temp___420 (to_rep o35)))
                         (let ((temp___418 (+ temp___compl_882 1)))
                           (of_array a2 temp___418 temp___420)))))
       (let ((temp___422 (let ((temp___416 (to_rep o35)))
                           (let ((temp___414 (+ temp___compl_882 1)))
                             (of_array a3 temp___414 temp___416)))))
         (bool_eq
           (to_array temp___422)
           (first temp___422)
           (last temp___422)
           (to_array temp___424)
           (first temp___424)
           (last temp___424)))) true))

;; "H"
(assert
  (dynamic_invariant
    (of_array a3 (to_rep o36) (to_rep o35))
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  m1)

;; "o"
(define-fun o37 () Int
  l)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  m1)

;; "o"
(define-fun o38 () Int
  l)

(declare-const o39 Int)

;; "Ensures"
(assert (= (to_rep a_interm__last) o39))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused19 () Int
  o39)

(declare-const o40 Int)

;; "Ensures"
(assert (= (to_rep a_interm__first) o40))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused20 () Int
  o40)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused8 () (Array Int integer)
  a_interm1)

;; "temp___885"
(define-fun temp___885 () us_t
  (of_array a_interm1 o40 o39))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused12 () us_t
  temp___885)

;; "temp___886"
(define-fun temp___886 () (Array Int integer)
  a_interm1)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused5 () (Array Int integer)
  temp___886)

;; "o"
(define-fun o41 () Int
  o39)

;; "last'result'unused"
(define-fun lastqtresultqtunused3 () Int
  o41)

;; "o"
(define-fun o42 () Int
  o40)

;; "first'result'unused"
(define-fun firstqtresultqtunused4 () Int
  o42)

;; "o"
(define-fun o43 () us_t
  (of_array temp___886 o42 o41))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused13 () us_t
  o43)

(declare-const o44 Int)

;; "Ensures"
(assert (= (to_rep a__last) o44))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused21 () Int
  o44)

(declare-const o45 Int)

;; "Ensures"
(assert (= (to_rep a__first) o45))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused22 () Int
  o45)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused9 () (Array Int integer)
  a3)

;; "temp___883"
(define-fun temp___883 () us_t
  (of_array a3 o45 o44))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused14 () us_t
  temp___883)

;; "temp___884"
(define-fun temp___884 () (Array Int integer)
  a3)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused6 () (Array Int integer)
  temp___884)

;; "o"
(define-fun o46 () Int
  o44)

;; "last'result'unused"
(define-fun lastqtresultqtunused4 () Int
  o46)

;; "o"
(define-fun o47 () Int
  o45)

;; "first'result'unused"
(define-fun firstqtresultqtunused5 () Int
  o47)

;; "o"
(define-fun o48 () us_t
  (of_array temp___884 o47 o46))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused15 () us_t
  o48)

;; "H"
(assert
  (forall ((o49 Int) (o50 us_t))
    (occurrences__function_guard (occurrences o50 o49 m1) o50 o49 m1)))

;; "H"
(assert
  (forall ((o49 Int) (o50 us_t))
    (occurrences__function_guard (occurrences o50 o49 m1) o50 o49 m1)))

;; "H"
(assert (= (oeq (occurrences o48 o38 m1) (occurrences o43 o37 m1)) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "o"
(define-fun o49 () Int
  r)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  m1)

;; "o"
(define-fun o50 () Int
  (+ m1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused2 () Int
  o50)

;; "Ensures"
(assert (in_range o50))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused3 () Int
  o50)

;; "o"
(define-fun o51 () Int
  r)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  m1)

;; "o"
(define-fun o52 () Int
  (+ m1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused3 () Int
  o52)

;; "Ensures"
(assert (in_range o52))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused4 () Int
  o52)

;; "o"
(define-fun o53 () us_t
  a_old)

(declare-const o54 Int)

;; "Ensures"
(assert (= (to_rep a_interm__last) o54))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused23 () Int
  o54)

(declare-const o55 Int)

;; "Ensures"
(assert (= (to_rep a_interm__first) o55))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused24 () Int
  o55)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused10 () (Array Int integer)
  a_interm1)

;; "temp___887"
(define-fun temp___887 () us_t
  (of_array a_interm1 o55 o54))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused16 () us_t
  temp___887)

;; "temp___888"
(define-fun temp___888 () (Array Int integer)
  a_interm1)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused7 () (Array Int integer)
  temp___888)

;; "o"
(define-fun o56 () Int
  o54)

;; "last'result'unused"
(define-fun lastqtresultqtunused5 () Int
  o56)

;; "o"
(define-fun o57 () Int
  o55)

;; "first'result'unused"
(define-fun firstqtresultqtunused6 () Int
  o57)

;; "o"
(define-fun o58 () us_t
  (of_array temp___888 o57 o56))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused17 () us_t
  o58)

;; "H"
(assert
  (forall ((o59 Int) (o60 Int) (o61 us_t))
    (occurrences__function_guard (occurrences o61 o60 o59) o61 o60 o59)))

;; "H"
(assert
  (forall ((o59 Int) (o60 Int) (o61 us_t))
    (occurrences__function_guard (occurrences o61 o60 o59) o61 o60 o59)))

;; "H"
(assert (= (oeq (occurrences o58 o52 o51) (occurrences o53 o50 o49)) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "o"
(define-fun o59 () Int
  r)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  m1)

;; "o"
(define-fun o60 () Int
  l)

(declare-const o61 Int)

;; "Ensures"
(assert (= (to_rep a__last) o61))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused25 () Int
  o61)

(declare-const o62 Int)

;; "Ensures"
(assert (= (to_rep a__first) o62))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused26 () Int
  o62)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused11 () (Array Int integer)
  a3)

;; "temp___889"
(define-fun temp___889 () us_t
  (of_array a3 o62 o61))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused18 () us_t
  temp___889)

;; "temp___890"
(define-fun temp___890 () (Array Int integer)
  a3)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused8 () (Array Int integer)
  temp___890)

;; "o"
(define-fun o63 () Int
  o61)

;; "last'result'unused"
(define-fun lastqtresultqtunused6 () Int
  o63)

;; "o"
(define-fun o64 () Int
  o62)

;; "first'result'unused"
(define-fun firstqtresultqtunused7 () Int
  o64)

;; "o"
(define-fun o65 () us_t
  (of_array temp___890 o64 o63))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused19 () us_t
  o65)

;; "H"
(assert
  (forall ((o66 Int) (o67 us_t))
    (occurrences__function_guard (occurrences o67 o66 m1) o67 o66 m1)))

;; "H"
(assert
  (forall ((o66 Int) (o67 us_t) (temp___429 Int))
    (occurrences__function_guard
      (occurrences o67 temp___429 o66)
      o67
      temp___429
      o66)))

;; "H"
(assert
  (forall ((o66 Int) (o67 Int) (o68 us_t))
    (occurrences__function_guard (occurrences o68 o67 o66) o68 o67 o66)))

;; "H"
(assert
  (= (is_merge
       (occurrences o65 o60 m1)
       (let ((temp___429 (+ m1 1))) (occurrences o65 temp___429 o59))
       (occurrences o65 o60 o59)) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "o"
(define-fun o66 () Int
  r)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused7 () Int
  m1)

;; "o"
(define-fun o67 () Int
  l)

;; "o"
(define-fun o68 () us_t
  a_old)

;; "H"
(assert
  (forall ((o69 Int) (o70 us_t))
    (occurrences__function_guard (occurrences o70 o69 m1) o70 o69 m1)))

;; "H"
(assert
  (forall ((o69 Int) (o70 us_t) (temp___429 Int))
    (occurrences__function_guard
      (occurrences o70 temp___429 o69)
      o70
      temp___429
      o69)))

;; "H"
(assert
  (forall ((o69 Int) (o70 Int) (o71 us_t))
    (occurrences__function_guard (occurrences o71 o70 o69) o71 o70 o69)))

;; "H"
(assert
  (= (is_merge
       (occurrences o68 o67 m1)
       (let ((temp___429 (+ m1 1))) (occurrences o68 temp___429 o66))
       (occurrences o68 o67 o66)) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "o"
(define-fun o69 () Int
  r)

;; "o"
(define-fun o70 () Int
  l)

;; "o"
(define-fun o71 () us_t
  a_old)

;; "o"
(define-fun o72 () us_rep
  (occurrences o71 o70 o69))

;; "H"
(assert
  (forall ((o73 Int) (o74 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o74 o73 temp___330)
      o74
      o73
      temp___330)))

;; "H"
(assert (occurrences__function_guard o72 o71 o70 o69))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o69 o70)
    (and
      (<= (length1 o72) (+ (- o69 o70) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o72 k) true))
          (<= (get o72 k) (+ (- o69 o70) 1)))))))

;; "H"
(assert
  (ite (= (< o69 o70) true)
    (and (= (is_empty o72) true) (= (length1 o72) 0))
    (= (is_add
         (let ((temp___330 (- o69 1))) (occurrences o71 o70 temp___330))
         (to_rep (select (to_array o71) o69))
         o72) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused () us_rep
  o72)

;; "o"
(define-fun o73 () Int
  r)

;; "o"
(define-fun o74 () Int
  l)

(declare-const o75 Int)

;; "Ensures"
(assert (= (to_rep a__last) o75))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused27 () Int
  o75)

(declare-const o76 Int)

;; "Ensures"
(assert (= (to_rep a__first) o76))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused28 () Int
  o76)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused12 () (Array Int integer)
  a3)

;; "temp___895"
(define-fun temp___895 () us_t
  (of_array a3 o76 o75))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused20 () us_t
  temp___895)

;; "temp___896"
(define-fun temp___896 () (Array Int integer)
  a3)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused9 () (Array Int integer)
  temp___896)

;; "o"
(define-fun o77 () Int
  o75)

;; "last'result'unused"
(define-fun lastqtresultqtunused7 () Int
  o77)

;; "o"
(define-fun o78 () Int
  o76)

;; "first'result'unused"
(define-fun firstqtresultqtunused8 () Int
  o78)

;; "o"
(define-fun o79 () us_t
  (of_array temp___896 o78 o77))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused21 () us_t
  o79)

;; "o"
(define-fun o80 () us_rep
  (occurrences o79 o74 o73))

;; "H"
(assert
  (forall ((o81 Int) (o82 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o82 o81 temp___330)
      o82
      o81
      temp___330)))

;; "H"
(assert (occurrences__function_guard o80 o79 o74 o73))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o73 o74)
    (and
      (<= (length1 o80) (+ (- o73 o74) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o80 k) true))
          (<= (get o80 k) (+ (- o73 o74) 1)))))))

;; "H"
(assert
  (ite (= (< o73 o74) true)
    (and (= (is_empty o80) true) (= (length1 o80) 0))
    (= (is_add
         (let ((temp___330 (- o73 1))) (occurrences o79 o74 temp___330))
         (to_rep (select temp___896 o73))
         o80) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused1 () us_rep
  o80)

;; "o"
(define-fun o81 () Int
  r)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  m1)

;; "o"
(define-fun o82 () Int
  (+ m1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused4 () Int
  o82)

;; "Ensures"
(assert (in_range o82))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused5 () Int
  o82)

;; "o"
(define-fun o83 () us_t
  a_old)

;; "o"
(define-fun o84 () us_rep
  (occurrences o83 o82 o81))

;; "H"
(assert
  (forall ((o85 Int) (o86 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o86 o85 temp___330)
      o86
      o85
      temp___330)))

;; "H"
(assert (occurrences__function_guard o84 o83 o82 o81))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o81 o82)
    (and
      (<= (length1 o84) (+ (- o81 o82) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o84 k) true))
          (<= (get o84 k) (+ (- o81 o82) 1)))))))

;; "H"
(assert
  (ite (= (< o81 o82) true)
    (and (= (is_empty o84) true) (= (length1 o84) 0))
    (= (is_add
         (let ((temp___330 (- o81 1))) (occurrences o83 o82 temp___330))
         (to_rep (select (to_array o83) o81))
         o84) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused2 () us_rep
  o84)

;; "o"
(define-fun o85 () Int
  r)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  m1)

;; "o"
(define-fun o86 () Int
  (+ m1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused5 () Int
  o86)

;; "Ensures"
(assert (in_range o86))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused6 () Int
  o86)

(declare-const o87 Int)

;; "Ensures"
(assert (= (to_rep a__last) o87))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused29 () Int
  o87)

(declare-const o88 Int)

;; "Ensures"
(assert (= (to_rep a__first) o88))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused30 () Int
  o88)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused13 () (Array Int integer)
  a3)

;; "temp___893"
(define-fun temp___893 () us_t
  (of_array a3 o88 o87))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused22 () us_t
  temp___893)

;; "temp___894"
(define-fun temp___894 () (Array Int integer)
  a3)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused10 () (Array Int integer)
  temp___894)

;; "o"
(define-fun o89 () Int
  o87)

;; "last'result'unused"
(define-fun lastqtresultqtunused8 () Int
  o89)

;; "o"
(define-fun o90 () Int
  o88)

;; "first'result'unused"
(define-fun firstqtresultqtunused9 () Int
  o90)

;; "o"
(define-fun o91 () us_t
  (of_array temp___894 o90 o89))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused23 () us_t
  o91)

;; "o"
(define-fun o92 () us_rep
  (occurrences o91 o86 o85))

;; "H"
(assert
  (forall ((o93 Int) (o94 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o94 o93 temp___330)
      o94
      o93
      temp___330)))

;; "H"
(assert (occurrences__function_guard o92 o91 o86 o85))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o85 o86)
    (and
      (<= (length1 o92) (+ (- o85 o86) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o92 k) true))
          (<= (get o92 k) (+ (- o85 o86) 1)))))))

;; "H"
(assert
  (ite (= (< o85 o86) true)
    (and (= (is_empty o92) true) (= (length1 o92) 0))
    (= (is_add
         (let ((temp___330 (- o85 1))) (occurrences o91 o86 temp___330))
         (to_rep (select temp___894 o85))
         o92) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused3 () us_rep
  o92)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  m1)

;; "o"
(define-fun o93 () Int
  l)

;; "o"
(define-fun o94 () us_t
  a_old)

;; "o"
(define-fun o95 () us_rep
  (occurrences o94 o93 m1))

;; "H"
(assert
  (forall ((o96 Int) (o97 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o97 o96 temp___330)
      o97
      o96
      temp___330)))

;; "H"
(assert (occurrences__function_guard o95 o94 o93 m1))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< m1 o93)
    (and
      (<= (length1 o95) (+ (- m1 o93) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o95 k) true))
          (<= (get o95 k) (+ (- m1 o93) 1)))))))

;; "H"
(assert
  (ite (= (< m1 o93) true)
    (and (= (is_empty o95) true) (= (length1 o95) 0))
    (= (is_add
         (let ((temp___330 (- m1 1))) (occurrences o94 o93 temp___330))
         (to_rep (select (to_array o94) m1))
         o95) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused4 () us_rep
  o95)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  m1)

;; "o"
(define-fun o96 () Int
  l)

(declare-const o97 Int)

;; "Ensures"
(assert (= (to_rep a__last) o97))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused31 () Int
  o97)

(declare-const o98 Int)

;; "Ensures"
(assert (= (to_rep a__first) o98))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused32 () Int
  o98)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused14 () (Array Int integer)
  a3)

;; "temp___891"
(define-fun temp___891 () us_t
  (of_array a3 o98 o97))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused24 () us_t
  temp___891)

;; "temp___892"
(define-fun temp___892 () (Array Int integer)
  a3)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused11 () (Array Int integer)
  temp___892)

;; "o"
(define-fun o99 () Int
  o97)

;; "last'result'unused"
(define-fun lastqtresultqtunused9 () Int
  o99)

;; "o"
(define-fun o100 () Int
  o98)

;; "first'result'unused"
(define-fun firstqtresultqtunused10 () Int
  o100)

;; "o"
(define-fun o101 () us_t
  (of_array temp___892 o100 o99))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused25 () us_t
  o101)

;; "o"
(define-fun o102 () us_rep
  (occurrences o101 o96 m1))

;; "H"
(assert
  (forall ((o103 Int) (o104 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o104 o103 temp___330)
      o104
      o103
      temp___330)))

;; "H"
(assert (occurrences__function_guard o102 o101 o96 m1))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< m1 o96)
    (and
      (<= (length1 o102) (+ (- m1 o96) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o102 k) true))
          (<= (get o102 k) (+ (- m1 o96) 1)))))))

;; "H"
(assert
  (ite (= (< m1 o96) true)
    (and (= (is_empty o102) true) (= (length1 o102) 0))
    (= (is_add
         (let ((temp___330 (- m1 1))) (occurrences o101 o96 temp___330))
         (to_rep (select temp___892 m1))
         o102) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused5 () us_rep
  o102)

;; Goal "def'vc"
;; File "recursive_mergesort.ads", line 103, characters 0-0
(assert
  (not (= (oeq o92 o84) true)))

(check-sat)
