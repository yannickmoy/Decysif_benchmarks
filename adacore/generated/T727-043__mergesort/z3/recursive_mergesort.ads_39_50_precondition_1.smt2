;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

;; "has_key"
(declare-fun has_key (us_rep
  Int) Bool)

;; "get"
(declare-fun get (us_rep
  Int) Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "keys_included"
(declare-fun keys_included (us_rep
  us_rep) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep)

(declare-const left us_rep)

(declare-const right us_rep)

(declare-const result__ us_rep)

;; "has_key__post_axiom"
(assert true)

;; "lemma_has_key_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (=>
        (and
          (in_range param__key)
          (and
            (= (distinct 1 0) true)
            (not (= (has_key param__container param__key) true))))
        (forall ((k Int))
          (=>
            (and (in_range k) (= (has_key param__container k) true))
            (not (= param__key k))))))))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (! (=>
           (and
             (in_range param__key)
             (= (has_key param__container param__key) true))
           (in_range1 (get param__container param__key))) :pattern ((get
                                                                    param__container
                                                                    param__key)) ))))

;; "lemma_get_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key_1 Int) (param__key_2 Int))
      (=>
        (and
          (and (in_range param__key_1) (in_range param__key_2))
          (and
            (and (= (distinct 1 0) true) (= param__key_1 param__key_2))
            (or
              (= (has_key param__container param__key_1) true)
              (= (has_key param__container param__key_2) true))))
        (= (get param__container param__key_1) (get
                                                 param__container
                                                 param__key_2))))))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

(declare-const o Bool)

(declare-const o1 us_rep)

;; "H"
(assert (= o1 result__))

(declare-const o2 us_rep)

;; "H"
(assert (= o2 left))

(declare-const o3 Bool)

;; "H"
(assert (= o3 (keys_included o2 o1)))

;; "Ensures"
(assert
  (=
    (= o3 true)
    (forall ((key Int))
      (=>
        (and (in_range key) (= (has_key o2 key) true))
        (= (has_key o1 key) true)))))

(declare-const keys_includedqtresultqtunused Bool)

;; "H"
(assert (= keys_includedqtresultqtunused o3))

(declare-const o4 us_rep)

(declare-const o5 us_rep)

(declare-const keys_includedqtresultqtunused1 Bool)

;; "H"
(assert
  (ite (= o3 true)
    (and
      (= o4 result__)
      (and
        (= o5 right)
        (and
          (= o (keys_included o5 o4))
          (and
            (=
              (= o true)
              (forall ((key Int))
                (=>
                  (and (in_range key) (= (has_key o5 key) true))
                  (= (has_key o4 key) true))))
            (= keys_includedqtresultqtunused1 o)))))
    (= o false)))

;; "H"
(assert (= o true))

(declare-const usf Int)

;; "any'result'unused"
(define-fun anyqtresultqtunused () Int
  usf)

;; "k'unused"
(define-fun kqtunused () Int
  usf)

;; "o"
(define-fun o6 () Bool
  (has_key result__ usf))

;; "has_key'result'unused"
(define-fun has_keyqtresultqtunused () Bool
  o6)

;; "_f"
(define-fun usf1 () Bool
  (ite (in_range usf) true false))

;; "any'result'unused"
(define-fun anyqtresultqtunused1 () Bool
  usf1)

;; "o"
(define-fun o7 () Bool
  (and usf1 o6))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o7)

;; "H"
(assert (= o7 true))

;; "o"
(define-fun o8 () Bool
  (has_key right usf))

;; "has_key'result'unused"
(define-fun has_keyqtresultqtunused1 () Bool
  o8)

;; "o"
(define-fun o9 () Bool
  (has_key left usf))

;; "has_key'result'unused"
(define-fun has_keyqtresultqtunused2 () Bool
  o9)

;; "o"
(define-fun o10 () Bool
  (and o9 o8))

;; "andb'result'unused"
(define-fun andbqtresultqtunused1 () Bool
  o10)

;; "H"
(assert (= o10 true))

;; "o"
(define-fun o11 () us_rep
  left)

;; "o"
(define-fun o12 () Int
  (get o11 usf))

;; "Ensures"
(assert (in_range1 o12))

;; "get'result'unused"
(define-fun getqtresultqtunused () Int
  o12)

;; "o"
(define-fun o13 () us_rep
  right)

;; Goal "def'vc"
;; File "recursive_mergesort.ads", line 34, characters 0-0
(assert
  (not (= (has_key o13 usf) true)))

(check-sat)
