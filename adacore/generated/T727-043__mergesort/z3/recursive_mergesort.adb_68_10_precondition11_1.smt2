;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

;; "oeq"
(declare-fun oeq (us_rep
  us_rep) Bool)

;; "has_key"
(declare-fun has_key (us_rep
  Int) Bool)

;; "get"
(declare-fun get (us_rep
  Int) Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy1 us_rep)

;; "is_add"
(declare-fun is_add (us_rep
  Int
  us_rep) Bool)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

;; "bool_eq"
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_168 Int))
           (=>
             (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last))
             (= (to_rep (select a temp___idx_168)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_168)))))))
    true
    false))

;; "bool_eq_rev"
(assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_168 Int))
            (=>
              (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last))
              (= (to_rep (select a temp___idx_168)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_168)))))))))))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep (rec__first (mk f l))) f)
             (= (to_rep (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int integer))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int integer)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "occurrences"
(declare-fun occurrences (us_t
  Int
  Int) us_rep)

;; "occurrences__function_guard"
(declare-fun occurrences__function_guard (us_rep
  us_t
  Int
  Int) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const dummy2 Int)

;; "length"
(declare-fun length (us_rep) Int)

;; "is_empty"
(declare-fun is_empty (us_rep) Bool)

(declare-const a1 us_t)

(declare-const a2 us_t)

(declare-const i1 Int)

(declare-const j1 Int)

(declare-const i2 Int)

(declare-const j2 Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_228 us_t) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool) (temp___do_typ_inv_227 Bool)) Bool
  (=>
    (not (= temp___skip_constant_225 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_228)
      (last temp___expr_228))))

;; "ole"
(declare-fun ole (us_rep
  us_rep) Bool)

;; "keys_included"
(declare-fun keys_included (us_rep
  us_rep) Bool)

;; "same_keys"
(define-fun same_keys ((param__left us_rep) (param__right us_rep)) Bool
  (and (keys_included param__left param__right) (keys_included
                                                  param__right
                                                  param__left)))

;; "keys_included_except"
(declare-fun keys_included_except (us_rep
  us_rep
  Int) Bool)

;; "elements_equal_except"
(declare-fun elements_equal_except (us_rep
  us_rep
  Int) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_266 Int) (temp___is_init_262 Bool) (temp___skip_constant_263 Bool) (temp___do_toplevel_264 Bool) (temp___do_typ_inv_265 Bool)) Bool
  (=>
    (= temp___is_init_262 true)
    (=> (= temp___do_toplevel_264 true) (<= 0 temp___expr_266))))

;; "has_key__post_axiom"
(assert true)

;; "lemma_has_key_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (=>
        (and
          (in_range param__key)
          (and
            (= (distinct 1 0) true)
            (not (= (has_key param__container param__key) true))))
        (forall ((k Int))
          (=>
            (and (in_range k) (= (has_key param__container k) true))
            (not (= param__key k))))))))

;; "get__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key Int))
      (! (=>
           (and
             (in_range param__key)
             (= (has_key param__container param__key) true))
           (in_range2 (get param__container param__key))) :pattern ((get
                                                                    param__container
                                                                    param__key)) ))))

;; "lemma_get_equivalent__post_axiom"
(assert
  (forall ((param__container us_rep))
    (forall ((param__key_1 Int) (param__key_2 Int))
      (=>
        (and
          (and (in_range param__key_1) (in_range param__key_2))
          (and
            (and (= (distinct 1 0) true) (= param__key_1 param__key_2))
            (or
              (= (has_key param__container param__key_1) true)
              (= (has_key param__container param__key_2) true))))
        (= (get param__container param__key_1) (get
                                                 param__container
                                                 param__key_2))))))

;; "length__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (dynamic_invariant1 (length param__container) true false true true) :pattern (
    (length
      param__container)) )))

;; "is_empty__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (let ((result (is_empty param__container)))
         (and
           (=
             (= result true)
             (forall ((key Int))
               (not
                 (and (in_range key) (= (has_key param__container key) true)))))
           (= (= result true) (= (length param__container) 0)))) :pattern (
    (is_empty
      param__container)) )))

;; "ole__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (ole param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (and
               (= (has_key param__right key) true)
               (= (get param__right key) (get param__left key)))))) :pattern (
    (ole
      param__left
      param__right)) )))

;; "oeq__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (oeq param__left param__right) true)
         (and
           (forall ((key Int))
             (=>
               (and (in_range key) (= (has_key param__left key) true))
               (and
                 (= (has_key param__right key) true)
                 (= (get param__right key) (get param__left key)))))
           (forall ((key Int))
             (=>
               (and (in_range key) (= (has_key param__right key) true))
               (= (has_key param__left key) true))))) :pattern ((oeq
                                                                  param__left
                                                                  param__right)) )))

;; "keys_included__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (! (=
         (= (keys_included param__left param__right) true)
         (forall ((key Int))
           (=>
             (and (in_range key) (= (has_key param__left key) true))
             (= (has_key param__right key) true)))) :pattern ((keys_included
                                                                param__left
                                                                param__right)) )))

;; "keys_included_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (keys_included_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (= (has_key param__right key) true)))))) :pattern (
      (keys_included_except
        param__left
        param__right
        param__new_key)) ))))

;; "elements_equal_except__post_axiom"
(assert
  (forall ((param__left us_rep) (param__right us_rep))
    (forall ((param__new_key Int))
      (! (=>
           (in_range param__new_key)
           (=
             (= (elements_equal_except
                  param__left
                  param__right
                  param__new_key) true)
             (forall ((key Int))
               (=>
                 (and (in_range key) (= (has_key param__left key) true))
                 (=>
                   (not (= key param__new_key))
                   (and
                     (= (has_key param__right key) true)
                     (= (get param__left key) (get param__right key)))))))) :pattern (
      (elements_equal_except
        param__left
        param__right
        param__new_key)) ))))

;; "is_add__post_axiom"
(assert true)

;; "is_add__def_axiom"
(assert
  (forall ((param__occ us_rep) (param__res us_rep))
    (forall ((param__k Int))
      (! (=
           (= (is_add param__occ param__k param__res) true)
           (ite (= (has_key param__occ param__k) true)
             (and
               (and
                 (= (same_keys param__res param__occ) true)
                 (= (- (get param__res param__k) 1) (get param__occ param__k)))
               (= (elements_equal_except param__res param__occ param__k) true))
             (and
               (and
                 (and
                   (= (has_key param__res param__k) true)
                   (= (get param__res param__k) 1))
                 (= (ole param__occ param__res) true))
               (= (keys_included_except param__res param__occ param__k) true)))) :pattern (
      (is_add
        param__occ
        param__k
        param__res)) ))))

;; "occurrences__post_axiom"
(assert
  (forall ((param__a us_t))
    (forall ((param__i Int) (param__j Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant param__a true false true true)
                 (in_range2 param__i))
               (in_range1 param__j))
             (or
               (< param__j param__i)
               (and
                 (and
                   (<= (first param__a) param__i)
                   (<= param__i (last param__a)))
                 (and
                   (<= (first param__a) param__j)
                   (<= param__j (last param__a))))))
           (let ((result (occurrences param__a param__i param__j)))
             (and
               (forall ((temp___336 Int))
                 (occurrences__function_guard
                   (occurrences param__a param__i temp___336)
                   param__a
                   param__i
                   temp___336))
               (=>
                 (occurrences__function_guard
                   result
                   param__a
                   param__i
                   param__j)
                 (and
                   (or
                     (< param__j param__i)
                     (and
                       (<= (length result) (+ (- param__j param__i) 1))
                       (forall ((k Int))
                         (=>
                           (and (in_range k) (= (has_key result k) true))
                           (<= (get result k) (+ (- param__j param__i) 1))))))
                   (ite (< param__j param__i)
                     (and (= (is_empty result) true) (= (length result) 0))
                     (= (is_add
                          (let ((temp___336 (- param__j 1)))
                            (occurrences param__a param__i temp___336))
                          (to_rep (select (to_array param__a) param__j))
                          result) true))))))) :pattern ((occurrences
                                                          param__a
                                                          param__i
                                                          param__j)) ))))

;; "Assume"
(assert (dynamic_invariant a1 true false true true))

;; "Assume"
(assert (dynamic_invariant a2 true false true true))

;; "Assume"
(assert (in_range2 i1))

;; "Assume"
(assert (in_range1 j1))

;; "Assume"
(assert (in_range2 i2))

;; "Assume"
(assert (in_range1 j2))

;; "Assume"
(assert
  (and
    (and
      (or
        (< j1 i1)
        (and
          (and (<= (first a1) i1) (<= i1 (last a1)))
          (and (<= (first a1) j1) (<= j1 (last a1)))))
      (or
        (< j2 i2)
        (and
          (and (<= (first a2) i2) (<= i2 (last a2)))
          (and (<= (first a2) j2) (<= j2 (last a2))))))
    (= (let ((temp___1015 (of_array (to_array a2) i2 j2)))
         (let ((temp___1013 (of_array (to_array a1) i1 j1)))
           (bool_eq (to_array a1) i1 j1 (to_array a2) i2 j2))) true)))

;; "recursive_mergesort__prove_eq__variant"
(define-fun recursive_mergesort__prove_eq__variant () Int
  j1)

;; "o"
(define-fun o () Bool
  (ite (<= i1 j1) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (= spark__branch true))

;; "temp___compl_1002"
(define-fun temp___compl_1002 () us_t
  a1)

;; "temp___compl_1003"
(define-fun temp___compl_1003 () us_t
  a2)

;; "temp___compl_1004"
(define-fun temp___compl_1004 () Int
  i1)

;; "o"
(define-fun o1 () Int
  (- j1 1))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused () Int
  o1)

;; "Ensures"
(assert (in_range1 o1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o1)

;; "temp___compl_1006"
(define-fun temp___compl_1006 () Int
  i2)

;; "o"
(define-fun o2 () Int
  (- j2 1))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused1 () Int
  o2)

;; "Ensures"
(assert (in_range1 o2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o2)

;; "H"
(assert
  (forall ((temp___compl_10021 us_t) (temp___compl_10041 Int) (o3 Int))
    (occurrences__function_guard
      (occurrences temp___compl_10021 temp___compl_10041 o3)
      temp___compl_10021
      temp___compl_10041
      o3)))

;; "H"
(assert
  (forall ((temp___compl_10031 us_t) (temp___compl_10061 Int) (o3 Int))
    (occurrences__function_guard
      (occurrences temp___compl_10031 temp___compl_10061 o3)
      temp___compl_10031
      temp___compl_10061
      o3)))

;; "H"
(assert
  (= (oeq
       (occurrences temp___compl_1002 temp___compl_1004 o1)
       (occurrences temp___compl_1003 temp___compl_1006 o2)) true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert true)

;; "Assert"
(assert (and (<= (first a1) j1) (<= j1 (last a1))))

;; "o"
(define-fun o3 () (Array Int integer)
  (to_array a1))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int integer)
  o3)

;; "o"
(define-fun o4 () integer
  (select o3 j1))

;; "get'result'unused"
(define-fun getqtresultqtunused () integer
  o4)

(declare-const o5 Int)

;; "Ensures"
(assert (= (to_rep o4) o5))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o5)

;; "o"
(define-fun o6 () Int
  j2)

;; "o"
(define-fun o7 () Int
  i2)

;; "o"
(define-fun o8 () us_t
  a2)

;; "o"
(define-fun o9 () us_rep
  (occurrences o8 o7 o6))

;; "H"
(assert
  (forall ((o10 Int) (o11 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o11 o10 temp___330)
      o11
      o10
      temp___330)))

;; "H"
(assert (occurrences__function_guard o9 o8 o7 o6))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o6 o7)
    (and
      (<= (length o9) (+ (- o6 o7) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o9 k) true))
          (<= (get o9 k) (+ (- o6 o7) 1)))))))

;; "H"
(assert
  (ite (= (< o6 o7) true)
    (and (= (is_empty o9) true) (= (length o9) 0))
    (= (is_add
         (let ((temp___330 (- o6 1))) (occurrences o8 o7 temp___330))
         (to_rep (select (to_array o8) o6))
         o9) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused () us_rep
  o9)

;; "o"
(define-fun o10 () Int
  j1)

;; "o"
(define-fun o11 () Int
  i1)

;; "o"
(define-fun o12 () us_t
  a1)

;; "o"
(define-fun o13 () us_rep
  (occurrences o12 o11 o10))

;; "H"
(assert
  (forall ((o14 Int) (o15 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o15 o14 temp___330)
      o15
      o14
      temp___330)))

;; "H"
(assert (occurrences__function_guard o13 o12 o11 o10))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o10 o11)
    (and
      (<= (length o13) (+ (- o10 o11) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o13 k) true))
          (<= (get o13 k) (+ (- o10 o11) 1)))))))

;; "H"
(assert
  (ite (= (< o10 o11) true)
    (and (= (is_empty o13) true) (= (length o13) 0))
    (= (is_add
         (let ((temp___330 (- o10 1))) (occurrences o12 o11 temp___330))
         (to_rep (select (to_array o12) o10))
         o13) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused1 () us_rep
  o13)

;; "o"
(define-fun o14 () Int
  (- j2 1))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused2 () Int
  o14)

;; "Ensures"
(assert (in_range1 o14))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  o14)

;; "o"
(define-fun o15 () Int
  i2)

;; "o"
(define-fun o16 () us_t
  a2)

;; "o"
(define-fun o17 () us_rep
  (occurrences o16 o15 o14))

;; "H"
(assert
  (forall ((o18 Int) (o19 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o19 o18 temp___330)
      o19
      o18
      temp___330)))

;; "H"
(assert (occurrences__function_guard o17 o16 o15 o14))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o14 o15)
    (and
      (<= (length o17) (+ (- o14 o15) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o17 k) true))
          (<= (get o17 k) (+ (- o14 o15) 1)))))))

;; "H"
(assert
  (ite (= (< o14 o15) true)
    (and (= (is_empty o17) true) (= (length o17) 0))
    (= (is_add
         (let ((temp___330 (- o14 1))) (occurrences o16 o15 temp___330))
         (to_rep (select (to_array o16) o14))
         o17) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused2 () us_rep
  o17)

;; "o"
(define-fun o18 () Int
  (- j1 1))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused3 () Int
  o18)

;; "Ensures"
(assert (in_range1 o18))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused3 () Int
  o18)

;; "o"
(define-fun o19 () Int
  i1)

;; "o"
(define-fun o20 () us_t
  a1)

;; "o"
(define-fun o21 () us_rep
  (occurrences o20 o19 o18))

;; "H"
(assert
  (forall ((o22 Int) (o23 us_t) (temp___330 Int))
    (occurrences__function_guard
      (occurrences o23 o22 temp___330)
      o23
      o22
      temp___330)))

;; "H"
(assert (occurrences__function_guard o21 o20 o19 o18))

;; "H"
(assert true)

;; "H"
(assert
  (or
    (< o18 o19)
    (and
      (<= (length o21) (+ (- o18 o19) 1))
      (forall ((k Int))
        (=>
          (and (in_range k) (= (has_key o21 k) true))
          (<= (get o21 k) (+ (- o18 o19) 1)))))))

;; "H"
(assert
  (ite (= (< o18 o19) true)
    (and (= (is_empty o21) true) (= (length o21) 0))
    (= (is_add
         (let ((temp___330 (- o18 1))) (occurrences o20 o19 temp___330))
         (to_rep (select (to_array o20) o18))
         o21) true)))

;; "occurrences'result'unused"
(define-fun occurrencesqtresultqtunused3 () us_rep
  o21)

;; "dummy"
(define-fun dummy3 () Bool
  true)

;; "H"
(assert (= (has_key o17 o5) true))

;; Goal "def'vc"
;; File "recursive_mergesort.adb", line 21, characters 0-0
(assert
  (not (= (elements_equal_except o9 o17 o5) true)))

(check-sat)
