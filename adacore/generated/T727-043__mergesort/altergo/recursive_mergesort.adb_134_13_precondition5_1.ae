(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

type us_private

logic us_null_ext__ : us_private

function of_int(i: int) : bool = (if (i = 0) then false else true)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

type us_rep

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dummy : us_rep

logic oeq : us_rep, us_rep -> bool

logic has_key : us_rep, int -> bool

logic get : us_rep, int -> int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dummy1 : us_rep

logic keys_included : us_rep, us_rep -> bool

logic is_add : us_rep, int, us_rep -> bool

type index

logic indexqtint : index -> int

axiom indexqtaxiom :
  (forall i:index. ((1 <= indexqtint(i)) and (indexqtint(i) <= 2147483646)))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483646))

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

type t = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep((mk(f, l)).rec__first) = f) and (to_rep((mk(f,
  l)).rec__last) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first(a: us_t) : int = to_rep(((a).rt).rec__first)

function last(a: us_t) : int = to_rep(((a).rt).rec__last)

logic value__size2 : int

logic object__size2 : int

logic component__size : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom2 : (0 <= alignment2)

logic occurrences : us_t, int, int -> us_rep

logic occurrences__function_guard : us_rep, us_t, int, int -> prop

logic bool_lt : int, int -> bool

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic dummy2 : int

logic length : us_rep -> int

logic is_empty : us_rep -> bool

function is_sorted(param__a: us_t) : bool =
  (if (forall i:int. (((first(param__a) <= i) and (i <= last(param__a))) ->
      (forall j:int. (((first(param__a) <= j) and (j <= last(param__a))) ->
      ((i <= j) ->
      (to_rep((to_array(param__a)[i])) <= to_rep((to_array(param__a)[j])))))))) then true else false)

logic a__first : integer

logic a__last : integer

logic l : int

logic m : int

logic r : int

logic n1 : int

logic n2 : int

logic a_copy : us_t

logic a_iterm__first : integer

logic a_iterm__last : integer

predicate dynamic_invariant(temp___expr_228: us_t, temp___is_init_224: bool,
  temp___skip_constant_225: bool, temp___do_toplevel_226: bool,
  temp___do_typ_inv_227: bool) = ((not (temp___skip_constant_225 = true)) ->
  dynamic_property(1, 2147483646, first(temp___expr_228),
  last(temp___expr_228)))

predicate dynamic_invariant1(temp___expr_531: us_t, temp___is_init_527: bool,
  temp___skip_constant_528: bool, temp___do_toplevel_529: bool,
  temp___do_typ_inv_530: bool) = ((not (temp___skip_constant_528 = true)) ->
  ((dynamic_property(to_rep(a__first), to_rep(a__last),
  first(temp___expr_531), last(temp___expr_531)) and
  (first(temp___expr_531) = to_rep(a__first))) and
  (last(temp___expr_531) = to_rep(a__last))))

predicate default_initial_assumption(temp___expr_537: us_t,
  temp___skip_top_level_538: bool) =
  ((first(temp___expr_537) = to_rep(a__first)) and
  (last(temp___expr_537) = to_rep(a__last)))

logic ole : us_rep, us_rep -> bool

function same_keys(param__left: us_rep, param__right: us_rep) : bool =
  andb(keys_included(param__left, param__right), keys_included(param__right,
  param__left))

logic keys_included_except : us_rep, us_rep, int -> bool

logic elements_equal_except : us_rep, us_rep, int -> bool

predicate dynamic_invariant2(temp___expr_266: int, temp___is_init_262: bool,
  temp___skip_constant_263: bool, temp___do_toplevel_264: bool,
  temp___do_typ_inv_265: bool) = ((temp___is_init_262 = true) ->
  ((temp___do_toplevel_264 = true) -> (0 <= temp___expr_266)))

axiom has_key__post_axiom : true

axiom lemma_has_key_equivalent__post_axiom :
  (forall param__container:us_rep.
  (forall param__key:int. ((in_range(param__key) and ((of_int(1) = true) and
  (not (has_key(param__container, param__key) = true)))) ->
  (forall k:int. ((in_range(k) and (has_key(param__container, k) = true)) ->
  (not (param__key = k)))))))

axiom get__post_axiom :
  (forall param__container:us_rep.
  (forall param__key:int [get(param__container, param__key)].
  ((in_range(param__key) and (has_key(param__container,
  param__key) = true)) -> in_range2(get(param__container, param__key)))))

axiom lemma_get_equivalent__post_axiom :
  (forall param__container:us_rep.
  (forall param__key_1:int. forall param__key_2:int.
  (((in_range(param__key_1) and in_range(param__key_2)) and
  (((of_int(1) = true) and (param__key_1 = param__key_2)) and
  ((has_key(param__container, param__key_1) = true) or
  (has_key(param__container, param__key_2) = true)))) ->
  (get(param__container, param__key_1) = get(param__container,
  param__key_2)))))

axiom length__post_axiom :
  (forall param__container:us_rep [length(param__container)].
  dynamic_invariant2(length(param__container), true, false, true, true))

axiom is_empty__post_axiom :
  (forall param__container:us_rep [is_empty(param__container)]. (let result =
  is_empty(param__container) : bool in (((result = true) <->
  (forall key:int. (not (in_range(key) and (has_key(param__container,
  key) = true))))) and ((result = true) <->
  (length(param__container) = 0)))))

axiom ole__post_axiom :
  (forall param__left:us_rep. forall param__right:us_rep [ole(param__left,
  param__right)]. ((ole(param__left, param__right) = true) <->
  (forall key:int. ((in_range(key) and (has_key(param__left, key) = true)) ->
  ((has_key(param__right, key) = true) and (get(param__right,
  key) = get(param__left, key)))))))

axiom oeq__post_axiom :
  (forall param__left:us_rep. forall param__right:us_rep [oeq(param__left,
  param__right)]. ((oeq(param__left, param__right) = true) <->
  ((forall key:int. ((in_range(key) and (has_key(param__left,
   key) = true)) -> ((has_key(param__right, key) = true) and
   (get(param__right, key) = get(param__left, key))))) and
  (forall key:int. ((in_range(key) and (has_key(param__right,
  key) = true)) -> (has_key(param__left, key) = true))))))

axiom keys_included__post_axiom :
  (forall param__left:us_rep. forall param__right:us_rep
  [keys_included(param__left, param__right)]. ((keys_included(param__left,
  param__right) = true) <->
  (forall key:int. ((in_range(key) and (has_key(param__left, key) = true)) ->
  (has_key(param__right, key) = true)))))

axiom keys_included_except__post_axiom :
  (forall param__left:us_rep. forall param__right:us_rep.
  (forall param__new_key:int [keys_included_except(param__left, param__right,
  param__new_key)]. (in_range(param__new_key) ->
  ((keys_included_except(param__left, param__right,
  param__new_key) = true) <->
  (forall key:int. ((in_range(key) and (has_key(param__left, key) = true)) ->
  ((not (key = param__new_key)) -> (has_key(param__right, key) = true))))))))

axiom elements_equal_except__post_axiom :
  (forall param__left:us_rep. forall param__right:us_rep.
  (forall param__new_key:int [elements_equal_except(param__left,
  param__right, param__new_key)]. (in_range(param__new_key) ->
  ((elements_equal_except(param__left, param__right,
  param__new_key) = true) <->
  (forall key:int. ((in_range(key) and (has_key(param__left, key) = true)) ->
  ((not (key = param__new_key)) -> ((has_key(param__right, key) = true) and
  (get(param__left, key) = get(param__right, key))))))))))

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall param__occ:us_rep. forall param__res:us_rep.
  (forall param__k:int [is_add(param__occ, param__k, param__res)].
  ((is_add(param__occ, param__k, param__res) = true) <->
  (if (has_key(param__occ, param__k) = true) then (((same_keys(param__res,
  param__occ) = true) and ((get(param__res, param__k) - 1) = get(param__occ,
  param__k))) and (elements_equal_except(param__res, param__occ,
  param__k) = true)) else ((((has_key(param__res, param__k) = true) and
  (get(param__res, param__k) = 1)) and (ole(param__occ,
  param__res) = true)) and (keys_included_except(param__res, param__occ,
  param__k) = true))))))

axiom occurrences__post_axiom :
  (forall param__a:us_t.
  (forall param__i:int. forall param__j:int [occurrences(param__a, param__i,
  param__j)]. ((((dynamic_invariant(param__a, true, false, true, true) and
  in_range2(param__i)) and in_range1(param__j)) and
  ((param__j <  param__i) or (((first(param__a) <= param__i) and
  (param__i <= last(param__a))) and ((first(param__a) <= param__j) and
  (param__j <= last(param__a)))))) -> (let result = occurrences(param__a,
  param__i, param__j) : us_rep in (occurrences__function_guard(result,
  param__a, param__i, param__j) -> (((param__j <  param__i) or
  ((length(result) <= ((param__j - param__i) + 1)) and
  (forall k:int. ((in_range(k) and (has_key(result, k) = true)) ->
  (get(result, k) <= ((param__j - param__i) + 1)))))) and
  ((forall temp___336:int. occurrences__function_guard(occurrences(param__a,
   param__i, temp___336), param__a, param__i, temp___336)) and
  (if (param__j <  param__i) then ((is_empty(result) = true) and
  (length(result) = 0)) else (is_add((let temp___336 = (param__j - 1)
  : int in occurrences(param__a, param__i, temp___336)),
  to_rep((to_array(param__a)[param__j])), result) = true)))))))))

 (* "recursive_mergesort.ads", line 92, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray. forall a_iterm:(int,integer) farray.
  (dynamic_property(1, 2147483646, to_rep(a__first), to_rep(a__last)) ->
  (in_range2(l) -> (in_range2(m) -> (in_range2(r) ->
  ((((((((to_rep(a__first) <= l) and (l <= to_rep(a__last))) and
  ((to_rep(a__first) <= r) and (r <= to_rep(a__last)))) and (l <= r)) and
  ((l <= m) and (m <= r))) and (is_sorted((let temp___812qtunused =
  of_array(a, l, m) : us_t in of_array(a, l, m))) = true)) and
  (is_sorted((let temp___816qtunused = (let temp___815 = (m + 1) : int in
  of_array(a, temp___815, r)) : us_t in (let temp___815 = (m + 1) : int in
  of_array(a, temp___815, r)))) = true)) ->
  (forall o:int. ((to_rep(a__last) = o) ->
  (forall o1:int. ((to_rep(a__first) = o1) ->
  (forall o2:int. ((to_rep(a__last) = o2) ->
  (forall o3:int. ((to_rep(a__first) = o3) ->
  (forall o4:int. ((to_rep(a__last) = o4) ->
  (forall o5:int. ((to_rep(a__first) = o5) ->
  (forall lii:int. ((lii = 0) -> (in_range1(lii) ->
  (forall rii:int. ((rii = 0) -> (in_range1(rii) ->
  (forall aii:int. ((aii = 0) -> (in_range1(aii) -> (let o6 = ((m - l) + 1)
  : int in (in_range(o6) -> (in_range2(o6) -> ((o6 = n1) -> (in_range2(n1) ->
  (let o7 = (r - m) : int in (in_range1(o7) -> ((o7 = n2) ->
  (in_range1(n2) ->
  (forall o8:int. ((to_rep(a__last) = o8) ->
  (forall o9:int. ((to_rep(a__first) = o9) -> ((of_array(a, o9,
  o8) = a_copy) -> (dynamic_invariant(a_copy, true, false, true, true) ->
  (default_initial_assumption(of_array(a_iterm, to_rep(a_iterm__first),
  to_rep(a_iterm__last)), false) -> (dynamic_invariant1(of_array(a_iterm,
  to_rep(a_iterm__first), to_rep(a_iterm__last)), false, false, true,
  true) -> ((orb((if (lii <  n1) then true else false),
  (if (rii <  n2) then true else false)) = true) ->
  (forall o10:int. ((to_rep(a_iterm__last) = o10) ->
  (forall o11:int. ((to_rep(a_iterm__first) = o11) ->
  (forall o12:int. ((to_rep(a__last) = o12) ->
  (forall o13:int. ((to_rep(a__first) = o13) ->
  (forall o14:bool.
  ((if (rii = n2) then (o14 = true) else (if (lii <  n1) then (let o15 =
  (m + 1) : int in (in_range(o15) and (let o16 = (o15 + rii) : int in
  (in_range(o16) and (((first(a_copy) <= o16) and (o16 <= last(a_copy))) and
  (exists o17:int. ((to_rep((to_array(a_copy)[o16])) = o17) and (let o18 =
  (l + lii) : int in (in_range(o18) and (((first(a_copy) <= o18) and
  (o18 <= last(a_copy))) and
  (exists o19:int. ((to_rep((to_array(a_copy)[o18])) = o19) and
  (o14 = (if (o19 <= o17) then true else false)))))))))))))) else (o14 = false))) ->
  (forall spark__branch:bool. ((spark__branch = o14) ->
  ((spark__branch = true) ->
  (forall o15:int. ((to_rep(a__last) = o15) ->
  (forall o16:int. ((to_rep(a__first) = o16) ->
  (forall o17:int. ((to_rep(a__first) = o17) ->
  ((if (o16 <= o15) then ((to_rep(a__first) <= to_rep(a__last)) and
  ((o15 - o16) = (to_rep(a__last) - to_rep(a__first)))) else (to_rep(a__last) <  to_rep(a__first))) ->
  (forall o18:int. ((to_rep(a__last) = o18) ->
  (forall o19:int. ((to_rep(a__first) = o19) ->
  (forall o20:int. ((to_rep(a_iterm__last) = o20) ->
  (forall o21:int. ((to_rep(a_iterm__first) = o21) ->
  ((if (o19 <= o18) then ((o21 <= o20) and
  ((o18 - o19) = (o20 - o21))) else (o20 <  o21)) ->
  (forall a_iterm1:(int,integer) farray. ((a_iterm1 = slide(a, o16, o17)) ->
  (forall o22:int. ((to_rep(a__last) = o22) ->
  (forall o23:int. ((to_rep(a__first) = o23) -> (let o24 = (l + lii) : int in
  (in_range(o24) -> (((first(a_copy) <= o24) and (o24 <= last(a_copy))) ->
  (forall o25:int. ((to_rep((to_array(a_copy)[o24])) = o25) ->
  (forall o26:integer. ((to_rep(o26) = o25) -> (let o27 = (l + aii) : int in
  (in_range(o27) -> (((o23 <= o27) and (o27 <= o22)) ->
  (forall a1:(int,integer) farray. ((a1 = to_array({ elts = (a[o27 <- o26]);
  rt = (of_array(a, o23, o22)).rt })) -> (let o28 = (l + aii) : int in
  (in_range(o28) -> (let o29 = (l + aii) : int in (in_range(o29) ->
  (forall o30:int. ((to_rep(a_iterm__last) = o30) ->
  (forall o31:int. ((to_rep(a_iterm__first) = o31) ->
  (forall o32:int. ((to_rep(a__last) = o32) ->
  (forall o33:int. ((to_rep(a__first) = o33) ->
  ((forall o34:int. forall o35:int. forall o36:us_t.
   occurrences__function_guard(occurrences(o36, o35, o34), o36, o35, o34)) ->
  ((forall o34:int. forall o35:int. forall o36:us_t.
   occurrences__function_guard(occurrences(o36, o35, o34), o36, o35, o34)) ->
  ((oeq(occurrences(of_array(a1, o33, o32), l, (o29 - 1)),
  occurrences(of_array(a_iterm1, o31, o30), l, (o28 - 1))) = true) ->
  (let o34 = (l + lii) : int in (in_range(o34) ->
  (((first(a_copy) <= o34) and (o34 <= last(a_copy))) ->
  (forall o35:int. ((to_rep((to_array(a_copy)[o34])) = o35) -> (let o36 =
  (l + aii) : int in (in_range(o36) -> (let o37 = l : int in
  (forall o38:int. ((to_rep(a__last) = o38) ->
  (forall o39:int. ((to_rep(a__first) = o39) -> (let o40 = of_array(a1, o39,
  o38) : us_t in (let o41 = occurrences(o40, o37, o36) : us_rep in
  ((forall o42:int. forall o43:us_t. forall temp___330:int.
   occurrences__function_guard(occurrences(o43, o42, temp___330), o43, o42,
   temp___330)) ->
  ((occurrences__function_guard(o41, o40, o37, o36) and (((o36 <  o37) or
  ((length(o41) <= ((o36 - o37) + 1)) and
  (forall k:int. ((in_range(k) and (has_key(o41, k) = true)) -> (get(o41,
  k) <= ((o36 - o37) + 1)))))) and (if (bool_lt(o36,
  o37) = true) then ((is_empty(o41) = true) and
  (length(o41) = 0)) else (is_add((let temp___330 = (o36 - 1) : int in
  occurrences(o40, o37, temp___330)), to_rep((a1[o36])), o41) = true)))) ->
  (let o42 = (l + aii) : int in (in_range(o42) -> (let o43 = (o42 - 1)
  : int in (let o44 = l : int in
  (forall o45:int. ((to_rep(a__last) = o45) ->
  (forall o46:int. ((to_rep(a__first) = o46) -> (let o47 = of_array(a1, o46,
  o45) : us_t in (let o48 = occurrences(o47, o44, o43) : us_rep in
  ((forall o49:int. forall o50:us_t. forall temp___330:int.
   occurrences__function_guard(occurrences(o50, o49, temp___330), o50, o49,
   temp___330)) ->
  ((occurrences__function_guard(o48, o47, o44, o43) and (((o43 <  o44) or
  ((length(o48) <= ((o43 - o44) + 1)) and
  (forall k:int. ((in_range(k) and (has_key(o48, k) = true)) -> (get(o48,
  k) <= ((o43 - o44) + 1)))))) and (if (bool_lt(o43,
  o44) = true) then ((is_empty(o48) = true) and
  (length(o48) = 0)) else (is_add((let temp___330 = (o43 - 1) : int in
  occurrences(o47, o44, temp___330)), to_rep((a1[o43])), o48) = true)))) ->
  (let o49 = (m + 1) : int in (in_range(o49) -> (let o50 = (o49 + rii)
  : int in (in_range(o50) -> (let o51 = (o50 - 1) : int in (let o52 = (m + 1)
  : int in (in_range(o52) -> (let o53 = a_copy : us_t in (let o54 =
  occurrences(o53, o52, o51) : us_rep in
  ((forall o55:int. forall o56:us_t. forall temp___330:int.
   occurrences__function_guard(occurrences(o56, o55, temp___330), o56, o55,
   temp___330)) ->
  ((occurrences__function_guard(o54, o53, o52, o51) and (((o51 <  o52) or
  ((length(o54) <= ((o51 - o52) + 1)) and
  (forall k:int. ((in_range(k) and (has_key(o54, k) = true)) -> (get(o54,
  k) <= ((o51 - o52) + 1)))))) and (if (bool_lt(o51,
  o52) = true) then ((is_empty(o54) = true) and
  (length(o54) = 0)) else (is_add((let temp___330 = (o51 - 1) : int in
  occurrences(o53, o52, temp___330)), to_rep((to_array(o53)[o51])),
  o54) = true)))) -> (let o55 = (l + lii) : int in (in_range(o55) ->
  (let o56 = l : int in (let o57 = a_copy : us_t in (let o58 =
  occurrences(o57, o56, o55) : us_rep in
  ((forall o59:int. forall o60:us_t. forall temp___330:int.
   occurrences__function_guard(occurrences(o60, o59, temp___330), o60, o59,
   temp___330)) ->
  ((occurrences__function_guard(o58, o57, o56, o55) and (((o55 <  o56) or
  ((length(o58) <= ((o55 - o56) + 1)) and
  (forall k:int. ((in_range(k) and (has_key(o58, k) = true)) -> (get(o58,
  k) <= ((o55 - o56) + 1)))))) and (if (bool_lt(o55,
  o56) = true) then ((is_empty(o58) = true) and
  (length(o58) = 0)) else (is_add((let temp___330 = (o55 - 1) : int in
  occurrences(o57, o56, temp___330)), to_rep((to_array(o57)[o55])),
  o58) = true)))) -> (let o59 = (l + lii) : int in (in_range(o59) ->
  (let o60 = (o59 - 1) : int in (let o61 = l : int in (let o62 = a_copy
  : us_t in (let o63 = occurrences(o62, o61, o60) : us_rep in
  ((forall o64:int. forall o65:us_t. forall temp___330:int.
   occurrences__function_guard(occurrences(o65, o64, temp___330), o65, o64,
   temp___330)) ->
  ((occurrences__function_guard(o63, o62, o61, o60) and (((o60 <  o61) or
  ((length(o63) <= ((o60 - o61) + 1)) and
  (forall k:int. ((in_range(k) and (has_key(o63, k) = true)) -> (get(o63,
  k) <= ((o60 - o61) + 1)))))) and (if (bool_lt(o60,
  o61) = true) then ((is_empty(o63) = true) and
  (length(o63) = 0)) else (is_add((let temp___330 = (o60 - 1) : int in
  occurrences(o62, o61, temp___330)), to_rep((to_array(o62)[o60])),
  o63) = true)))) -> ((not (has_key(o63, o35) = true)) -> (get(o58,
  o35) = 1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
