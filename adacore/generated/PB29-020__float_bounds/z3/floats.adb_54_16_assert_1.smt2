;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort float__ 0)

;; "to_rep"
(declare-fun to_rep (float__) Float32)

;; "of_rep"
(declare-fun of_rep (Float32) float__)

;; "inversion_axiom"
(assert
  (forall ((x float__)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x float__))
    (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Float32))
    (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                    (of_rep
                                                                    x))) )))

(declare-sort long_float 0)

;; "to_rep"
(declare-fun to_rep1 (long_float) Float64)

;; "of_rep"
(declare-fun of_rep1 (Float64) long_float)

;; "inversion_axiom"
(assert
  (forall ((x long_float))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x long_float))
    (! (fp.isFinite64 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Float64))
    (! (=> (fp.isFinite64 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                    (of_rep1
                                                                    x))) )))

(declare-const a (Array Int float__))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int long_float))))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_74 Float64) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool
  (=>
    (or
      (= temp___is_init_70 true)
      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
    (fp.isFinite64 temp___expr_74)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "floats__test__b__aggregate_def"
(declare-fun floats__test__b__aggregate_def (Float64
  Float64
  Float64
  Float64) (Array Int long_float))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

;; "floats__test__c__aggregate_def"
(declare-fun floats__test__c__aggregate_def (Float64
  Float64
  Float64
  Float64) (Array Int long_float))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

;; "floats__test__d__aggregate_def"
(declare-fun floats__test__d__aggregate_def (Float64
  Float64
  Float64
  Float64) (Array Int long_float))

(declare-const e (Array Int long_float))

;; "e'unused"
(define-fun eqtunused () map__ref
  (map__refqtmk e))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 3))
      (let ((temp___338 (to_rep (select a i))))
        (and
          (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___338)
          (fp.leq temp___338 (fp #b0 #b01111111 #b00000000000000000000000)))))))

(declare-const temp___200 (Array Int long_float))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 1)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 2)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 3)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 4)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (= temp___200 (floats__test__b__aggregate_def
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "floats__test__b__aggregate_def'result'unused"
(define-fun floats__test__b__aggregate_defqtresultqtunused () (Array Int long_float)
  temp___200)

(declare-const b (Array Int long_float))

;; "b'unused"
(define-fun bqtunused () map__ref
  (map__refqtmk b))

;; "H"
(assert (= b temp___200))

;; "Assume"
(assert true)

(declare-const temp___209 (Array Int long_float))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 1)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 2)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 3)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 4)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (= temp___209 (floats__test__c__aggregate_def
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "floats__test__c__aggregate_def'result'unused"
(define-fun floats__test__c__aggregate_defqtresultqtunused () (Array Int long_float)
  temp___209)

(declare-const c (Array Int long_float))

;; "c'unused"
(define-fun cqtunused () map__ref
  (map__refqtmk c))

;; "H"
(assert (= c temp___209))

;; "Assume"
(assert true)

(declare-const temp___218 (Array Int long_float))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 1)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 2)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 3)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 4)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (= temp___218 (floats__test__d__aggregate_def
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "floats__test__d__aggregate_def'result'unused"
(define-fun floats__test__d__aggregate_defqtresultqtunused () (Array Int long_float)
  temp___218)

(declare-const d (Array Int long_float))

;; "d'unused"
(define-fun dqtunused () map__ref
  (map__refqtmk d))

;; "H"
(assert (= d temp___218))

;; "Assume"
(assert true)

;; "Assert"
(assert
  (let ((temp___223 (to_rep (select a 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___223)
      (fp.leq temp___223 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___227 (to_rep (select a 2))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___227)
      (fp.leq temp___227 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___231 (to_rep (select a 3))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___231)
      (fp.leq temp___231 (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-const o long_float)

;; "Ensures"
(assert
  (= (to_rep1 o) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () long_float
  o)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int long_float)
  e)

;; "o"
(define-fun o1 () (Array Int long_float)
  (store e 1 o))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int long_float)
  o1)

(declare-const e1 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused1 () map__ref
  (map__refqtmk e1))

;; "H"
(assert (= e1 o1))

;; "o"
(define-fun o2 () float__
  (select a 1))

;; "get'result'unused"
(define-fun getqtresultqtunused () float__
  o2)

(declare-const o3 Float32)

;; "Ensures"
(assert (= (to_rep o2) o3))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Float32
  o3)

;; "o"
(define-fun o4 () Float32
  (fp.mul RNE o3 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused () Float32
  o4)

;; "o"
(define-fun o5 () Float64
  ((_ to_fp 11 53) RNE o4))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused () Float64
  o5)

(declare-const o6 long_float)

;; "Ensures"
(assert (= (to_rep1 o6) o5))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused1 () long_float
  o6)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int long_float)
  e1)

;; "o"
(define-fun o7 () (Array Int long_float)
  (store e1 2 o6))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int long_float)
  o7)

(declare-const e2 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused2 () map__ref
  (map__refqtmk e2))

;; "H"
(assert (= e2 o7))

;; "o"
(define-fun o8 () float__
  (select a 2))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () float__
  o8)

(declare-const o9 Float32)

;; "Ensures"
(assert (= (to_rep o8) o9))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Float32
  o9)

;; "o"
(define-fun o10 () Float32
  (fp.mul RNE o9 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused1 () Float32
  o10)

;; "o"
(define-fun o11 () Float64
  ((_ to_fp 11 53) RNE o10))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused1 () Float64
  o11)

(declare-const o12 long_float)

;; "Ensures"
(assert (= (to_rep1 o12) o11))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused2 () long_float
  o12)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int long_float)
  e2)

;; "o"
(define-fun o13 () (Array Int long_float)
  (store e2 3 o12))

;; "set'result'unused"
(define-fun setqtresultqtunused2 () (Array Int long_float)
  o13)

(declare-const e3 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused3 () map__ref
  (map__refqtmk e3))

;; "H"
(assert (= e3 o13))

;; "o"
(define-fun o14 () float__
  (select a 3))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () float__
  o14)

(declare-const o15 Float32)

;; "Ensures"
(assert (= (to_rep o14) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Float32
  o15)

;; "o"
(define-fun o16 () Float32
  (fp.mul RNE o15 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused2 () Float32
  o16)

;; "o"
(define-fun o17 () Float64
  ((_ to_fp 11 53) RNE o16))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused2 () Float64
  o17)

(declare-const o18 long_float)

;; "Ensures"
(assert (= (to_rep1 o18) o17))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused3 () long_float
  o18)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int long_float)
  e3)

;; "o"
(define-fun o19 () (Array Int long_float)
  (store e3 4 o18))

;; "set'result'unused"
(define-fun setqtresultqtunused3 () (Array Int long_float)
  o19)

(declare-const e4 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused4 () map__ref
  (map__refqtmk e4))

;; "H"
(assert (= e4 o19))

;; "Assert"
(assert
  (let ((temp___239 (to_rep1 (select e4 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___239)
      (fp.leq temp___239 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___243 (to_rep1 (select e4 2))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___243)
      (fp.leq temp___243 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___247 (to_rep1 (select e4 3))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___247)
      (fp.leq temp___247 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___251 (to_rep1 (select e4 4))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___251)
      (fp.leq temp___251 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 4))
      (let ((temp___257 (to_rep1 (select e4 i))))
        (and
          (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___257)
          (fp.leq temp___257 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))))

(declare-const o20 long_float)

;; "Ensures"
(assert
  (= (to_rep1 o20) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused4 () long_float
  o20)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused4 () (Array Int long_float)
  c)

;; "o"
(define-fun o21 () (Array Int long_float)
  (store c 1 o20))

;; "set'result'unused"
(define-fun setqtresultqtunused4 () (Array Int long_float)
  o21)

(declare-const c1 (Array Int long_float))

;; "c'unused"
(define-fun cqtunused1 () map__ref
  (map__refqtmk c1))

;; "H"
(assert (= c1 o21))

;; "o"
(define-fun o22 () float__
  (select a 1))

;; "get'result'unused"
(define-fun getqtresultqtunused3 () float__
  o22)

(declare-const o23 Float32)

;; "Ensures"
(assert (= (to_rep o22) o23))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () Float32
  o23)

;; "o"
(define-fun o24 () Float32
  (fp.mul RNE o23 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused3 () Float32
  o24)

;; "o"
(define-fun o25 () Float64
  ((_ to_fp 11 53) RNE o24))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused3 () Float64
  o25)

(declare-const o26 long_float)

;; "Ensures"
(assert (= (to_rep1 o26) o25))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused5 () long_float
  o26)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused5 () (Array Int long_float)
  c1)

;; "o"
(define-fun o27 () (Array Int long_float)
  (store c1 2 o26))

;; "set'result'unused"
(define-fun setqtresultqtunused5 () (Array Int long_float)
  o27)

(declare-const c2 (Array Int long_float))

;; "c'unused"
(define-fun cqtunused2 () map__ref
  (map__refqtmk c2))

;; "H"
(assert (= c2 o27))

;; "o"
(define-fun o28 () float__
  (select a 2))

;; "get'result'unused"
(define-fun getqtresultqtunused4 () float__
  o28)

(declare-const o29 Float32)

;; "Ensures"
(assert (= (to_rep o28) o29))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () Float32
  o29)

;; "o"
(define-fun o30 () Float32
  (fp.mul RNE o29 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused4 () Float32
  o30)

;; "o"
(define-fun o31 () Float64
  ((_ to_fp 11 53) RNE o30))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused4 () Float64
  o31)

(declare-const o32 long_float)

;; "Ensures"
(assert (= (to_rep1 o32) o31))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused6 () long_float
  o32)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused6 () (Array Int long_float)
  c2)

;; "o"
(define-fun o33 () (Array Int long_float)
  (store c2 3 o32))

;; "set'result'unused"
(define-fun setqtresultqtunused6 () (Array Int long_float)
  o33)

(declare-const c3 (Array Int long_float))

;; "c'unused"
(define-fun cqtunused3 () map__ref
  (map__refqtmk c3))

;; "H"
(assert (= c3 o33))

;; "o"
(define-fun o34 () float__
  (select a 3))

;; "get'result'unused"
(define-fun getqtresultqtunused5 () float__
  o34)

(declare-const o35 Float32)

;; "Ensures"
(assert (= (to_rep o34) o35))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused5 () Float32
  o35)

;; "o"
(define-fun o36 () Float32
  (fp.mul RNE o35 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused5 () Float32
  o36)

;; "o"
(define-fun o37 () Float64
  ((_ to_fp 11 53) RNE o36))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused5 () Float64
  o37)

(declare-const o38 long_float)

;; "Ensures"
(assert (= (to_rep1 o38) o37))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused7 () long_float
  o38)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused7 () (Array Int long_float)
  c3)

;; "o"
(define-fun o39 () (Array Int long_float)
  (store c3 4 o38))

;; "set'result'unused"
(define-fun setqtresultqtunused7 () (Array Int long_float)
  o39)

(declare-const c4 (Array Int long_float))

;; "c'unused"
(define-fun cqtunused4 () map__ref
  (map__refqtmk c4))

;; "H"
(assert (= c4 o39))

;; "Assert"
(assert
  (let ((temp___265 (to_rep1 (select c4 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___265)
      (fp.leq temp___265 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___269 (to_rep1 (select c4 2))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___269)
      (fp.leq temp___269 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___273 (to_rep1 (select c4 3))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___273)
      (fp.leq temp___273 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___277 (to_rep1 (select c4 4))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___277)
      (fp.leq temp___277 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 4))
      (let ((temp___283 (to_rep1 (select c4 i))))
        (and
          (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___283)
          (fp.leq temp___283 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))))

(declare-const o40 long_float)

;; "Ensures"
(assert
  (= (to_rep1 o40) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused8 () long_float
  o40)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused8 () (Array Int long_float)
  b)

;; "o"
(define-fun o41 () (Array Int long_float)
  (store b 1 o40))

;; "set'result'unused"
(define-fun setqtresultqtunused8 () (Array Int long_float)
  o41)

(declare-const b1 (Array Int long_float))

;; "b'unused"
(define-fun bqtunused1 () map__ref
  (map__refqtmk b1))

;; "H"
(assert (= b1 o41))

;; "o"
(define-fun o42 () float__
  (select a 1))

;; "get'result'unused"
(define-fun getqtresultqtunused6 () float__
  o42)

(declare-const o43 Float32)

;; "Ensures"
(assert (= (to_rep o42) o43))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused6 () Float32
  o43)

;; "o"
(define-fun o44 () Float32
  (fp.mul RNE o43 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused6 () Float32
  o44)

;; "o"
(define-fun o45 () Float64
  ((_ to_fp 11 53) RNE o44))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused6 () Float64
  o45)

(declare-const o46 long_float)

;; "Ensures"
(assert (= (to_rep1 o46) o45))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused9 () long_float
  o46)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused9 () (Array Int long_float)
  b1)

;; "o"
(define-fun o47 () (Array Int long_float)
  (store b1 2 o46))

;; "set'result'unused"
(define-fun setqtresultqtunused9 () (Array Int long_float)
  o47)

(declare-const b2 (Array Int long_float))

;; "b'unused"
(define-fun bqtunused2 () map__ref
  (map__refqtmk b2))

;; "H"
(assert (= b2 o47))

;; "o"
(define-fun o48 () float__
  (select a 2))

;; "get'result'unused"
(define-fun getqtresultqtunused7 () float__
  o48)

(declare-const o49 Float32)

;; "Ensures"
(assert (= (to_rep o48) o49))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused7 () Float32
  o49)

;; "o"
(define-fun o50 () Float32
  (fp.mul RNE o49 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused7 () Float32
  o50)

;; "o"
(define-fun o51 () Float64
  ((_ to_fp 11 53) RNE o50))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused7 () Float64
  o51)

(declare-const o52 long_float)

;; "Ensures"
(assert (= (to_rep1 o52) o51))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused10 () long_float
  o52)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused10 () (Array Int long_float)
  b2)

;; "o"
(define-fun o53 () (Array Int long_float)
  (store b2 3 o52))

;; "set'result'unused"
(define-fun setqtresultqtunused10 () (Array Int long_float)
  o53)

(declare-const b3 (Array Int long_float))

;; "b'unused"
(define-fun bqtunused3 () map__ref
  (map__refqtmk b3))

;; "H"
(assert (= b3 o53))

;; "o"
(define-fun o54 () float__
  (select a 3))

;; "get'result'unused"
(define-fun getqtresultqtunused8 () float__
  o54)

(declare-const o55 Float32)

;; "Ensures"
(assert (= (to_rep o54) o55))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused8 () Float32
  o55)

;; "o"
(define-fun o56 () Float32
  (fp.mul RNE o55 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused8 () Float32
  o56)

;; "o"
(define-fun o57 () Float64
  ((_ to_fp 11 53) RNE o56))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused8 () Float64
  o57)

(declare-const o58 long_float)

;; "Ensures"
(assert (= (to_rep1 o58) o57))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused11 () long_float
  o58)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused11 () (Array Int long_float)
  b3)

;; "o"
(define-fun o59 () (Array Int long_float)
  (store b3 4 o58))

;; "set'result'unused"
(define-fun setqtresultqtunused11 () (Array Int long_float)
  o59)

(declare-const b4 (Array Int long_float))

;; "b'unused"
(define-fun bqtunused4 () map__ref
  (map__refqtmk b4))

;; "H"
(assert (= b4 o59))

;; "Assert"
(assert
  (let ((temp___291 (to_rep1 (select b4 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___291)
      (fp.leq temp___291 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___295 (to_rep1 (select b4 2))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___295)
      (fp.leq temp___295 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___299 (to_rep1 (select b4 3))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___299)
      (fp.leq temp___299 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___303 (to_rep1 (select b4 4))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___303)
      (fp.leq temp___303 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 4))
      (let ((temp___309 (to_rep1 (select b4 i))))
        (and
          (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___309)
          (fp.leq temp___309 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused12 () (Array Int long_float)
  b4)

;; "o"
(define-fun o60 () long_float
  (select b4 1))

;; "get'result'unused"
(define-fun getqtresultqtunused9 () long_float
  o60)

(declare-const o61 Float64)

;; "Ensures"
(assert (= (to_rep1 o60) o61))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused9 () Float64
  o61)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused13 () (Array Int long_float)
  c4)

;; "o"
(define-fun o62 () long_float
  (select c4 1))

;; "get'result'unused"
(define-fun getqtresultqtunused10 () long_float
  o62)

(declare-const o63 Float64)

;; "Ensures"
(assert (= (to_rep1 o62) o63))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused10 () Float64
  o63)

;; "o"
(define-fun o64 () Float64
  (fp.add RNE o63 o61))

;; "add_rne'result'unused"
(define-fun add_rneqtresultqtunused () Float64
  o64)

;; "Ensures"
(assert (fp.isFinite64 o64))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Float64
  o64)

(declare-const o65 long_float)

;; "Ensures"
(assert (= (to_rep1 o65) o64))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused12 () long_float
  o65)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused14 () (Array Int long_float)
  d)

;; "o"
(define-fun o66 () (Array Int long_float)
  (store d 1 o65))

;; "set'result'unused"
(define-fun setqtresultqtunused12 () (Array Int long_float)
  o66)

(declare-const d1 (Array Int long_float))

;; "d'unused"
(define-fun dqtunused1 () map__ref
  (map__refqtmk d1))

;; "H"
(assert (= d1 o66))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused15 () (Array Int long_float)
  b4)

;; "o"
(define-fun o67 () long_float
  (select b4 2))

;; "get'result'unused"
(define-fun getqtresultqtunused11 () long_float
  o67)

(declare-const o68 Float64)

;; "Ensures"
(assert (= (to_rep1 o67) o68))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused11 () Float64
  o68)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused16 () (Array Int long_float)
  c4)

;; "o"
(define-fun o69 () long_float
  (select c4 2))

;; "get'result'unused"
(define-fun getqtresultqtunused12 () long_float
  o69)

(declare-const o70 Float64)

;; "Ensures"
(assert (= (to_rep1 o69) o70))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused12 () Float64
  o70)

;; "o"
(define-fun o71 () Float64
  (fp.add RNE o70 o68))

;; "add_rne'result'unused"
(define-fun add_rneqtresultqtunused1 () Float64
  o71)

;; "Ensures"
(assert (fp.isFinite64 o71))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Float64
  o71)

(declare-const o72 long_float)

;; "Ensures"
(assert (= (to_rep1 o72) o71))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused13 () long_float
  o72)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused17 () (Array Int long_float)
  d1)

;; "o"
(define-fun o73 () (Array Int long_float)
  (store d1 2 o72))

;; "set'result'unused"
(define-fun setqtresultqtunused13 () (Array Int long_float)
  o73)

(declare-const d2 (Array Int long_float))

;; "d'unused"
(define-fun dqtunused2 () map__ref
  (map__refqtmk d2))

;; "H"
(assert (= d2 o73))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused18 () (Array Int long_float)
  b4)

;; "o"
(define-fun o74 () long_float
  (select b4 3))

;; "get'result'unused"
(define-fun getqtresultqtunused13 () long_float
  o74)

(declare-const o75 Float64)

;; "Ensures"
(assert (= (to_rep1 o74) o75))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused13 () Float64
  o75)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused19 () (Array Int long_float)
  c4)

;; "o"
(define-fun o76 () long_float
  (select c4 3))

;; "get'result'unused"
(define-fun getqtresultqtunused14 () long_float
  o76)

(declare-const o77 Float64)

;; "Ensures"
(assert (= (to_rep1 o76) o77))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused14 () Float64
  o77)

;; "o"
(define-fun o78 () Float64
  (fp.add RNE o77 o75))

;; "add_rne'result'unused"
(define-fun add_rneqtresultqtunused2 () Float64
  o78)

;; "Ensures"
(assert (fp.isFinite64 o78))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Float64
  o78)

(declare-const o79 long_float)

;; "Ensures"
(assert (= (to_rep1 o79) o78))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused14 () long_float
  o79)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused20 () (Array Int long_float)
  d2)

;; "o"
(define-fun o80 () (Array Int long_float)
  (store d2 3 o79))

;; "set'result'unused"
(define-fun setqtresultqtunused14 () (Array Int long_float)
  o80)

(declare-const d3 (Array Int long_float))

;; "d'unused"
(define-fun dqtunused3 () map__ref
  (map__refqtmk d3))

;; "H"
(assert (= d3 o80))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused21 () (Array Int long_float)
  b4)

;; "o"
(define-fun o81 () long_float
  (select b4 4))

;; "get'result'unused"
(define-fun getqtresultqtunused15 () long_float
  o81)

(declare-const o82 Float64)

;; "Ensures"
(assert (= (to_rep1 o81) o82))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused15 () Float64
  o82)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused22 () (Array Int long_float)
  c4)

;; "o"
(define-fun o83 () long_float
  (select c4 4))

;; "get'result'unused"
(define-fun getqtresultqtunused16 () long_float
  o83)

(declare-const o84 Float64)

;; "Ensures"
(assert (= (to_rep1 o83) o84))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused16 () Float64
  o84)

;; "o"
(define-fun o85 () Float64
  (fp.add RNE o84 o82))

;; "add_rne'result'unused"
(define-fun add_rneqtresultqtunused3 () Float64
  o85)

;; "Ensures"
(assert (fp.isFinite64 o85))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused3 () Float64
  o85)

(declare-const o86 long_float)

;; "Ensures"
(assert (= (to_rep1 o86) o85))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused15 () long_float
  o86)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused23 () (Array Int long_float)
  d3)

;; "o"
(define-fun o87 () (Array Int long_float)
  (store d3 4 o86))

;; "set'result'unused"
(define-fun setqtresultqtunused15 () (Array Int long_float)
  o87)

(declare-const d4 (Array Int long_float))

;; "d'unused"
(define-fun dqtunused4 () map__ref
  (map__refqtmk d4))

;; "H"
(assert (= d4 o87))

;; "Assert"
(assert
  (let ((temp___317 (to_rep1 (select d4 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000)) temp___317)
      (fp.leq temp___317 (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000)))))

;; "temp___321"
(define-fun temp___321 () Float64
  (to_rep1 (select d4 2)))

;; Goal "def'vc"
;; File "floats.ads", line 5, characters 0-0
(assert
  (not
  (fp.leq (fp.neg (fp #b0 #b10000000000 #b0000000000000000000000000000000000000000000000000000)) 
  temp___321)))

(check-sat)
