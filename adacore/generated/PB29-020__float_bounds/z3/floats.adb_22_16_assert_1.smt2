;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort float__ 0)

;; "to_rep"
(declare-fun to_rep (float__) Float32)

;; "of_rep"
(declare-fun of_rep (Float32) float__)

;; "inversion_axiom"
(assert
  (forall ((x float__)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x float__))
    (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Float32))
    (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                    (of_rep
                                                                    x))) )))

(declare-sort long_float 0)

;; "to_rep"
(declare-fun to_rep1 (long_float) Float64)

;; "of_rep"
(declare-fun of_rep1 (Float64) long_float)

;; "inversion_axiom"
(assert
  (forall ((x long_float))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x long_float))
    (! (fp.isFinite64 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Float64))
    (! (=> (fp.isFinite64 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                    (of_rep1
                                                                    x))) )))

(declare-const a (Array Int float__))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int long_float))))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_74 Float64) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool
  (=>
    (or
      (= temp___is_init_70 true)
      (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
    (fp.isFinite64 temp___expr_74)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "floats__test__b__aggregate_def"
(declare-fun floats__test__b__aggregate_def (Float64
  Float64
  Float64
  Float64) (Array Int long_float))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

;; "floats__test__c__aggregate_def"
(declare-fun floats__test__c__aggregate_def (Float64
  Float64
  Float64
  Float64) (Array Int long_float))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

;; "floats__test__d__aggregate_def"
(declare-fun floats__test__d__aggregate_def (Float64
  Float64
  Float64
  Float64) (Array Int long_float))

(declare-const e (Array Int long_float))

;; "e'unused"
(define-fun eqtunused () map__ref
  (map__refqtmk e))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert
  (forall ((i Int))
    (=>
      (and (<= 1 i) (<= i 3))
      (let ((temp___338 (to_rep (select a i))))
        (and
          (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___338)
          (fp.leq temp___338 (fp #b0 #b01111111 #b00000000000000000000000)))))))

(declare-const temp___200 (Array Int long_float))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 1)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 2)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 3)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___200 4)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (= temp___200 (floats__test__b__aggregate_def
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "floats__test__b__aggregate_def'result'unused"
(define-fun floats__test__b__aggregate_defqtresultqtunused () (Array Int long_float)
  temp___200)

(declare-const b (Array Int long_float))

;; "b'unused"
(define-fun bqtunused () map__ref
  (map__refqtmk b))

;; "H"
(assert (= b temp___200))

;; "Assume"
(assert true)

(declare-const temp___209 (Array Int long_float))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 1)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 2)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 3)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___209 4)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (= temp___209 (floats__test__c__aggregate_def
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "floats__test__c__aggregate_def'result'unused"
(define-fun floats__test__c__aggregate_defqtresultqtunused () (Array Int long_float)
  temp___209)

(declare-const c (Array Int long_float))

;; "c'unused"
(define-fun cqtunused () map__ref
  (map__refqtmk c))

;; "H"
(assert (= c temp___209))

;; "Assume"
(assert true)

(declare-const temp___218 (Array Int long_float))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 1)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 2)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 3)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (=>
    (dynamic_invariant
      (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
      true
      true
      true
      true)
    (= (to_rep1 (select temp___218 4)) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "H"
(assert
  (= temp___218 (floats__test__d__aggregate_def
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))

;; "floats__test__d__aggregate_def'result'unused"
(define-fun floats__test__d__aggregate_defqtresultqtunused () (Array Int long_float)
  temp___218)

(declare-const d (Array Int long_float))

;; "d'unused"
(define-fun dqtunused () map__ref
  (map__refqtmk d))

;; "H"
(assert (= d temp___218))

;; "Assume"
(assert true)

;; "Assert"
(assert
  (let ((temp___223 (to_rep (select a 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___223)
      (fp.leq temp___223 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___227 (to_rep (select a 2))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___227)
      (fp.leq temp___227 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___231 (to_rep (select a 3))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) temp___231)
      (fp.leq temp___231 (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-const o long_float)

;; "Ensures"
(assert
  (= (to_rep1 o) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () long_float
  o)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int long_float)
  e)

;; "o"
(define-fun o1 () (Array Int long_float)
  (store e 1 o))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int long_float)
  o1)

(declare-const e1 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused1 () map__ref
  (map__refqtmk e1))

;; "H"
(assert (= e1 o1))

;; "o"
(define-fun o2 () float__
  (select a 1))

;; "get'result'unused"
(define-fun getqtresultqtunused () float__
  o2)

(declare-const o3 Float32)

;; "Ensures"
(assert (= (to_rep o2) o3))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Float32
  o3)

;; "o"
(define-fun o4 () Float32
  (fp.mul RNE o3 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused () Float32
  o4)

;; "o"
(define-fun o5 () Float64
  ((_ to_fp 11 53) RNE o4))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused () Float64
  o5)

(declare-const o6 long_float)

;; "Ensures"
(assert (= (to_rep1 o6) o5))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused1 () long_float
  o6)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int long_float)
  e1)

;; "o"
(define-fun o7 () (Array Int long_float)
  (store e1 2 o6))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int long_float)
  o7)

(declare-const e2 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused2 () map__ref
  (map__refqtmk e2))

;; "H"
(assert (= e2 o7))

;; "o"
(define-fun o8 () float__
  (select a 2))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () float__
  o8)

(declare-const o9 Float32)

;; "Ensures"
(assert (= (to_rep o8) o9))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Float32
  o9)

;; "o"
(define-fun o10 () Float32
  (fp.mul RNE o9 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused1 () Float32
  o10)

;; "o"
(define-fun o11 () Float64
  ((_ to_fp 11 53) RNE o10))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused1 () Float64
  o11)

(declare-const o12 long_float)

;; "Ensures"
(assert (= (to_rep1 o12) o11))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused2 () long_float
  o12)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int long_float)
  e2)

;; "o"
(define-fun o13 () (Array Int long_float)
  (store e2 3 o12))

;; "set'result'unused"
(define-fun setqtresultqtunused2 () (Array Int long_float)
  o13)

(declare-const e3 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused3 () map__ref
  (map__refqtmk e3))

;; "H"
(assert (= e3 o13))

;; "o"
(define-fun o14 () float__
  (select a 3))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () float__
  o14)

(declare-const o15 Float32)

;; "Ensures"
(assert (= (to_rep o14) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Float32
  o15)

;; "o"
(define-fun o16 () Float32
  (fp.mul RNE o15 (fp #b0 #b01111110 #b00000000000000000000000)))

;; "mul_rne'result'unused"
(define-fun mul_rneqtresultqtunused2 () Float32
  o16)

;; "o"
(define-fun o17 () Float64
  ((_ to_fp 11 53) RNE o16))

;; "to_float64_rne'result'unused"
(define-fun to_float64_rneqtresultqtunused2 () Float64
  o17)

(declare-const o18 long_float)

;; "Ensures"
(assert (= (to_rep1 o18) o17))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused3 () long_float
  o18)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int long_float)
  e3)

;; "o"
(define-fun o19 () (Array Int long_float)
  (store e3 4 o18))

;; "set'result'unused"
(define-fun setqtresultqtunused3 () (Array Int long_float)
  o19)

(declare-const e4 (Array Int long_float))

;; "e'unused"
(define-fun eqtunused4 () map__ref
  (map__refqtmk e4))

;; "H"
(assert (= e4 o19))

;; "Assert"
(assert
  (let ((temp___239 (to_rep1 (select e4 1))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___239)
      (fp.leq temp___239 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "Assert"
(assert
  (let ((temp___243 (to_rep1 (select e4 2))))
    (and
      (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) temp___243)
      (fp.leq temp___243 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

;; "temp___247"
(define-fun temp___247 () Float64
  (to_rep1 (select e4 3)))

;; Goal "def'vc"
;; File "floats.ads", line 5, characters 0-0
(assert
  (not
  (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) 
  temp___247)))

(check-sat)
