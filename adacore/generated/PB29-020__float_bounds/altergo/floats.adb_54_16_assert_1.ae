(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type us_private

logic us_null_ext__ : us_private

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) ->
  (((-340282346638528859811704183484516925440.0) <= tqtreal(x)) and
  (tqtreal(x) <= 340282346638528859811704183484516925440.0))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

axiom eb_gt_1 : (1 <  8)

axiom sb_gt_1 : (1 <  24)

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

axiom max_int_spec :
  (340282346638528859811704183484516925440 = (pow2(pow2((8 - 1))) - pow2((pow2((8 - 1)) - 24))))

axiom max_real_int :
  (0x1.FFFFFEp127 = real_of_int(340282346638528859811704183484516925440))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) =
  (((-340282346638528859811704183484516925440) <= i) and
  (i <= 340282346638528859811704183484516925440))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) -> no_overflow(m,
  x)))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

axiom pow2sb : (16777216 = pow2(24))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> (tqtisFinite(add(m, x, y)) and
  (tqtreal(add(m, x, y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) and (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> (tqtisFinite(sub(m, x, y)) and
  (tqtreal(sub(m, x, y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) and (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> (tqtisFinite(mul(m, x, y)) and
  (tqtreal(mul(m, x, y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) and (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (no_overflow(m, (tqtreal(x) / tqtreal(y))) and (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (no_overflow(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float32(m,sqrt_real(tqtreal(x))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  ((((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x)) and
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150)))))

logic fliteral : t

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

type t1

logic tqtreal1 : t1 -> real

logic tqtisFinite1 : t1 -> prop

axiom tqtaxiom1 :
  (forall x:t1. (tqtisFinite1(x) ->
  (((-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0) <= tqtreal1(x)) and
  (tqtreal1(x) <= 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0))))

axiom eb_gt_11 : (1 <  11)

axiom sb_gt_11 : (1 <  53)

logic zeroF1 : t1

logic add1 : fpa_rounding_mode, t1, t1 -> t1

logic sub1 : fpa_rounding_mode, t1, t1 -> t1

logic mul1 : fpa_rounding_mode, t1, t1 -> t1

logic div1 : fpa_rounding_mode, t1, t1 -> t1

logic abs1 : t1 -> t1

logic neg1 : t1 -> t1

logic fma1 : fpa_rounding_mode, t1, t1, t1 -> t1

logic sqrt1 : fpa_rounding_mode, t1 -> t1

logic roundToIntegral1 : fpa_rounding_mode, t1 -> t1

logic min1 : t1, t1 -> t1

logic max1 : t1, t1 -> t1

logic le1 : t1, t1 -> prop

logic lt1 : t1, t1 -> prop

logic eq1 : t1, t1 -> prop

logic is_zero1 : t1 -> prop

logic is_infinite1 : t1 -> prop

logic is_nan1 : t1 -> prop

logic is_positive1 : t1 -> prop

logic is_negative1 : t1 -> prop

predicate is_not_nan2(x: t1) = (tqtisFinite1(x) or is_infinite1(x))

axiom is_not_nan3 : (forall x:t1. (is_not_nan2(x) <-> (not is_nan1(x))))

axiom is_not_finite1 :
  (forall x:t1. ((not tqtisFinite1(x)) <-> (is_infinite1(x) or is_nan1(x))))

axiom zeroF_is_positive1 : is_positive1(zeroF1)

axiom zeroF_is_zero1 : is_zero1(zeroF1)

axiom zero_to_real1 :
  (forall x:t1 [is_zero1(x)]. (is_zero1(x) <-> (tqtisFinite1(x) and
  (tqtreal1(x) = 0.0))))

logic of_int1 : fpa_rounding_mode, int -> t1

logic to_int1 : fpa_rounding_mode, t1 -> int

axiom zero_of_int1 : (forall m:fpa_rounding_mode. (zeroF1 = of_int1(m, 0)))

axiom max_int_spec1 :
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368 = (pow2(pow2((11 - 1))) - pow2((pow2((11 - 1)) - 53))))

axiom max_real_int1 :
  (0x1.FFFFFFFFFFFFFp1023 = real_of_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

predicate in_range1(x: real) = (((-0x1.FFFFFFFFFFFFFp1023) <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023))

predicate in_int_range1(i: int) =
  (((-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368) <= i) and
  (i <= 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

axiom is_finite1 : (forall x:t1. (tqtisFinite1(x) -> in_range1(tqtreal1(x))))

predicate no_overflow1(m: fpa_rounding_mode, x: real) =
  in_range1(float64(m,x))

axiom Bounded_real_no_overflow1 :
  (forall m:fpa_rounding_mode. forall x:real. (in_range1(x) ->
  no_overflow1(m, x)))

axiom Round_to_real1 :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite1(x) ->
  (float64(m,tqtreal1(x)) = tqtreal1(x))))

axiom Round_down_le1 : (forall x:real. (float64(Down,x) <= x))

axiom Round_up_ge1 : (forall x:real. (x <= float64(Up,x)))

axiom Round_down_neg1 :
  (forall x:real. (float64(Down,(-x)) = (-float64(Up,x))))

axiom Round_up_neg1 :
  (forall x:real. (float64(Up,(-x)) = (-float64(Down,x))))

axiom pow2sb1 : (9007199254740992 = pow2(53))

predicate in_safe_int_range1(i: int) = (((-9007199254740992) <= i) and
  (i <= 9007199254740992))

axiom Exact_rounding_for_integers1 :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range1(i) ->
  (float64(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign1(x: t1, y: t1) = ((is_positive1(x) and
  is_positive1(y)) or (is_negative1(x) and is_negative1(y)))

predicate diff_sign1(x: t1, y: t1) = ((is_positive1(x) and
  is_negative1(y)) or (is_negative1(x) and is_positive1(y)))

axiom feq_eq1 :
  (forall x:t1. forall y:t1. (tqtisFinite1(x) -> (tqtisFinite1(y) ->
  ((not is_zero1(x)) -> (eq1(x, y) -> (x = y))))))

axiom eq_feq1 :
  (forall x:t1. forall y:t1. (tqtisFinite1(x) -> (tqtisFinite1(y) ->
  ((x = y) -> eq1(x, y)))))

axiom eq_refl1 : (forall x:t1. (tqtisFinite1(x) -> eq1(x, x)))

axiom eq_sym1 : (forall x:t1. forall y:t1. (eq1(x, y) -> eq1(y, x)))

axiom eq_trans1 :
  (forall x:t1. forall y:t1. forall z:t1. (eq1(x, y) -> (eq1(y, z) -> eq1(x,
  z))))

axiom eq_zero1 : eq1(zeroF1, neg1(zeroF1))

axiom eq_to_real_finite1 :
  (forall x:t1. forall y:t1. ((tqtisFinite1(x) and tqtisFinite1(y)) ->
  (eq1(x, y) <-> (tqtreal1(x) = tqtreal1(y)))))

axiom lt_finite1 :
  (forall x:t1. forall y:t1 [lt1(x, y)]. ((tqtisFinite1(x) and
  tqtisFinite1(y)) -> (lt1(x, y) <-> (tqtreal1(x) <  tqtreal1(y)))))

axiom le_finite1 :
  (forall x:t1. forall y:t1 [le1(x, y)]. ((tqtisFinite1(x) and
  tqtisFinite1(y)) -> (le1(x, y) <-> (tqtreal1(x) <= tqtreal1(y)))))

axiom le_lt_trans1 :
  (forall x:t1. forall y:t1. forall z:t1. ((le1(x, y) and lt1(y, z)) ->
  lt1(x, z)))

axiom lt_le_trans1 :
  (forall x:t1. forall y:t1. forall z:t1. ((lt1(x, y) and le1(y, z)) ->
  lt1(x, z)))

axiom le_ge_asym1 :
  (forall x:t1. forall y:t1. ((le1(x, y) and le1(y, x)) -> eq1(x, y)))

axiom not_lt_ge1 :
  (forall x:t1. forall y:t1. (((not lt1(x, y)) and (is_not_nan2(x) and
  is_not_nan2(y))) -> le1(y, x)))

axiom not_gt_le1 :
  (forall x:t1. forall y:t1. (((not lt1(y, x)) and (is_not_nan2(x) and
  is_not_nan2(y))) -> le1(x, y)))

axiom lt_lt_finite1 :
  (forall x:t1. forall y:t1. forall z:t1. (lt1(x, y) -> (lt1(y, z) ->
  tqtisFinite1(y))))

axiom positive_to_real1 :
  (forall x:t1 [is_positive1(x)]. (tqtisFinite1(x) -> (is_positive1(x) ->
  (0.0 <= tqtreal1(x)))))

axiom to_real_positive1 :
  (forall x:t1 [is_positive1(x)]. (tqtisFinite1(x) ->
  ((0.0 <  tqtreal1(x)) -> is_positive1(x))))

axiom negative_to_real1 :
  (forall x:t1 [is_negative1(x)]. (tqtisFinite1(x) -> (is_negative1(x) ->
  (tqtreal1(x) <= 0.0))))

axiom to_real_negative1 :
  (forall x:t1 [is_negative1(x)]. (tqtisFinite1(x) ->
  ((tqtreal1(x) <  0.0) -> is_negative1(x))))

axiom negative_xor_positive1 :
  (forall x:t1. (not (is_positive1(x) and is_negative1(x))))

axiom negative_or_positive1 :
  (forall x:t1. (is_not_nan2(x) -> (is_positive1(x) or is_negative1(x))))

axiom diff_sign_trans1 :
  (forall x:t1. forall y:t1. forall z:t1. ((diff_sign1(x, y) and
  diff_sign1(y, z)) -> same_sign1(x, z)))

axiom diff_sign_product1 :
  (forall x:t1. forall y:t1. ((tqtisFinite1(x) and (tqtisFinite1(y) and
  ((tqtreal1(x) * tqtreal1(y)) <  0.0))) -> diff_sign1(x, y)))

axiom same_sign_product1 :
  (forall x:t1. forall y:t1. ((tqtisFinite1(x) and (tqtisFinite1(y) and
  same_sign1(x, y))) -> (0.0 <= (tqtreal1(x) * tqtreal1(y)))))

axiom add_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite1(x) -> (tqtisFinite1(y) -> (no_overflow1(m,
  (tqtreal1(x) + tqtreal1(y))) -> (tqtisFinite1(add1(m, x, y)) and
  (tqtreal1(add1(m, x, y)) = float64(m,(tqtreal1(x) + tqtreal1(y)))))))))

axiom add_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite1(add1(m, x, y)) -> (tqtisFinite1(x) and tqtisFinite1(y))))

axiom add_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite1(add1(m, x, y)) -> (no_overflow1(m,
  (tqtreal1(x) + tqtreal1(y))) and (tqtreal1(add1(m, x,
  y)) = float64(m,(tqtreal1(x) + tqtreal1(y))))))))

axiom sub_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite1(x) -> (tqtisFinite1(y) -> (no_overflow1(m,
  (tqtreal1(x) - tqtreal1(y))) -> (tqtisFinite1(sub1(m, x, y)) and
  (tqtreal1(sub1(m, x, y)) = float64(m,(tqtreal1(x) - tqtreal1(y)))))))))

axiom sub_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite1(sub1(m, x, y)) -> (tqtisFinite1(x) and tqtisFinite1(y))))

axiom sub_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite1(sub1(m, x, y)) -> (no_overflow1(m,
  (tqtreal1(x) - tqtreal1(y))) and (tqtreal1(sub1(m, x,
  y)) = float64(m,(tqtreal1(x) - tqtreal1(y))))))))

axiom mul_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite1(x) -> (tqtisFinite1(y) -> (no_overflow1(m,
  (tqtreal1(x) * tqtreal1(y))) -> (tqtisFinite1(mul1(m, x, y)) and
  (tqtreal1(mul1(m, x, y)) = float64(m,(tqtreal1(x) * tqtreal1(y)))))))))

axiom mul_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite1(mul1(m, x, y)) -> (tqtisFinite1(x) and tqtisFinite1(y))))

axiom mul_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite1(mul1(m, x, y)) -> (no_overflow1(m,
  (tqtreal1(x) * tqtreal1(y))) and (tqtreal1(mul1(m, x,
  y)) = float64(m,(tqtreal1(x) * tqtreal1(y))))))))

axiom div_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div1(m, x, y)].
  (tqtisFinite1(x) -> (tqtisFinite1(y) -> ((not is_zero1(y)) ->
  (no_overflow1(m, (tqtreal1(x) / tqtreal1(y))) -> (tqtisFinite1(div1(m, x,
  y)) and (tqtreal1(div1(m, x,
  y)) = float64(m,(tqtreal1(x) / tqtreal1(y))))))))))

axiom div_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div1(m, x, y)].
  (tqtisFinite1(div1(m, x, y)) -> ((tqtisFinite1(x) and (tqtisFinite1(y) and
  (not is_zero1(y)))) or (tqtisFinite1(x) and (is_infinite1(y) and
  (tqtreal1(div1(m, x, y)) = 0.0))))))

axiom div_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite1(div1(m, x, y)) -> (tqtisFinite1(y) ->
  (no_overflow1(m, (tqtreal1(x) / tqtreal1(y))) and (tqtreal1(div1(m, x,
  y)) = float64(m,(tqtreal1(x) / tqtreal1(y)))))))))

axiom neg_finite1 :
  (forall x:t1 [neg1(x)]. (tqtisFinite1(x) -> (tqtisFinite1(neg1(x)) and
  (tqtreal1(neg1(x)) = (-tqtreal1(x))))))

axiom neg_finite_rev1 :
  (forall x:t1 [neg1(x)]. (tqtisFinite1(neg1(x)) -> (tqtisFinite1(x) and
  (tqtreal1(neg1(x)) = (-tqtreal1(x))))))

axiom abs_finite1 :
  (forall x:t1 [abs1(x)]. (tqtisFinite1(x) -> (tqtisFinite1(abs1(x)) and
  ((tqtreal1(abs1(x)) = abs_real(tqtreal1(x))) and is_positive1(abs1(x))))))

axiom abs_finite_rev1 :
  (forall x:t1 [abs1(x)]. (tqtisFinite1(abs1(x)) -> (tqtisFinite1(x) and
  (tqtreal1(abs1(x)) = abs_real(tqtreal1(x))))))

axiom abs_universal1 : (forall x:t1 [abs1(x)]. (not is_negative1(abs1(x))))

axiom fma_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma1(m,
  x, y, z)]. (tqtisFinite1(fma1(m, x, y, z)) -> (tqtisFinite1(x) and
  (tqtisFinite1(y) and tqtisFinite1(z)))))

axiom fma_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma1(m,
  x, y, z)]. (to_nearest(m) -> (tqtisFinite1(fma1(m, x, y, z)) ->
  (no_overflow1(m, ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))) and
  (tqtreal1(fma1(m, x, y,
  z)) = float64(m,((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))))))))

axiom sqrt_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt1(m, x)].
  (tqtisFinite1(sqrt1(m, x)) -> (tqtisFinite1(x) and
  ((0.0 <= tqtreal1(x)) and (tqtreal1(sqrt1(m,
  x)) = float64(m,sqrt_real(tqtreal1(x))))))))

axiom of_int_add_exact1 :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range1(i) -> (in_safe_int_range1(j) ->
  (in_safe_int_range1((i + j)) -> eq1(of_int1(m, (i + j)), add1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_sub_exact1 :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range1(i) -> (in_safe_int_range1(j) ->
  (in_safe_int_range1((i - j)) -> eq1(of_int1(m, (i - j)), sub1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_mul_exact1 :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range1(i) -> (in_safe_int_range1(j) ->
  (in_safe_int_range1((i * j)) -> eq1(of_int1(m, (i * j)), mul1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom Min_r1 : (forall x:t1. forall y:t1. (le1(y, x) -> eq1(min1(x, y), y)))

axiom Min_l1 : (forall x:t1. forall y:t1. (le1(x, y) -> eq1(min1(x, y), x)))

axiom Max_r1 : (forall x:t1. forall y:t1. (le1(y, x) -> eq1(max1(x, y), x)))

axiom Max_l1 : (forall x:t1. forall y:t1. (le1(x, y) -> eq1(max1(x, y), y)))

logic is_int1 : t1 -> prop

axiom zeroF_is_int1 : is_int1(zeroF1)

axiom of_int_is_int1 :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range1(x) ->
  is_int1(of_int1(m, x))))

axiom big_float_is_int1 :
  (forall m:fpa_rounding_mode. forall i:t1. (tqtisFinite1(i) -> ((le1(i,
  neg1(of_int1(m, 9007199254740992))) or le1(of_int1(m, 9007199254740992),
  i)) -> is_int1(i))))

axiom roundToIntegral_is_int1 :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite1(x) ->
  is_int1(roundToIntegral1(m, x))))

axiom eq_is_int1 :
  (forall x:t1. forall y:t1. (eq1(x, y) -> (is_int1(x) -> is_int1(y))))

axiom add_int1 :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int1(x) ->
  (is_int1(y) -> (tqtisFinite1(add1(m, x, y)) -> is_int1(add1(m, x, y))))))

axiom sub_int1 :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int1(x) ->
  (is_int1(y) -> (tqtisFinite1(sub1(m, x, y)) -> is_int1(sub1(m, x, y))))))

axiom mul_int1 :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int1(x) ->
  (is_int1(y) -> (tqtisFinite1(mul1(m, x, y)) -> is_int1(mul1(m, x, y))))))

axiom fma_int1 :
  (forall x:t1. forall y:t1. forall z:t1. forall m:fpa_rounding_mode.
  (is_int1(x) -> (is_int1(y) -> (is_int1(z) -> (tqtisFinite1(fma1(m, x, y,
  z)) -> is_int1(fma1(m, x, y, z)))))))

axiom neg_int1 : (forall x:t1. (is_int1(x) -> is_int1(neg1(x))))

axiom abs_int2 : (forall x:t1. (is_int1(x) -> is_int1(abs1(x))))

axiom is_int_of_int1 :
  (forall x:t1. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int1(x) -> eq1(x, of_int1(mqt, to_int1(m, x)))))

axiom is_int_to_int1 :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int1(x) ->
  in_int_range1(to_int1(m, x))))

axiom is_int_is_finite1 : (forall x:t1. (is_int1(x) -> tqtisFinite1(x)))

axiom int_to_real1 :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int1(x) ->
  (tqtreal1(x) = real_of_int(to_int1(m, x)))))

axiom truncate_int1 :
  (forall m:fpa_rounding_mode. forall i:t1. (is_int1(i) ->
  eq1(roundToIntegral1(m, i), i)))

axiom truncate_neg1 :
  (forall x:t1. (tqtisFinite1(x) -> (is_negative1(x) ->
  (roundToIntegral1(ToZero, x) = roundToIntegral1(Up, x)))))

axiom truncate_pos1 :
  (forall x:t1. (tqtisFinite1(x) -> (is_positive1(x) ->
  (roundToIntegral1(ToZero, x) = roundToIntegral1(Down, x)))))

axiom ceil_le1 :
  (forall x:t1. (tqtisFinite1(x) -> le1(x, roundToIntegral1(Up, x))))

axiom ceil_lest1 :
  (forall x:t1. forall y:t1. ((le1(x, y) and is_int1(y)) ->
  le1(roundToIntegral1(Up, x), y)))

axiom ceil_to_real1 :
  (forall x:t1. (tqtisFinite1(x) -> (tqtreal1(roundToIntegral1(Up,
  x)) = real_of_int(ceil(tqtreal1(x))))))

axiom ceil_to_int1 :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite1(x) -> (to_int1(m,
  roundToIntegral1(Up, x)) = ceil(tqtreal1(x)))))

axiom floor_le1 :
  (forall x:t1. (tqtisFinite1(x) -> le1(roundToIntegral1(Down, x), x)))

axiom floor_lest1 :
  (forall x:t1. forall y:t1. ((le1(y, x) and is_int1(y)) -> le1(y,
  roundToIntegral1(Down, x))))

axiom floor_to_real1 :
  (forall x:t1. (tqtisFinite1(x) -> (tqtreal1(roundToIntegral1(Down,
  x)) = real_of_int(floor(tqtreal1(x))))))

axiom floor_to_int1 :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite1(x) -> (to_int1(m,
  roundToIntegral1(Down, x)) = floor(tqtreal1(x)))))

axiom RNA_down1 :
  (forall x:t1. (lt1(sub1(NearestTiesToEven, x, roundToIntegral1(Down, x)),
  sub1(NearestTiesToEven, roundToIntegral1(Up, x), x)) ->
  (roundToIntegral1(NearestTiesToAway, x) = roundToIntegral1(Down, x))))

axiom RNA_up1 :
  (forall x:t1. (lt1(sub1(NearestTiesToEven, roundToIntegral1(Up, x), x),
  sub1(NearestTiesToEven, x, roundToIntegral1(Down, x))) ->
  (roundToIntegral1(NearestTiesToAway, x) = roundToIntegral1(Up, x))))

axiom RNA_down_tie1 :
  (forall x:t1. (eq1(sub1(NearestTiesToEven, x, roundToIntegral1(Down, x)),
  sub1(NearestTiesToEven, roundToIntegral1(Up, x), x)) -> (is_negative1(x) ->
  (roundToIntegral1(NearestTiesToAway, x) = roundToIntegral1(Down, x)))))

axiom RNA_up_tie1 :
  (forall x:t1. (eq1(sub1(NearestTiesToEven, roundToIntegral1(Up, x), x),
  sub1(NearestTiesToEven, x, roundToIntegral1(Down, x))) ->
  (is_positive1(x) -> (roundToIntegral1(NearestTiesToAway,
  x) = roundToIntegral1(Up, x)))))

axiom to_int_roundToIntegral1 :
  (forall m:fpa_rounding_mode. forall x:t1. (to_int1(m, x) = to_int1(m,
  roundToIntegral1(m, x))))

axiom to_int_monotonic1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite1(x) ->
  (tqtisFinite1(y) -> (le1(x, y) -> (to_int1(m, x) <= to_int1(m, y))))))

axiom to_int_of_int1 :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range1(i) ->
  (to_int1(m, of_int1(m, i)) = i)))

axiom eq_to_int1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite1(x) ->
  (eq1(x, y) -> (to_int1(m, x) = to_int1(m, y)))))

axiom neg_to_int1 :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int1(x) -> (to_int1(m,
  neg1(x)) = (-to_int1(m, x)))))

axiom roundToIntegral_is_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite1(x) ->
  tqtisFinite1(roundToIntegral1(m, x))))

axiom round_bound_ne1 :
  (forall x:real [float64(NearestTiesToEven,x)].
  (no_overflow1(NearestTiesToEven, x) ->
  ((((x - (0x1.0p-53 * abs_real(x))) - 0x1.0p-1075) <= float64(NearestTiesToEven,x)) and
  (float64(NearestTiesToEven,x) <= ((x + (0x1.0p-53 * abs_real(x))) + 0x1.0p-1075)))))

logic fliteral1 : t1

axiom fliteral_axiom1 : (tqtisFinite1(fliteral1) and
  (tqtreal1(fliteral1) = 1.0))

logic to_large : fpa_rounding_mode, t -> t1

logic to_small : fpa_rounding_mode, t1 -> t

axiom round_large_small :
  (forall m1:fpa_rounding_mode. forall m2:fpa_rounding_mode. forall x:real.
  (float64(m1,float32(m2,x)) = float32(m2,x)))

axiom to_large_exact :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (tqtisFinite1(to_large(m, x)) and (tqtreal1(to_large(m,
  x)) = tqtreal(x)))))

axiom to_small_conv :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite1(x) ->
  (no_overflow(m, tqtreal1(x)) -> (tqtisFinite(to_small(m, x)) and
  (tqtreal(to_small(m, x)) = float32(m,tqtreal1(x)))))))

type float__

logic to_rep : float__ -> t

logic of_rep : t -> float__

axiom inversion_axiom :
  (forall x:float__ [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:float__ [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

type long_float

logic to_rep1 : long_float -> t1

logic of_rep1 : t1 -> long_float

axiom inversion_axiom1 :
  (forall x:long_float [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:long_float [to_rep1(x)]. tqtisFinite1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:t1 [to_rep1(of_rep1(x))]. (tqtisFinite1(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic a : (int,float__) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic fliteral2 : t1

axiom fliteral_axiom2 : (tqtisFinite1(fliteral2) and
  (tqtreal1(fliteral2) = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0))

predicate dynamic_invariant(temp___expr_74: t1, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  le1(neg1(fliteral2), fliteral2)) -> tqtisFinite1(temp___expr_74))

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic floats__test__b__aggregate_def : t1, t1, t1,
  t1 -> (int,long_float) farray

logic value__size3 : int

logic object__size3 : int

logic component__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic floats__test__c__aggregate_def : t1, t1, t1,
  t1 -> (int,long_float) farray

logic value__size4 : int

logic object__size4 : int

logic component__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom4 : (0 <= component__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic floats__test__d__aggregate_def : t1, t1, t1,
  t1 -> (int,long_float) farray

logic fliteral3 : t

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 340282346638528859811704183484516925440.0))

logic fliteral4 : t1

axiom fliteral_axiom4 : (tqtisFinite1(fliteral4) and
  (tqtreal1(fliteral4) = 0.0))

logic fliteral5 : t

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 5.0e-1))

logic fliteral6 : t1

axiom fliteral_axiom6 : (tqtisFinite1(fliteral6) and
  (tqtreal1(fliteral6) = 2.0))

 (* "floats.ads", line 5, characters 0-0 *)
goal defqtvc :
  (forall e:(int,long_float) farray.
  ((forall i:int. (((1 <= i) and (i <= 3)) -> (let temp___338 =
   to_rep((a[i])) : t in (le(neg(fliteral), temp___338) and le(temp___338,
   fliteral))))) ->
  (forall temp___200:(int,long_float) farray.
  (((((dynamic_invariant(fliteral4, true, true, true, true) ->
  (to_rep1((temp___200[1])) = fliteral4)) and (dynamic_invariant(fliteral4,
  true, true, true, true) -> (to_rep1((temp___200[2])) = fliteral4))) and
  ((dynamic_invariant(fliteral4, true, true, true, true) ->
  (to_rep1((temp___200[3])) = fliteral4)) and (dynamic_invariant(fliteral4,
  true, true, true, true) -> (to_rep1((temp___200[4])) = fliteral4)))) and
  (temp___200 = floats__test__b__aggregate_def(fliteral4, fliteral4,
  fliteral4, fliteral4))) ->
  (forall b:(int,long_float) farray. ((b = temp___200) ->
  (forall temp___209:(int,long_float) farray.
  (((((dynamic_invariant(fliteral4, true, true, true, true) ->
  (to_rep1((temp___209[1])) = fliteral4)) and (dynamic_invariant(fliteral4,
  true, true, true, true) -> (to_rep1((temp___209[2])) = fliteral4))) and
  ((dynamic_invariant(fliteral4, true, true, true, true) ->
  (to_rep1((temp___209[3])) = fliteral4)) and (dynamic_invariant(fliteral4,
  true, true, true, true) -> (to_rep1((temp___209[4])) = fliteral4)))) and
  (temp___209 = floats__test__c__aggregate_def(fliteral4, fliteral4,
  fliteral4, fliteral4))) ->
  (forall c:(int,long_float) farray. ((c = temp___209) ->
  (forall temp___218:(int,long_float) farray.
  (((((dynamic_invariant(fliteral4, true, true, true, true) ->
  (to_rep1((temp___218[1])) = fliteral4)) and (dynamic_invariant(fliteral4,
  true, true, true, true) -> (to_rep1((temp___218[2])) = fliteral4))) and
  ((dynamic_invariant(fliteral4, true, true, true, true) ->
  (to_rep1((temp___218[3])) = fliteral4)) and (dynamic_invariant(fliteral4,
  true, true, true, true) -> (to_rep1((temp___218[4])) = fliteral4)))) and
  (temp___218 = floats__test__d__aggregate_def(fliteral4, fliteral4,
  fliteral4, fliteral4))) ->
  (forall d:(int,long_float) farray. ((d = temp___218) -> ((let temp___223 =
  to_rep((a[1])) : t in (le(neg(fliteral), temp___223) and le(temp___223,
  fliteral))) -> ((let temp___227 = to_rep((a[2])) : t in (le(neg(fliteral),
  temp___227) and le(temp___227, fliteral))) -> ((let temp___231 =
  to_rep((a[3])) : t in (le(neg(fliteral), temp___231) and le(temp___231,
  fliteral))) ->
  (forall o:long_float. ((to_rep1(o) = fliteral1) ->
  (forall e1:(int,long_float) farray. ((e1 = (e[1 <- o])) ->
  (forall o1:t. ((to_rep((a[1])) = o1) ->
  (forall o2:long_float. ((to_rep1(o2) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o1, fliteral5))) ->
  (forall e2:(int,long_float) farray. ((e2 = (e1[2 <- o2])) ->
  (forall o3:t. ((to_rep((a[2])) = o3) ->
  (forall o4:long_float. ((to_rep1(o4) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o3, fliteral5))) ->
  (forall e3:(int,long_float) farray. ((e3 = (e2[3 <- o4])) ->
  (forall o5:t. ((to_rep((a[3])) = o5) ->
  (forall o6:long_float. ((to_rep1(o6) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o5, fliteral5))) ->
  (forall e4:(int,long_float) farray. ((e4 = (e3[4 <- o6])) ->
  ((let temp___239 = to_rep1((e4[1])) : t1 in (le1(neg1(fliteral1),
  temp___239) and le1(temp___239, fliteral1))) -> ((let temp___243 =
  to_rep1((e4[2])) : t1 in (le1(neg1(fliteral1), temp___243) and
  le1(temp___243, fliteral1))) -> ((let temp___247 = to_rep1((e4[3])) : t1 in
  (le1(neg1(fliteral1), temp___247) and le1(temp___247, fliteral1))) ->
  ((let temp___251 = to_rep1((e4[4])) : t1 in (le1(neg1(fliteral1),
  temp___251) and le1(temp___251, fliteral1))) ->
  ((forall i:int. (((1 <= i) and (i <= 4)) -> (let temp___257 =
   to_rep1((e4[i])) : t1 in (le1(neg1(fliteral1), temp___257) and
   le1(temp___257, fliteral1))))) ->
  (forall o7:long_float. ((to_rep1(o7) = fliteral1) ->
  (forall c1:(int,long_float) farray. ((c1 = (c[1 <- o7])) ->
  (forall o8:t. ((to_rep((a[1])) = o8) ->
  (forall o9:long_float. ((to_rep1(o9) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o8, fliteral5))) ->
  (forall c2:(int,long_float) farray. ((c2 = (c1[2 <- o9])) ->
  (forall o10:t. ((to_rep((a[2])) = o10) ->
  (forall o11:long_float. ((to_rep1(o11) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o10, fliteral5))) ->
  (forall c3:(int,long_float) farray. ((c3 = (c2[3 <- o11])) ->
  (forall o12:t. ((to_rep((a[3])) = o12) ->
  (forall o13:long_float. ((to_rep1(o13) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o12, fliteral5))) ->
  (forall c4:(int,long_float) farray. ((c4 = (c3[4 <- o13])) ->
  ((let temp___265 = to_rep1((c4[1])) : t1 in (le1(neg1(fliteral1),
  temp___265) and le1(temp___265, fliteral1))) -> ((let temp___269 =
  to_rep1((c4[2])) : t1 in (le1(neg1(fliteral1), temp___269) and
  le1(temp___269, fliteral1))) -> ((let temp___273 = to_rep1((c4[3])) : t1 in
  (le1(neg1(fliteral1), temp___273) and le1(temp___273, fliteral1))) ->
  ((let temp___277 = to_rep1((c4[4])) : t1 in (le1(neg1(fliteral1),
  temp___277) and le1(temp___277, fliteral1))) ->
  ((forall i:int. (((1 <= i) and (i <= 4)) -> (let temp___283 =
   to_rep1((c4[i])) : t1 in (le1(neg1(fliteral1), temp___283) and
   le1(temp___283, fliteral1))))) ->
  (forall o14:long_float. ((to_rep1(o14) = fliteral1) ->
  (forall b1:(int,long_float) farray. ((b1 = (b[1 <- o14])) ->
  (forall o15:t. ((to_rep((a[1])) = o15) ->
  (forall o16:long_float. ((to_rep1(o16) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o15, fliteral5))) ->
  (forall b2:(int,long_float) farray. ((b2 = (b1[2 <- o16])) ->
  (forall o17:t. ((to_rep((a[2])) = o17) ->
  (forall o18:long_float. ((to_rep1(o18) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o17, fliteral5))) ->
  (forall b3:(int,long_float) farray. ((b3 = (b2[3 <- o18])) ->
  (forall o19:t. ((to_rep((a[3])) = o19) ->
  (forall o20:long_float. ((to_rep1(o20) = to_large(NearestTiesToEven,
  mul(NearestTiesToEven, o19, fliteral5))) ->
  (forall b4:(int,long_float) farray. ((b4 = (b3[4 <- o20])) ->
  ((let temp___291 = to_rep1((b4[1])) : t1 in (le1(neg1(fliteral1),
  temp___291) and le1(temp___291, fliteral1))) -> ((let temp___295 =
  to_rep1((b4[2])) : t1 in (le1(neg1(fliteral1), temp___295) and
  le1(temp___295, fliteral1))) -> ((let temp___299 = to_rep1((b4[3])) : t1 in
  (le1(neg1(fliteral1), temp___299) and le1(temp___299, fliteral1))) ->
  ((let temp___303 = to_rep1((b4[4])) : t1 in (le1(neg1(fliteral1),
  temp___303) and le1(temp___303, fliteral1))) ->
  ((forall i:int. (((1 <= i) and (i <= 4)) -> (let temp___309 =
   to_rep1((b4[i])) : t1 in (le1(neg1(fliteral1), temp___309) and
   le1(temp___309, fliteral1))))) ->
  (forall o21:t1. ((to_rep1((b4[1])) = o21) ->
  (forall o22:t1. ((to_rep1((c4[1])) = o22) -> (let o23 =
  add1(NearestTiesToEven, o22, o21) : t1 in (tqtisFinite1(o23) ->
  (forall o24:long_float. ((to_rep1(o24) = o23) ->
  (forall d1:(int,long_float) farray. ((d1 = (d[1 <- o24])) ->
  (forall o25:t1. ((to_rep1((b4[2])) = o25) ->
  (forall o26:t1. ((to_rep1((c4[2])) = o26) -> (let o27 =
  add1(NearestTiesToEven, o26, o25) : t1 in (tqtisFinite1(o27) ->
  (forall o28:long_float. ((to_rep1(o28) = o27) ->
  (forall d2:(int,long_float) farray. ((d2 = (d1[2 <- o28])) ->
  (forall o29:t1. ((to_rep1((b4[3])) = o29) ->
  (forall o30:t1. ((to_rep1((c4[3])) = o30) -> (let o31 =
  add1(NearestTiesToEven, o30, o29) : t1 in (tqtisFinite1(o31) ->
  (forall o32:long_float. ((to_rep1(o32) = o31) ->
  (forall d3:(int,long_float) farray. ((d3 = (d2[3 <- o32])) ->
  (forall o33:t1. ((to_rep1((b4[4])) = o33) ->
  (forall o34:t1. ((to_rep1((c4[4])) = o34) -> (let o35 =
  add1(NearestTiesToEven, o34, o33) : t1 in (tqtisFinite1(o35) ->
  (forall o36:long_float. ((to_rep1(o36) = o35) ->
  (forall d4:(int,long_float) farray. ((d4 = (d3[4 <- o36])) ->
  ((let temp___317 = to_rep1((d4[1])) : t1 in (le1(neg1(fliteral6),
  temp___317) and le1(temp___317, fliteral6))) -> le1(neg1(fliteral6),
  to_rep1((d4[2]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
