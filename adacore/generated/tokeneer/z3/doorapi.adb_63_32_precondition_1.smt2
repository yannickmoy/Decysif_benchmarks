;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ()
  ((tuple0 (Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort us_image 0)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "attr__ATTRIBUTE_VALUE__pre_check"
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; "attr__ATTRIBUTE_VALUE"
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort character 0)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int character))))))

;; "slide"
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; "slide_eq"
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; "bool_eq"
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; "bool_eq_rev"
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "from_string"
(declare-fun from_string (us_t) us_image)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

(declare-sort messagelengtht 0)

;; "messagelengtht'int"
(declare-fun messagelengthtqtint (messagelengtht) Int)

;; "messagelengtht'axiom"
(assert
  (forall ((i messagelengtht))
    (and (<= 0 (messagelengthtqtint i)) (<= (messagelengthtqtint i) 4096))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 4096)))

;; "to_rep"
(define-fun to_rep2 ((x messagelengtht)) Int
  (messagelengthtqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) messagelengtht)

;; "inversion_axiom"
(assert
  (forall ((x messagelengtht))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x messagelengtht))
    (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__tcpip__messaget__data (Array Int character))(rec__tcpip__messaget__length messagelengtht)))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const tcpip__messaget__data__first__bit Int)

(declare-const tcpip__messaget__data__last__bit Int)

(declare-const tcpip__messaget__data__position Int)

;; "tcpip__messaget__data__first__bit_axiom"
(assert (<= 0 tcpip__messaget__data__first__bit))

;; "tcpip__messaget__data__last__bit_axiom"
(assert
  (< tcpip__messaget__data__first__bit tcpip__messaget__data__last__bit))

;; "tcpip__messaget__data__position_axiom"
(assert (<= 0 tcpip__messaget__data__position))

(declare-const tcpip__messaget__length__first__bit Int)

(declare-const tcpip__messaget__length__last__bit Int)

(declare-const tcpip__messaget__length__position Int)

;; "tcpip__messaget__length__first__bit_axiom"
(assert (<= 0 tcpip__messaget__length__first__bit))

;; "tcpip__messaget__length__last__bit_axiom"
(assert
  (< tcpip__messaget__length__first__bit tcpip__messaget__length__last__bit))

;; "tcpip__messaget__length__position_axiom"
(assert (<= 0 tcpip__messaget__length__position))

(declare-const dummy us_rep)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_213 us_rep) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool) (temp___do_typ_inv_212 Bool)) Bool
  true)

;; "temp_____aggregate_def_218"
(declare-fun temp_____aggregate_def_218 (Int) (Array Int character))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_215 us_rep) (temp___skip_top_level_216 Bool)) Bool
  (and
    (= (rec__tcpip__messaget__data (us_split_fields1 temp___expr_215)) 
    (let ((temp___222 (temp_____aggregate_def_218 0)))
      (let ((temp___223 temp___222)) temp___223)))
    (= (to_rep2
         (rec__tcpip__messaget__length (us_split_fields1 temp___expr_215))) 0)))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "overwrite"
(declare-fun overwrite (us_t
  Int
  us_t) us_t)

(declare-const nullmsg us_rep)

(declare-const outmsg us_rep)

;; "getresponsefrommsg"
(declare-fun getresponsefrommsg (us_rep) us_t)

(declare-const msg__first integer)

(declare-const msg__last integer)

;; "getdictionary"
(declare-fun getdictionary (us_t
  Int) us_t)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_280 us_t) (temp___is_init_276 Bool) (temp___skip_constant_277 Bool) (temp___do_toplevel_278 Bool) (temp___do_typ_inv_279 Bool)) Bool
  (=>
    (not (= temp___skip_constant_277 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_280)
      (last temp___expr_280))))

(declare-const statedict__first integer)

(declare-const statedict__last integer)

;; "getstringbykey"
(declare-fun getstringbykey (us_t
  us_t) us_t)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment3))

;; "temp_____aggregate_def_172"
(declare-fun temp_____aggregate_def_172 (Int) (Array Int character))

;; "temp___String_Literal_180"
(declare-fun temp___String_Literal_180 (tuple0) (Array Int character))

;; "temp___String_Literal_180__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_180 us_void_param) 1)) 100)
           (= (to_rep (select (temp___String_Literal_180 us_void_param) 2)) 111))
         (and
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 3)) 111)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 4)) 114))
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 5)) 46)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 6)) 103)))
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 7)) 101)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 8)) 116))
               (= (to_rep
                    (select (temp___String_Literal_180 us_void_param) 9)) 83)))
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 10)) 116)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 11)) 97))
               (= (to_rep
                    (select (temp___String_Literal_180 us_void_param) 12)) 116))
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 13)) 101)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 14)) 40))
               (= (to_rep
                    (select (temp___String_Literal_180 us_void_param) 15)) 41))))) :pattern (
    (temp___String_Literal_180
      us_void_param)) )))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size3 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment4))

;; "temp___String_Literal_302"
(declare-fun temp___String_Literal_302 (tuple0) (Array Int character))

;; "temp___String_Literal_302__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_302 us_void_param) 1)) 111)
           (= (to_rep (select (temp___String_Literal_302 us_void_param) 2)) 112))
         (and
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 3)) 101)
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 4)) 114))
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 5)) 97))
             (and
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 6)) 116)
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 7)) 105)))
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 8)) 111)
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 9)) 110))
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 10)) 97))
             (and
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 11)) 108)
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 12)) 63))))) :pattern (
    (temp___String_Literal_302
      us_void_param)) )))

;; "temp___String_Literal_306"
(declare-fun temp___String_Literal_306 (tuple0) (Array Int character))

;; "temp___String_Literal_306__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_306 us_void_param) 1)) 99)
           (= (to_rep (select (temp___String_Literal_306 us_void_param) 2)) 108))
         (and
           (and
             (and
               (= (to_rep
                    (select (temp___String_Literal_306 us_void_param) 3)) 111)
               (= (to_rep
                    (select (temp___String_Literal_306 us_void_param) 4)) 115))
             (= (to_rep (select (temp___String_Literal_306 us_void_param) 5)) 101))
           (and
             (= (to_rep (select (temp___String_Literal_306 us_void_param) 6)) 100)
             (= (to_rep (select (temp___String_Literal_306 us_void_param) 7)) 63)))) :pattern (
    (temp___String_Literal_306
      us_void_param)) )))

(declare-const rliteral messagelengtht)

;; "rliteral_axiom"
(assert (= (messagelengthtqtint rliteral) 0))

;; "nullmsg__def_axiom"
(assert
  (= nullmsg (us_repqtmk
               (us_split_fieldsqtmk
                 (let ((temp___176 (temp_____aggregate_def_172 0)))
                   (let ((temp___177 temp___176)) temp___177))
                 rliteral))))

;; "def_axiom"
(assert
  (forall ((temp___171 Int))
    (let ((temp___173 (temp_____aggregate_def_172 temp___171)))
      (forall ((temp___174 Int))
        (! (=>
             (and (<= 1 temp___174) (<= temp___174 4096))
             (=>
               (in_range2 temp___171)
               (= (to_rep (select temp___173 temp___174)) temp___171))) :pattern ((select temp___173 temp___174)) )))))

;; "def_axiom"
(assert
  (forall ((temp___217 Int))
    (let ((temp___219 (temp_____aggregate_def_218 temp___217)))
      (forall ((temp___220 Int))
        (! (=>
             (and (<= 1 temp___220) (<= temp___220 4096))
             (=>
               (in_range2 temp___217)
               (= (to_rep (select temp___219 temp___220)) temp___217))) :pattern ((select temp___219 temp___220)) )))))

;; "overwrite__post_axiom"
(assert
  (forall ((param__source us_t) (param__new_item us_t))
    (forall ((param__position Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant param__source true false true true)
                 (in_range1 param__position))
               (dynamic_invariant param__new_item true false true true))
             (and
               (let ((temp___248 (- param__position 1)))
                 (and
                   (<= (- (first param__source) 1) temp___248)
                   (<= temp___248 (last param__source))))
               (=>
                 (<= (- (length param__source) (length param__new_item)) (- param__position 
                 (first
                   param__source)))
                 (<= (- param__position (first param__source)) (- 2147483647 
                 (length
                   param__new_item))))))
           (let ((result (overwrite
                           param__source
                           param__position
                           param__new_item)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (first result) 1)
                       (= (length result) (max
                                            (length param__source)
                                            (+ (- param__position (first
                                                                    param__source)) 
                                            (length
                                              param__new_item)))))
                     (= (let ((temp___256 (let ((temp___252 (- param__position 1)))
                                            (let ((temp___251 (first
                                                                param__source)))
                                              (of_array
                                                (to_array param__source)
                                                temp___251
                                                temp___252)))))
                          (let ((temp___254 (let ((temp___250 (- param__position 
                                              (first
                                                param__source))))
                                              (let ((temp___249 1))
                                                (of_array
                                                  (to_array result)
                                                  temp___249
                                                  temp___250)))))
                            (bool_eq
                              (to_array temp___254)
                              (first temp___254)
                              (last temp___254)
                              (to_array temp___256)
                              (first temp___256)
                              (last temp___256)))) true))
                   (= (let ((temp___260 (let ((temp___258 (+ (- param__position 
                                          (first
                                            param__source)) (length
                                                              param__new_item))))
                                          (let ((temp___257 (+ (- param__position 
                                            (first
                                              param__source)) 1)))
                                            (of_array
                                              (to_array result)
                                              temp___257
                                              temp___258)))))
                        (bool_eq
                          (to_array temp___260)
                          (first temp___260)
                          (last temp___260)
                          (to_array param__new_item)
                          (first param__new_item)
                          (last param__new_item))) true))
                 (=>
                   (<= param__position (- (last param__source) (length
                                                                 param__new_item)))
                   (= (let ((temp___268 (let ((temp___264 (last
                                                            param__source)))
                                          (let ((temp___263 (+ param__position 
                                            (length
                                              param__new_item))))
                                            (of_array
                                              (to_array param__source)
                                              temp___263
                                              temp___264)))))
                        (let ((temp___266 (let ((temp___262 (last result)))
                                            (let ((temp___261 (+ (+ (- param__position 
                                              (first
                                                param__source)) (length
                                                                  param__new_item)) 1)))
                                              (of_array
                                                (to_array result)
                                                temp___261
                                                temp___262)))))
                          (bool_eq
                            (to_array temp___266)
                            (first temp___266)
                            (last temp___266)
                            (to_array temp___268)
                            (first temp___268)
                            (last temp___268)))) true)))
               (dynamic_invariant result true false true true)))) :pattern (
      (overwrite
        param__source
        param__position
        param__new_item)) ))))

(declare-const rliteral1 messagelengtht)

;; "rliteral_axiom"
(assert (= (messagelengthtqtint rliteral1) 15))

(declare-const inmsg__split_fields us_split_fields)

(declare-const commsisok Bool)

;; "inmsg__split_fields'unused"
(define-fun inmsg__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk inmsg__split_fields))

;; "Assume"
(assert (dynamic_invariant1 nullmsg true false true true))

(declare-const temp___312 (Array Int character))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___175 Int))
    (! (=>
         (and (<= 1 temp___175) (<= temp___175 4096))
         (=> (in_range2 0) (= (to_rep (select temp___312 temp___175)) 0))) :pattern ((select 
    temp___312 temp___175)) )))

;; "H"
(assert (= temp___312 (temp_____aggregate_def_172 0)))

;; "temp_____aggregate_def_172'result'unused"
(define-fun temp_____aggregate_def_172qtresultqtunused () (Array Int character)
  temp___312)

;; "o"
(define-fun o () us_split_fields
  (us_split_fieldsqtmk temp___312 rliteral))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o)

;; "temp___314"
(define-fun temp___314 () us_rep
  (us_repqtmk o))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep
  temp___314)

;; "Assume"
(assert (= temp___314 nullmsg))

;; "Assume"
(assert (default_initial_assumption (us_repqtmk inmsg__split_fields) false))

;; "Assume"
(assert
  (dynamic_invariant1 (us_repqtmk inmsg__split_fields) false false true true))

;; "temp___295"
(define-fun temp___295 () (Array Int character)
  (temp___String_Literal_180 Tuple0))

;; "temp___String_Literal_180'result'unused"
(define-fun temp___String_Literal_180qtresultqtunused () (Array Int character)
  temp___295)

;; "o"
(define-fun o1 () us_t
  (of_array temp___295 1 15))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused () us_t
  o1)

;; "o"
(define-fun o2 () us_split_fields
  (us_split_fields1 nullmsg))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields
  o2)

;; "temp___293"
(define-fun temp___293 () (Array Int character)
  (rec__tcpip__messaget__data o2))

;; "rec__tcpip__messaget__data'result'unused"
(define-fun rec__tcpip__messaget__dataqtresultqtunused () (Array Int character)
  temp___293)

;; "o"
(define-fun o3 () us_t
  (of_array temp___293 1 4096))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused1 () us_t
  o3)

;; "temp___297"
(define-fun temp___297 () us_t
  (overwrite o3 1 o1))

;; "H"
(assert (dynamic_invariant temp___297 true false true true))

;; "H"
(assert (= (first temp___297) 1))

;; "H"
(assert (= (length temp___297) (max (length o3) (+ (- 1 1) (length o1)))))

;; "H"
(assert
  (= (let ((temp___233 (let ((temp___229 (- 1 1)))
                         (let ((temp___228 1))
                           (of_array temp___293 temp___228 temp___229)))))
       (let ((temp___231 (let ((temp___227 (- 1 1)))
                           (of_array (to_array temp___297) 1 temp___227))))
         (bool_eq
           (to_array temp___231)
           (first temp___231)
           (last temp___231)
           (to_array temp___233)
           (first temp___233)
           (last temp___233)))) true))

;; "H"
(assert
  (= (let ((temp___237 (let ((temp___235 (+ (- 1 1) (length o1))))
                         (let ((temp___234 (+ (- 1 1) 1)))
                           (of_array
                             (to_array temp___297)
                             temp___234
                             temp___235)))))
       (bool_eq
         (to_array temp___237)
         (first temp___237)
         (last temp___237)
         temp___295
         1
         15)) true))

;; "H"
(assert
  (=>
    (<= 1 (- 4096 (length o1)))
    (= (let ((temp___245 (let ((temp___241 4096))
                           (let ((temp___240 (+ 1 (length o1))))
                             (of_array temp___293 temp___240 temp___241)))))
         (let ((temp___243 (let ((temp___239 (last temp___297)))
                             (let ((temp___238 (+ (+ (- 1 1) (length o1)) 1)))
                               (of_array
                                 (to_array temp___297)
                                 temp___238
                                 temp___239)))))
           (bool_eq
             (to_array temp___243)
             (first temp___243)
             (last temp___243)
             (to_array temp___245)
             (first temp___245)
             (last temp___245)))) true)))

;; "overwrite'result'unused"
(define-fun overwriteqtresultqtunused () us_t
  temp___297)

;; "o"
(define-fun o4 () Int
  (first temp___297))

;; "first'result'unused"
(define-fun firstqtresultqtunused () Int
  o4)

;; "o"
(define-fun o5 () (Array Int character)
  (to_array temp___297))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int character)
  o5)

;; "temp___298"
(define-fun temp___298 () (Array Int character)
  (slide o5 o4 1))

;; "slide'result'unused"
(define-fun slideqtresultqtunused () (Array Int character)
  temp___298)

;; "Assert"
(assert
  (ite (<= (first temp___297) (last temp___297))
    (and (<= 1 4096) (= (- (last temp___297) (first temp___297)) (- 4096 1)))
    (< 4096 1)))

;; "o"
(define-fun o6 () us_split_fields
  (us_split_fieldsqtmk temp___298 rliteral1))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields
  o6)

;; "doorapi__getdoorstateraw__outmsg__assume"
(define-fun doorapi__getdoorstateraw__outmsg__assume () us_rep
  (us_repqtmk o6))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep
  doorapi__getdoorstateraw__outmsg__assume)

;; "Assume"
(assert (= doorapi__getdoorstateraw__outmsg__assume outmsg))

;; "Assume"
(assert (dynamic_invariant1 outmsg true false true true))

(declare-const doorstate Int)

;; "doorstate'unused"
(define-fun doorstateqtunused () int__ref
  (int__refqtmk doorstate))

;; "H"
(assert (= doorstate 0))

;; "Assume"
(assert (in_range4 doorstate))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields
  inmsg__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep
  (us_repqtmk inmsg__split_fields))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  commsisok)

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () Bool
  (distinct 0 0))

(declare-const inmsg__split_fields1 us_split_fields)

(declare-const commsisok1 Bool)

;; "commsisok'unused"
(define-fun commsisokqtunused () bool__ref
  (bool__refqtmk commsisok1))

;; "inmsg__split_fields'unused"
(define-fun inmsg__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk inmsg__split_fields1))

;; "H"
(assert
  (dynamic_invariant1 (us_repqtmk inmsg__split_fields1) true true true true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  commsisok1)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch commsisok1))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused2 () Bool
  spark__branch)

;; "H"
(assert (= spark__branch true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields
  inmsg__split_fields1)

;; "o"
(define-fun o7 () us_rep
  (us_repqtmk inmsg__split_fields1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep
  o7)

;; "doorapi__getdoorstateraw__B_1__msg__assume"
(define-fun doorapi__getdoorstateraw__B_1__msg__assume () us_t
  (getresponsefrommsg o7))

;; "Ensures"
(assert
  (dynamic_invariant
    doorapi__getdoorstateraw__B_1__msg__assume
    true
    false
    true
    true))

;; "getresponsefrommsg'result'unused"
(define-fun getresponsefrommsgqtresultqtunused () us_t
  doorapi__getdoorstateraw__B_1__msg__assume)

;; "o"
(define-fun o8 () (Array Int character)
  (to_array doorapi__getdoorstateraw__B_1__msg__assume))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array Int character)
  o8)

(declare-const msg (Array Int character))

;; "msg'unused"
(define-fun msgqtunused () map__ref
  (map__refqtmk msg))

;; "H"
(assert (= msg o8))

;; "Assume"
(assert
  (= (to_rep1 msg__first) (first doorapi__getdoorstateraw__B_1__msg__assume)))

;; "Assume"
(assert
  (= (to_rep1 msg__last) (last doorapi__getdoorstateraw__B_1__msg__assume)))

;; "Assume"
(assert
  (dynamic_invariant
    (of_array msg (to_rep1 msg__first) (to_rep1 msg__last))
    true
    false
    true
    true))

(declare-const o9 Int)

;; "Ensures"
(assert (= (to_rep1 msg__last) o9))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o9)

(declare-const o10 Int)

;; "Ensures"
(assert (= (to_rep1 msg__first) o10))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o10)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int character)
  msg)

;; "o"
(define-fun o11 () us_t
  (of_array msg o10 o9))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused2 () us_t
  o11)

;; "doorapi__getdoorstateraw__B_1__statedict__assume"
(define-fun doorapi__getdoorstateraw__B_1__statedict__assume () us_t
  (getdictionary o11 1))

;; "Ensures"
(assert
  (dynamic_invariant2
    doorapi__getdoorstateraw__B_1__statedict__assume
    true
    false
    true
    true))

;; "getdictionary'result'unused"
(define-fun getdictionaryqtresultqtunused () us_t
  doorapi__getdoorstateraw__B_1__statedict__assume)

;; "o"
(define-fun o12 () (Array Int character)
  (to_array doorapi__getdoorstateraw__B_1__statedict__assume))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int character)
  o12)

(declare-const statedict (Array Int character))

;; "statedict'unused"
(define-fun statedictqtunused () map__ref
  (map__refqtmk statedict))

;; "H"
(assert (= statedict o12))

;; "Assume"
(assert
  (= (to_rep1 statedict__first) (first
                                  doorapi__getdoorstateraw__B_1__statedict__assume)))

;; "Assume"
(assert
  (= (to_rep1 statedict__last) (last
                                 doorapi__getdoorstateraw__B_1__statedict__assume)))

;; "Assume"
(assert
  (dynamic_invariant2
    (of_array statedict (to_rep1 statedict__first) (to_rep1 statedict__last))
    true
    false
    true
    true))

;; "temp___303"
(define-fun temp___303 () (Array Int character)
  (temp___String_Literal_302 Tuple0))

;; "temp___String_Literal_302'result'unused"
(define-fun temp___String_Literal_302qtresultqtunused () (Array Int character)
  temp___303)

;; "o"
(define-fun o13 () us_t
  (of_array temp___303 1 12))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused3 () us_t
  o13)

(declare-const o14 Int)

;; "Ensures"
(assert (= (to_rep1 statedict__last) o14))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o14)

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep1 statedict__first) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () Int
  o15)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int character)
  statedict)

;; "o"
(define-fun o16 () us_t
  (of_array statedict o15 o14))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused4 () us_t
  o16)

;; "o"
(define-fun o17 () us_t
  (getstringbykey o16 o13))

;; "Ensures"
(assert (dynamic_invariant o17 true false true true))

;; "getstringbykey'result'unused"
(define-fun getstringbykeyqtresultqtunused () us_t
  o17)

;; "o"
(define-fun o18 () us_image
  (from_string o17))

;; "from_string'result'unused"
(define-fun from_stringqtresultqtunused () us_image
  o18)

;; "o"
(define-fun o19 () Bool
  (attr__ATTRIBUTE_VALUE o18))

;; "attr__ATTRIBUTE_VALUE_'result'unused"
(define-fun attr__ATTRIBUTE_VALUE_qtresultqtunused () Bool
  o19)

(declare-const isop Bool)

;; "isop'unused"
(define-fun isopqtunused () bool__ref
  (bool__refqtmk isop))

;; "H"
(assert (= isop o19))

;; "temp___307"
(define-fun temp___307 () (Array Int character)
  (temp___String_Literal_306 Tuple0))

;; "temp___String_Literal_306'result'unused"
(define-fun temp___String_Literal_306qtresultqtunused () (Array Int character)
  temp___307)

;; "o"
(define-fun o20 () us_t
  (of_array temp___307 1 7))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused5 () us_t
  o20)

(declare-const o21 Int)

;; "Ensures"
(assert (= (to_rep1 statedict__last) o21))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () Int
  o21)

(declare-const o22 Int)

;; "Ensures"
(assert (= (to_rep1 statedict__first) o22))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused5 () Int
  o22)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int character)
  statedict)

;; "o"
(define-fun o23 () us_t
  (of_array statedict o22 o21))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused6 () us_t
  o23)

;; "o"
(define-fun o24 () us_t
  (getstringbykey o23 o20))

;; "Ensures"
(assert (dynamic_invariant o24 true false true true))

;; "getstringbykey'result'unused"
(define-fun getstringbykeyqtresultqtunused1 () us_t
  o24)

;; "o"
(define-fun o25 () us_image
  (from_string o24))

;; "from_string'result'unused"
(define-fun from_stringqtresultqtunused1 () us_image
  o25)

;; Goal "def'vc"
;; File "doorapi.adb", line 25, characters 0-0
(assert
  (not (attr__ATTRIBUTE_VALUE__pre_check o25)))

(check-sat)
