;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ()
  ((tuple0 (Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort character 0)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int character))))))

;; "slide"
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; "slide_eq"
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))

;; "of_array"
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-sort us_rep 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy us_rep)

(declare-datatypes ()
  ((t__ref (t__refqtmk (t__content us_rep)))))

(declare-sort issueridt 0)

;; "issueridt'int"
(declare-fun issueridtqtint (issueridt) Int)

;; "issueridt'axiom"
(assert
  (forall ((i issueridt))
    (and (<= 0 (issueridtqtint i)) (<= (issueridtqtint i) 4294967295))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep2 ((x issueridt)) Int
  (issueridtqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) issueridt)

;; "inversion_axiom"
(assert
  (forall ((x issueridt))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x issueridt))
    (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-sort namecountt 0)

;; "namecountt'int"
(declare-fun namecounttqtint (namecountt) Int)

;; "namecountt'axiom"
(assert
  (forall ((i namecountt))
    (and (<= 0 (namecounttqtint i)) (<= (namecounttqtint i) 40))))

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 40)))

;; "to_rep"
(define-fun to_rep3 ((x namecountt)) Int
  (namecounttqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) namecountt)

;; "inversion_axiom"
(assert
  (forall ((x namecountt))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x namecountt))
    (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; "cryptotypes__issuert__id__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__id__first__bit))

;; "cryptotypes__issuert__id__last__bit_axiom"
(assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; "cryptotypes__issuert__id__position_axiom"
(assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; "cryptotypes__issuert__namelength__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; "cryptotypes__issuert__namelength__last__bit_axiom"
(assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; "cryptotypes__issuert__namelength__position_axiom"
(assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; "cryptotypes__issuert__name__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__name__first__bit))

;; "cryptotypes__issuert__name__last__bit_axiom"
(assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; "cryptotypes__issuert__name__position_axiom"
(assert (<= 0 cryptotypes__issuert__name__position))

(declare-const dummy1 us_rep1)

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__keystore__optionalprivatekeyt__ispresent Bool)(rec__keystore__optionalprivatekeyt__owner us_rep1)))))

(declare-datatypes ()
  ((us_split_fields__ref1
   (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const keystore__optionalprivatekeyt__ispresent__first__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__last__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__position Int)

;; "keystore__optionalprivatekeyt__ispresent__first__bit_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__ispresent__first__bit))

;; "keystore__optionalprivatekeyt__ispresent__last__bit_axiom"
(assert
  (< keystore__optionalprivatekeyt__ispresent__first__bit keystore__optionalprivatekeyt__ispresent__last__bit))

;; "keystore__optionalprivatekeyt__ispresent__position_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__ispresent__position))

(declare-const keystore__optionalprivatekeyt__owner__first__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__last__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__position Int)

;; "keystore__optionalprivatekeyt__owner__first__bit_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__owner__first__bit))

;; "keystore__optionalprivatekeyt__owner__last__bit_axiom"
(assert
  (< keystore__optionalprivatekeyt__owner__first__bit keystore__optionalprivatekeyt__owner__last__bit))

;; "keystore__optionalprivatekeyt__owner__position_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__owner__position))

(declare-const dummy2 us_rep2)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_271 us_rep2) (temp___is_init_267 Bool) (temp___skip_constant_268 Bool) (temp___do_toplevel_269 Bool) (temp___do_typ_inv_270 Bool)) Bool
  true)

;; "privatekeypresent"
(declare-fun privatekeypresent (us_split_fields2) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "makedescription"
(declare-fun makedescription (us_t
  Int) (Array Int character))

(declare-const nodescription (Array Int character))

(declare-const istis Bool)

(declare-const nullrawcertificate (Array Int character))

(declare-sort algorithmt 0)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 0 x) (<= x 10)))

;; "to_rep"
(declare-fun to_rep4 (algorithmt) Int)

;; "of_rep"
(declare-fun of_rep4 (Int) algorithmt)

;; "inversion_axiom"
(assert
  (forall ((x algorithmt))
    (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert
  (forall ((x algorithmt))
    (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-sort keyidt 0)

;; "keyidt'int"
(declare-fun keyidtqtint (keyidt) Int)

;; "keyidt'axiom"
(assert
  (forall ((i keyidt))
    (and (<= 0 (keyidtqtint i)) (<= (keyidtqtint i) 4294967295))))

;; "in_range"
(define-fun in_range7 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep5 ((x keyidt)) Int
  (keyidtqtint x))

;; "of_rep"
(declare-fun of_rep5 (Int) keyidt)

;; "inversion_axiom"
(assert
  (forall ((x keyidt))
    (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; "range_axiom"
(assert
  (forall ((x keyidt)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

(declare-sort keylengtht 0)

;; "keylengtht'int"
(declare-fun keylengthtqtint (keylengtht) Int)

;; "keylengtht'axiom"
(assert
  (forall ((i keylengtht))
    (and (<= 0 (keylengthtqtint i)) (<= (keylengthtqtint i) 128))))

;; "in_range"
(define-fun in_range8 ((x Int)) Bool
  (and (<= 0 x) (<= x 128)))

;; "to_rep"
(define-fun to_rep6 ((x keylengtht)) Int
  (keylengthtqtint x))

;; "of_rep"
(declare-fun of_rep6 (Int) keylengtht)

;; "inversion_axiom"
(assert
  (forall ((x keylengtht))
    (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; "range_axiom"
(assert
  (forall ((x keylengtht))
    (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                                  (of_rep6 x))) )))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))

(declare-datatypes ()
  ((us_split_fields__ref2
   (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; "cryptotypes__keypartt__algorithmid__first__bit_axiom"
(assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; "cryptotypes__keypartt__algorithmid__last__bit_axiom"
(assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; "cryptotypes__keypartt__algorithmid__position_axiom"
(assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; "cryptotypes__keypartt__keyid__first__bit_axiom"
(assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; "cryptotypes__keypartt__keyid__last__bit_axiom"
(assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; "cryptotypes__keypartt__keyid__position_axiom"
(assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; "cryptotypes__keypartt__keylength__first__bit_axiom"
(assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; "cryptotypes__keypartt__keylength__last__bit_axiom"
(assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; "cryptotypes__keypartt__keylength__position_axiom"
(assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-const dummy3 us_rep3)

(declare-sort serialnumbert 0)

;; "serialnumbert'int"
(declare-fun serialnumbertqtint (serialnumbert) Int)

;; "serialnumbert'axiom"
(assert
  (forall ((i serialnumbert))
    (and
      (<= 0 (serialnumbertqtint i))
      (<= (serialnumbertqtint i) 4294967295))))

;; "in_range"
(define-fun in_range9 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep7 ((x serialnumbert)) Int
  (serialnumbertqtint x))

;; "of_rep"
(declare-fun of_rep7 (Int) serialnumbert)

;; "inversion_axiom"
(assert
  (forall ((x serialnumbert))
    (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; "range_axiom"
(assert
  (forall ((x serialnumbert))
    (! (in_range9 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range9 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                                  (of_rep7 x))) )))

(declare-datatypes ()
  ((us_split_fields6
   (us_split_fieldsqtmk3
   (rec__certtypes__idt__issuer us_rep1)(rec__certtypes__idt__serialnumber serialnumbert)))))

(declare-datatypes ()
  ((us_rep4 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const certtypes__idt__issuer__first__bit Int)

(declare-const certtypes__idt__issuer__last__bit Int)

(declare-const certtypes__idt__issuer__position Int)

;; "certtypes__idt__issuer__first__bit_axiom"
(assert (<= 0 certtypes__idt__issuer__first__bit))

;; "certtypes__idt__issuer__last__bit_axiom"
(assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; "certtypes__idt__issuer__position_axiom"
(assert (<= 0 certtypes__idt__issuer__position))

(declare-const certtypes__idt__serialnumber__first__bit Int)

(declare-const certtypes__idt__serialnumber__last__bit Int)

(declare-const certtypes__idt__serialnumber__position Int)

;; "certtypes__idt__serialnumber__first__bit_axiom"
(assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; "certtypes__idt__serialnumber__last__bit_axiom"
(assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; "certtypes__idt__serialnumber__position_axiom"
(assert (<= 0 certtypes__idt__serialnumber__position))

(declare-const dummy4 us_rep4)

(declare-sort yearst 0)

;; "yearst'int"
(declare-fun yearstqtint (yearst) Int)

;; "yearst'axiom"
(assert
  (forall ((i yearst))
    (and (<= 1901 (yearstqtint i)) (<= (yearstqtint i) 2099))))

;; "in_range"
(define-fun in_range10 ((x Int)) Bool
  (and (<= 1901 x) (<= x 2099)))

;; "to_rep"
(define-fun to_rep8 ((x yearst)) Int
  (yearstqtint x))

;; "of_rep"
(declare-fun of_rep8 (Int) yearst)

;; "inversion_axiom"
(assert
  (forall ((x yearst))
    (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; "range_axiom"
(assert
  (forall ((x yearst)) (! (in_range10 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range10 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                                   (of_rep8
                                                                    x))) )))

(declare-sort monthst 0)

;; "monthst'int"
(declare-fun monthstqtint (monthst) Int)

;; "monthst'axiom"
(assert
  (forall ((i monthst))
    (and (<= 1 (monthstqtint i)) (<= (monthstqtint i) 12))))

;; "in_range"
(define-fun in_range11 ((x Int)) Bool
  (and (<= 1 x) (<= x 12)))

;; "to_rep"
(define-fun to_rep9 ((x monthst)) Int
  (monthstqtint x))

;; "of_rep"
(declare-fun of_rep9 (Int) monthst)

;; "inversion_axiom"
(assert
  (forall ((x monthst))
    (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; "range_axiom"
(assert
  (forall ((x monthst)) (! (in_range11 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range11 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                                   (of_rep9
                                                                    x))) )))

(declare-sort dayst 0)

;; "dayst'int"
(declare-fun daystqtint (dayst) Int)

;; "dayst'axiom"
(assert
  (forall ((i dayst)) (and (<= 1 (daystqtint i)) (<= (daystqtint i) 31))))

;; "in_range"
(define-fun in_range12 ((x Int)) Bool
  (and (<= 1 x) (<= x 31)))

;; "to_rep"
(define-fun to_rep10 ((x dayst)) Int
  (daystqtint x))

;; "of_rep"
(declare-fun of_rep10 (Int) dayst)

;; "inversion_axiom"
(assert
  (forall ((x dayst))
    (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; "range_axiom"
(assert
  (forall ((x dayst)) (! (in_range12 (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range12 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                    (of_rep10
                                                                    x))) )))

(declare-sort millisecst 0)

;; "millisecst'int"
(declare-fun millisecstqtint (millisecst) Int)

;; "millisecst'axiom"
(assert
  (forall ((i millisecst))
    (and (<= 0 (millisecstqtint i)) (<= (millisecstqtint i) 86399999))))

;; "in_range"
(define-fun in_range13 ((x Int)) Bool
  (and (<= 0 x) (<= x 86399999)))

;; "to_rep"
(define-fun to_rep11 ((x millisecst)) Int
  (millisecstqtint x))

;; "of_rep"
(declare-fun of_rep11 (Int) millisecst)

;; "inversion_axiom"
(assert
  (forall ((x millisecst))
    (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; "range_axiom"
(assert
  (forall ((x millisecst))
    (! (in_range13 (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range13 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                    (of_rep11
                                                                    x))) )))

(declare-datatypes ()
  ((us_split_fields8
   (us_split_fieldsqtmk4
   (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))

(declare-datatypes ()
  ((us_rep5 (us_repqtmk4 (us_split_fields9 us_split_fields8)))))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; "clock__timet__year__first__bit_axiom"
(assert (<= 0 clock__timet__year__first__bit))

;; "clock__timet__year__last__bit_axiom"
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; "clock__timet__year__position_axiom"
(assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; "clock__timet__month__first__bit_axiom"
(assert (<= 0 clock__timet__month__first__bit))

;; "clock__timet__month__last__bit_axiom"
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; "clock__timet__month__position_axiom"
(assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; "clock__timet__day__first__bit_axiom"
(assert (<= 0 clock__timet__day__first__bit))

;; "clock__timet__day__last__bit_axiom"
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; "clock__timet__day__position_axiom"
(assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; "clock__timet__millisec__first__bit_axiom"
(assert (<= 0 clock__timet__millisec__first__bit))

;; "clock__timet__millisec__last__bit_axiom"
(assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; "clock__timet__millisec__position_axiom"
(assert (<= 0 clock__timet__millisec__position))

(declare-const dummy5 us_rep5)

(declare-datatypes ()
  ((us_split_fields10
   (us_split_fieldsqtmk5
   (rec__ada___cert__id__contentst__id us_rep4)(rec__ada___cert__id__contentst__notbefore us_rep5)(rec__ada___cert__id__contentst__notafter us_rep5)(rec__ada___cert__id__contentst__mechanism algorithmt)(rec__ada___cert__id__contentst__subject us_rep1)(rec__ada___cert__id__contentst__subjectpublickey us_rep3)))))

(declare-datatypes ()
  ((us_split_fields__ref3
   (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields10)))))

(declare-datatypes ()
  ((us_rep6 (us_repqtmk5 (us_split_fields11 us_split_fields10)))))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const ada___cert__id__contentst__id__first__bit Int)

(declare-const ada___cert__id__contentst__id__last__bit Int)

(declare-const ada___cert__id__contentst__id__position Int)

;; "ada___cert__id__contentst__id__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__id__first__bit))

;; "ada___cert__id__contentst__id__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__id__first__bit ada___cert__id__contentst__id__last__bit))

;; "ada___cert__id__contentst__id__position_axiom"
(assert (<= 0 ada___cert__id__contentst__id__position))

(declare-const ada___cert__id__contentst__notbefore__first__bit Int)

(declare-const ada___cert__id__contentst__notbefore__last__bit Int)

(declare-const ada___cert__id__contentst__notbefore__position Int)

;; "ada___cert__id__contentst__notbefore__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__notbefore__first__bit))

;; "ada___cert__id__contentst__notbefore__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__notbefore__first__bit ada___cert__id__contentst__notbefore__last__bit))

;; "ada___cert__id__contentst__notbefore__position_axiom"
(assert (<= 0 ada___cert__id__contentst__notbefore__position))

(declare-const ada___cert__id__contentst__notafter__first__bit Int)

(declare-const ada___cert__id__contentst__notafter__last__bit Int)

(declare-const ada___cert__id__contentst__notafter__position Int)

;; "ada___cert__id__contentst__notafter__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__notafter__first__bit))

;; "ada___cert__id__contentst__notafter__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__notafter__first__bit ada___cert__id__contentst__notafter__last__bit))

;; "ada___cert__id__contentst__notafter__position_axiom"
(assert (<= 0 ada___cert__id__contentst__notafter__position))

(declare-const ada___cert__id__contentst__mechanism__first__bit Int)

(declare-const ada___cert__id__contentst__mechanism__last__bit Int)

(declare-const ada___cert__id__contentst__mechanism__position Int)

;; "ada___cert__id__contentst__mechanism__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__mechanism__first__bit))

;; "ada___cert__id__contentst__mechanism__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__mechanism__first__bit ada___cert__id__contentst__mechanism__last__bit))

;; "ada___cert__id__contentst__mechanism__position_axiom"
(assert (<= 0 ada___cert__id__contentst__mechanism__position))

(declare-const ada___cert__id__contentst__subject__first__bit Int)

(declare-const ada___cert__id__contentst__subject__last__bit Int)

(declare-const ada___cert__id__contentst__subject__position Int)

;; "ada___cert__id__contentst__subject__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__subject__first__bit))

;; "ada___cert__id__contentst__subject__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__subject__first__bit ada___cert__id__contentst__subject__last__bit))

;; "ada___cert__id__contentst__subject__position_axiom"
(assert (<= 0 ada___cert__id__contentst__subject__position))

(declare-const ada___cert__id__contentst__subjectpublickey__first__bit Int)

(declare-const ada___cert__id__contentst__subjectpublickey__last__bit Int)

(declare-const ada___cert__id__contentst__subjectpublickey__position Int)

;; "ada___cert__id__contentst__subjectpublickey__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__subjectpublickey__first__bit))

;; "ada___cert__id__contentst__subjectpublickey__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__subjectpublickey__first__bit ada___cert__id__contentst__subjectpublickey__last__bit))

;; "ada___cert__id__contentst__subjectpublickey__position_axiom"
(assert (<= 0 ada___cert__id__contentst__subjectpublickey__position))

(declare-const dummy6 us_rep6)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_426 us_rep6) (temp___is_init_422 Bool) (temp___skip_constant_423 Bool) (temp___do_toplevel_424 Bool) (temp___do_typ_inv_425 Bool)) Bool
  true)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_258 us_rep1) (temp___is_init_254 Bool) (temp___skip_constant_255 Bool) (temp___do_toplevel_256 Bool) (temp___do_typ_inv_257 Bool)) Bool
  true)

;; "endoffile"
(declare-fun endoffile (us_rep) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant3 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; "thesubject"
(declare-fun thesubject (us_rep6) us_rep1)

(declare-datatypes ()
  ((us_split_fields12
   (us_split_fieldsqtmk6
   (rec__cert__contentst__id us_rep4)(rec__cert__contentst__notbefore us_rep5)(rec__cert__contentst__notafter us_rep5)(rec__cert__contentst__mechanism algorithmt)))))

(declare-datatypes ()
  ((us_rep7 (us_repqtmk6 (us_split_fields13 us_split_fields12)))))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; "value__size_axiom"
(assert (<= 0 value__size10))

;; "object__size_axiom"
(assert (<= 0 object__size10))

;; "alignment_axiom"
(assert (<= 0 alignment10))

(declare-const cert__contentst__id__first__bit Int)

(declare-const cert__contentst__id__last__bit Int)

(declare-const cert__contentst__id__position Int)

;; "cert__contentst__id__first__bit_axiom"
(assert (<= 0 cert__contentst__id__first__bit))

;; "cert__contentst__id__last__bit_axiom"
(assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))

;; "cert__contentst__id__position_axiom"
(assert (<= 0 cert__contentst__id__position))

(declare-const cert__contentst__notbefore__first__bit Int)

(declare-const cert__contentst__notbefore__last__bit Int)

(declare-const cert__contentst__notbefore__position Int)

;; "cert__contentst__notbefore__first__bit_axiom"
(assert (<= 0 cert__contentst__notbefore__first__bit))

;; "cert__contentst__notbefore__last__bit_axiom"
(assert
  (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))

;; "cert__contentst__notbefore__position_axiom"
(assert (<= 0 cert__contentst__notbefore__position))

(declare-const cert__contentst__notafter__first__bit Int)

(declare-const cert__contentst__notafter__last__bit Int)

(declare-const cert__contentst__notafter__position Int)

;; "cert__contentst__notafter__first__bit_axiom"
(assert (<= 0 cert__contentst__notafter__first__bit))

;; "cert__contentst__notafter__last__bit_axiom"
(assert
  (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))

;; "cert__contentst__notafter__position_axiom"
(assert (<= 0 cert__contentst__notafter__position))

(declare-const cert__contentst__mechanism__first__bit Int)

(declare-const cert__contentst__mechanism__last__bit Int)

(declare-const cert__contentst__mechanism__position Int)

;; "cert__contentst__mechanism__first__bit_axiom"
(assert (<= 0 cert__contentst__mechanism__first__bit))

;; "cert__contentst__mechanism__last__bit_axiom"
(assert
  (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))

;; "cert__contentst__mechanism__position_axiom"
(assert (<= 0 cert__contentst__mechanism__position))

(declare-const dummy7 us_rep7)

;; "theissuer"
(declare-fun theissuer (us_rep7) us_rep1)

;; "dynamic_invariant"
(define-fun dynamic_invariant4 ((temp___expr_471 us_rep7) (temp___is_init_467 Bool) (temp___skip_constant_468 Bool) (temp___do_toplevel_469 Bool) (temp___do_typ_inv_470 Bool)) Bool
  true)

;; "cert_id_to_cert"
(declare-fun cert_id_to_cert (us_rep6) us_rep7)

;; "thepublickey"
(declare-fun thepublickey (us_rep6) us_rep3)

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const component__size3 Int)

(declare-const alignment11 Int)

;; "value__size_axiom"
(assert (<= 0 value__size11))

;; "object__size_axiom"
(assert (<= 0 object__size11))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment11))

;; "temp_____aggregate_def_171"
(declare-fun temp_____aggregate_def_171 (Int) (Array Int character))

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const component__size4 Int)

(declare-const alignment12 Int)

;; "value__size_axiom"
(assert (<= 0 value__size12))

;; "object__size_axiom"
(assert (<= 0 object__size12))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment12))

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const component__size5 Int)

(declare-const alignment13 Int)

;; "value__size_axiom"
(assert (<= 0 value__size13))

;; "object__size_axiom"
(assert (<= 0 object__size13))

;; "component__size_axiom"
(assert (<= 0 component__size5))

;; "alignment_axiom"
(assert (<= 0 alignment13))

;; "temp_____aggregate_def_185"
(declare-fun temp_____aggregate_def_185 (Int) (Array Int character))

;; "temp___String_Literal_598"
(declare-fun temp___String_Literal_598 (tuple0) (Array Int character))

;; "temp___String_Literal_598__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_598 us_void_param) 1)) 67)
           (= (to_rep (select (temp___String_Literal_598 us_void_param) 2)) 101))
         (and
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 3)) 114)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 4)) 116))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 5)) 105))
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 6)) 102)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 7)) 105))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 8)) 99)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 9)) 97)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 10)) 116))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 11)) 101))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 12)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 13)) 99))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 14)) 111)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 15)) 110))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 16)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 17)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 18)) 110)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 19)) 116)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 20)) 115))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 21)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 22)) 99)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 23)) 111)))))
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 24)) 117)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 25)) 108))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 26)) 100))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 27)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 28)) 110)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 29)) 111)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 30)) 116))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 31)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 32)) 98)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 33)) 101))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 34)) 32)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 35)) 101))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 36)) 120))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 37)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 38)) 114)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 39)) 97)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 40)) 99))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 41)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 42)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 43)) 100))))))) :pattern (
    (temp___String_Literal_598
      us_void_param)) )))

;; "temp___String_Literal_604"
(declare-fun temp___String_Literal_604 (tuple0) (Array Int character))

;; "temp___String_Literal_604__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_604 us_void_param) 1)) 75)
           (= (to_rep (select (temp___String_Literal_604 us_void_param) 2)) 101))
         (and
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 3)) 121)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 4)) 32))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 5)) 99))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 6)) 111)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 7)) 117)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 8)) 108)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 9)) 100))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 10)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 11)) 110)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 12)) 111))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 13)) 116)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 14)) 32))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 15)) 98))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 16)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 17)) 32)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 18)) 97)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 19)) 100))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 20)) 100)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 21)) 101)))))
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 22)) 100)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 23)) 32))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 24)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 25)) 111)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 26)) 32)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 27)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 28)) 104))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 29)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 30)) 32))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 31)) 75)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 32)) 101))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 33)) 121))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 34)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 35)) 83)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 36)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 37)) 111))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 38)) 114)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 39)) 101))))))) :pattern (
    (temp___String_Literal_604
      us_void_param)) )))

;; "temp___String_Literal_610"
(declare-fun temp___String_Literal_610 (tuple0) (Array Int character))

;; "temp___String_Literal_610__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_610 us_void_param) 1)) 67)
           (= (to_rep (select (temp___String_Literal_610 us_void_param) 2)) 101))
         (and
           (and
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 3)) 114)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 4)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 5)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 6)) 102)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 7)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 8)) 99))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 9)) 97)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 10)) 116))))
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 11)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 12)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 13)) 99)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 14)) 111)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 15)) 117)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 16)) 108))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 17)) 100)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 18)) 32)))))
           (and
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 19)) 110)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 20)) 111))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 21)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 22)) 32)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 23)) 98)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 24)) 101))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 25)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 26)) 118))))
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 27)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 28)) 114))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 29)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 30)) 102)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 31)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 32)) 101))
                 (= (to_rep
                      (select (temp___String_Literal_610 us_void_param) 33)) 100)))))) :pattern (
    (temp___String_Literal_610
      us_void_param)) )))

;; "nodescription__def_axiom"
(assert
  (= nodescription (let ((temp___175 (temp_____aggregate_def_171 32)))
                     (let ((temp___176 temp___175)) temp___176))))

;; "def_axiom"
(assert
  (forall ((temp___170 Int))
    (let ((temp___172 (temp_____aggregate_def_171 temp___170)))
      (forall ((temp___173 Int))
        (! (=>
             (and (<= 1 temp___173) (<= temp___173 150))
             (=>
               (in_range3 temp___170)
               (= (to_rep (select temp___172 temp___173)) temp___170))) :pattern ((select temp___172 temp___173)) )))))

;; "nullrawcertificate__def_axiom"
(assert
  (= nullrawcertificate (let ((temp___189 (temp_____aggregate_def_185 32)))
                          (let ((temp___190 temp___189)) temp___190))))

;; "def_axiom"
(assert
  (forall ((temp___184 Int))
    (let ((temp___186 (temp_____aggregate_def_185 temp___184)))
      (forall ((temp___187 Int))
        (! (=>
             (and (<= 1 temp___187) (<= temp___187 4096))
             (=>
               (in_range3 temp___184)
               (= (to_rep (select temp___186 temp___187)) temp___184))) :pattern ((select temp___186 temp___187)) )))))

;; "privatekeypresent__post_axiom"
(assert true)

;; "privatekeypresent__def_axiom"
(assert
  (forall ((Keystore__thistisinfo___thistisinfo__split_fields___ us_split_fields2))
    (! (=
         (= (privatekeypresent
              Keystore__thistisinfo___thistisinfo__split_fields___) true)
         (= (rec__keystore__optionalprivatekeyt__ispresent
              Keystore__thistisinfo___thistisinfo__split_fields___) true)) :pattern (
    (privatekeypresent
      Keystore__thistisinfo___thistisinfo__split_fields___)) )))

;; "endoffile__post_axiom"
(assert true)

(declare-const thefile us_rep)

(declare-const thistisinfo__split_fields us_split_fields2)

(declare-const certno Int)

(declare-const description (Array Int character))

(declare-const thecontents__split_fields us_split_fields10)

(declare-const thesubject__split_fields us_split_fields)

(declare-const theissuer__split_fields us_split_fields)

(declare-const thepublickey__split_fields us_split_fields4)

(declare-const extracted Bool)

;; "thepublickey__split_fields'unused"
(define-fun thepublickey__split_fieldsqtunused () us_split_fields__ref2
  (us_split_fields__refqtmk2 thepublickey__split_fields))

;; "theissuer__split_fields'unused"
(define-fun theissuer__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk theissuer__split_fields))

;; "thesubject__split_fields'unused"
(define-fun thesubject__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk thesubject__split_fields))

;; "thecontents__split_fields'unused"
(define-fun thecontents__split_fieldsqtunused () us_split_fields__ref3
  (us_split_fields__refqtmk3 thecontents__split_fields))

;; "certno'unused"
(define-fun certnoqtunused () int__ref
  (int__refqtmk certno))

;; "thistisinfo__split_fields"
(define-fun thistisinfo__split_fields1 () us_split_fields__ref1
  (us_split_fields__refqtmk1 thistisinfo__split_fields))

;; "thefile'unused"
(define-fun thefileqtunused () t__ref
  (t__refqtmk thefile))

;; "thistisinfo__split_fields'unused"
(define-fun thistisinfo__split_fieldsqtunused () us_split_fields__ref1
  thistisinfo__split_fields1)

;; "Assume"
(assert true)

(declare-const temp___620 (Array Int character))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___174 Int))
    (! (=>
         (and (<= 1 temp___174) (<= temp___174 150))
         (=> (in_range3 32) (= (to_rep (select temp___620 temp___174)) 32))) :pattern ((select 
    temp___620 temp___174)) )))

;; "H"
(assert (= temp___620 (temp_____aggregate_def_171 32)))

;; "temp_____aggregate_def_171'result'unused"
(define-fun temp_____aggregate_def_171qtresultqtunused () (Array Int character)
  temp___620)

;; "Assume"
(assert (= temp___620 nodescription))

;; "Assume"
(assert true)

(declare-const temp___624 (Array Int character))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___188 Int))
    (! (=>
         (and (<= 1 temp___188) (<= temp___188 4096))
         (=> (in_range3 32) (= (to_rep (select temp___624 temp___188)) 32))) :pattern ((select 
    temp___624 temp___188)) )))

;; "H"
(assert (= temp___624 (temp_____aggregate_def_185 32)))

;; "temp_____aggregate_def_185'result'unused"
(define-fun temp_____aggregate_def_185qtresultqtunused () (Array Int character)
  temp___624)

;; "Assume"
(assert (= temp___624 nullrawcertificate))

;; "Assume"
(assert (in_range2 certno))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert
  (dynamic_invariant
    (us_repqtmk1 thistisinfo__split_fields)
    true
    false
    true
    true))

;; "temp___old_617"
(define-fun temp___old_617 () Bool
  (privatekeypresent thistisinfo__split_fields))

;; "Ensures"
(assert
  (=
    (= temp___old_617 true)
    (= (rec__keystore__optionalprivatekeyt__ispresent
         thistisinfo__split_fields) true)))

;; "privatekeypresent'result'unused"
(define-fun privatekeypresentqtresultqtunused () Bool
  temp___old_617)

(declare-const thecert (Array Int character))

;; "thecert'unused"
(define-fun thecertqtunused () map__ref
  (map__refqtmk thecert))

;; "H"
(assert (= thecert nullrawcertificate))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert
  (dynamic_invariant1
    (us_repqtmk5 thecontents__split_fields)
    false
    false
    true
    true))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk thesubject__split_fields)
    false
    false
    true
    true))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (dynamic_invariant2
    (us_repqtmk theissuer__split_fields)
    false
    false
    true
    true))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "o"
(define-fun o () Bool
  (distinct 1 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () Bool
  o)

(declare-const addedok Bool)

;; "addedok'unused"
(define-fun addedokqtunused () bool__ref
  (bool__refqtmk addedok))

;; "H"
(assert (= addedok o))

;; "o"
(define-fun o1 () Bool
  (distinct 0 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused1 () Bool
  o1)

(declare-const verifiedok Bool)

;; "verifiedok'unused"
(define-fun verifiedokqtunused () bool__ref
  (bool__refqtmk verifiedok))

;; "H"
(assert (= verifiedok o1))

(declare-const stop Int)

;; "stop'unused"
(define-fun stopqtunused () int__ref
  (int__refqtmk stop))

;; "H"
(assert (= stop 0))

;; "Assume"
(assert (in_range1 stop))

(declare-const thecert1 (Array Int character))

;; "thecert'unused"
(define-fun thecertqtunused1 () map__ref
  (map__refqtmk thecert1))

(declare-const t__contentqtresultqtunused us_rep)

;; "H"
(assert (= t__contentqtresultqtunused thefile))

(declare-const o2 Bool)

;; "H"
(assert (= o2 (endoffile thefile)))

(declare-const endoffileqtresultqtunused Bool)

;; "H"
(assert (= endoffileqtresultqtunused o2))

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused stop))

(declare-const o3 Bool)

;; "H"
(assert (= o3 (ite (= stop 0) true false)))

(declare-const infix_eqqtresultqtunused Bool)

;; "H"
(assert (= infix_eqqtresultqtunused o3))

(declare-const o4 Bool)

;; "H"
(assert (= o4 (and o3 (ite (= o2 true) false true))))

(declare-const andbqtresultqtunused Bool)

;; "H"
(assert (= andbqtresultqtunused o4))

(declare-const temp___loop_entry_584qtunused Int)

(declare-const int__contentqtresultqtunused1 Int)

(declare-const temp___loop_entry_583qtunused us_rep)

(declare-const t__contentqtresultqtunused1 us_rep)

(declare-const temp___loop_entry_582qtunused (Array Int character))

(declare-const map__contentqtresultqtunused (Array Int character))

(declare-const thefile1 us_rep)

(declare-const thecert2 (Array Int character))

(declare-const stop1 Int)

(declare-const stopqtunused1 int__ref)

(declare-const thecertqtunused2 map__ref)

(declare-const thefileqtunused1 t__ref)

(declare-const t__contentqtresultqtunused2 us_rep)

(declare-const map__contentqtresultqtunused1 (Array Int character))

(declare-const temp___compl_576 us_t)

(declare-const of_arrayqtresultqtunused us_t)

(declare-const o5 (Array Int character))

(declare-const to_arrayqtresultqtunused (Array Int character))

(declare-const param__itemqtunused map__ref)

(declare-const map__refqtmkqtresultqtunused map__ref)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const o6 Int)

(declare-const lastqtresultqtunused Int)

(declare-const o7 integer)

(declare-const of_repqtresultqtunused integer)

(declare-const o8 Int)

(declare-const firstqtresultqtunused Int)

(declare-const o9 integer)

(declare-const of_repqtresultqtunused1 integer)

(declare-const thefile2 us_rep)

(declare-const stop2 Int)

(declare-const param__item (Array Int character))

(declare-const param__itemqtunused1 map__ref)

(declare-const stopqtunused2 int__ref)

(declare-const thefileqtunused2 t__ref)

(declare-const o10 Int)

(declare-const lastqtresultqtunused1 Int)

(declare-const o11 Int)

(declare-const firstqtresultqtunused1 Int)

(declare-const map__contentqtresultqtunused2 (Array Int character))

(declare-const temp___579 us_t)

(declare-const of_arrayqtresultqtunused1 us_t)

(declare-const o12 Int)

(declare-const firstqtresultqtunused2 Int)

(declare-const o13 (Array Int character))

(declare-const to_arrayqtresultqtunused1 (Array Int character))

(declare-const temp___580 (Array Int character))

(declare-const slideqtresultqtunused (Array Int character))

(declare-const t__contentqtresultqtunused3 us_rep)

(declare-const o14 Bool)

(declare-const endoffileqtresultqtunused1 Bool)

(declare-const int__contentqtresultqtunused3 Int)

(declare-const o15 Bool)

(declare-const infix_eqqtresultqtunused1 Bool)

(declare-const o16 Bool)

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert
  (ite (= o4 true)
    (and
      (= temp___loop_entry_584qtunused stop)
      (and
        (= int__contentqtresultqtunused1 stop)
        (and
          (= temp___loop_entry_583qtunused thefile)
          (and
            (= t__contentqtresultqtunused1 thefile)
            (and
              (= temp___loop_entry_582qtunused thecert)
              (and
                (= map__contentqtresultqtunused thecert)
                (and
                  (= stopqtunused1 (int__refqtmk stop1))
                  (and
                    (= thecertqtunused2 (map__refqtmk thecert2))
                    (and
                      (= thefileqtunused1 (t__refqtmk thefile1))
                      (and
                        (= (and (ite (in_range1 stop1) true false) (ite 
                                                                    (and
                                                                    (= 
                                                                    stop1 0)
                                                                    (not
                                                                    (= 
                                                                    (endoffile
                                                                    thefile1) true)))
                                                                    true
                                                                    false)) true)
                        (and
                          (= t__contentqtresultqtunused2 thefile1)
                          (and
                            (= map__contentqtresultqtunused1 thecert2)
                            (and
                              (= temp___compl_576 (of_array thecert2 1 4096))
                              (and
                                (= of_arrayqtresultqtunused temp___compl_576)
                                (and
                                  (= o5 thecert2)
                                  (and
                                    (= to_arrayqtresultqtunused o5)
                                    (and
                                      (= param__itemqtunused (map__refqtmk
                                                               o5))
                                      (and
                                        (= map__refqtmkqtresultqtunused 
                                        (map__refqtmk
                                          o5))
                                        (and
                                          (= int__contentqtresultqtunused2 
                                          stop1)
                                          (and
                                            (= o6 4096)
                                            (and
                                              (= lastqtresultqtunused 
                                              o6)
                                              (and
                                                (= (to_rep1 o7) o6)
                                                (and
                                                  (= of_repqtresultqtunused 
                                                  o7)
                                                  (and
                                                    (= o8 1)
                                                    (and
                                                      (= firstqtresultqtunused 
                                                      o8)
                                                      (and
                                                        (= (to_rep1 o9) 
                                                        o8)
                                                        (and
                                                          (= of_repqtresultqtunused1 
                                                          o9)
                                                          (and
                                                            (= param__itemqtunused1 
                                                            (map__refqtmk
                                                              param__item))
                                                            (and
                                                              (= stopqtunused2 
                                                              (int__refqtmk
                                                                stop2))
                                                              (and
                                                                (= thefileqtunused2 
                                                                (t__refqtmk
                                                                  thefile2))
                                                                (and
                                                                  (and
                                                                    (dynamic_invariant3
                                                                    (of_array
                                                                    param__item
                                                                    (to_rep1
                                                                    o9)
                                                                    (to_rep1
                                                                    o7))
                                                                    true
                                                                    true
                                                                    true
                                                                    true)
                                                                    (in_range1
                                                                    stop2))
                                                                  (and
                                                                    (= 
                                                                    o10 4096)
                                                                    (and
                                                                    (= 
                                                                    lastqtresultqtunused1 
                                                                    o10)
                                                                    (and
                                                                    (= 
                                                                    o11 1)
                                                                    (and
                                                                    (= 
                                                                    firstqtresultqtunused1 
                                                                    o11)
                                                                    (and
                                                                    (= 
                                                                    map__contentqtresultqtunused2 
                                                                    param__item)
                                                                    (and
                                                                    (= 
                                                                    temp___579 
                                                                    (of_array
                                                                    param__item
                                                                    o11
                                                                    o10))
                                                                    (and
                                                                    (= 
                                                                    of_arrayqtresultqtunused1 
                                                                    temp___579)
                                                                    (and
                                                                    (= 
                                                                    o12 
                                                                    o11)
                                                                    (and
                                                                    (= 
                                                                    firstqtresultqtunused2 
                                                                    o12)
                                                                    (and
                                                                    (= 
                                                                    o13 
                                                                    param__item)
                                                                    (and
                                                                    (= 
                                                                    to_arrayqtresultqtunused1 
                                                                    o13)
                                                                    (and
                                                                    (= 
                                                                    temp___580 
                                                                    (slide
                                                                    o13
                                                                    o12
                                                                    1))
                                                                    (and
                                                                    (= 
                                                                    slideqtresultqtunused 
                                                                    temp___580)
                                                                    (and
                                                                    (= 
                                                                    thecert1 
                                                                    temp___580)
                                                                    (and
                                                                    (= 
                                                                    t__contentqtresultqtunused3 
                                                                    thefile2)
                                                                    (and
                                                                    (= 
                                                                    o14 
                                                                    (endoffile
                                                                    thefile2))
                                                                    (and
                                                                    (= 
                                                                    endoffileqtresultqtunused1 
                                                                    o14)
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused3 
                                                                    stop2)
                                                                    (and
                                                                    (= 
                                                                    o15 
                                                                    (ite (= 
                                                                    stop2 0)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (= 
                                                                    infix_eqqtresultqtunused1 
                                                                    o15)
                                                                    (and
                                                                    (= 
                                                                    o16 (and 
                                                                    o15 
                                                                    (ite (= 
                                                                    o14 true)
                                                                    false
                                                                    true)))
                                                                    (and
                                                                    (= 
                                                                    andbqtresultqtunused1 
                                                                    o16)
                                                                    (not
                                                                    (= 
                                                                    o16 true)))))))))))))))))))))))))))))))))))))))))))))))))))))))
    (= thecert1 thecert)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields10
  thecontents__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep6
  (us_repqtmk5 thecontents__split_fields))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  extracted)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int character)
  thecert1)

(declare-const thecontents__split_fields1 us_split_fields10)

(declare-const extracted1 Bool)

;; "extracted'unused"
(define-fun extractedqtunused () bool__ref
  (bool__refqtmk extracted1))

;; "thecontents__split_fields'unused"
(define-fun thecontents__split_fieldsqtunused1 () us_split_fields__ref3
  (us_split_fields__refqtmk3 thecontents__split_fields1))

;; "H"
(assert
  (dynamic_invariant1
    (us_repqtmk5 thecontents__split_fields1)
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields10
  thecontents__split_fields1)

;; "o"
(define-fun o17 () us_rep6
  (us_repqtmk5 thecontents__split_fields1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep6
  o17)

;; "temp___588"
(define-fun temp___588 () us_rep1
  (thesubject o17))

;; "Ensures"
(assert (dynamic_invariant2 temp___588 true false true true))

;; "thesubject'result'unused"
(define-fun thesubjectqtresultqtunused () us_rep1
  temp___588)

;; "o"
(define-fun o18 () us_split_fields
  (us_split_fields1 temp___588))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields
  o18)

(declare-const thesubject__split_fields1 us_split_fields)

;; "thesubject__split_fields'unused"
(define-fun thesubject__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk thesubject__split_fields1))

;; "H"
(assert (= thesubject__split_fields1 o18))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields10
  thecontents__split_fields1)

;; "o"
(define-fun o19 () us_rep6
  (us_repqtmk5 thecontents__split_fields1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep6
  o19)

;; "o"
(define-fun o20 () us_rep7
  (cert_id_to_cert o19))

;; "Ensures"
(assert (dynamic_invariant4 o20 true false true true))

;; "cert_id_to_cert'result'unused"
(define-fun cert_id_to_certqtresultqtunused () us_rep7
  o20)

;; "temp___590"
(define-fun temp___590 () us_rep1
  (theissuer o20))

;; "Ensures"
(assert (dynamic_invariant2 temp___590 true false true true))

;; "theissuer'result'unused"
(define-fun theissuerqtresultqtunused () us_rep1
  temp___590)

;; "o"
(define-fun o21 () us_split_fields
  (us_split_fields1 temp___590))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields
  o21)

(declare-const theissuer__split_fields1 us_split_fields)

;; "theissuer__split_fields'unused"
(define-fun theissuer__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk theissuer__split_fields1))

;; "H"
(assert (= theissuer__split_fields1 o21))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused3 () us_split_fields10
  thecontents__split_fields1)

;; "o"
(define-fun o22 () us_rep6
  (us_repqtmk5 thecontents__split_fields1))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep6
  o22)

;; "temp___592"
(define-fun temp___592 () us_rep3
  (thepublickey o22))

;; "Ensures"
(assert true)

;; "thepublickey'result'unused"
(define-fun thepublickeyqtresultqtunused () us_rep3
  temp___592)

;; "o"
(define-fun o23 () us_split_fields4
  (us_split_fields5 temp___592))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields4
  o23)

(declare-const thepublickey__split_fields1 us_split_fields4)

;; "thepublickey__split_fields'unused"
(define-fun thepublickey__split_fieldsqtunused1 () us_split_fields__ref2
  (us_split_fields__refqtmk2 thepublickey__split_fields1))

;; "H"
(assert (= thepublickey__split_fields1 o23))

(declare-const spark__branch Bool)

(declare-const thistisinfo__split_fields2 us_split_fields2)

(declare-const addedok1 Bool)

;; "addedok'unused"
(define-fun addedokqtunused1 () bool__ref
  (bool__refqtmk addedok1))

;; "thistisinfo__split_fields"
(define-fun thistisinfo__split_fields3 () us_split_fields__ref1
  (us_split_fields__refqtmk1 thistisinfo__split_fields2))

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

(declare-const bool__contentqtresultqtunused1 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused1 extracted1))

(declare-const spark__branch1 Bool)

(declare-const spark__branchqtunused1 bool__ref)

;; "H"
(assert (= spark__branchqtunused1 (bool__refqtmk spark__branch1)))

;; "H"
(assert (= spark__branch1 extracted1))

(declare-const bool__contentqtresultqtunused2 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused2 spark__branch1))

(declare-const us_split_fields__contentqtresultqtunused4 us_split_fields)

(declare-const us_repqtmkqtresultqtunused4 us_rep1)

(declare-const us_split_fieldsqtresultqtunused3 us_split_fields)

(declare-const o24 issueridt)

(declare-const rec__cryptotypes__issuert__idqtresultqtunused issueridt)

(declare-const o25 Int)

(declare-const to_repqtresultqtunused Int)

(declare-const us_split_fields__contentqtresultqtunused5 us_split_fields)

(declare-const us_repqtmkqtresultqtunused5 us_rep1)

(declare-const us_split_fieldsqtresultqtunused4 us_split_fields)

(declare-const o26 issueridt)

(declare-const rec__cryptotypes__issuert__idqtresultqtunused1 issueridt)

(declare-const o27 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const o28 Bool)

(declare-const infix_eqqtresultqtunused2 Bool)

(declare-const bool__contentqtresultqtunused3 Bool)

(declare-const bool__contentqtresultqtunused4 Bool)

(declare-const o29 Bool)

(declare-const of_intqtresultqtunused2 Bool)

(declare-const us_split_fields__contentqtresultqtunused6 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused6 us_rep3)

(declare-const us_split_fields__contentqtresultqtunused7 us_split_fields)

(declare-const us_repqtmkqtresultqtunused7 us_rep1)

(declare-const thistisinfo__split_fieldsqtunused1 us_split_fields__ref1)

;; "H"
(assert
  (ite (= spark__branch1 true)
    (and
      (= us_split_fields__contentqtresultqtunused4 theissuer__split_fields1)
      (and
        (= us_repqtmkqtresultqtunused4 (us_repqtmk theissuer__split_fields1))
        (and
          (= us_split_fieldsqtresultqtunused3 theissuer__split_fields1)
          (and
            (= o24 (rec__cryptotypes__issuert__id theissuer__split_fields1))
            (and
              (= rec__cryptotypes__issuert__idqtresultqtunused o24)
              (and
                (= (to_rep2 o24) o25)
                (and
                  (= to_repqtresultqtunused o25)
                  (and
                    (= us_split_fields__contentqtresultqtunused5 thesubject__split_fields1)
                    (and
                      (= us_repqtmkqtresultqtunused5 (us_repqtmk
                                                       thesubject__split_fields1))
                      (and
                        (= us_split_fieldsqtresultqtunused4 thesubject__split_fields1)
                        (and
                          (= o26 (rec__cryptotypes__issuert__id
                                   thesubject__split_fields1))
                          (and
                            (= rec__cryptotypes__issuert__idqtresultqtunused1 
                            o26)
                            (and
                              (= (to_rep2 o26) o27)
                              (and
                                (= to_repqtresultqtunused1 o27)
                                (and
                                  (= o28 (ite (= o27 o25) true false))
                                  (and
                                    (= infix_eqqtresultqtunused2 o28)
                                    (and
                                      (= spark__branch o28)
                                      (and
                                        (= bool__contentqtresultqtunused3 
                                        spark__branch)
                                        (ite (= spark__branch true)
                                          (and
                                            (= bool__contentqtresultqtunused4 
                                            addedok)
                                            (and
                                              (= o29 (distinct 1 0))
                                              (and
                                                (= of_intqtresultqtunused2 
                                                o29)
                                                (and
                                                  (= us_split_fields__contentqtresultqtunused6 
                                                  thepublickey__split_fields1)
                                                  (and
                                                    (= us_repqtmkqtresultqtunused6 
                                                    (us_repqtmk2
                                                      thepublickey__split_fields1))
                                                    (and
                                                      (= us_split_fields__contentqtresultqtunused7 
                                                      thesubject__split_fields1)
                                                      (and
                                                        (= us_repqtmkqtresultqtunused7 
                                                        (us_repqtmk
                                                          thesubject__split_fields1))
                                                        (and
                                                          (= thistisinfo__split_fieldsqtunused1 
                                                          thistisinfo__split_fields1)
                                                          (and
                                                            (= (and (or (and (and 
                                                            addedok1 (not 
                                                            o29)) (privatekeypresent
                                                                    thistisinfo__split_fields2)) (and (not (and 
                                                            addedok1 (not 
                                                            o29))) (= (ite 
                                                            (privatekeypresent
                                                              thistisinfo__split_fields2) 1 0) (ite 
                                                            (privatekeypresent
                                                              thistisinfo__split_fields) 1 0)))) (not (and (and (and 
                                                            addedok1 (not 
                                                            o29)) (privatekeypresent
                                                                    thistisinfo__split_fields2)) (and (not (and 
                                                            addedok1 (not 
                                                            o29))) (= (ite 
                                                            (privatekeypresent
                                                              thistisinfo__split_fields2) 1 0) (ite 
                                                            (privatekeypresent
                                                              thistisinfo__split_fields) 1 0)))))) true)
                                                            (dynamic_invariant
                                                              (us_repqtmk1
                                                                thistisinfo__split_fields2)
                                                              true
                                                              true
                                                              true
                                                              true))))))))))
                                          (and
                                            (= thistisinfo__split_fields2 
                                            thistisinfo__split_fields)
                                            (= addedok1 addedok)))))))))))))))))))))
    (and
      (and
        (= spark__branch spark__branch1)
        (= thistisinfo__split_fields2 thistisinfo__split_fields))
      (= addedok1 addedok))))

(declare-const spark__branch2 Bool)

(declare-const verifiedok1 Bool)

;; "verifiedok'unused"
(define-fun verifiedokqtunused1 () bool__ref
  (bool__refqtmk verifiedok1))

;; "spark__branch'unused"
(define-fun spark__branchqtunused2 () bool__ref
  (bool__refqtmk spark__branch2))

(declare-const bool__contentqtresultqtunused5 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused5 addedok1))

(declare-const bool__contentqtresultqtunused6 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused6 extracted1))

(declare-const o30 Bool)

;; "H"
(assert (= o30 (and extracted1 addedok1)))

(declare-const andbqtresultqtunused2 Bool)

;; "H"
(assert (= andbqtresultqtunused2 o30))

;; "H"
(assert (= spark__branch2 o30))

(declare-const bool__contentqtresultqtunused7 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused7 spark__branch2))

(declare-const bool__contentqtresultqtunused8 Bool)

(declare-const us_split_fields__contentqtresultqtunused8 us_split_fields10)

(declare-const o31 us_rep6)

(declare-const us_repqtmkqtresultqtunused8 us_rep6)

(declare-const o32 us_rep7)

(declare-const cert_id_to_certqtresultqtunused1 us_rep7)

(declare-const map__contentqtresultqtunused4 (Array Int character))

;; "H"
(assert
  (ite (= spark__branch2 true)
    (and
      (= bool__contentqtresultqtunused8 verifiedok)
      (and
        (= us_split_fields__contentqtresultqtunused8 thecontents__split_fields1)
        (and
          (= o31 (us_repqtmk5 thecontents__split_fields1))
          (and
            (= us_repqtmkqtresultqtunused8 o31)
            (and
              (= o32 (cert_id_to_cert o31))
              (and
                (dynamic_invariant4 o32 true false true true)
                (and
                  (= cert_id_to_certqtresultqtunused1 o32)
                  (= map__contentqtresultqtunused4 thecert1))))))))
    (= verifiedok1 verifiedok)))

(declare-const spark__branch3 Bool)

(declare-const thistisinfo__split_fields4 us_split_fields2)

(declare-const addedok2 Bool)

;; "addedok'unused"
(define-fun addedokqtunused2 () bool__ref
  (bool__refqtmk addedok2))

;; "thistisinfo__split_fields"
(define-fun thistisinfo__split_fields5 () us_split_fields__ref1
  (us_split_fields__refqtmk1 thistisinfo__split_fields4))

;; "spark__branch'unused"
(define-fun spark__branchqtunused3 () bool__ref
  (bool__refqtmk spark__branch3))

(declare-const us_split_fields__contentqtresultqtunused9 us_split_fields)

;; "H"
(assert
  (= us_split_fields__contentqtresultqtunused9 theissuer__split_fields1))

(declare-const us_repqtmkqtresultqtunused9 us_rep1)

;; "H"
(assert
  (= us_repqtmkqtresultqtunused9 (us_repqtmk theissuer__split_fields1)))

(declare-const us_split_fieldsqtresultqtunused5 us_split_fields)

;; "H"
(assert (= us_split_fieldsqtresultqtunused5 theissuer__split_fields1))

(declare-const o33 issueridt)

;; "H"
(assert (= o33 (rec__cryptotypes__issuert__id theissuer__split_fields1)))

(declare-const rec__cryptotypes__issuert__idqtresultqtunused2 issueridt)

;; "H"
(assert (= rec__cryptotypes__issuert__idqtresultqtunused2 o33))

(declare-const o34 Int)

;; "Ensures"
(assert (= (to_rep2 o33) o34))

(declare-const to_repqtresultqtunused2 Int)

;; "H"
(assert (= to_repqtresultqtunused2 o34))

(declare-const us_split_fields__contentqtresultqtunused10 us_split_fields)

;; "H"
(assert
  (= us_split_fields__contentqtresultqtunused10 thesubject__split_fields1))

(declare-const us_repqtmkqtresultqtunused10 us_rep1)

;; "H"
(assert
  (= us_repqtmkqtresultqtunused10 (us_repqtmk thesubject__split_fields1)))

(declare-const us_split_fieldsqtresultqtunused6 us_split_fields)

;; "H"
(assert (= us_split_fieldsqtresultqtunused6 thesubject__split_fields1))

(declare-const o35 issueridt)

;; "H"
(assert (= o35 (rec__cryptotypes__issuert__id thesubject__split_fields1)))

(declare-const rec__cryptotypes__issuert__idqtresultqtunused3 issueridt)

;; "H"
(assert (= rec__cryptotypes__issuert__idqtresultqtunused3 o35))

(declare-const o36 Int)

;; "Ensures"
(assert (= (to_rep2 o35) o36))

(declare-const to_repqtresultqtunused3 Int)

;; "H"
(assert (= to_repqtresultqtunused3 o36))

(declare-const infix_eqqtresultqtunused3 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused3 (ite (= o36 o34) true false)))

(declare-const bool__contentqtresultqtunused9 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused9 verifiedok1))

(declare-const o37 Bool)

;; "H"
(assert (= o37 (and verifiedok1 (ite (= o36 o34) false true))))

(declare-const andbqtresultqtunused3 Bool)

;; "H"
(assert (= andbqtresultqtunused3 o37))

;; "H"
(assert (= spark__branch3 o37))

(declare-const bool__contentqtresultqtunused10 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused10 spark__branch3))

(declare-const bool__contentqtresultqtunused11 Bool)

(declare-const o38 Bool)

(declare-const of_intqtresultqtunused3 Bool)

(declare-const us_split_fields__contentqtresultqtunused11 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused11 us_rep3)

(declare-const us_split_fields__contentqtresultqtunused12 us_split_fields)

(declare-const us_repqtmkqtresultqtunused12 us_rep1)

(declare-const thistisinfo__split_fieldsqtunused2 us_split_fields__ref1)

;; "H"
(assert
  (ite (= spark__branch3 true)
    (and
      (= bool__contentqtresultqtunused11 addedok1)
      (and
        (= o38 (distinct 1 0))
        (and
          (= of_intqtresultqtunused3 o38)
          (and
            (= us_split_fields__contentqtresultqtunused11 thepublickey__split_fields1)
            (and
              (= us_repqtmkqtresultqtunused11 (us_repqtmk2
                                                thepublickey__split_fields1))
              (and
                (= us_split_fields__contentqtresultqtunused12 thesubject__split_fields1)
                (and
                  (= us_repqtmkqtresultqtunused12 (us_repqtmk
                                                    thesubject__split_fields1))
                  (and
                    (= thistisinfo__split_fieldsqtunused2 thistisinfo__split_fields3)
                    (and
                      (= (and (or (and (and addedok2 (not o38)) (privatekeypresent
                                                                  thistisinfo__split_fields4)) (and (not (and 
                      addedok2 (not o38))) (= (ite (privatekeypresent
                                                     thistisinfo__split_fields4) 1 0) (ite 
                      (privatekeypresent
                        thistisinfo__split_fields2) 1 0)))) (not (and (and (and 
                      addedok2 (not o38)) (privatekeypresent
                                            thistisinfo__split_fields4)) (and (not (and 
                      addedok2 (not o38))) (= (ite (privatekeypresent
                                                     thistisinfo__split_fields4) 1 0) (ite 
                      (privatekeypresent
                        thistisinfo__split_fields2) 1 0)))))) true)
                      (dynamic_invariant
                        (us_repqtmk1 thistisinfo__split_fields4)
                        true
                        true
                        true
                        true))))))))))
    (and
      (= thistisinfo__split_fields4 thistisinfo__split_fields2)
      (= addedok2 addedok1))))

(declare-const spark__branch4 Bool)

(declare-const thistisinfo__split_fields6 us_split_fields2)

(declare-const addedok3 Bool)

;; "addedok'unused"
(define-fun addedokqtunused3 () bool__ref
  (bool__refqtmk addedok3))

;; "thistisinfo__split_fields'unused"
(define-fun thistisinfo__split_fieldsqtunused3 () us_split_fields__ref1
  (us_split_fields__refqtmk1 thistisinfo__split_fields6))

;; "spark__branch'unused"
(define-fun spark__branchqtunused4 () bool__ref
  (bool__refqtmk spark__branch4))

(declare-const bool__contentqtresultqtunused12 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused12 addedok2))

(declare-const bool__contentqtresultqtunused13 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused13 verifiedok1))

(declare-const o39 Bool)

;; "H"
(assert (= o39 (and verifiedok1 addedok2)))

(declare-const andbqtresultqtunused4 Bool)

;; "H"
(assert (= andbqtresultqtunused4 o39))

(declare-const o40 Bool)

;; "H"
(assert (= o40 (and o39 istis)))

(declare-const andbqtresultqtunused5 Bool)

;; "H"
(assert (= andbqtresultqtunused5 o40))

;; "H"
(assert (= spark__branch4 o40))

(declare-const bool__contentqtresultqtunused14 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused14 spark__branch4))

(declare-const bool__contentqtresultqtunused15 Bool)

(declare-const o41 Bool)

(declare-const of_intqtresultqtunused4 Bool)

(declare-const us_split_fields__contentqtresultqtunused13 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused13 us_rep3)

(declare-const us_split_fields__contentqtresultqtunused14 us_split_fields)

(declare-const us_repqtmkqtresultqtunused14 us_rep1)

(declare-const thistisinfo__split_fieldsqtunused4 us_split_fields__ref1)

;; "H"
(assert
  (ite (= spark__branch4 true)
    (and
      (= bool__contentqtresultqtunused15 addedok2)
      (and
        (= o41 (distinct 0 0))
        (and
          (= of_intqtresultqtunused4 o41)
          (and
            (= us_split_fields__contentqtresultqtunused13 thepublickey__split_fields1)
            (and
              (= us_repqtmkqtresultqtunused13 (us_repqtmk2
                                                thepublickey__split_fields1))
              (and
                (= us_split_fields__contentqtresultqtunused14 thesubject__split_fields1)
                (and
                  (= us_repqtmkqtresultqtunused14 (us_repqtmk
                                                    thesubject__split_fields1))
                  (and
                    (= thistisinfo__split_fieldsqtunused4 thistisinfo__split_fields5)
                    (and
                      (= (and (or (and (and addedok3 (not o41)) (privatekeypresent
                                                                  thistisinfo__split_fields6)) (and (not (and 
                      addedok3 (not o41))) (= (ite (privatekeypresent
                                                     thistisinfo__split_fields6) 1 0) (ite 
                      (privatekeypresent
                        thistisinfo__split_fields4) 1 0)))) (not (and (and (and 
                      addedok3 (not o41)) (privatekeypresent
                                            thistisinfo__split_fields6)) (and (not (and 
                      addedok3 (not o41))) (= (ite (privatekeypresent
                                                     thistisinfo__split_fields6) 1 0) (ite 
                      (privatekeypresent
                        thistisinfo__split_fields4) 1 0)))))) true)
                      (dynamic_invariant
                        (us_repqtmk1 thistisinfo__split_fields6)
                        true
                        true
                        true
                        true))))))))))
    (and
      (= thistisinfo__split_fields6 thistisinfo__split_fields4)
      (= addedok3 addedok2))))

(declare-const bool__contentqtresultqtunused16 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused16 extracted1))

(declare-const spark__branch5 Bool)

(declare-const spark__branchqtunused5 bool__ref)

;; "H"
(assert (= spark__branchqtunused5 (bool__refqtmk spark__branch5)))

;; "H"
(assert (= spark__branch5 (ite (= extracted1 true) false true)))

(declare-const bool__contentqtresultqtunused17 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused17 spark__branch5))

(declare-const bool__contentqtresultqtunused18 Bool)

(declare-const spark__branch6 Bool)

(declare-const spark__branchqtunused6 bool__ref)

(declare-const bool__contentqtresultqtunused19 Bool)

(declare-const bool__contentqtresultqtunused20 Bool)

(declare-const spark__branch7 Bool)

(declare-const spark__branchqtunused7 bool__ref)

(declare-const bool__contentqtresultqtunused21 Bool)

(declare-const temp___611 (Array Int character))

(declare-const temp___String_Literal_610qtresultqtunused (Array Int character))

(declare-const o42 us_t)

(declare-const of_arrayqtresultqtunused2 us_t)

(declare-const o43 (Array Int character))

(declare-const makedescriptionqtresultqtunused (Array Int character))

(declare-const temp___605 (Array Int character))

(declare-const temp___String_Literal_604qtresultqtunused (Array Int character))

(declare-const o44 us_t)

(declare-const of_arrayqtresultqtunused3 us_t)

(declare-const o45 (Array Int character))

(declare-const makedescriptionqtresultqtunused1 (Array Int character))

(declare-const temp___599 (Array Int character))

(declare-const temp___String_Literal_598qtresultqtunused (Array Int character))

(declare-const o46 us_t)

(declare-const of_arrayqtresultqtunused4 us_t)

(declare-const o47 (Array Int character))

(declare-const makedescriptionqtresultqtunused2 (Array Int character))

;; "H"
(assert
  (ite (= spark__branch5 true)
    (and
      (= temp___599 (temp___String_Literal_598 Tuple0))
      (and
        (= temp___String_Literal_598qtresultqtunused temp___599)
        (and
          (<= 0 43)
          (and
            (<= 43 1000)
            (and
              (dynamic_property 1 2147483647 1 43)
              (and
                (= o46 (of_array temp___599 1 43))
                (and
                  (= of_arrayqtresultqtunused4 o46)
                  (and
                    (= o47 (makedescription o46 certno))
                    (= makedescriptionqtresultqtunused2 o47)))))))))
    (and
      (= bool__contentqtresultqtunused18 addedok3)
      (and
        (= spark__branchqtunused6 (bool__refqtmk spark__branch6))
        (and
          (= spark__branch6 (ite (= addedok3 true) false true))
          (and
            (= bool__contentqtresultqtunused19 spark__branch6)
            (ite (= spark__branch6 true)
              (and
                (= temp___605 (temp___String_Literal_604 Tuple0))
                (and
                  (= temp___String_Literal_604qtresultqtunused temp___605)
                  (and
                    (<= 0 39)
                    (and
                      (<= 39 1000)
                      (and
                        (dynamic_property 1 2147483647 1 39)
                        (and
                          (= o44 (of_array temp___605 1 39))
                          (and
                            (= of_arrayqtresultqtunused3 o44)
                            (and
                              (= o45 (makedescription o44 certno))
                              (= makedescriptionqtresultqtunused1 o45)))))))))
              (and
                (= bool__contentqtresultqtunused20 verifiedok1)
                (and
                  (= spark__branchqtunused7 (bool__refqtmk spark__branch7))
                  (and
                    (= spark__branch7 (ite (= verifiedok1 true) false true))
                    (and
                      (= bool__contentqtresultqtunused21 spark__branch7)
                      (=>
                        (= spark__branch7 true)
                        (and
                          (= temp___611 (temp___String_Literal_610 Tuple0))
                          (and
                            (= temp___String_Literal_610qtresultqtunused 
                            temp___611)
                            (and
                              (<= 0 33)
                              (and
                                (<= 33 1000)
                                (and
                                  (dynamic_property 1 2147483647 1 33)
                                  (and
                                    (= o42 (of_array temp___611 1 33))
                                    (and
                                      (= of_arrayqtresultqtunused2 o42)
                                      (and
                                        (= o43 (makedescription o42 certno))
                                        (= makedescriptionqtresultqtunused 
                                        o43)))))))))))))))))))))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused22 () Bool
  addedok3)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused23 () Bool
  verifiedok1)

;; "o"
(define-fun o48 () Bool
  (and verifiedok1 addedok3))

;; "andb'result'unused"
(define-fun andbqtresultqtunused6 () Bool
  o48)

(declare-const keyadded Bool)

;; "keyadded'unused"
(define-fun keyaddedqtunused () bool__ref
  (bool__refqtmk keyadded))

;; "H"
(assert (= keyadded o48))

;; "H"
(assert (= istis true))

;; "H"
(assert (= keyadded true))

;; Goal "def'vc"
;; File "enrolment.adb", line 93, characters 0-0
(assert
  (not (= (privatekeypresent thistisinfo__split_fields6) true)))

(check-sat)
