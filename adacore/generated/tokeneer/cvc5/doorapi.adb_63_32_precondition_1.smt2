;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort us_image 0)

;; "attr__ATTRIBUTE_VALUE__pre_check"
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

;; "attr__ATTRIBUTE_VALUE"
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort character 0)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

;; "slide"
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; "slide_eq"
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; "bool_eq"
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; "bool_eq_rev"
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "from_string"
(declare-fun from_string (us_t) us_image)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

(declare-sort messagelengtht 0)

;; "messagelengtht'int"
(declare-fun messagelengthtqtint (messagelengtht) Int)

;; "messagelengtht'axiom"
(assert
  (forall ((i messagelengtht))
    (and (<= 0 (messagelengthtqtint i)) (<= (messagelengthtqtint i) 4096))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 4096)))

;; "to_rep"
(define-fun to_rep2 ((x messagelengtht)) Int
  (messagelengthtqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) messagelengtht)

;; "inversion_axiom"
(assert
  (forall ((x messagelengtht))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x messagelengtht))
    (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__tcpip__messaget__data (Array Int character))(rec__tcpip__messaget__length messagelengtht)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const tcpip__messaget__data__first__bit Int)

(declare-const tcpip__messaget__data__last__bit Int)

(declare-const tcpip__messaget__data__position Int)

;; "tcpip__messaget__data__first__bit_axiom"
(assert (<= 0 tcpip__messaget__data__first__bit))

;; "tcpip__messaget__data__last__bit_axiom"
(assert
  (< tcpip__messaget__data__first__bit tcpip__messaget__data__last__bit))

;; "tcpip__messaget__data__position_axiom"
(assert (<= 0 tcpip__messaget__data__position))

(declare-const tcpip__messaget__length__first__bit Int)

(declare-const tcpip__messaget__length__last__bit Int)

(declare-const tcpip__messaget__length__position Int)

;; "tcpip__messaget__length__first__bit_axiom"
(assert (<= 0 tcpip__messaget__length__first__bit))

;; "tcpip__messaget__length__last__bit_axiom"
(assert
  (< tcpip__messaget__length__first__bit tcpip__messaget__length__last__bit))

;; "tcpip__messaget__length__position_axiom"
(assert (<= 0 tcpip__messaget__length__position))

(declare-const dummy us_rep)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_213 us_rep) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool) (temp___do_typ_inv_212 Bool)) Bool
  true)

;; "temp_____aggregate_def_218"
(declare-fun temp_____aggregate_def_218 (Int) (Array Int character))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_215 us_rep) (temp___skip_top_level_216 Bool)) Bool
  (and
    (= (rec__tcpip__messaget__data (us_split_fields1 temp___expr_215)) 
    (let ((temp___222 (temp_____aggregate_def_218 0)))
      (let ((temp___223 temp___222)) temp___223)))
    (= (to_rep2
         (rec__tcpip__messaget__length (us_split_fields1 temp___expr_215))) 0)))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; "overwrite"
(declare-fun overwrite (us_t
  Int
  us_t) us_t)

(declare-const nullmsg us_rep)

(declare-const outmsg us_rep)

;; "getresponsefrommsg"
(declare-fun getresponsefrommsg (us_rep) us_t)

(declare-const msg__first integer)

(declare-const msg__last integer)

;; "getdictionary"
(declare-fun getdictionary (us_t
  Int) us_t)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_280 us_t) (temp___is_init_276 Bool) (temp___skip_constant_277 Bool) (temp___do_toplevel_278 Bool) (temp___do_typ_inv_279 Bool)) Bool
  (=>
    (not (= temp___skip_constant_277 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_280)
      (last temp___expr_280))))

(declare-const statedict__first integer)

(declare-const statedict__last integer)

;; "getstringbykey"
(declare-fun getstringbykey (us_t
  us_t) us_t)

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment3))

;; "temp_____aggregate_def_172"
(declare-fun temp_____aggregate_def_172 (Int) (Array Int character))

;; "temp___String_Literal_180"
(declare-fun temp___String_Literal_180 (tuple0) (Array Int character))

;; "temp___String_Literal_180__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_180 us_void_param) 1)) 100)
           (= (to_rep (select (temp___String_Literal_180 us_void_param) 2)) 111))
         (and
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 3)) 111)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 4)) 114))
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 5)) 46)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 6)) 103)))
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 7)) 101)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 8)) 116))
               (= (to_rep
                    (select (temp___String_Literal_180 us_void_param) 9)) 83)))
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 10)) 116)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 11)) 97))
               (= (to_rep
                    (select (temp___String_Literal_180 us_void_param) 12)) 116))
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 13)) 101)
                 (= (to_rep
                      (select (temp___String_Literal_180 us_void_param) 14)) 40))
               (= (to_rep
                    (select (temp___String_Literal_180 us_void_param) 15)) 41))))) :pattern (
    (temp___String_Literal_180
      us_void_param)) )))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size3 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment4))

;; "temp___String_Literal_302"
(declare-fun temp___String_Literal_302 (tuple0) (Array Int character))

;; "temp___String_Literal_302__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_302 us_void_param) 1)) 111)
           (= (to_rep (select (temp___String_Literal_302 us_void_param) 2)) 112))
         (and
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 3)) 101)
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 4)) 114))
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 5)) 97))
             (and
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 6)) 116)
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 7)) 105)))
           (and
             (and
               (and
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 8)) 111)
                 (= (to_rep
                      (select (temp___String_Literal_302 us_void_param) 9)) 110))
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 10)) 97))
             (and
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 11)) 108)
               (= (to_rep
                    (select (temp___String_Literal_302 us_void_param) 12)) 63))))) :pattern (
    (temp___String_Literal_302
      us_void_param)) )))

;; "temp___String_Literal_306"
(declare-fun temp___String_Literal_306 (tuple0) (Array Int character))

;; "temp___String_Literal_306__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_306 us_void_param) 1)) 99)
           (= (to_rep (select (temp___String_Literal_306 us_void_param) 2)) 108))
         (and
           (and
             (and
               (= (to_rep
                    (select (temp___String_Literal_306 us_void_param) 3)) 111)
               (= (to_rep
                    (select (temp___String_Literal_306 us_void_param) 4)) 115))
             (= (to_rep (select (temp___String_Literal_306 us_void_param) 5)) 101))
           (and
             (= (to_rep (select (temp___String_Literal_306 us_void_param) 6)) 100)
             (= (to_rep (select (temp___String_Literal_306 us_void_param) 7)) 63)))) :pattern (
    (temp___String_Literal_306
      us_void_param)) )))

(declare-const rliteral messagelengtht)

;; "rliteral_axiom"
(assert (= (messagelengthtqtint rliteral) 0))

;; "nullmsg__def_axiom"
(assert
  (= nullmsg (us_repqtmk
               (us_split_fieldsqtmk
                 (let ((temp___176qtunused (temp_____aggregate_def_172 0)))
                   (temp_____aggregate_def_172 0))
                 rliteral))))

;; "def_axiom"
(assert
  (forall ((temp___171 Int))
    (let ((temp___173 (temp_____aggregate_def_172 temp___171)))
      (forall ((temp___174 Int))
        (! (=>
             (and (<= 1 temp___174) (<= temp___174 4096))
             (=>
               (in_range2 temp___171)
               (= (to_rep (select temp___173 temp___174)) temp___171))) :pattern ((select temp___173 temp___174)) )))))

;; "def_axiom"
(assert
  (forall ((temp___217 Int))
    (let ((temp___219 (temp_____aggregate_def_218 temp___217)))
      (forall ((temp___220 Int))
        (! (=>
             (and (<= 1 temp___220) (<= temp___220 4096))
             (=>
               (in_range2 temp___217)
               (= (to_rep (select temp___219 temp___220)) temp___217))) :pattern ((select temp___219 temp___220)) )))))

;; "overwrite__post_axiom"
(assert
  (forall ((param__source us_t) (param__new_item us_t))
    (forall ((param__position Int))
      (! (=>
           (and
             (and
               (and
                 (dynamic_invariant param__source true false true true)
                 (in_range1 param__position))
               (dynamic_invariant param__new_item true false true true))
             (and
               (let ((temp___248 (- param__position 1)))
                 (and
                   (<= (- (first param__source) 1) temp___248)
                   (<= temp___248 (last param__source))))
               (=>
                 (<= (- (length param__source) (length param__new_item)) (- param__position 
                 (first
                   param__source)))
                 (<= (- param__position (first param__source)) (- 2147483647 
                 (length
                   param__new_item))))))
           (let ((result (overwrite
                           param__source
                           param__position
                           param__new_item)))
             (and
               (and
                 (and
                   (and
                     (and
                       (= (first result) 1)
                       (= (length result) (max
                                            (length param__source)
                                            (+ (- param__position (first
                                                                    param__source)) 
                                            (length
                                              param__new_item)))))
                     (= (let ((temp___256 (let ((temp___252 (- param__position 1)))
                                            (let ((temp___251 (first
                                                                param__source)))
                                              (of_array
                                                (to_array param__source)
                                                temp___251
                                                temp___252)))))
                          (let ((temp___254 (let ((temp___250 (- param__position 
                                              (first
                                                param__source))))
                                              (of_array
                                                (to_array result)
                                                1
                                                temp___250))))
                            (bool_eq
                              (to_array temp___254)
                              (first temp___254)
                              (last temp___254)
                              (to_array temp___256)
                              (first temp___256)
                              (last temp___256)))) true))
                   (= (let ((temp___260 (let ((temp___258 (+ (- param__position 
                                          (first
                                            param__source)) (length
                                                              param__new_item))))
                                          (let ((temp___257 (+ (- param__position 
                                            (first
                                              param__source)) 1)))
                                            (of_array
                                              (to_array result)
                                              temp___257
                                              temp___258)))))
                        (bool_eq
                          (to_array temp___260)
                          (first temp___260)
                          (last temp___260)
                          (to_array param__new_item)
                          (first param__new_item)
                          (last param__new_item))) true))
                 (=>
                   (<= param__position (- (last param__source) (length
                                                                 param__new_item)))
                   (= (let ((temp___268 (let ((temp___264 (last
                                                            param__source)))
                                          (let ((temp___263 (+ param__position 
                                            (length
                                              param__new_item))))
                                            (of_array
                                              (to_array param__source)
                                              temp___263
                                              temp___264)))))
                        (let ((temp___266 (let ((temp___262 (last result)))
                                            (let ((temp___261 (+ (+ (- param__position 
                                              (first
                                                param__source)) (length
                                                                  param__new_item)) 1)))
                                              (of_array
                                                (to_array result)
                                                temp___261
                                                temp___262)))))
                          (bool_eq
                            (to_array temp___266)
                            (first temp___266)
                            (last temp___266)
                            (to_array temp___268)
                            (first temp___268)
                            (last temp___268)))) true)))
               (dynamic_invariant result true false true true)))) :pattern (
      (overwrite
        param__source
        param__position
        param__new_item)) ))))

(declare-const rliteral1 messagelengtht)

;; "rliteral_axiom"
(assert (= (messagelengthtqtint rliteral1) 15))

;; Goal "def'vc"
;; File "doorapi.adb", line 25, characters 0-0
(assert
  (not
  (forall ((inmsg__split_fields us_split_fields))
    (=>
      (dynamic_invariant1 nullmsg true false true true)
      (forall ((temp___312 (Array Int character)))
        (=>
          (and
            (forall ((temp___175 Int))
              (! (=>
                   (and (<= 1 temp___175) (<= temp___175 4096))
                   (=>
                     (in_range2 0)
                     (= (to_rep (select temp___312 temp___175)) 0))) :pattern ((select temp___312 temp___175)) ))
            (= temp___312 (temp_____aggregate_def_172 0)))
          (=>
            (= (us_repqtmk (us_split_fieldsqtmk temp___312 rliteral)) 
            nullmsg)
            (=>
              (default_initial_assumption
                (us_repqtmk inmsg__split_fields)
                false)
              (=>
                (dynamic_invariant1
                  (us_repqtmk inmsg__split_fields)
                  false
                  false
                  true
                  true)
                (let ((temp___295 (temp___String_Literal_180 Tuple0)))
                  (let ((o (of_array temp___295 1 15)))
                    (let ((temp___293 (rec__tcpip__messaget__data
                                        (us_split_fields1 nullmsg))))
                      (let ((o1 (of_array temp___293 1 4096)))
                        (let ((temp___297 (overwrite o1 1 o)))
                          (=>
                            (and
                              (dynamic_invariant
                                temp___297
                                true
                                false
                                true
                                true)
                              (and
                                (and
                                  (and
                                    (and
                                      (= (first temp___297) 1)
                                      (= (length temp___297) (max
                                                               (length o1)
                                                               (+ (- 1 1) 
                                                               (length
                                                                 o)))))
                                    (= (let ((temp___233 (let ((temp___229 (- 1 1)))
                                                           (let ((temp___228 1))
                                                             (of_array
                                                               temp___293
                                                               temp___228
                                                               temp___229)))))
                                         (let ((temp___231 (let ((temp___227 (- 1 1)))
                                                             (of_array
                                                               (to_array
                                                                 temp___297)
                                                               1
                                                               temp___227))))
                                           (bool_eq
                                             (to_array temp___231)
                                             (first temp___231)
                                             (last temp___231)
                                             (to_array temp___233)
                                             (first temp___233)
                                             (last temp___233)))) true))
                                  (= (let ((temp___237 (let ((temp___235 (+ (- 1 1) 
                                                         (length
                                                           o))))
                                                         (let ((temp___234 (+ (- 1 1) 1)))
                                                           (of_array
                                                             (to_array
                                                               temp___297)
                                                             temp___234
                                                             temp___235)))))
                                       (bool_eq
                                         (to_array temp___237)
                                         (first temp___237)
                                         (last temp___237)
                                         temp___295
                                         1
                                         15)) true))
                                (=>
                                  (<= 1 (- 4096 (length o)))
                                  (= (let ((temp___245 (let ((temp___241 4096))
                                                         (let ((temp___240 (+ 1 
                                                           (length
                                                             o))))
                                                           (of_array
                                                             temp___293
                                                             temp___240
                                                             temp___241)))))
                                       (let ((temp___243 (let ((temp___239 
                                                           (last
                                                             temp___297)))
                                                           (let ((temp___238 (+ (+ (- 1 1) 
                                                             (length
                                                               o)) 1)))
                                                             (of_array
                                                               (to_array
                                                                 temp___297)
                                                               temp___238
                                                               temp___239)))))
                                         (bool_eq
                                           (to_array temp___243)
                                           (first temp___243)
                                           (last temp___243)
                                           (to_array temp___245)
                                           (first temp___245)
                                           (last temp___245)))) true))))
                            (=>
                              (ite (<= (first temp___297) (last temp___297))
                                (and
                                  (<= 1 4096)
                                  (= (- (last temp___297) (first temp___297)) (- 4096 1)))
                                (< 4096 1))
                              (=>
                                (= (us_repqtmk
                                     (us_split_fieldsqtmk
                                       (slide
                                         (to_array temp___297)
                                         (first temp___297)
                                         1)
                                       rliteral1)) outmsg)
                                (=>
                                  (dynamic_invariant1
                                    outmsg
                                    true
                                    false
                                    true
                                    true)
                                  (forall ((doorstate Int))
                                    (=>
                                      (= doorstate 0)
                                      (=>
                                        (in_range4 doorstate)
                                        (forall ((inmsg__split_fields1 us_split_fields) (commsisok Bool))
                                          (=>
                                            (dynamic_invariant1
                                              (us_repqtmk
                                                inmsg__split_fields1)
                                              true
                                              true
                                              true
                                              true)
                                            (forall ((spark__branch Bool))
                                              (=>
                                                (= spark__branch commsisok)
                                                (=>
                                                  (= spark__branch true)
                                                  (let ((doorapi__getdoorstateraw__B_1__msg__assume 
                                                    (getresponsefrommsg
                                                      (us_repqtmk
                                                        inmsg__split_fields1))))
                                                    (=>
                                                      (dynamic_invariant
                                                        doorapi__getdoorstateraw__B_1__msg__assume
                                                        true
                                                        false
                                                        true
                                                        true)
                                                      (forall ((msg (Array Int character)))
                                                        (=>
                                                          (= msg (to_array
                                                                   doorapi__getdoorstateraw__B_1__msg__assume))
                                                          (=>
                                                            (= (to_rep1
                                                                 msg__first) 
                                                            (first
                                                              doorapi__getdoorstateraw__B_1__msg__assume))
                                                            (=>
                                                              (= (to_rep1
                                                                   msg__last) 
                                                              (last
                                                                doorapi__getdoorstateraw__B_1__msg__assume))
                                                              (=>
                                                                (dynamic_invariant
                                                                  (of_array
                                                                    msg
                                                                    (to_rep1
                                                                    msg__first)
                                                                    (to_rep1
                                                                    msg__last))
                                                                  true
                                                                  false
                                                                  true
                                                                  true)
                                                                (forall 
                                                                  ((o2 Int))
                                                                  (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    msg__last) o2)
                                                                    (forall 
                                                                    ((o3 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    msg__first) o3)
                                                                    (let ((doorapi__getdoorstateraw__B_1__statedict__assume 
                                                                    (getdictionary
                                                                    (of_array
                                                                    msg
                                                                    o3
                                                                    o2)
                                                                    1)))
                                                                    (=>
                                                                    (dynamic_invariant2
                                                                    doorapi__getdoorstateraw__B_1__statedict__assume
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (forall 
                                                                    ((statedict (Array Int character)))
                                                                    (=>
                                                                    (= statedict 
                                                                    (to_array
                                                                    doorapi__getdoorstateraw__B_1__statedict__assume))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    statedict__first) 
                                                                    (first
                                                                    doorapi__getdoorstateraw__B_1__statedict__assume))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    statedict__last) 
                                                                    (last
                                                                    doorapi__getdoorstateraw__B_1__statedict__assume))
                                                                    (=>
                                                                    (dynamic_invariant2
                                                                    (of_array
                                                                    statedict
                                                                    (to_rep1
                                                                    statedict__first)
                                                                    (to_rep1
                                                                    statedict__last))
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (forall 
                                                                    ((o4 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    statedict__last) o4)
                                                                    (forall 
                                                                    ((o5 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    statedict__first) o5)
                                                                    (let ((o6 
                                                                    (getstringbykey
                                                                    (of_array
                                                                    statedict
                                                                    o5
                                                                    o4)
                                                                    (of_array
                                                                    (temp___String_Literal_302
                                                                    Tuple0)
                                                                    1
                                                                    12))))
                                                                    (=>
                                                                    (dynamic_invariant
                                                                    o6
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (forall 
                                                                    ((isop Bool))
                                                                    (=>
                                                                    (= isop 
                                                                    (attr__ATTRIBUTE_VALUE
                                                                    (from_string
                                                                    o6)))
                                                                    (forall 
                                                                    ((o7 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    statedict__last) o7)
                                                                    (forall 
                                                                    ((o8 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep1
                                                                    statedict__first) o8)
                                                                    (let ((o9 
                                                                    (getstringbykey
                                                                    (of_array
                                                                    statedict
                                                                    o8
                                                                    o7)
                                                                    (of_array
                                                                    (temp___String_Literal_306
                                                                    Tuple0)
                                                                    1
                                                                    7))))
                                                                    (=>
                                                                    (dynamic_invariant
                                                                    o9
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (attr__ATTRIBUTE_VALUE__pre_check
                                                                    (from_string
                                                                    o9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
