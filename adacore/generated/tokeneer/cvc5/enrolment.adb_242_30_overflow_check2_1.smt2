;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const dummy us_rep)

(declare-sort character 0)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort issueridt 0)

;; "issueridt'int"
(declare-fun issueridtqtint (issueridt) Int)

;; "issueridt'axiom"
(assert
  (forall ((i issueridt))
    (and (<= 0 (issueridtqtint i)) (<= (issueridtqtint i) 4294967295))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep1 ((x issueridt)) Int
  (issueridtqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) issueridt)

;; "inversion_axiom"
(assert
  (forall ((x issueridt))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x issueridt))
    (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort namecountt 0)

;; "namecountt'int"
(declare-fun namecounttqtint (namecountt) Int)

;; "namecountt'axiom"
(assert
  (forall ((i namecountt))
    (and (<= 0 (namecounttqtint i)) (<= (namecounttqtint i) 40))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 40)))

;; "to_rep"
(define-fun to_rep2 ((x namecountt)) Int
  (namecounttqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) namecountt)

;; "inversion_axiom"
(assert
  (forall ((x namecountt))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x namecountt))
    (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))

(declare-datatypes ((us_rep1 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; "cryptotypes__issuert__id__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__id__first__bit))

;; "cryptotypes__issuert__id__last__bit_axiom"
(assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; "cryptotypes__issuert__id__position_axiom"
(assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; "cryptotypes__issuert__namelength__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; "cryptotypes__issuert__namelength__last__bit_axiom"
(assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; "cryptotypes__issuert__namelength__position_axiom"
(assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; "cryptotypes__issuert__name__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__name__first__bit))

;; "cryptotypes__issuert__name__last__bit_axiom"
(assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; "cryptotypes__issuert__name__position_axiom"
(assert (<= 0 cryptotypes__issuert__name__position))

(declare-const dummy1 us_rep1)

(declare-datatypes ((us_split_fields2 0))
  (((us_split_fieldsqtmk1
    (rec__keystore__optionalprivatekeyt__ispresent Bool)(rec__keystore__optionalprivatekeyt__owner us_rep1)))))

(declare-datatypes ((us_split_fields__ref 0))
  (((us_split_fields__refqtmk (us_split_fields__content us_split_fields2)))))

(declare-datatypes ((us_rep2 0))
  (((us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const keystore__optionalprivatekeyt__ispresent__first__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__last__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__position Int)

;; "keystore__optionalprivatekeyt__ispresent__first__bit_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__ispresent__first__bit))

;; "keystore__optionalprivatekeyt__ispresent__last__bit_axiom"
(assert
  (< keystore__optionalprivatekeyt__ispresent__first__bit keystore__optionalprivatekeyt__ispresent__last__bit))

;; "keystore__optionalprivatekeyt__ispresent__position_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__ispresent__position))

(declare-const keystore__optionalprivatekeyt__owner__first__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__last__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__position Int)

;; "keystore__optionalprivatekeyt__owner__first__bit_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__owner__first__bit))

;; "keystore__optionalprivatekeyt__owner__last__bit_axiom"
(assert
  (< keystore__optionalprivatekeyt__owner__first__bit keystore__optionalprivatekeyt__owner__last__bit))

;; "keystore__optionalprivatekeyt__owner__position_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__owner__position))

(declare-const dummy2 us_rep2)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_271 us_rep2) (temp___is_init_267 Bool) (temp___skip_constant_268 Bool) (temp___do_toplevel_269 Bool) (temp___do_typ_inv_270 Bool)) Bool
  true)

;; "privatekeypresent"
(declare-fun privatekeypresent (us_split_fields2) Bool)

;; "to_rep"
(define-fun to_rep3 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                 (of_rep3 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep3 (rec__first (mk f l))) f)
             (= (to_rep3 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; "of_array"
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size1 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "makedescription"
(declare-fun makedescription (us_t
  Int) (Array Int character))

;; "endoffile"
(declare-fun endoffile (us_rep) Bool)

;; "endofline"
(declare-fun endofline (us_rep) Bool)

;; "temp___String_Literal_512"
(declare-fun temp___String_Literal_512 (tuple0) (Array Int character))

;; "temp___String_Literal_512__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_512 us_void_param) 1)) 84)
           (= (to_rep (select (temp___String_Literal_512 us_void_param) 2)) 104))
         (and
           (and
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 3)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 4)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 5)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 6)) 110)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 7)) 114)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 8)) 111))
                 (= (to_rep
                      (select (temp___String_Literal_512 us_void_param) 9)) 108)))
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 10)) 109)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 11)) 101))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 12)) 110)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 13)) 116)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 14)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 15)) 102))
                 (= (to_rep
                      (select (temp___String_Literal_512 us_void_param) 16)) 105))))
           (and
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 17)) 108)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 18)) 101))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 19)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 20)) 105)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 21)) 115)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 22)) 32))
                 (= (to_rep
                      (select (temp___String_Literal_512 us_void_param) 23)) 99)))
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 24)) 111)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 25)) 114))
                 (= (to_rep
                      (select (temp___String_Literal_512 us_void_param) 26)) 114))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 27)) 117)
                   (= (to_rep
                        (select (temp___String_Literal_512 us_void_param) 28)) 112))
                 (= (to_rep
                      (select (temp___String_Literal_512 us_void_param) 29)) 116)))))) :pattern (
    (temp___String_Literal_512
      us_void_param)) )))

;; "privatekeypresent__post_axiom"
(assert true)

;; "privatekeypresent__def_axiom"
(assert
  (forall ((Keystore__thistisinfo___thistisinfo__split_fields___ us_split_fields2))
    (! (=
         (= (privatekeypresent
              Keystore__thistisinfo___thistisinfo__split_fields___) true)
         (= (rec__keystore__optionalprivatekeyt__ispresent
              Keystore__thistisinfo___thistisinfo__split_fields___) true)) :pattern (
    (privatekeypresent
      Keystore__thistisinfo___thistisinfo__split_fields___)) )))

;; "endoffile__post_axiom"
(assert true)

;; Goal "def'vc"
;; File "enrolment.ads", line 54, characters 0-0
(assert
  (not
  (forall ((thistisinfo__split_fields us_split_fields2))
    (=>
      (dynamic_invariant
        (us_repqtmk1 thistisinfo__split_fields)
        true
        false
        true
        true)
      (=>
        (not (= (privatekeypresent thistisinfo__split_fields) true))
        (forall ((certno Int))
          (=>
            (= certno 1)
            (=>
              (in_range1 certno)
              (forall ((thefile us_rep) (dataok Bool))
                (forall ((spark__branch Bool) (thefile1 us_rep) (dataok1 Bool) (description (Array Int character)) (thistisinfo__split_fields1 us_split_fields2))
                  (=>
                    (and
                      (= spark__branch dataok)
                      (ite (= spark__branch true)
                        (let ((o (distinct 0 0)))
                          (and
                            (and
                              (=>
                                (and (= o true) (= dataok1 true))
                                (= (privatekeypresent
                                     thistisinfo__split_fields1) true))
                              (=>
                                (not (and (= o true) (= dataok1 true)))
                                (=
                                  (= (privatekeypresent
                                       thistisinfo__split_fields1) true)
                                  (= (privatekeypresent
                                       thistisinfo__split_fields) true))))
                            (dynamic_invariant
                              (us_repqtmk1 thistisinfo__split_fields1)
                              true
                              true
                              true
                              true)))
                        (and
                          (and
                            (and
                              (and
                                (<= 0 29)
                                (and
                                  (<= 29 1000)
                                  (and
                                    (dynamic_property 1 2147483647 1 29)
                                    (= description (makedescription
                                                     (of_array
                                                       (temp___String_Literal_512
                                                         Tuple0)
                                                       1
                                                       29)
                                                     certno)))))
                              (= thefile1 thefile))
                            (= dataok1 dataok))
                          (= thistisinfo__split_fields1 thistisinfo__split_fields))))
                    (forall ((spark__branch1 Bool) (thefile2 us_rep) (dataok2 Bool) (description1 (Array Int character)) (thistisinfo__split_fields2 us_split_fields2) (certno1 Int))
                      (=>
                        (and
                          (= spark__branch1 dataok1)
                          (ite (= spark__branch1 true)
                            (let ((o (+ certno 1)))
                              (and
                                (in_range o)
                                (and
                                  (= certno1 o)
                                  (let ((o1 (distinct 1 0)))
                                    (and
                                      (and
                                        (=>
                                          (and (= o1 true) (= dataok2 true))
                                          (= (privatekeypresent
                                               thistisinfo__split_fields2) true))
                                        (=>
                                          (not
                                            (and
                                              (= o1 true)
                                              (= dataok2 true)))
                                          (=
                                            (= (privatekeypresent
                                                 thistisinfo__split_fields2) true)
                                            (= (privatekeypresent
                                                 thistisinfo__split_fields1) true))))
                                      (dynamic_invariant
                                        (us_repqtmk1
                                          thistisinfo__split_fields2)
                                        true
                                        true
                                        true
                                        true))))))
                            (and
                              (and
                                (and
                                  (and
                                    (= thefile2 thefile1)
                                    (= dataok2 dataok1))
                                  (= description1 description))
                                (= thistisinfo__split_fields2 thistisinfo__split_fields1))
                              (= certno1 certno))))
                        (=>
                          (= (and (ite (= (endoffile thefile2) true)
                                    false
                                    true) dataok2) true)
                          (=>
                            (=
                              (= (privatekeypresent
                                   thistisinfo__split_fields2) true)
                              (= (rec__keystore__optionalprivatekeyt__ispresent
                                   thistisinfo__split_fields2) true))
                            (forall ((thefile3 us_rep) (dataok3 Bool) (thistisinfo__split_fields3 us_split_fields2) (certno2 Int))
                              (=>
                                (and
                                  (= (privatekeypresent
                                       thistisinfo__split_fields3) true)
                                  (<= 2 certno2))
                                (=>
                                  (= (and (ite (and
                                                 (dynamic_invariant
                                                   (us_repqtmk1
                                                     thistisinfo__split_fields3)
                                                   true
                                                   true
                                                   true
                                                   true)
                                                 (in_range1 certno2))
                                            true
                                            false) (ite (and
                                                          (not
                                                            (= (endoffile
                                                                 thefile3) true))
                                                          (= dataok3 true))
                                                     true
                                                     false)) true)
                                  (forall ((spark__branch2 Bool))
                                    (=>
                                      (= spark__branch2 (ite (= (endofline
                                                                  thefile3) true)
                                                          false
                                                          true))
                                      (=>
                                        (= spark__branch2 true)
                                        (<= (+ certno2 1) 2147483647))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
