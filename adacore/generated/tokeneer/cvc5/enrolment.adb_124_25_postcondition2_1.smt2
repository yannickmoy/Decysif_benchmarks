;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0))
  (((Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort character 0)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

;; "slide"
(declare-fun slide ((Array Int character)
  Int
  Int) (Array Int character))

;; "slide_eq"
(assert
  (forall ((a (Array Int character)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array Int character)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep1 (rec__first (mk f l))) f)
             (= (to_rep1 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; "of_array"
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-sort us_rep 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy us_rep)

(declare-sort issueridt 0)

;; "issueridt'int"
(declare-fun issueridtqtint (issueridt) Int)

;; "issueridt'axiom"
(assert
  (forall ((i issueridt))
    (and (<= 0 (issueridtqtint i)) (<= (issueridtqtint i) 4294967295))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep2 ((x issueridt)) Int
  (issueridtqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) issueridt)

;; "inversion_axiom"
(assert
  (forall ((x issueridt))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x issueridt))
    (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-sort namecountt 0)

;; "namecountt'int"
(declare-fun namecounttqtint (namecountt) Int)

;; "namecountt'axiom"
(assert
  (forall ((i namecountt))
    (and (<= 0 (namecounttqtint i)) (<= (namecounttqtint i) 40))))

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 40)))

;; "to_rep"
(define-fun to_rep3 ((x namecountt)) Int
  (namecounttqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) namecountt)

;; "inversion_axiom"
(assert
  (forall ((x namecountt))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x namecountt))
    (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))

(declare-datatypes ((us_rep1 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; "cryptotypes__issuert__id__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__id__first__bit))

;; "cryptotypes__issuert__id__last__bit_axiom"
(assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; "cryptotypes__issuert__id__position_axiom"
(assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; "cryptotypes__issuert__namelength__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; "cryptotypes__issuert__namelength__last__bit_axiom"
(assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; "cryptotypes__issuert__namelength__position_axiom"
(assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; "cryptotypes__issuert__name__first__bit_axiom"
(assert (<= 0 cryptotypes__issuert__name__first__bit))

;; "cryptotypes__issuert__name__last__bit_axiom"
(assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; "cryptotypes__issuert__name__position_axiom"
(assert (<= 0 cryptotypes__issuert__name__position))

(declare-const dummy1 us_rep1)

(declare-datatypes ((us_split_fields2 0))
  (((us_split_fieldsqtmk1
    (rec__keystore__optionalprivatekeyt__ispresent Bool)(rec__keystore__optionalprivatekeyt__owner us_rep1)))))

(declare-datatypes ((us_rep2 0))
  (((us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const keystore__optionalprivatekeyt__ispresent__first__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__last__bit Int)

(declare-const keystore__optionalprivatekeyt__ispresent__position Int)

;; "keystore__optionalprivatekeyt__ispresent__first__bit_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__ispresent__first__bit))

;; "keystore__optionalprivatekeyt__ispresent__last__bit_axiom"
(assert
  (< keystore__optionalprivatekeyt__ispresent__first__bit keystore__optionalprivatekeyt__ispresent__last__bit))

;; "keystore__optionalprivatekeyt__ispresent__position_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__ispresent__position))

(declare-const keystore__optionalprivatekeyt__owner__first__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__last__bit Int)

(declare-const keystore__optionalprivatekeyt__owner__position Int)

;; "keystore__optionalprivatekeyt__owner__first__bit_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__owner__first__bit))

;; "keystore__optionalprivatekeyt__owner__last__bit_axiom"
(assert
  (< keystore__optionalprivatekeyt__owner__first__bit keystore__optionalprivatekeyt__owner__last__bit))

;; "keystore__optionalprivatekeyt__owner__position_axiom"
(assert (<= 0 keystore__optionalprivatekeyt__owner__position))

(declare-const dummy2 us_rep2)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_271 us_rep2) (temp___is_init_267 Bool) (temp___skip_constant_268 Bool) (temp___do_toplevel_269 Bool) (temp___do_typ_inv_270 Bool)) Bool
  true)

;; "privatekeypresent"
(declare-fun privatekeypresent (us_split_fields2) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "makedescription"
(declare-fun makedescription (us_t
  Int) (Array Int character))

(declare-const nodescription (Array Int character))

(declare-const istis Bool)

(declare-const nullrawcertificate (Array Int character))

(declare-sort algorithmt 0)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 0 x) (<= x 10)))

;; "to_rep"
(declare-fun to_rep4 (algorithmt) Int)

;; "of_rep"
(declare-fun of_rep4 (Int) algorithmt)

;; "inversion_axiom"
(assert
  (forall ((x algorithmt))
    (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert
  (forall ((x algorithmt))
    (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-sort keyidt 0)

;; "keyidt'int"
(declare-fun keyidtqtint (keyidt) Int)

;; "keyidt'axiom"
(assert
  (forall ((i keyidt))
    (and (<= 0 (keyidtqtint i)) (<= (keyidtqtint i) 4294967295))))

;; "in_range"
(define-fun in_range7 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep5 ((x keyidt)) Int
  (keyidtqtint x))

;; "of_rep"
(declare-fun of_rep5 (Int) keyidt)

;; "inversion_axiom"
(assert
  (forall ((x keyidt))
    (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; "range_axiom"
(assert
  (forall ((x keyidt)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

(declare-sort keylengtht 0)

;; "keylengtht'int"
(declare-fun keylengthtqtint (keylengtht) Int)

;; "keylengtht'axiom"
(assert
  (forall ((i keylengtht))
    (and (<= 0 (keylengthtqtint i)) (<= (keylengthtqtint i) 128))))

;; "in_range"
(define-fun in_range8 ((x Int)) Bool
  (and (<= 0 x) (<= x 128)))

;; "to_rep"
(define-fun to_rep6 ((x keylengtht)) Int
  (keylengthtqtint x))

;; "of_rep"
(declare-fun of_rep6 (Int) keylengtht)

;; "inversion_axiom"
(assert
  (forall ((x keylengtht))
    (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; "range_axiom"
(assert
  (forall ((x keylengtht))
    (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                                  (of_rep6 x))) )))

(declare-datatypes ((us_split_fields4 0))
  (((us_split_fieldsqtmk2
    (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))

(declare-datatypes ((us_rep3 0))
  (((us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; "cryptotypes__keypartt__algorithmid__first__bit_axiom"
(assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; "cryptotypes__keypartt__algorithmid__last__bit_axiom"
(assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; "cryptotypes__keypartt__algorithmid__position_axiom"
(assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; "cryptotypes__keypartt__keyid__first__bit_axiom"
(assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; "cryptotypes__keypartt__keyid__last__bit_axiom"
(assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; "cryptotypes__keypartt__keyid__position_axiom"
(assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; "cryptotypes__keypartt__keylength__first__bit_axiom"
(assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; "cryptotypes__keypartt__keylength__last__bit_axiom"
(assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; "cryptotypes__keypartt__keylength__position_axiom"
(assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-const dummy3 us_rep3)

(declare-sort serialnumbert 0)

;; "serialnumbert'int"
(declare-fun serialnumbertqtint (serialnumbert) Int)

;; "serialnumbert'axiom"
(assert
  (forall ((i serialnumbert))
    (and
      (<= 0 (serialnumbertqtint i))
      (<= (serialnumbertqtint i) 4294967295))))

;; "in_range"
(define-fun in_range9 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep7 ((x serialnumbert)) Int
  (serialnumbertqtint x))

;; "of_rep"
(declare-fun of_rep7 (Int) serialnumbert)

;; "inversion_axiom"
(assert
  (forall ((x serialnumbert))
    (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; "range_axiom"
(assert
  (forall ((x serialnumbert))
    (! (in_range9 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range9 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                                  (of_rep7 x))) )))

(declare-datatypes ((us_split_fields6 0))
  (((us_split_fieldsqtmk3
    (rec__certtypes__idt__issuer us_rep1)(rec__certtypes__idt__serialnumber serialnumbert)))))

(declare-datatypes ((us_rep4 0))
  (((us_repqtmk3 (us_split_fields7 us_split_fields6)))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const certtypes__idt__issuer__first__bit Int)

(declare-const certtypes__idt__issuer__last__bit Int)

(declare-const certtypes__idt__issuer__position Int)

;; "certtypes__idt__issuer__first__bit_axiom"
(assert (<= 0 certtypes__idt__issuer__first__bit))

;; "certtypes__idt__issuer__last__bit_axiom"
(assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; "certtypes__idt__issuer__position_axiom"
(assert (<= 0 certtypes__idt__issuer__position))

(declare-const certtypes__idt__serialnumber__first__bit Int)

(declare-const certtypes__idt__serialnumber__last__bit Int)

(declare-const certtypes__idt__serialnumber__position Int)

;; "certtypes__idt__serialnumber__first__bit_axiom"
(assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; "certtypes__idt__serialnumber__last__bit_axiom"
(assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; "certtypes__idt__serialnumber__position_axiom"
(assert (<= 0 certtypes__idt__serialnumber__position))

(declare-const dummy4 us_rep4)

(declare-sort yearst 0)

;; "yearst'int"
(declare-fun yearstqtint (yearst) Int)

;; "yearst'axiom"
(assert
  (forall ((i yearst))
    (and (<= 1901 (yearstqtint i)) (<= (yearstqtint i) 2099))))

;; "in_range"
(define-fun in_range10 ((x Int)) Bool
  (and (<= 1901 x) (<= x 2099)))

;; "to_rep"
(define-fun to_rep8 ((x yearst)) Int
  (yearstqtint x))

;; "of_rep"
(declare-fun of_rep8 (Int) yearst)

;; "inversion_axiom"
(assert
  (forall ((x yearst))
    (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; "range_axiom"
(assert
  (forall ((x yearst)) (! (in_range10 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range10 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                                   (of_rep8
                                                                    x))) )))

(declare-sort monthst 0)

;; "monthst'int"
(declare-fun monthstqtint (monthst) Int)

;; "monthst'axiom"
(assert
  (forall ((i monthst))
    (and (<= 1 (monthstqtint i)) (<= (monthstqtint i) 12))))

;; "in_range"
(define-fun in_range11 ((x Int)) Bool
  (and (<= 1 x) (<= x 12)))

;; "to_rep"
(define-fun to_rep9 ((x monthst)) Int
  (monthstqtint x))

;; "of_rep"
(declare-fun of_rep9 (Int) monthst)

;; "inversion_axiom"
(assert
  (forall ((x monthst))
    (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; "range_axiom"
(assert
  (forall ((x monthst)) (! (in_range11 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range11 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                                   (of_rep9
                                                                    x))) )))

(declare-sort dayst 0)

;; "dayst'int"
(declare-fun daystqtint (dayst) Int)

;; "dayst'axiom"
(assert
  (forall ((i dayst)) (and (<= 1 (daystqtint i)) (<= (daystqtint i) 31))))

;; "in_range"
(define-fun in_range12 ((x Int)) Bool
  (and (<= 1 x) (<= x 31)))

;; "to_rep"
(define-fun to_rep10 ((x dayst)) Int
  (daystqtint x))

;; "of_rep"
(declare-fun of_rep10 (Int) dayst)

;; "inversion_axiom"
(assert
  (forall ((x dayst))
    (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; "range_axiom"
(assert
  (forall ((x dayst)) (! (in_range12 (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range12 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                    (of_rep10
                                                                    x))) )))

(declare-sort millisecst 0)

;; "millisecst'int"
(declare-fun millisecstqtint (millisecst) Int)

;; "millisecst'axiom"
(assert
  (forall ((i millisecst))
    (and (<= 0 (millisecstqtint i)) (<= (millisecstqtint i) 86399999))))

;; "in_range"
(define-fun in_range13 ((x Int)) Bool
  (and (<= 0 x) (<= x 86399999)))

;; "to_rep"
(define-fun to_rep11 ((x millisecst)) Int
  (millisecstqtint x))

;; "of_rep"
(declare-fun of_rep11 (Int) millisecst)

;; "inversion_axiom"
(assert
  (forall ((x millisecst))
    (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; "range_axiom"
(assert
  (forall ((x millisecst))
    (! (in_range13 (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range13 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                    (of_rep11
                                                                    x))) )))

(declare-datatypes ((us_split_fields8 0))
  (((us_split_fieldsqtmk4
    (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))

(declare-datatypes ((us_rep5 0))
  (((us_repqtmk4 (us_split_fields9 us_split_fields8)))))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; "clock__timet__year__first__bit_axiom"
(assert (<= 0 clock__timet__year__first__bit))

;; "clock__timet__year__last__bit_axiom"
(assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; "clock__timet__year__position_axiom"
(assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; "clock__timet__month__first__bit_axiom"
(assert (<= 0 clock__timet__month__first__bit))

;; "clock__timet__month__last__bit_axiom"
(assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; "clock__timet__month__position_axiom"
(assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; "clock__timet__day__first__bit_axiom"
(assert (<= 0 clock__timet__day__first__bit))

;; "clock__timet__day__last__bit_axiom"
(assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; "clock__timet__day__position_axiom"
(assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; "clock__timet__millisec__first__bit_axiom"
(assert (<= 0 clock__timet__millisec__first__bit))

;; "clock__timet__millisec__last__bit_axiom"
(assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; "clock__timet__millisec__position_axiom"
(assert (<= 0 clock__timet__millisec__position))

(declare-const dummy5 us_rep5)

(declare-datatypes ((us_split_fields10 0))
  (((us_split_fieldsqtmk5
    (rec__ada___cert__id__contentst__id us_rep4)(rec__ada___cert__id__contentst__notbefore us_rep5)(rec__ada___cert__id__contentst__notafter us_rep5)(rec__ada___cert__id__contentst__mechanism algorithmt)(rec__ada___cert__id__contentst__subject us_rep1)(rec__ada___cert__id__contentst__subjectpublickey us_rep3)))))

(declare-datatypes ((us_rep6 0))
  (((us_repqtmk5 (us_split_fields11 us_split_fields10)))))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const ada___cert__id__contentst__id__first__bit Int)

(declare-const ada___cert__id__contentst__id__last__bit Int)

(declare-const ada___cert__id__contentst__id__position Int)

;; "ada___cert__id__contentst__id__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__id__first__bit))

;; "ada___cert__id__contentst__id__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__id__first__bit ada___cert__id__contentst__id__last__bit))

;; "ada___cert__id__contentst__id__position_axiom"
(assert (<= 0 ada___cert__id__contentst__id__position))

(declare-const ada___cert__id__contentst__notbefore__first__bit Int)

(declare-const ada___cert__id__contentst__notbefore__last__bit Int)

(declare-const ada___cert__id__contentst__notbefore__position Int)

;; "ada___cert__id__contentst__notbefore__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__notbefore__first__bit))

;; "ada___cert__id__contentst__notbefore__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__notbefore__first__bit ada___cert__id__contentst__notbefore__last__bit))

;; "ada___cert__id__contentst__notbefore__position_axiom"
(assert (<= 0 ada___cert__id__contentst__notbefore__position))

(declare-const ada___cert__id__contentst__notafter__first__bit Int)

(declare-const ada___cert__id__contentst__notafter__last__bit Int)

(declare-const ada___cert__id__contentst__notafter__position Int)

;; "ada___cert__id__contentst__notafter__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__notafter__first__bit))

;; "ada___cert__id__contentst__notafter__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__notafter__first__bit ada___cert__id__contentst__notafter__last__bit))

;; "ada___cert__id__contentst__notafter__position_axiom"
(assert (<= 0 ada___cert__id__contentst__notafter__position))

(declare-const ada___cert__id__contentst__mechanism__first__bit Int)

(declare-const ada___cert__id__contentst__mechanism__last__bit Int)

(declare-const ada___cert__id__contentst__mechanism__position Int)

;; "ada___cert__id__contentst__mechanism__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__mechanism__first__bit))

;; "ada___cert__id__contentst__mechanism__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__mechanism__first__bit ada___cert__id__contentst__mechanism__last__bit))

;; "ada___cert__id__contentst__mechanism__position_axiom"
(assert (<= 0 ada___cert__id__contentst__mechanism__position))

(declare-const ada___cert__id__contentst__subject__first__bit Int)

(declare-const ada___cert__id__contentst__subject__last__bit Int)

(declare-const ada___cert__id__contentst__subject__position Int)

;; "ada___cert__id__contentst__subject__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__subject__first__bit))

;; "ada___cert__id__contentst__subject__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__subject__first__bit ada___cert__id__contentst__subject__last__bit))

;; "ada___cert__id__contentst__subject__position_axiom"
(assert (<= 0 ada___cert__id__contentst__subject__position))

(declare-const ada___cert__id__contentst__subjectpublickey__first__bit Int)

(declare-const ada___cert__id__contentst__subjectpublickey__last__bit Int)

(declare-const ada___cert__id__contentst__subjectpublickey__position Int)

;; "ada___cert__id__contentst__subjectpublickey__first__bit_axiom"
(assert (<= 0 ada___cert__id__contentst__subjectpublickey__first__bit))

;; "ada___cert__id__contentst__subjectpublickey__last__bit_axiom"
(assert
  (< ada___cert__id__contentst__subjectpublickey__first__bit ada___cert__id__contentst__subjectpublickey__last__bit))

;; "ada___cert__id__contentst__subjectpublickey__position_axiom"
(assert (<= 0 ada___cert__id__contentst__subjectpublickey__position))

(declare-const dummy6 us_rep6)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_426 us_rep6) (temp___is_init_422 Bool) (temp___skip_constant_423 Bool) (temp___do_toplevel_424 Bool) (temp___do_typ_inv_425 Bool)) Bool
  true)

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_258 us_rep1) (temp___is_init_254 Bool) (temp___skip_constant_255 Bool) (temp___do_toplevel_256 Bool) (temp___do_typ_inv_257 Bool)) Bool
  true)

;; "endoffile"
(declare-fun endoffile (us_rep) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant3 ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

;; "thesubject"
(declare-fun thesubject (us_rep6) us_rep1)

(declare-datatypes ((us_split_fields12 0))
  (((us_split_fieldsqtmk6
    (rec__cert__contentst__id us_rep4)(rec__cert__contentst__notbefore us_rep5)(rec__cert__contentst__notafter us_rep5)(rec__cert__contentst__mechanism algorithmt)))))

(declare-datatypes ((us_rep7 0))
  (((us_repqtmk6 (us_split_fields13 us_split_fields12)))))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; "value__size_axiom"
(assert (<= 0 value__size10))

;; "object__size_axiom"
(assert (<= 0 object__size10))

;; "alignment_axiom"
(assert (<= 0 alignment10))

(declare-const cert__contentst__id__first__bit Int)

(declare-const cert__contentst__id__last__bit Int)

(declare-const cert__contentst__id__position Int)

;; "cert__contentst__id__first__bit_axiom"
(assert (<= 0 cert__contentst__id__first__bit))

;; "cert__contentst__id__last__bit_axiom"
(assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))

;; "cert__contentst__id__position_axiom"
(assert (<= 0 cert__contentst__id__position))

(declare-const cert__contentst__notbefore__first__bit Int)

(declare-const cert__contentst__notbefore__last__bit Int)

(declare-const cert__contentst__notbefore__position Int)

;; "cert__contentst__notbefore__first__bit_axiom"
(assert (<= 0 cert__contentst__notbefore__first__bit))

;; "cert__contentst__notbefore__last__bit_axiom"
(assert
  (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))

;; "cert__contentst__notbefore__position_axiom"
(assert (<= 0 cert__contentst__notbefore__position))

(declare-const cert__contentst__notafter__first__bit Int)

(declare-const cert__contentst__notafter__last__bit Int)

(declare-const cert__contentst__notafter__position Int)

;; "cert__contentst__notafter__first__bit_axiom"
(assert (<= 0 cert__contentst__notafter__first__bit))

;; "cert__contentst__notafter__last__bit_axiom"
(assert
  (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))

;; "cert__contentst__notafter__position_axiom"
(assert (<= 0 cert__contentst__notafter__position))

(declare-const cert__contentst__mechanism__first__bit Int)

(declare-const cert__contentst__mechanism__last__bit Int)

(declare-const cert__contentst__mechanism__position Int)

;; "cert__contentst__mechanism__first__bit_axiom"
(assert (<= 0 cert__contentst__mechanism__first__bit))

;; "cert__contentst__mechanism__last__bit_axiom"
(assert
  (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))

;; "cert__contentst__mechanism__position_axiom"
(assert (<= 0 cert__contentst__mechanism__position))

(declare-const dummy7 us_rep7)

;; "theissuer"
(declare-fun theissuer (us_rep7) us_rep1)

;; "dynamic_invariant"
(define-fun dynamic_invariant4 ((temp___expr_471 us_rep7) (temp___is_init_467 Bool) (temp___skip_constant_468 Bool) (temp___do_toplevel_469 Bool) (temp___do_typ_inv_470 Bool)) Bool
  true)

;; "cert_id_to_cert"
(declare-fun cert_id_to_cert (us_rep6) us_rep7)

;; "thepublickey"
(declare-fun thepublickey (us_rep6) us_rep3)

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const component__size3 Int)

(declare-const alignment11 Int)

;; "value__size_axiom"
(assert (<= 0 value__size11))

;; "object__size_axiom"
(assert (<= 0 object__size11))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment11))

;; "temp_____aggregate_def_171"
(declare-fun temp_____aggregate_def_171 (Int) (Array Int character))

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const component__size4 Int)

(declare-const alignment12 Int)

;; "value__size_axiom"
(assert (<= 0 value__size12))

;; "object__size_axiom"
(assert (<= 0 object__size12))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment12))

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const component__size5 Int)

(declare-const alignment13 Int)

;; "value__size_axiom"
(assert (<= 0 value__size13))

;; "object__size_axiom"
(assert (<= 0 object__size13))

;; "component__size_axiom"
(assert (<= 0 component__size5))

;; "alignment_axiom"
(assert (<= 0 alignment13))

;; "temp_____aggregate_def_185"
(declare-fun temp_____aggregate_def_185 (Int) (Array Int character))

;; "temp___String_Literal_598"
(declare-fun temp___String_Literal_598 (tuple0) (Array Int character))

;; "temp___String_Literal_598__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_598 us_void_param) 1)) 67)
           (= (to_rep (select (temp___String_Literal_598 us_void_param) 2)) 101))
         (and
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 3)) 114)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 4)) 116))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 5)) 105))
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 6)) 102)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 7)) 105))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 8)) 99)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 9)) 97)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 10)) 116))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 11)) 101))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 12)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 13)) 99))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 14)) 111)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 15)) 110))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 16)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 17)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 18)) 110)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 19)) 116)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 20)) 115))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 21)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 22)) 99)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 23)) 111)))))
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 24)) 117)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 25)) 108))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 26)) 100))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 27)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 28)) 110)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 29)) 111)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 30)) 116))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 31)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 32)) 98)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 33)) 101))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 34)) 32)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 35)) 101))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 36)) 120))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 37)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 38)) 114)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 39)) 97)
                     (= (to_rep
                          (select (temp___String_Literal_598 us_void_param) 40)) 99))
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 41)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 42)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_598 us_void_param) 43)) 100))))))) :pattern (
    (temp___String_Literal_598
      us_void_param)) )))

;; "temp___String_Literal_604"
(declare-fun temp___String_Literal_604 (tuple0) (Array Int character))

;; "temp___String_Literal_604__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_604 us_void_param) 1)) 75)
           (= (to_rep (select (temp___String_Literal_604 us_void_param) 2)) 101))
         (and
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 3)) 121)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 4)) 32))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 5)) 99))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 6)) 111)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 7)) 117)))
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 8)) 108)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 9)) 100))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 10)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 11)) 110)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 12)) 111))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 13)) 116)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 14)) 32))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 15)) 98))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 16)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 17)) 32)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 18)) 97)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 19)) 100))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 20)) 100)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 21)) 101)))))
           (and
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 22)) 100)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 23)) 32))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 24)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 25)) 111)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 26)) 32)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 27)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 28)) 104))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 29)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 30)) 32))))
             (and
               (and
                 (and
                   (and
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 31)) 75)
                     (= (to_rep
                          (select (temp___String_Literal_604 us_void_param) 32)) 101))
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 33)) 121))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 34)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 35)) 83)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 36)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 37)) 111))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 38)) 114)
                   (= (to_rep
                        (select (temp___String_Literal_604 us_void_param) 39)) 101))))))) :pattern (
    (temp___String_Literal_604
      us_void_param)) )))

;; "temp___String_Literal_610"
(declare-fun temp___String_Literal_610 (tuple0) (Array Int character))

;; "temp___String_Literal_610__def_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (and
         (and
           (= (to_rep (select (temp___String_Literal_610 us_void_param) 1)) 67)
           (= (to_rep (select (temp___String_Literal_610 us_void_param) 2)) 101))
         (and
           (and
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 3)) 114)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 4)) 116))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 5)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 6)) 102)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 7)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 8)) 99))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 9)) 97)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 10)) 116))))
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 11)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 12)) 32))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 13)) 99)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 14)) 111)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 15)) 117)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 16)) 108))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 17)) 100)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 18)) 32)))))
           (and
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 19)) 110)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 20)) 111))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 21)) 116)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 22)) 32)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 23)) 98)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 24)) 101))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 25)) 32)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 26)) 118))))
             (and
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 27)) 101)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 28)) 114))
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 29)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 30)) 102)))
               (and
                 (and
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 31)) 105)
                   (= (to_rep
                        (select (temp___String_Literal_610 us_void_param) 32)) 101))
                 (= (to_rep
                      (select (temp___String_Literal_610 us_void_param) 33)) 100)))))) :pattern (
    (temp___String_Literal_610
      us_void_param)) )))

;; "nodescription__def_axiom"
(assert
  (= nodescription (let ((temp___175qtunused (temp_____aggregate_def_171 32)))
                     (temp_____aggregate_def_171 32))))

;; "def_axiom"
(assert
  (forall ((temp___170 Int))
    (let ((temp___172 (temp_____aggregate_def_171 temp___170)))
      (forall ((temp___173 Int))
        (! (=>
             (and (<= 1 temp___173) (<= temp___173 150))
             (=>
               (in_range3 temp___170)
               (= (to_rep (select temp___172 temp___173)) temp___170))) :pattern ((select temp___172 temp___173)) )))))

;; "nullrawcertificate__def_axiom"
(assert
  (= nullrawcertificate (let ((temp___189qtunused (temp_____aggregate_def_185
                                                    32)))
                          (temp_____aggregate_def_185 32))))

;; "def_axiom"
(assert
  (forall ((temp___184 Int))
    (let ((temp___186 (temp_____aggregate_def_185 temp___184)))
      (forall ((temp___187 Int))
        (! (=>
             (and (<= 1 temp___187) (<= temp___187 4096))
             (=>
               (in_range3 temp___184)
               (= (to_rep (select temp___186 temp___187)) temp___184))) :pattern ((select temp___186 temp___187)) )))))

;; "privatekeypresent__post_axiom"
(assert true)

;; "privatekeypresent__def_axiom"
(assert
  (forall ((Keystore__thistisinfo___thistisinfo__split_fields___ us_split_fields2))
    (! (=
         (= (privatekeypresent
              Keystore__thistisinfo___thistisinfo__split_fields___) true)
         (= (rec__keystore__optionalprivatekeyt__ispresent
              Keystore__thistisinfo___thistisinfo__split_fields___) true)) :pattern (
    (privatekeypresent
      Keystore__thistisinfo___thistisinfo__split_fields___)) )))

;; "endoffile__post_axiom"
(assert true)

;; Goal "def'vc"
;; File "enrolment.adb", line 93, characters 0-0
(assert
  (not
  (forall ((thefile us_rep) (thistisinfo__split_fields us_split_fields2) (certno Int) (thecontents__split_fields us_split_fields10) (thesubject__split_fields us_split_fields) (theissuer__split_fields us_split_fields))
    (forall ((temp___620 (Array Int character)))
      (=>
        (and
          (forall ((temp___174 Int))
            (! (=>
                 (and (<= 1 temp___174) (<= temp___174 150))
                 (=>
                   (in_range3 32)
                   (= (to_rep (select temp___620 temp___174)) 32))) :pattern ((select temp___620 temp___174)) ))
          (= temp___620 (temp_____aggregate_def_171 32)))
        (=>
          (= temp___620 nodescription)
          (forall ((temp___624 (Array Int character)))
            (=>
              (and
                (forall ((temp___188 Int))
                  (! (=>
                       (and (<= 1 temp___188) (<= temp___188 4096))
                       (=>
                         (in_range3 32)
                         (= (to_rep (select temp___624 temp___188)) 32))) :pattern ((select temp___624 temp___188)) ))
                (= temp___624 (temp_____aggregate_def_185 32)))
              (=>
                (= temp___624 nullrawcertificate)
                (=>
                  (in_range2 certno)
                  (=>
                    (dynamic_invariant
                      (us_repqtmk1 thistisinfo__split_fields)
                      true
                      false
                      true
                      true)
                    (=>
                      (=
                        (= (privatekeypresent thistisinfo__split_fields) true)
                        (= (rec__keystore__optionalprivatekeyt__ispresent
                             thistisinfo__split_fields) true))
                      (forall ((thecert (Array Int character)))
                        (=>
                          (= thecert nullrawcertificate)
                          (=>
                            (dynamic_invariant1
                              (us_repqtmk5 thecontents__split_fields)
                              false
                              false
                              true
                              true)
                            (=>
                              (dynamic_invariant2
                                (us_repqtmk thesubject__split_fields)
                                false
                                false
                                true
                                true)
                              (=>
                                (dynamic_invariant2
                                  (us_repqtmk theissuer__split_fields)
                                  false
                                  false
                                  true
                                  true)
                                (forall ((addedok Bool))
                                  (=>
                                    (= addedok (distinct 1 0))
                                    (forall ((verifiedok Bool))
                                      (=>
                                        (= verifiedok (distinct 0 0))
                                        (forall ((stop Int))
                                          (=>
                                            (= stop 0)
                                            (=>
                                              (in_range1 stop)
                                              (forall ((thecert1 (Array Int character)))
                                                (=>
                                                  (ite (= (and (ite (= stop 0)
                                                                 true
                                                                 false) 
                                                    (ite (= (endoffile
                                                              thefile) true)
                                                      false
                                                      true)) true)
                                                    (exists ((thefile1 us_rep) (stop1 Int))
                                                      (and
                                                        (= (and (ite 
                                                                  (in_range1
                                                                    stop1)
                                                                  true
                                                                  false) 
                                                        (ite (and
                                                               (= stop1 0)
                                                               (not
                                                                 (= (endoffile
                                                                    thefile1) true)))
                                                          true
                                                          false)) true)
                                                        (exists ((o integer))
                                                          (and
                                                            (= (to_rep1 o) 4096)
                                                            (exists ((o1 integer))
                                                              (and
                                                                (= (to_rep1
                                                                    o1) 1)
                                                                (exists 
                                                                  ((thefile2 us_rep) (stop2 Int) (param__item (Array Int character)))
                                                                  (and
                                                                    (and
                                                                    (dynamic_invariant3
                                                                    (of_array
                                                                    param__item
                                                                    (to_rep1
                                                                    o1)
                                                                    (to_rep1
                                                                    o))
                                                                    true
                                                                    true
                                                                    true
                                                                    true)
                                                                    (in_range1
                                                                    stop2))
                                                                    (and
                                                                    (= thecert1 
                                                                    (slide
                                                                    param__item
                                                                    1
                                                                    1))
                                                                    (not
                                                                    (= (and 
                                                                    (ite (= stop2 0)
                                                                    true
                                                                    false) 
                                                                    (ite (= 
                                                                    (endoffile
                                                                    thefile2) true)
                                                                    false
                                                                    true)) true)))))))))))
                                                    (= thecert1 thecert))
                                                  (forall ((thecontents__split_fields1 us_split_fields10) (extracted Bool))
                                                    (=>
                                                      (dynamic_invariant1
                                                        (us_repqtmk5
                                                          thecontents__split_fields1)
                                                        true
                                                        true
                                                        true
                                                        true)
                                                      (let ((temp___588 
                                                        (thesubject
                                                          (us_repqtmk5
                                                            thecontents__split_fields1))))
                                                        (=>
                                                          (dynamic_invariant2
                                                            temp___588
                                                            true
                                                            false
                                                            true
                                                            true)
                                                          (forall ((thesubject__split_fields1 us_split_fields))
                                                            (=>
                                                              (= thesubject__split_fields1 
                                                              (us_split_fields1
                                                                temp___588))
                                                              (let ((o 
                                                                (cert_id_to_cert
                                                                  (us_repqtmk5
                                                                    thecontents__split_fields1))))
                                                                (=>
                                                                  (dynamic_invariant4
                                                                    o
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                  (let ((temp___590 
                                                                    (theissuer
                                                                    o)))
                                                                    (=>
                                                                    (dynamic_invariant2
                                                                    temp___590
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (forall 
                                                                    ((theissuer__split_fields1 us_split_fields))
                                                                    (=>
                                                                    (= theissuer__split_fields1 
                                                                    (us_split_fields1
                                                                    temp___590))
                                                                    (forall 
                                                                    ((thepublickey__split_fields us_split_fields4))
                                                                    (=>
                                                                    (= thepublickey__split_fields 
                                                                    (us_split_fields5
                                                                    (thepublickey
                                                                    (us_repqtmk5
                                                                    thecontents__split_fields1))))
                                                                    (forall 
                                                                    ((spark__branch Bool) (thistisinfo__split_fields1 us_split_fields2) (addedok1 Bool))
                                                                    (=>
                                                                    (exists 
                                                                    ((spark__branch1 Bool))
                                                                    (and
                                                                    (= spark__branch1 extracted)
                                                                    (ite (= spark__branch1 true)
                                                                    (exists 
                                                                    ((o1 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep2
                                                                    (rec__cryptotypes__issuert__id
                                                                    theissuer__split_fields1)) o1)
                                                                    (exists 
                                                                    ((o2 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep2
                                                                    (rec__cryptotypes__issuert__id
                                                                    thesubject__split_fields1)) o2)
                                                                    (and
                                                                    (= spark__branch 
                                                                    (ite (= o2 o1)
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch true)
                                                                    (let ((o3 (distinct 1 0)))
                                                                    (and
                                                                    (= (and (or (and (and addedok1 (not o3)) 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields1)) (and (not (and addedok1 (not o3))) (= (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields1) 1 0) (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields) 1 0)))) (not (and (and (and addedok1 (not o3)) 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields1)) (and (not (and addedok1 (not o3))) (= (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields1) 1 0) (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields) 1 0)))))) true)
                                                                    (dynamic_invariant
                                                                    (us_repqtmk1
                                                                    thistisinfo__split_fields1)
                                                                    true
                                                                    true
                                                                    true
                                                                    true)))
                                                                    (and
                                                                    (= thistisinfo__split_fields1 thistisinfo__split_fields)
                                                                    (= addedok1 addedok))))))))
                                                                    (and
                                                                    (and
                                                                    (= spark__branch spark__branch1)
                                                                    (= thistisinfo__split_fields1 thistisinfo__split_fields))
                                                                    (= addedok1 addedok)))))
                                                                    (forall 
                                                                    ((spark__branch1 Bool) (verifiedok1 Bool))
                                                                    (=>
                                                                    (and
                                                                    (= spark__branch1 (and extracted addedok1))
                                                                    (ite (= spark__branch1 true)
                                                                    (dynamic_invariant4
                                                                    (cert_id_to_cert
                                                                    (us_repqtmk5
                                                                    thecontents__split_fields1))
                                                                    true
                                                                    false
                                                                    true
                                                                    true)
                                                                    (= verifiedok1 verifiedok)))
                                                                    (forall 
                                                                    ((spark__branch2 Bool) (thistisinfo__split_fields2 us_split_fields2) (addedok2 Bool))
                                                                    (=>
                                                                    (exists 
                                                                    ((o1 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep2
                                                                    (rec__cryptotypes__issuert__id
                                                                    theissuer__split_fields1)) o1)
                                                                    (exists 
                                                                    ((o2 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep2
                                                                    (rec__cryptotypes__issuert__id
                                                                    thesubject__split_fields1)) o2)
                                                                    (and
                                                                    (= spark__branch2 (and verifiedok1 
                                                                    (ite (= o2 o1)
                                                                    false
                                                                    true)))
                                                                    (ite (= spark__branch2 true)
                                                                    (let ((o3 (distinct 1 0)))
                                                                    (and
                                                                    (= (and (or (and (and addedok2 (not o3)) 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields2)) (and (not (and addedok2 (not o3))) (= (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields2) 1 0) (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields1) 1 0)))) (not (and (and (and addedok2 (not o3)) 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields2)) (and (not (and addedok2 (not o3))) (= (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields2) 1 0) (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields1) 1 0)))))) true)
                                                                    (dynamic_invariant
                                                                    (us_repqtmk1
                                                                    thistisinfo__split_fields2)
                                                                    true
                                                                    true
                                                                    true
                                                                    true)))
                                                                    (and
                                                                    (= thistisinfo__split_fields2 thistisinfo__split_fields1)
                                                                    (= addedok2 addedok1))))))))
                                                                    (forall 
                                                                    ((spark__branch3 Bool) (thistisinfo__split_fields3 us_split_fields2) (addedok3 Bool))
                                                                    (=>
                                                                    (and
                                                                    (= spark__branch3 (and (and verifiedok1 addedok2) 
                                                                    istis))
                                                                    (ite (= spark__branch3 true)
                                                                    (let ((o1 (distinct 0 0)))
                                                                    (and
                                                                    (= (and (or (and (and addedok3 (not o1)) 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields3)) (and (not (and addedok3 (not o1))) (= (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields3) 1 0) (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields2) 1 0)))) (not (and (and (and addedok3 (not o1)) 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields3)) (and (not (and addedok3 (not o1))) (= (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields3) 1 0) (ite 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields2) 1 0)))))) true)
                                                                    (dynamic_invariant
                                                                    (us_repqtmk1
                                                                    thistisinfo__split_fields3)
                                                                    true
                                                                    true
                                                                    true
                                                                    true)))
                                                                    (and
                                                                    (= thistisinfo__split_fields3 thistisinfo__split_fields2)
                                                                    (= addedok3 addedok2))))
                                                                    (=>
                                                                    (exists 
                                                                    ((spark__branch4 Bool))
                                                                    (and
                                                                    (= spark__branch4 
                                                                    (ite (= extracted true)
                                                                    false
                                                                    true))
                                                                    (ite (= spark__branch4 true)
                                                                    (and
                                                                    (<= 0 43)
                                                                    (and
                                                                    (<= 43 1000)
                                                                    (dynamic_property
                                                                    1
                                                                    2147483647
                                                                    1
                                                                    43)))
                                                                    (exists 
                                                                    ((spark__branch5 Bool))
                                                                    (and
                                                                    (= spark__branch5 
                                                                    (ite (= addedok3 true)
                                                                    false
                                                                    true))
                                                                    (ite (= spark__branch5 true)
                                                                    (and
                                                                    (<= 0 39)
                                                                    (and
                                                                    (<= 39 1000)
                                                                    (dynamic_property
                                                                    1
                                                                    2147483647
                                                                    1
                                                                    39)))
                                                                    (exists 
                                                                    ((spark__branch6 Bool))
                                                                    (and
                                                                    (= spark__branch6 
                                                                    (ite (= verifiedok1 true)
                                                                    false
                                                                    true))
                                                                    (=>
                                                                    (= spark__branch6 true)
                                                                    (and
                                                                    (<= 0 33)
                                                                    (and
                                                                    (<= 33 1000)
                                                                    (dynamic_property
                                                                    1
                                                                    2147483647
                                                                    1
                                                                    33))))))))))))
                                                                    (forall 
                                                                    ((keyadded Bool))
                                                                    (=>
                                                                    (= keyadded (and verifiedok1 addedok3))
                                                                    (=>
                                                                    (not
                                                                    (and
                                                                    (= 
                                                                    istis true)
                                                                    (= keyadded true)))
                                                                    (=>
                                                                    (= 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields3) true)
                                                                    (= 
                                                                    (privatekeypresent
                                                                    thistisinfo__split_fields) true))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
