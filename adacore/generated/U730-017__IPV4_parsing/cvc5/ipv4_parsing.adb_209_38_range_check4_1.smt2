;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ((int__ref 0))
  (((int__refqtmk (int__content Int)))))

;; "pow2"
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one (pow2 (- 8 1))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; "lsr"
(declare-fun lsr ((_ BitVec 32)
  Int) (_ BitVec 32))

(declare-const two_power_size_minus_one1 Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one1 (pow2 (- 32 1))))

;; "lsr_bv_is_lsr"
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-sort positive 0)

;; "positive'int"
(declare-fun positiveqtint (positive) Int)

;; "positive'axiom"
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-datatypes ((positive__init_wrapper 0))
  (((positive__init_wrapperqtmk (rec__value positive)(us_attr__init Bool)))))

(declare-const dummy positive__init_wrapper)

;; "dummy__def"
(assert (= (us_attr__init dummy) false))

;; "to_rep"
(define-fun to_rep ((x positive)) Int
  (positiveqtint x))

;; "of_rep"
(declare-fun of_rep (Int) positive)

;; "inversion_axiom"
(assert
  (forall ((x positive))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x positive)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort character 0)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

(declare-datatypes ((character__init_wrapper 0))
  (((character__init_wrapperqtmk
    (rec__value1 character)(us_attr__init1 Bool)))))

(declare-const dummy1 character__init_wrapper)

;; "dummy__def"
(assert (= (us_attr__init1 dummy1) false))

;; "to_rep"
(declare-fun to_rep1 (character) Int)

;; "of_rep"
(declare-fun of_rep1 (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x character))
    (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

;; "slide"
(declare-fun slide ((Array Int character__init_wrapper)
  Int
  Int) (Array Int character__init_wrapper))

;; "slide_eq"
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((first Int))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((old_first Int))
      (forall ((new_first Int))
        (forall ((i Int))
          (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

;; "convert"
(declare-fun convert ((Array Int character__init_wrapper)) (Array Int character))

;; "convert__def"
(assert
  (forall ((a (Array Int character__init_wrapper)))
    (forall ((temp___106 Int))
      (= (to_rep1 (of_rep1 (to_rep1 (rec__value1 (select a temp___106))))) 
      (to_rep1
        (select (convert a) temp___106))))))

;; "to_rep"
(define-fun to_rep2 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                 (of_rep2 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep2 (rec__first (mk f l))) f)
             (= (to_rep2 (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep2 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep2 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-datatypes ((t1 0))
  (((tqtmk1 (rec__first1 integer)(rec__last1 integer)))))

;; "mk"
(declare-fun mk1 (Int
  Int) t1)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep2 (rec__first1 (mk1 f l))) f)
             (= (to_rep2 (rec__last1 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(declare-datatypes ((us_t1 0))
  (((us_tqtmk1 (elts1 (Array Int character__init_wrapper))(rt1 t1)))))

;; "to_array"
(define-fun to_array1 ((a us_t1)) (Array Int character__init_wrapper)
  (elts1 a))

;; "of_array"
(define-fun of_array1 ((a (Array Int character__init_wrapper)) (f Int) (l Int)) us_t1
  (us_tqtmk1 a (mk1 f l)))

;; "first"
(define-fun first1 ((a us_t1)) Int
  (to_rep2 (rec__first1 (rt1 a))))

;; "last"
(define-fun last1 ((a us_t1)) Int
  (to_rep2 (rec__last1 (rt1 a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const v (_ BitVec 32))

;; "is_smallest_byte_10"
(declare-fun is_smallest_byte_10 (us_t
  (_ BitVec 8)) Bool)

(declare-const lst Int)

(declare-const res__first integer)

(declare-const res__last integer)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_112 us_t) (temp___is_init_108 Bool) (temp___skip_constant_109 Bool) (temp___do_toplevel_110 Bool) (temp___do_typ_inv_111 Bool)) Bool
  (=>
    (not (= temp___skip_constant_109 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_112)
      (last temp___expr_112))))

;; "char_of_byte_10"
(define-fun char_of_byte_10 ((param__i (_ BitVec 8))) Int
  (ite (= param__i #x00)
    48
    (ite (= param__i #x01)
      49
      (ite (= param__i #x02)
        50
        (ite (= param__i #x03)
          51
          (ite (= param__i #x04)
            52
            (ite (= param__i #x05)
              53
              (ite (= param__i #x06)
                54
                (ite (= param__i #x07) 55 (ite (= param__i #x08) 56 57))))))))))

;; "is_smallest_byte_10__post_axiom"
(assert true)

;; "is_smallest_byte_10__def_axiom"
(assert
  (forall ((param__s us_t))
    (forall ((param__v (_ BitVec 8)))
      (! (=
           (= (is_smallest_byte_10 param__s param__v) true)
           (and
             (and
               (and
                 (= (length param__s) (ite (bvuge param__v #x64)
                                        3
                                        (ite (bvuge param__v #x0A) 2 1)))
                 (= (to_rep1 (select (to_array param__s) (last param__s))) 
                 (char_of_byte_10
                   (bvurem param__v #x0A))))
               (=>
                 (bvuge param__v #x0A)
                 (= (to_rep1
                      (select (to_array param__s) (- (last param__s) 1))) 
                 (char_of_byte_10
                   (bvurem (bvudiv param__v #x0A) #x0A)))))
             (=>
               (bvuge param__v #x64)
               (= (to_rep1 (select (to_array param__s) (first param__s))) 
               (char_of_byte_10
                 (bvudiv param__v #x64)))))) :pattern ((is_smallest_byte_10
                                                         param__s
                                                         param__v)) ))))

;; Goal "def'vc"
;; File "ipv4_parsing.ads", line 118, characters 0-0
(assert
  (not
  (forall ((s (Array Int character__init_wrapper)) (ds (Array Int positive__init_wrapper)))
    (forall ((last2 Int))
      (=>
        (= last2 15)
        (=>
          (in_range1 last2)
          (forall ((w (_ BitVec 32)))
            (=>
              (= w v)
              (forall ((i Int))
                (=>
                  (= i 1)
                  (forall ((o integer))
                    (=>
                      (= (to_rep2 o) 15)
                      (forall ((o1 integer))
                        (=>
                          (= (to_rep2 o1) 1)
                          (forall ((last3 Int) (param__s (Array Int character__init_wrapper)))
                            (=>
                              (and
                                (and
                                  (and
                                    (and
                                      (and
                                        (and
                                          (and
                                            (<= (- (to_rep2 o1) 1) last3)
                                            (<= last3 last2))
                                          (<= (- last2 last3) 3))
                                        (let ((temp___390 (let ((temp___388 (+ last3 1)))
                                                            (of_array1
                                                              param__s
                                                              temp___388
                                                              last2))))
                                          (forall ((temp___391 Int))
                                            (=>
                                              (and
                                                (<= (first1 temp___390) temp___391)
                                                (<= temp___391 (last1
                                                                 temp___390)))
                                              (= (us_attr__init1
                                                   (select (to_array1
                                                             temp___390) temp___391)) true)))))
                                      (= (is_smallest_byte_10
                                           (let ((temp___398 (let ((temp___396 (+ last3 1)))
                                                               (of_array1
                                                                 param__s
                                                                 temp___396
                                                                 last2))))
                                             (of_array
                                               (convert
                                                 (to_array1 temp___398))
                                               (first1 temp___398)
                                               (last1 temp___398)))
                                           ((_ extract 7 0) (bvand w #x000000FF))) true))
                                    (forall ((k Int))
                                      (=>
                                        (and
                                          (<= (to_rep2 o1) k)
                                          (<= k (to_rep2 o)))
                                        (=>
                                          (= (not (and (ite (<= (+ last3 1) k)
                                                         true
                                                         false) (ite (<= k last2)
                                                                  true
                                                                  false))) true)
                                          (=
                                            (= (us_attr__init1
                                                 (select param__s k)) true)
                                            (= (us_attr__init1 (select s k)) true))))))
                                  (forall ((k Int))
                                    (=>
                                      (and
                                        (<= (to_rep2 o1) k)
                                        (<= k (to_rep2 o)))
                                      (=>
                                        (and
                                          (= (not (and (ite (<= (+ last3 1) k)
                                                         true
                                                         false) (ite (<= k last2)
                                                                  true
                                                                  false))) true)
                                          (= (us_attr__init1
                                               (select param__s k)) true))
                                        (= (to_rep1
                                             (rec__value1
                                               (select param__s k))) 
                                        (to_rep1
                                          (rec__value1 (select s k))))))))
                                (in_range1 last3))
                              (forall ((s1 (Array Int character__init_wrapper)))
                                (=>
                                  (= s1 (slide param__s 1 1))
                                  (=>
                                    (not (= i 4))
                                    (=>
                                      (in_range2 last3)
                                      (forall ((o2 positive))
                                        (=>
                                          (= (to_rep o2) last3)
                                          (=>
                                            (and (<= 1 i) (<= i 3))
                                            (forall ((ds1 (Array Int positive__init_wrapper)))
                                              (=>
                                                (= ds1 (store ds i (positive__init_wrapperqtmk
                                                                    o2
                                                                    true)))
                                                (forall ((o3 character))
                                                  (=>
                                                    (= (to_rep1 o3) 46)
                                                    (=>
                                                      (and
                                                        (<= 1 last3)
                                                        (<= last3 15))
                                                      (forall ((s2 (Array Int character__init_wrapper)))
                                                        (=>
                                                          (= s2 (store s1 last3 
                                                          (character__init_wrapperqtmk
                                                            o3
                                                            true)))
                                                          (let ((o4 (- last3 1)))
                                                            (=>
                                                              (in_range1 o4)
                                                              (forall 
                                                                ((last4 Int))
                                                                (=>
                                                                  (= last4 o4)
                                                                  (forall 
                                                                    ((w1 (_ BitVec 32)))
                                                                    (=>
                                                                    (= w1 (bvlshr w ((_ int2bv 32) 8)))
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (= i1 2)
                                                                    (forall 
                                                                    ((o5 integer))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep2
                                                                    o5) 15)
                                                                    (forall 
                                                                    ((o6 integer))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep2
                                                                    o6) 1)
                                                                    (bvule (bvand w1 #x000000FF) ((_ zero_extend 24) #xFF))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
