;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "pow2"
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one (pow2 (- 8 1))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; "lsr"
(declare-fun lsr ((_ BitVec 32)
  Int) (_ BitVec 32))

(declare-const two_power_size_minus_one1 Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one1 (pow2 (- 32 1))))

;; "lsr_bv_is_lsr"
(assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort character 0)

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int character))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-datatypes ((character__init_wrapper 0))
  (((character__init_wrapperqtmk (rec__value character)(us_attr__init Bool)))))

(declare-const dummy character__init_wrapper)

;; "dummy__def"
(assert (= (us_attr__init dummy) false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_112 us_t) (temp___is_init_108 Bool) (temp___skip_constant_109 Bool) (temp___do_toplevel_110 Bool) (temp___do_typ_inv_111 Bool)) Bool
  (=>
    (not (= temp___skip_constant_109 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_112)
      (last temp___expr_112))))

;; "char_of_byte_10"
(define-fun char_of_byte_10 ((param__i (_ BitVec 8))) Int
  (ite (= param__i #x00)
    48
    (ite (= param__i #x01)
      49
      (ite (= param__i #x02)
        50
        (ite (= param__i #x03)
          51
          (ite (= param__i #x04)
            52
            (ite (= param__i #x05)
              53
              (ite (= param__i #x06)
                54
                (ite (= param__i #x07) 55 (ite (= param__i #x08) 56 57))))))))))

;; "valid_byte_10"
(declare-fun valid_byte_10 (us_t
  Int
  Int) Bool)

;; "is_byte_10"
(declare-fun is_byte_10 (us_t
  Int
  Int
  (_ BitVec 8)) Bool)

;; "is_byte_10__function_guard"
(declare-fun is_byte_10__function_guard (Bool
  us_t
  Int
  Int
  (_ BitVec 8)) Bool)

;; "find_first_dot"
(declare-fun find_first_dot (us_t
  Int) Int)

;; "find_first_dot__function_guard"
(declare-fun find_first_dot__function_guard (Int
  us_t
  Int) Bool)

;; "valid_ipv4"
(declare-fun valid_ipv4 (us_t) Bool)

(declare-const s us_t)

(declare-const v (_ BitVec 32))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; "less_than_byte_max_10"
(define-fun less_than_byte_max_10 ((param__s us_t) (param__first Int) (param__last Int)) Bool
  (or (< (to_rep (select (to_array param__s) param__first)) 50) (and (= 
  (to_rep
    (select (to_array param__s) param__first)) 50) (or (< (to_rep
                                                            (select (to_array
                                                                    param__s) (+ param__first 1))) 53) (and (= 
  (to_rep
    (select (to_array param__s) (+ param__first 1))) 53) (< (to_rep
                                                              (select 
                                                              (to_array
                                                                param__s) (+ param__first 2))) 54))))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 48 x) (<= x 57)))

;; "valid_byte_10__post_axiom"
(assert true)

;; "valid_byte_10__def_axiom"
(assert
  (forall ((param__s us_t))
    (forall ((param__first Int) (param__last Int))
      (! (=
           (= (valid_byte_10 param__s param__first param__last) true)
           (and
             (and
               (and
                 (<= param__first param__last)
                 (<= (- param__last param__first) 2))
               (forall ((i Int))
                 (=>
                   (and (<= param__first i) (<= i param__last))
                   (in_range3 (to_rep (select (to_array param__s) i))))))
             (=>
               (= (- param__last param__first) 2)
               (= (less_than_byte_max_10 param__s param__first param__last) true)))) :pattern (
      (valid_byte_10
        param__s
        param__first
        param__last)) ))))

;; "find_first_dot__post_axiom"
(assert
  (forall ((param__s us_t))
    (forall ((param__first Int))
      (! (=>
           (and
             (and
               (dynamic_invariant param__s true false true true)
               (in_range param__first))
             (and
               (< (last param__s) 2147483647)
               (and
                 (<= (first param__s) param__first)
                 (<= param__first (+ (last param__s) 1)))))
           (let ((result (find_first_dot param__s param__first)))
             (=>
               (find_first_dot__function_guard result param__s param__first)
               (and
                 (and
                   (and
                     (and
                       (<= param__first result)
                       (<= result (+ (last param__s) 1)))
                     (=>
                       (and
                         (<= (first param__s) result)
                         (<= result (last param__s)))
                       (= (to_rep (select (to_array param__s) result)) 46)))
                   (forall ((k Int))
                     (=>
                       (and (<= param__first k) (<= k (- result 1)))
                       (not (= (to_rep (select (to_array param__s) k)) 46)))))
                 (in_range result))))) :pattern ((find_first_dot
                                                   param__s
                                                   param__first)) ))))

;; "valid_ipv4__post_axiom"
(assert true)

;; "valid_ipv4__def_axiom"
(assert
  (forall ((param__s us_t))
    (! (and
         (forall ((temp___233 Int))
           (find_first_dot__function_guard
             (find_first_dot param__s temp___233)
             param__s
             temp___233))
         (and
           (forall ((temp___231 Int))
             (find_first_dot__function_guard
               (find_first_dot param__s temp___231)
               param__s
               temp___231))
           (and
             (forall ((temp___229 Int))
               (find_first_dot__function_guard
                 (find_first_dot param__s temp___229)
                 param__s
                 temp___229))
             (=
               (= (valid_ipv4 param__s) true)
               (and
                 (< 0 (length param__s))
                 (let ((d1 (let ((temp___233 (first param__s)))
                             (find_first_dot param__s temp___233))))
                   (let ((d2 (ite (= d1 (+ (last param__s) 1))
                               (+ (last param__s) 1)
                               (let ((temp___231 (+ d1 1)))
                                 (find_first_dot param__s temp___231)))))
                     (let ((d3 (ite (= d2 (+ (last param__s) 1))
                                 (+ (last param__s) 1)
                                 (let ((temp___229 (+ d2 1)))
                                   (find_first_dot param__s temp___229)))))
                       (and
                         (and
                           (and
                             (and
                               (and
                                 (and
                                   (<= d1 (last param__s))
                                   (= (valid_byte_10
                                        param__s
                                        (first param__s)
                                        (- d1 1)) true))
                                 (<= d2 (last param__s)))
                               (= (valid_byte_10 param__s (+ d1 1) (- d2 1)) true))
                             (<= d3 (last param__s)))
                           (= (valid_byte_10 param__s (+ d2 1) (- d3 1)) true))
                         (= (valid_byte_10 param__s (+ d3 1) (last param__s)) true)))))))))) :pattern (
    (valid_ipv4
      param__s)) )))

;; Goal "def'vc"
;; File "ipv4_parsing.ads", line 78, characters 0-0
(assert
  (not
  (=>
    (dynamic_invariant s true false true true)
    (=>
      (and (< (last s) 2147483647) (= (valid_ipv4 s) true))
      (let ((o (first s)))
        (let ((o1 s))
          (let ((o2 (find_first_dot o1 o)))
            (=>
              (and
                (find_first_dot__function_guard o2 o1 o)
                (and
                  (in_range o2)
                  (and
                    (and
                      (and (<= o o2) (<= o2 (+ (last o1) 1)))
                      (=>
                        (and (<= (first o1) o2) (<= o2 (last o1)))
                        (= (to_rep (select (to_array o1) o2)) 46)))
                    (forall ((k Int))
                      (=>
                        (and (<= o k) (<= k (- o2 1)))
                        (not (= (to_rep (select (to_array o1) k)) 46)))))))
              (=>
                (in_range1 o2)
                (let ((o3 (+ o2 1)))
                  (=>
                    (in_range o3)
                    (let ((o4 s))
                      (let ((o5 (find_first_dot o4 o3)))
                        (=>
                          (and
                            (find_first_dot__function_guard o5 o4 o3)
                            (and
                              (in_range o5)
                              (and
                                (and
                                  (and (<= o3 o5) (<= o5 (+ (last o4) 1)))
                                  (=>
                                    (and
                                      (<= (first o4) o5)
                                      (<= o5 (last o4)))
                                    (= (to_rep (select (to_array o4) o5)) 46)))
                                (forall ((k Int))
                                  (=>
                                    (and (<= o3 k) (<= k (- o5 1)))
                                    (not
                                      (= (to_rep (select (to_array o4) k)) 46)))))))
                          (=>
                            (in_range1 o5)
                            (let ((o6 (+ o5 1)))
                              (=>
                                (in_range o6)
                                (let ((o7 s))
                                  (let ((o8 (find_first_dot o7 o6)))
                                    (=>
                                      (and
                                        (find_first_dot__function_guard
                                          o8
                                          o7
                                          o6)
                                        (and
                                          (in_range o8)
                                          (and
                                            (and
                                              (and
                                                (<= o6 o8)
                                                (<= o8 (+ (last o7) 1)))
                                              (=>
                                                (and
                                                  (<= (first o7) o8)
                                                  (<= o8 (last o7)))
                                                (= (to_rep
                                                     (select (to_array o7) o8)) 46)))
                                            (forall ((k Int))
                                              (=>
                                                (and
                                                  (<= o6 k)
                                                  (<= k (- o8 1)))
                                                (not
                                                  (= (to_rep
                                                       (select (to_array o7) k)) 46)))))))
                                      (=>
                                        (in_range1 o8)
                                        (forall ((o9 Bool))
                                          (=>
                                            (let ((o10 ((_ extract 7 0) (bvlshr 
                                              v ((_ int2bv 32) 24)))))
                                              (let ((o11 (- o2 1)))
                                                (let ((o12 (first s)))
                                                  (let ((o13 s))
                                                    (let ((o14 (is_byte_10
                                                                 o13
                                                                 o12
                                                                 o11
                                                                 o10)))
                                                      (and
                                                        (and
                                                          (is_byte_10__function_guard
                                                            o14
                                                            o13
                                                            o12
                                                            o11
                                                            o10)
                                                          (and
                                                            (=
                                                              (= o14 true)
                                                              (and
                                                                (and
                                                                  (and
                                                                    (and
                                                                    (<= (- o11 2) o12)
                                                                    (<= o12 o11))
                                                                    (= 
                                                                    (char_of_byte_10
                                                                    (bvurem o10 #x0A)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    o13) o11))))
                                                                  (= 
                                                                  (char_of_byte_10
                                                                    (bvurem (bvudiv o10 #x0A) #x0A)) 
                                                                  (ite (< o12 o11)
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    o13) (- o11 1)))
                                                                    48)))
                                                                (= (char_of_byte_10
                                                                    (bvudiv o10 #x64)) 
                                                                (ite (< o12 (- o11 1))
                                                                  (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    o13) (- o11 2)))
                                                                  48))))
                                                            (=>
                                                              (= o14 true)
                                                              (= (valid_byte_10
                                                                   o13
                                                                   o12
                                                                   o11) true))))
                                                        (ite (= o14 true)
                                                          (let ((o15 ((_ extract 7 0) (bvand (bvlshr 
                                                            v ((_ int2bv 32) 16)) #x000000FF))))
                                                            (let ((o16 (- o5 1)))
                                                              (let ((o17 (+ o2 1)))
                                                                (and
                                                                  (in_range
                                                                    o17)
                                                                  (let ((o18 
                                                                    s))
                                                                    (and
                                                                    (= o9 
                                                                    (is_byte_10
                                                                    o18
                                                                    o17
                                                                    o16
                                                                    o15))
                                                                    (and
                                                                    (is_byte_10__function_guard
                                                                    o9
                                                                    o18
                                                                    o17
                                                                    o16
                                                                    o15)
                                                                    (and
                                                                    (=
                                                                    (= o9 true)
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (<= (- o16 2) o17)
                                                                    (<= o17 o16))
                                                                    (= 
                                                                    (char_of_byte_10
                                                                    (bvurem o15 #x0A)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    o18) o16))))
                                                                    (= 
                                                                    (char_of_byte_10
                                                                    (bvurem (bvudiv o15 #x0A) #x0A)) 
                                                                    (ite (< o17 o16)
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    o18) (- o16 1)))
                                                                    48)))
                                                                    (= 
                                                                    (char_of_byte_10
                                                                    (bvudiv o15 #x64)) 
                                                                    (ite (< o17 (- o16 1))
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    o18) (- o16 2)))
                                                                    48))))
                                                                    (=>
                                                                    (= o9 true)
                                                                    (= 
                                                                    (valid_byte_10
                                                                    o18
                                                                    o17
                                                                    o16) true))))))))))
                                                          (= o9 false))))))))
                                            (=>
                                              (= o9 true)
                                              (bvule (bvand (bvlshr v ((_ int2bv 32) 8)) #x000000FF) ((_ zero_extend 24) #xFF))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
