(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function notb(x: bool) : bool = match_bool(x, false, true)

type us_private

logic us_null_ext__ : us_private

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic two_power_size_minus_one : int

axiom two_power_size_minus_one_val :
  (two_power_size_minus_one = pow2((8 - 1)))

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

logic acc : ('a,('a,bool) farray) farray, 'a -> prop

axiom acc_x :
  (forall r:('a,('a,bool) farray) farray. forall x:'a.
  ((forall y:'a. ((((r[y])[x]) = true) -> acc(r, y))) -> acc(r, x)))

axiom acc_inversion :
  (forall z:('a,('a,bool) farray) farray. forall z1:'a. (acc(z, z1) ->
  (forall y:'a. ((((z[y])[z1]) = true) -> acc(z, y)))))

predicate well_founded(r: ('a,('a,bool) farray) farray) =
  (forall x:'a. acc(r, x))

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

logic ult_closure : (t,(t,bool) farray) farray

axiom ult_closure_def :
  (forall y:t. forall y1:t. ((((ult_closure[y])[y1]) = true) <-> ult(y, y1)))

axiom ult_wf : well_founded(ult_closure)

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

logic ugt_closure : (t,(t,bool) farray) farray

axiom ugt_closure_def :
  (forall y:t. forall y1:t. ((((ugt_closure[y])[y1]) = true) <-> ugt(y, y1)))

axiom ugt_wf : well_founded(ugt_closure)

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

logic slt_closure : (t,(t,bool) farray) farray

axiom slt_closure_def :
  (forall y:t. forall y1:t. ((((slt_closure[y])[y1]) = true) <-> slt(y, y1)))

axiom slt_wf : well_founded(slt_closure)

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

logic sgt_closure : (t,(t,bool) farray) farray

axiom sgt_closure_def :
  (forall y:t. forall y1:t. ((((sgt_closure[y])[y1]) = true) <-> sgt(y, y1)))

axiom sgt_wf : well_founded(sgt_closure)

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 4294967295)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and : t1, t1 -> t1

axiom Nth_bw_and :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic lsr : t1, int -> t1

axiom Lsr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t1. (lsr(x, 0) = x))

logic two_power_size_minus_one1 : int

axiom two_power_size_minus_one_val1 :
  (two_power_size_minus_one1 = pow2((32 - 1)))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(4294967296 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  4294967296)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

logic ult_closure1 : (t1,(t1,bool) farray) farray

axiom ult_closure_def1 :
  (forall y:t1. forall y1:t1. ((((ult_closure1[y])[y1]) = true) <-> ult1(y,
  y1)))

axiom ult_wf1 : well_founded(ult_closure1)

predicate ule(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

logic ugt_closure1 : (t1,(t1,bool) farray) farray

axiom ugt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((ugt_closure1[y])[y1]) = true) <-> ugt1(y,
  y1)))

axiom ugt_wf1 : well_founded(ugt_closure1)

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

logic slt_closure1 : (t1,(t1,bool) farray) farray

axiom slt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((slt_closure1[y])[y1]) = true) <-> slt1(y,
  y1)))

axiom slt_wf1 : well_founded(slt_closure1)

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

logic sgt_closure1 : (t1,(t1,bool) farray) farray

axiom sgt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((sgt_closure1[y])[y1]) = true) <-> sgt1(y,
  y1)))

axiom sgt_wf1 : well_founded(sgt_closure1)

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic lsr_bv : t1, t1 -> t1

axiom lsr_bv_is_lsr :
  (forall x:t1. forall n:t1. (lsr_bv(x, n) = lsr(x, tqtint1(n))))

axiom to_uint_lsr :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

type positive__init_wrapper = { rec__value : positive; us_attr__init : bool
}

logic dummy : positive__init_wrapper

axiom dummy__def : ((dummy).us_attr__init = false)

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

type character__init_wrapper = { rec__value1 : character; us_attr__init1 :
bool
}

logic dummy1 : character__init_wrapper

axiom dummy__def1 : ((dummy1).us_attr__init1 = false)

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic slide : (int,character__init_wrapper) farray, int,
  int -> (int,character__init_wrapper) farray

axiom slide_eq :
  (forall a:(int,character__init_wrapper) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character__init_wrapper) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic convert : (int,character__init_wrapper) farray -> (int,character) farray

axiom convert__def :
  (forall a:(int,character__init_wrapper) farray.
  (forall temp___106:int.
  (to_rep1(of_rep1(to_rep1(((a[temp___106])).rec__value1))) = to_rep1((convert(a)[temp___106])))))

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t2 = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep2((mk(f, l)).rec__first) = f) and (to_rep2((mk(f,
  l)).rec__last) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t2
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first(a: us_t) : int = to_rep2(((a).rt).rec__first)

function last(a: us_t) : int = to_rep2(((a).rt).rec__last)

function length(a: us_t) : int =
  (if (first(a) <= last(a)) then ((last(a) - first(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

type t3 = { rec__first1 : integer; rec__last1 : integer
}

logic mk1 : int, int -> t3

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep2((mk1(f, l)).rec__first1) = f) and (to_rep2((mk1(f,
  l)).rec__last1) = l)))))

type us_t1 = { elts1 : (int,character__init_wrapper) farray; rt1 : t3
}

function to_array1(a: us_t1) : (int,character__init_wrapper) farray =
  (a).elts1

function of_array1(a: (int,character__init_wrapper) farray, f: int,
  l: int) : us_t1 = { elts1 = a; rt1 = mk1(f, l) }

function first1(a: us_t1) : int = to_rep2(((a).rt1).rec__first1)

function last1(a: us_t1) : int = to_rep2(((a).rt1).rec__last1)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic v : t1

logic is_smallest_byte_10 : us_t, t -> bool

logic lst : int

logic res__first : integer

logic res__last : integer

logic attr__ATTRIBUTE_MODULUS : t

logic attr__ATTRIBUTE_MODULUS1 : t1

type tsmall_stringP1

logic tsmall_stringP1qtint : tsmall_stringP1 -> int

axiom tsmall_stringP1qtaxiom :
  (forall i:tsmall_stringP1. ((1 <= tsmall_stringP1qtint(i)) and
  (tsmall_stringP1qtint(i) <= 15)))

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

type tdsD1

logic tdsD1qtint : tdsD1 -> int

axiom tdsD1qtaxiom :
  (forall i:tdsD1. ((1 <= tdsD1qtint(i)) and (tdsD1qtint(i) <= 3)))

logic value__size3 : int

logic object__size3 : int

logic component__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom3 : (0 <= alignment3)

predicate dynamic_invariant(temp___expr_482: us_t, temp___is_init_478: bool,
  temp___skip_constant_479: bool, temp___do_toplevel_480: bool,
  temp___do_typ_inv_481: bool,
  Ipv4_parsing__print_ipv4__B_7__lst___lst___: int) =
  ((not (temp___skip_constant_479 = true)) -> ((dynamic_property(1,
  Ipv4_parsing__print_ipv4__B_7__lst___lst___, first(temp___expr_482),
  last(temp___expr_482)) and (first(temp___expr_482) = 1)) and
  (last(temp___expr_482) = Ipv4_parsing__print_ipv4__B_7__lst___lst___)))

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 0)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 1)

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 2)

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 3)

logic rliteral5 : t

axiom rliteral_axiom5 : (tqtint(rliteral5) = 4)

logic rliteral6 : t

axiom rliteral_axiom6 : (tqtint(rliteral6) = 5)

logic rliteral7 : t

axiom rliteral_axiom7 : (tqtint(rliteral7) = 6)

logic rliteral8 : t

axiom rliteral_axiom8 : (tqtint(rliteral8) = 7)

logic rliteral9 : t

axiom rliteral_axiom9 : (tqtint(rliteral9) = 8)

function char_of_byte_10(param__i: t) : int =
  (if (param__i = rliteral1) then 48 else (if (param__i = rliteral2) then 49 else (if (param__i = rliteral3) then 50 else (if (param__i = rliteral4) then 51 else (if (param__i = rliteral5) then 52 else (if (param__i = rliteral6) then 53 else (if (param__i = rliteral7) then 54 else (if (param__i = rliteral8) then 55 else (if (param__i = rliteral9) then 56 else 57)))))))))

logic rliteral10 : t

axiom rliteral_axiom10 : (tqtint(rliteral10) = 10)

logic rliteral11 : t

axiom rliteral_axiom11 : (tqtint(rliteral11) = 100)

axiom is_smallest_byte_10__post_axiom : true

axiom is_smallest_byte_10__def_axiom :
  (forall param__s:us_t.
  (forall param__v:t [is_smallest_byte_10(param__s, param__v)].
  ((is_smallest_byte_10(param__s, param__v) = true) <->
  ((((length(param__s) = (if uge(param__v,
  rliteral11) then 3 else (if uge(param__v, rliteral10) then 2 else 1))) and
  (to_rep1((to_array(param__s)[last(param__s)])) = char_of_byte_10(urem(param__v,
  rliteral10)))) and (uge(param__v, rliteral10) ->
  (to_rep1((to_array(param__s)[(last(param__s) - 1)])) = char_of_byte_10(urem(udiv(param__v,
  rliteral10), rliteral10))))) and (uge(param__v, rliteral11) ->
  (to_rep1((to_array(param__s)[first(param__s)])) = char_of_byte_10(udiv(param__v,
  rliteral11))))))))

 (* "ipv4_parsing.ads", line 118, characters 0-0 *)
goal defqtvc :
  (forall s:(int,character__init_wrapper) farray.
  forall ds:(int,positive__init_wrapper) farray.
  (forall last2:int. ((last2 = 15) -> (in_range1(last2) ->
  (forall w:t1. ((w = v) ->
  (forall s1:(int,character__init_wrapper) farray. forall last3:int.
  forall ds1:(int,positive__init_wrapper) farray.
  (((exists i:int. ((i = 1) and
    (exists o:integer. ((to_rep2(o) = 15) and
    (exists o1:integer. ((to_rep2(o1) = 1) and
    (exists last4:int. exists param__s:(int,character__init_wrapper) farray.
    ((((((((((to_rep2(o1) - 1) <= last4) and (last4 <= last2)) and
    ((last2 - last4) <= 3)) and (let temp___390 = (let temp___388 =
    (last4 + 1) : int in of_array1(param__s, temp___388, last2)) : us_t1 in
    (forall temp___391:int. (((first1(temp___390) <= temp___391) and
    (temp___391 <= last1(temp___390))) ->
    (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
    (is_smallest_byte_10((let temp___398 = (let temp___396 = (last4 + 1)
    : int in of_array1(param__s, temp___396, last2)) : us_t1 in
    of_array(convert(to_array1(temp___398)), first1(temp___398),
    last1(temp___398))), toSmall(bw_and(w, rliteral))) = true)) and
    (forall k:int. (((to_rep2(o1) <= k) and (k <= to_rep2(o))) ->
    ((notb(andb((if ((last4 + 1) <= k) then true else false),
    (if (k <= last2) then true else false))) = true) ->
    ((((param__s[k])).us_attr__init1 = true) <->
    (((s[k])).us_attr__init1 = true)))))) and
    (forall k:int. (((to_rep2(o1) <= k) and (k <= to_rep2(o))) ->
    (((notb(andb((if ((last4 + 1) <= k) then true else false),
    (if (k <= last2) then true else false))) = true) and
    (((param__s[k])).us_attr__init1 = true)) ->
    (to_rep1(((param__s[k])).rec__value1) = to_rep1(((s[k])).rec__value1)))))) and
    in_range1(last4)) and
    (exists s2:(int,character__init_wrapper) farray. ((s2 = slide(param__s,
    1, 1)) and ((not (i = 4)) and (in_range2(last4) and
    (exists o2:positive. ((to_rep(o2) = last4) and (((1 <= i) and
    (i <= 3)) and
    (exists ds2:(int,positive__init_wrapper) farray. ((ds2 = (ds[i <- {
    rec__value = o2; us_attr__init = true }])) and
    (exists o3:character. ((to_rep1(o3) = 46) and (((1 <= last4) and
    (last4 <= 15)) and
    (exists s3:(int,character__init_wrapper) farray. ((s3 = (s2[last4 <- {
    rec__value1 = o3; us_attr__init1 = true }])) and (let o4 = (last4 - 1)
    : int in (in_range1(o4) and
    (exists last5:int. ((last5 = o4) and
    (exists w1:t1. ((w1 = lsr_bv(w, of_int1(8))) and
    (exists i1:int. ((i1 = 2) and
    (exists o5:integer. ((to_rep2(o5) = 15) and
    (exists o6:integer. ((to_rep2(o6) = 1) and
    (exists last6:int. exists param__s1:(int,character__init_wrapper) farray.
    ((((((((((to_rep2(o6) - 1) <= last6) and (last6 <= last5)) and
    ((last5 - last6) <= 3)) and (let temp___390 = (let temp___388 =
    (last6 + 1) : int in of_array1(param__s1, temp___388, last5)) : us_t1 in
    (forall temp___391:int. (((first1(temp___390) <= temp___391) and
    (temp___391 <= last1(temp___390))) ->
    (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
    (is_smallest_byte_10((let temp___398 = (let temp___396 = (last6 + 1)
    : int in of_array1(param__s1, temp___396, last5)) : us_t1 in
    of_array(convert(to_array1(temp___398)), first1(temp___398),
    last1(temp___398))), toSmall(bw_and(w1, rliteral))) = true)) and
    (forall k:int. (((to_rep2(o6) <= k) and (k <= to_rep2(o5))) ->
    ((notb(andb((if ((last6 + 1) <= k) then true else false),
    (if (k <= last5) then true else false))) = true) ->
    ((((param__s1[k])).us_attr__init1 = true) <->
    (((s3[k])).us_attr__init1 = true)))))) and
    (forall k:int. (((to_rep2(o6) <= k) and (k <= to_rep2(o5))) ->
    (((notb(andb((if ((last6 + 1) <= k) then true else false),
    (if (k <= last5) then true else false))) = true) and
    (((param__s1[k])).us_attr__init1 = true)) ->
    (to_rep1(((param__s1[k])).rec__value1) = to_rep1(((s3[k])).rec__value1)))))) and
    in_range1(last6)) and
    (exists s4:(int,character__init_wrapper) farray. ((s4 = slide(param__s1,
    1, 1)) and ((not (i1 = 4)) and (in_range2(last6) and
    (exists o7:positive. ((to_rep(o7) = last6) and (((1 <= i1) and
    (i1 <= 3)) and
    (exists ds3:(int,positive__init_wrapper) farray. ((ds3 = (ds2[i1 <- {
    rec__value = o7; us_attr__init = true }])) and
    (exists o8:character. ((to_rep1(o8) = 46) and (((1 <= last6) and
    (last6 <= 15)) and
    (exists s5:(int,character__init_wrapper) farray. ((s5 = (s4[last6 <- {
    rec__value1 = o8; us_attr__init1 = true }])) and (let o9 = (last6 - 1)
    : int in (in_range1(o9) and
    (exists last7:int. ((last7 = o9) and
    (exists w2:t1. ((w2 = lsr_bv(w1, of_int1(8))) and
    (exists i2:int. ((i2 = 3) and
    (exists o10:integer. ((to_rep2(o10) = 15) and
    (exists o11:integer. ((to_rep2(o11) = 1) and
    (exists last8:int. exists param__s2:(int,character__init_wrapper) farray.
    ((((((((((to_rep2(o11) - 1) <= last8) and (last8 <= last7)) and
    ((last7 - last8) <= 3)) and (let temp___390 = (let temp___388 =
    (last8 + 1) : int in of_array1(param__s2, temp___388, last7)) : us_t1 in
    (forall temp___391:int. (((first1(temp___390) <= temp___391) and
    (temp___391 <= last1(temp___390))) ->
    (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
    (is_smallest_byte_10((let temp___398 = (let temp___396 = (last8 + 1)
    : int in of_array1(param__s2, temp___396, last7)) : us_t1 in
    of_array(convert(to_array1(temp___398)), first1(temp___398),
    last1(temp___398))), toSmall(bw_and(w2, rliteral))) = true)) and
    (forall k:int. (((to_rep2(o11) <= k) and (k <= to_rep2(o10))) ->
    ((notb(andb((if ((last8 + 1) <= k) then true else false),
    (if (k <= last7) then true else false))) = true) ->
    ((((param__s2[k])).us_attr__init1 = true) <->
    (((s5[k])).us_attr__init1 = true)))))) and
    (forall k:int. (((to_rep2(o11) <= k) and (k <= to_rep2(o10))) ->
    (((notb(andb((if ((last8 + 1) <= k) then true else false),
    (if (k <= last7) then true else false))) = true) and
    (((param__s2[k])).us_attr__init1 = true)) ->
    (to_rep1(((param__s2[k])).rec__value1) = to_rep1(((s5[k])).rec__value1)))))) and
    in_range1(last8)) and
    (exists s6:(int,character__init_wrapper) farray. ((s6 = slide(param__s2,
    1, 1)) and ((not (i2 = 4)) and (in_range2(last8) and
    (exists o12:positive. ((to_rep(o12) = last8) and (((1 <= i2) and
    (i2 <= 3)) and
    (exists ds4:(int,positive__init_wrapper) farray. ((ds4 = (ds3[i2 <- {
    rec__value = o12; us_attr__init = true }])) and
    (exists o13:character. ((to_rep1(o13) = 46) and (((1 <= last8) and
    (last8 <= 15)) and
    (exists s7:(int,character__init_wrapper) farray. ((s7 = (s6[last8 <- {
    rec__value1 = o13; us_attr__init1 = true }])) and (let o14 = (last8 - 1)
    : int in (in_range1(o14) and
    (exists last9:int. ((last9 = o14) and
    (exists w3:t1. ((w3 = lsr_bv(w2, of_int1(8))) and
    (exists i3:int. ((i3 = 4) and
    (exists o15:integer. ((to_rep2(o15) = 15) and
    (exists o16:integer. ((to_rep2(o16) = 1) and
    (exists last10:int.
    exists param__s3:(int,character__init_wrapper) farray.
    ((((((((((to_rep2(o16) - 1) <= last10) and (last10 <= last9)) and
    ((last9 - last10) <= 3)) and (let temp___390 = (let temp___388 =
    (last10 + 1) : int in of_array1(param__s3, temp___388, last9)) : us_t1 in
    (forall temp___391:int. (((first1(temp___390) <= temp___391) and
    (temp___391 <= last1(temp___390))) ->
    (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
    (is_smallest_byte_10((let temp___398 = (let temp___396 = (last10 + 1)
    : int in of_array1(param__s3, temp___396, last9)) : us_t1 in
    of_array(convert(to_array1(temp___398)), first1(temp___398),
    last1(temp___398))), toSmall(bw_and(w3, rliteral))) = true)) and
    (forall k:int. (((to_rep2(o16) <= k) and (k <= to_rep2(o15))) ->
    ((notb(andb((if ((last10 + 1) <= k) then true else false),
    (if (k <= last9) then true else false))) = true) ->
    ((((param__s3[k])).us_attr__init1 = true) <->
    (((s7[k])).us_attr__init1 = true)))))) and
    (forall k:int. (((to_rep2(o16) <= k) and (k <= to_rep2(o15))) ->
    (((notb(andb((if ((last10 + 1) <= k) then true else false),
    (if (k <= last9) then true else false))) = true) and
    (((param__s3[k])).us_attr__init1 = true)) ->
    (to_rep1(((param__s3[k])).rec__value1) = to_rep1(((s7[k])).rec__value1)))))) and
    in_range1(last10)) and
    (exists s8:(int,character__init_wrapper) farray. ((s8 = slide(param__s3,
    1, 1)) and ((not (i3 = 4)) and (in_range2(last10) and
    (exists o17:positive. ((to_rep(o17) = last10) and (((1 <= i3) and
    (i3 <= 3)) and ((ds1 = (ds4[i3 <- { rec__value = o17; us_attr__init =
    true }])) and
    (exists o18:character. ((to_rep1(o18) = 46) and (((1 <= last10) and
    (last10 <= 15)) and ((s1 = (s8[last10 <- { rec__value1 = o18;
    us_attr__init1 = true }])) and (let o19 = (last10 - 1) : int in
    (in_range1(o19) and (last3 = o19))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) or
  (exists i:int. ((i = 1) and
  (exists o:integer. ((to_rep2(o) = 15) and
  (exists o1:integer. ((to_rep2(o1) = 1) and
  (exists last4:int. exists param__s:(int,character__init_wrapper) farray.
  ((((((((((to_rep2(o1) - 1) <= last4) and (last4 <= last2)) and
  ((last2 - last4) <= 3)) and (let temp___390 = (let temp___388 = (last4 + 1)
  : int in of_array1(param__s, temp___388, last2)) : us_t1 in
  (forall temp___391:int. (((first1(temp___390) <= temp___391) and
  (temp___391 <= last1(temp___390))) ->
  (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
  (is_smallest_byte_10((let temp___398 = (let temp___396 = (last4 + 1)
  : int in of_array1(param__s, temp___396, last2)) : us_t1 in
  of_array(convert(to_array1(temp___398)), first1(temp___398),
  last1(temp___398))), toSmall(bw_and(w, rliteral))) = true)) and
  (forall k:int. (((to_rep2(o1) <= k) and (k <= to_rep2(o))) ->
  ((notb(andb((if ((last4 + 1) <= k) then true else false),
  (if (k <= last2) then true else false))) = true) ->
  ((((param__s[k])).us_attr__init1 = true) <->
  (((s[k])).us_attr__init1 = true)))))) and
  (forall k:int. (((to_rep2(o1) <= k) and (k <= to_rep2(o))) ->
  (((notb(andb((if ((last4 + 1) <= k) then true else false),
  (if (k <= last2) then true else false))) = true) and
  (((param__s[k])).us_attr__init1 = true)) ->
  (to_rep1(((param__s[k])).rec__value1) = to_rep1(((s[k])).rec__value1)))))) and
  in_range1(last4)) and
  (exists s2:(int,character__init_wrapper) farray. ((s2 = slide(param__s, 1,
  1)) and (if (i = 4) then (((s1 = s2) and (last3 = last4)) and
  (ds1 = ds)) else (in_range2(last4) and
  (exists o2:positive. ((to_rep(o2) = last4) and (((1 <= i) and (i <= 3)) and
  (exists ds2:(int,positive__init_wrapper) farray. ((ds2 = (ds[i <- {
  rec__value = o2; us_attr__init = true }])) and
  (exists o3:character. ((to_rep1(o3) = 46) and (((1 <= last4) and
  (last4 <= 15)) and
  (exists s3:(int,character__init_wrapper) farray. ((s3 = (s2[last4 <- {
  rec__value1 = o3; us_attr__init1 = true }])) and (let o4 = (last4 - 1)
  : int in (in_range1(o4) and
  (exists last5:int. ((last5 = o4) and
  (exists w1:t1. ((w1 = lsr_bv(w, of_int1(8))) and
  (exists i1:int. ((i1 = 2) and
  (exists o5:integer. ((to_rep2(o5) = 15) and
  (exists o6:integer. ((to_rep2(o6) = 1) and
  (exists last6:int. exists param__s1:(int,character__init_wrapper) farray.
  ((((((((((to_rep2(o6) - 1) <= last6) and (last6 <= last5)) and
  ((last5 - last6) <= 3)) and (let temp___390 = (let temp___388 = (last6 + 1)
  : int in of_array1(param__s1, temp___388, last5)) : us_t1 in
  (forall temp___391:int. (((first1(temp___390) <= temp___391) and
  (temp___391 <= last1(temp___390))) ->
  (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
  (is_smallest_byte_10((let temp___398 = (let temp___396 = (last6 + 1)
  : int in of_array1(param__s1, temp___396, last5)) : us_t1 in
  of_array(convert(to_array1(temp___398)), first1(temp___398),
  last1(temp___398))), toSmall(bw_and(w1, rliteral))) = true)) and
  (forall k:int. (((to_rep2(o6) <= k) and (k <= to_rep2(o5))) ->
  ((notb(andb((if ((last6 + 1) <= k) then true else false),
  (if (k <= last5) then true else false))) = true) ->
  ((((param__s1[k])).us_attr__init1 = true) <->
  (((s3[k])).us_attr__init1 = true)))))) and
  (forall k:int. (((to_rep2(o6) <= k) and (k <= to_rep2(o5))) ->
  (((notb(andb((if ((last6 + 1) <= k) then true else false),
  (if (k <= last5) then true else false))) = true) and
  (((param__s1[k])).us_attr__init1 = true)) ->
  (to_rep1(((param__s1[k])).rec__value1) = to_rep1(((s3[k])).rec__value1)))))) and
  in_range1(last6)) and
  (exists s4:(int,character__init_wrapper) farray. ((s4 = slide(param__s1, 1,
  1)) and (if (i1 = 4) then (((s1 = s4) and (last3 = last6)) and
  (ds1 = ds2)) else (in_range2(last6) and
  (exists o7:positive. ((to_rep(o7) = last6) and (((1 <= i1) and
  (i1 <= 3)) and
  (exists ds3:(int,positive__init_wrapper) farray. ((ds3 = (ds2[i1 <- {
  rec__value = o7; us_attr__init = true }])) and
  (exists o8:character. ((to_rep1(o8) = 46) and (((1 <= last6) and
  (last6 <= 15)) and
  (exists s5:(int,character__init_wrapper) farray. ((s5 = (s4[last6 <- {
  rec__value1 = o8; us_attr__init1 = true }])) and (let o9 = (last6 - 1)
  : int in (in_range1(o9) and
  (exists last7:int. ((last7 = o9) and
  (exists w2:t1. ((w2 = lsr_bv(w1, of_int1(8))) and
  (exists i2:int. ((i2 = 3) and
  (exists o10:integer. ((to_rep2(o10) = 15) and
  (exists o11:integer. ((to_rep2(o11) = 1) and
  (exists last8:int. exists param__s2:(int,character__init_wrapper) farray.
  ((((((((((to_rep2(o11) - 1) <= last8) and (last8 <= last7)) and
  ((last7 - last8) <= 3)) and (let temp___390 = (let temp___388 = (last8 + 1)
  : int in of_array1(param__s2, temp___388, last7)) : us_t1 in
  (forall temp___391:int. (((first1(temp___390) <= temp___391) and
  (temp___391 <= last1(temp___390))) ->
  (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
  (is_smallest_byte_10((let temp___398 = (let temp___396 = (last8 + 1)
  : int in of_array1(param__s2, temp___396, last7)) : us_t1 in
  of_array(convert(to_array1(temp___398)), first1(temp___398),
  last1(temp___398))), toSmall(bw_and(w2, rliteral))) = true)) and
  (forall k:int. (((to_rep2(o11) <= k) and (k <= to_rep2(o10))) ->
  ((notb(andb((if ((last8 + 1) <= k) then true else false),
  (if (k <= last7) then true else false))) = true) ->
  ((((param__s2[k])).us_attr__init1 = true) <->
  (((s5[k])).us_attr__init1 = true)))))) and
  (forall k:int. (((to_rep2(o11) <= k) and (k <= to_rep2(o10))) ->
  (((notb(andb((if ((last8 + 1) <= k) then true else false),
  (if (k <= last7) then true else false))) = true) and
  (((param__s2[k])).us_attr__init1 = true)) ->
  (to_rep1(((param__s2[k])).rec__value1) = to_rep1(((s5[k])).rec__value1)))))) and
  in_range1(last8)) and
  (exists s6:(int,character__init_wrapper) farray. ((s6 = slide(param__s2, 1,
  1)) and (if (i2 = 4) then (((s1 = s6) and (last3 = last8)) and
  (ds1 = ds3)) else (in_range2(last8) and
  (exists o12:positive. ((to_rep(o12) = last8) and (((1 <= i2) and
  (i2 <= 3)) and ((ds1 = (ds3[i2 <- { rec__value = o12; us_attr__init = true
  }])) and
  (exists o13:character. ((to_rep1(o13) = 46) and (((1 <= last8) and
  (last8 <= 15)) and
  (exists s7:(int,character__init_wrapper) farray. ((s7 = (s6[last8 <- {
  rec__value1 = o13; us_attr__init1 = true }])) and (let o14 = (last8 - 1)
  : int in (in_range1(o14) and
  (exists last9:int. ((last9 = o14) and
  (exists w3:t1. ((w3 = lsr_bv(w2, of_int1(8))) and
  (exists i3:int. ((i3 = 4) and
  (exists o15:integer. ((to_rep2(o15) = 15) and
  (exists o16:integer. ((to_rep2(o16) = 1) and
  (exists param__s3:(int,character__init_wrapper) farray.
  ((((((((((to_rep2(o16) - 1) <= last3) and (last3 <= last9)) and
  ((last9 - last3) <= 3)) and (let temp___390 = (let temp___388 = (last3 + 1)
  : int in of_array1(param__s3, temp___388, last9)) : us_t1 in
  (forall temp___391:int. (((first1(temp___390) <= temp___391) and
  (temp___391 <= last1(temp___390))) ->
  (((to_array1(temp___390)[temp___391])).us_attr__init1 = true))))) and
  (is_smallest_byte_10((let temp___398 = (let temp___396 = (last3 + 1)
  : int in of_array1(param__s3, temp___396, last9)) : us_t1 in
  of_array(convert(to_array1(temp___398)), first1(temp___398),
  last1(temp___398))), toSmall(bw_and(w3, rliteral))) = true)) and
  (forall k:int. (((to_rep2(o16) <= k) and (k <= to_rep2(o15))) ->
  ((notb(andb((if ((last3 + 1) <= k) then true else false),
  (if (k <= last9) then true else false))) = true) ->
  ((((param__s3[k])).us_attr__init1 = true) <->
  (((s7[k])).us_attr__init1 = true)))))) and
  (forall k:int. (((to_rep2(o16) <= k) and (k <= to_rep2(o15))) ->
  (((notb(andb((if ((last3 + 1) <= k) then true else false),
  (if (k <= last9) then true else false))) = true) and
  (((param__s3[k])).us_attr__init1 = true)) ->
  (to_rep1(((param__s3[k])).rec__value1) = to_rep1(((s7[k])).rec__value1)))))) and
  in_range1(last3)) and ((s1 = slide(param__s3, 1, 1)) and (i3 = 4)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ->
  (let o = (15 - last3) : int in (in_range2(o) -> ((o = lst) ->
  (in_range2(lst) -> (let o1 = (last3 + 1) : int in (in_range(o1) ->
  (((o1 <= 15) -> (((1 <= o1) and (o1 <= 15)) and ((1 <= 15) and
  (15 <= 15)))) ->
  ((forall temp___590:int. (((o1 <= temp___590) and (temp___590 <= 15)) ->
   (((s1[temp___590])).us_attr__init1 = true))) ->
  ((if (o1 <= 15) then ((1 <= lst) and
  ((15 - o1) = (lst - 1))) else (lst <  1)) ->
  (forall res:(int,character) farray. ((res = convert(slide(s1, o1, 1))) ->
  ((to_rep2(res__first) = 1) -> ((to_rep2(res__last) = lst) ->
  (dynamic_invariant(of_array(res, to_rep2(res__first), to_rep2(res__last)),
  true, false, true, true, lst) -> (let o2 = v : t1 in (let temp___580 =
  (ds1[1]) : positive__init_wrapper in
  (((temp___580).us_attr__init = true) ->
  (forall o3:int. ((to_rep((temp___580).rec__value) = o3) -> (let o4 =
  (o3 - last3) : int in (in_range(o4) -> (in_range2(o4) -> (let temp___576 =
  (ds1[2]) : positive__init_wrapper in
  (((temp___576).us_attr__init = true) ->
  (forall o5:int. ((to_rep((temp___576).rec__value) = o5) -> (let o6 =
  (o5 - last3) : int in (in_range(o6) -> (in_range2(o6) -> (let temp___572 =
  (ds1[3]) : positive__init_wrapper in
  (((temp___572).us_attr__init = true) ->
  (forall o7:int. ((to_rep((temp___572).rec__value) = o7) -> (let o8 =
  (o7 - last3) : int in (in_range(o8) -> (in_range2(o8) ->
  (forall o9:int. ((to_rep2(res__last) = o9) ->
  (forall o10:int. ((to_rep2(res__first) = o10) ->
  (uge(toSmall(bw_and(lsr_bv(o2, of_int1(16)), rliteral)), rliteral11) ->
  (to_rep1((to_array((let temp___440qtunused = (let temp___439 = (o6 - 1)
  : int in (let temp___438 = (o8 + 1) : int in of_array(res, temp___438,
  temp___439))) : us_t in (let temp___439 = (o6 - 1) : int in
  (let temp___438 = (o8 + 1) : int in of_array(res, temp___438,
  temp___439)))))[first((let temp___440qtunused = (let temp___439 = (o6 - 1)
  : int in (let temp___438 = (o8 + 1) : int in of_array(res, temp___438,
  temp___439))) : us_t in (let temp___439 = (o6 - 1) : int in
  (let temp___438 = (o8 + 1) : int in of_array(res, temp___438,
  temp___439)))))])) = char_of_byte_10(udiv(toSmall(bw_and(lsr_bv(o2,
  of_int1(16)), rliteral)), rliteral11))))))))))))))))))))))))))))))))))))))))))))))))))))
