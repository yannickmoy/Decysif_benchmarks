(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type us_private

logic us_null_ext__ : us_private

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic two_power_size_minus_one : int

axiom two_power_size_minus_one_val :
  (two_power_size_minus_one = pow2((8 - 1)))

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

logic acc : ('a,('a,bool) farray) farray, 'a -> prop

axiom acc_x :
  (forall r:('a,('a,bool) farray) farray. forall x:'a.
  ((forall y:'a. ((((r[y])[x]) = true) -> acc(r, y))) -> acc(r, x)))

axiom acc_inversion :
  (forall z:('a,('a,bool) farray) farray. forall z1:'a. (acc(z, z1) ->
  (forall y:'a. ((((z[y])[z1]) = true) -> acc(z, y)))))

predicate well_founded(r: ('a,('a,bool) farray) farray) =
  (forall x:'a. acc(r, x))

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

logic ult_closure : (t,(t,bool) farray) farray

axiom ult_closure_def :
  (forall y:t. forall y1:t. ((((ult_closure[y])[y1]) = true) <-> ult(y, y1)))

axiom ult_wf : well_founded(ult_closure)

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

logic ugt_closure : (t,(t,bool) farray) farray

axiom ugt_closure_def :
  (forall y:t. forall y1:t. ((((ugt_closure[y])[y1]) = true) <-> ugt(y, y1)))

axiom ugt_wf : well_founded(ugt_closure)

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

logic slt_closure : (t,(t,bool) farray) farray

axiom slt_closure_def :
  (forall y:t. forall y1:t. ((((slt_closure[y])[y1]) = true) <-> slt(y, y1)))

axiom slt_wf : well_founded(slt_closure)

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

logic sgt_closure : (t,(t,bool) farray) farray

axiom sgt_closure_def :
  (forall y:t. forall y1:t. ((((sgt_closure[y])[y1]) = true) <-> sgt(y, y1)))

axiom sgt_wf : well_founded(sgt_closure)

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

type character__init_wrapper = { rec__value : character; us_attr__init : bool
}

logic dummy : character__init_wrapper

axiom dummy__def : ((dummy).us_attr__init = false)

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

logic convert : (int,character__init_wrapper) farray -> (int,character) farray

axiom convert__def :
  (forall a:(int,character__init_wrapper) farray.
  (forall temp___106:int.
  (to_rep(of_rep(to_rep(((a[temp___106])).rec__value))) = to_rep((convert(a)[temp___106])))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1 = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1((mk(f, l)).rec__first) = f) and (to_rep1((mk(f,
  l)).rec__last) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t1
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function last(a: us_t) : int = to_rep1(((a).rt).rec__last)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

predicate in_range4(x: int) = ((48 <= x) and (x <= 57))

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 1)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 2)

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 3)

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 4)

logic rliteral5 : t

axiom rliteral_axiom5 : (tqtint(rliteral5) = 5)

logic rliteral6 : t

axiom rliteral_axiom6 : (tqtint(rliteral6) = 6)

logic rliteral7 : t

axiom rliteral_axiom7 : (tqtint(rliteral7) = 7)

logic rliteral8 : t

axiom rliteral_axiom8 : (tqtint(rliteral8) = 8)

function char_of_byte_10(param__i: t) : int =
  (if (param__i = rliteral) then 48 else (if (param__i = rliteral1) then 49 else (if (param__i = rliteral2) then 50 else (if (param__i = rliteral3) then 51 else (if (param__i = rliteral4) then 52 else (if (param__i = rliteral5) then 53 else (if (param__i = rliteral6) then 54 else (if (param__i = rliteral7) then 55 else (if (param__i = rliteral8) then 56 else 57)))))))))

logic v : t

logic s__first : integer

logic s__last : integer

logic attr__ATTRIBUTE_MODULUS : t

type t2 = { rec__first1 : integer; rec__last1 : integer
}

logic mk1 : int, int -> t2

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1((mk1(f, l)).rec__first1) = f) and (to_rep1((mk1(f,
  l)).rec__last1) = l)))))

type us_t1 = { elts1 : (int,character__init_wrapper) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,character__init_wrapper) farray =
  (a).elts1

function of_array1(a: (int,character__init_wrapper) farray, f: int,
  l: int) : us_t1 = { elts1 = a; rt1 = mk1(f, l) }

function first(a: us_t1) : int = to_rep1(((a).rt1).rec__first1)

function last1(a: us_t1) : int = to_rep1(((a).rt1).rec__last1)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic rliteral9 : t

axiom rliteral_axiom9 : (tqtint(rliteral9) = 100)

logic rliteral10 : t

axiom rliteral_axiom10 : (tqtint(rliteral10) = 10)

 (* "ipv4_parsing.adb", line 153, characters 0-0 *)
goal defqtvc :
  (forall s:(int,character__init_wrapper) farray. forall last2:int.
  (dynamic_property(1, 2147483647, to_rep1(s__first), to_rep1(s__last)) ->
  (in_range1(last2) -> ((((to_rep1(s__last) <  2147483647) and
  ((to_rep1(s__first) <= last2) and (last2 <= to_rep1(s__last)))) and
  (to_rep1(s__first) <= (last2 - 2))) ->
  (forall o:int. ((to_rep1(s__last) = o) ->
  (forall o1:int. ((to_rep1(s__first) = o1) ->
  (forall o2:int. ((to_rep1(s__last) = o2) ->
  (forall o3:int. ((to_rep1(s__first) = o3) ->
  (forall w:t. ((w = v) ->
  (forall s1:(int,character__init_wrapper) farray. forall last3:int.
  (((exists o4:int. ((to_rep1(s__last) = o4) and
    (exists o5:int. ((to_rep1(s__first) = o5) and
    (exists o6:int. ((to_rep1(s__last) = o6) and
    (exists o7:int. ((to_rep1(s__first) = o7) and (let o8 = urem(w,
    rliteral10) : t in (let o9 = char_of_byte_10(o8) : int in
    ((in_range4(o9) and
    (o9 = (if (o8 = rliteral) then 48 else (if (o8 = rliteral1) then 49 else (if (o8 = rliteral2) then 50 else (if (o8 = rliteral3) then 51 else (if (o8 = rliteral4) then 52 else (if (o8 = rliteral5) then 53 else (if (o8 = rliteral6) then 54 else (if (o8 = rliteral7) then 55 else (if (o8 = rliteral8) then 56 else 57))))))))))) and
    (exists o10:character. ((to_rep(o10) = o9) and (((o7 <= last2) and
    (last2 <= o6)) and
    (exists s2:(int,character__init_wrapper) farray. ((s2 = to_array1({
    elts1 = (s[last2 <- { rec__value = o10; us_attr__init = true }]); rt1 =
    (of_array1(s, o7, o6)).rt1 })) and (let o11 = (last2 - 1) : int in
    (in_range1(o11) and
    (exists last4:int. ((last4 = o11) and
    (exists w1:t. ((w1 = udiv(w, rliteral10)) and ((not (w1 = rliteral)) and
    (exists o12:int. ((to_rep1(s__last) = o12) and
    (exists o13:int. ((to_rep1(s__first) = o13) and (let o14 = urem(w1,
    rliteral10) : t in (let o15 = char_of_byte_10(o14) : int in
    ((in_range4(o15) and
    (o15 = (if (o14 = rliteral) then 48 else (if (o14 = rliteral1) then 49 else (if (o14 = rliteral2) then 50 else (if (o14 = rliteral3) then 51 else (if (o14 = rliteral4) then 52 else (if (o14 = rliteral5) then 53 else (if (o14 = rliteral6) then 54 else (if (o14 = rliteral7) then 55 else (if (o14 = rliteral8) then 56 else 57))))))))))) and
    (exists o16:character. ((to_rep(o16) = o15) and (((o13 <= last4) and
    (last4 <= o12)) and
    (exists s3:(int,character__init_wrapper) farray. ((s3 = to_array1({
    elts1 = (s2[last4 <- { rec__value = o16; us_attr__init = true }]); rt1 =
    (of_array1(s2, o13, o12)).rt1 })) and (let o17 = (last4 - 1) : int in
    (in_range1(o17) and
    (exists last5:int. ((last5 = o17) and
    (exists w2:t. ((w2 = udiv(w1, rliteral10)) and ((not (w2 = rliteral)) and
    (exists o18:int. ((to_rep1(s__last) = o18) and
    (exists o19:int. ((to_rep1(s__first) = o19) and (let o20 = urem(w2,
    rliteral10) : t in (let o21 = char_of_byte_10(o20) : int in
    ((in_range4(o21) and
    (o21 = (if (o20 = rliteral) then 48 else (if (o20 = rliteral1) then 49 else (if (o20 = rliteral2) then 50 else (if (o20 = rliteral3) then 51 else (if (o20 = rliteral4) then 52 else (if (o20 = rliteral5) then 53 else (if (o20 = rliteral6) then 54 else (if (o20 = rliteral7) then 55 else (if (o20 = rliteral8) then 56 else 57))))))))))) and
    (exists o22:character. ((to_rep(o22) = o21) and (((o19 <= last5) and
    (last5 <= o18)) and ((s1 = to_array1({ elts1 = (s3[last5 <- {
    rec__value = o22; us_attr__init = true }]); rt1 = (of_array1(s3, o19,
    o18)).rt1 })) and (let o23 = (last5 - 1) : int in (in_range1(o23) and
    ((last3 = o23) and
    (exists w3:t. ((w3 = udiv(w2, rliteral10)) and (not (w3 = rliteral)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) or
  (exists o4:int. ((to_rep1(s__last) = o4) and
  (exists o5:int. ((to_rep1(s__first) = o5) and
  (exists o6:int. ((to_rep1(s__last) = o6) and
  (exists o7:int. ((to_rep1(s__first) = o7) and (let o8 = urem(w, rliteral10)
  : t in (let o9 = char_of_byte_10(o8) : int in ((in_range4(o9) and
  (o9 = (if (o8 = rliteral) then 48 else (if (o8 = rliteral1) then 49 else (if (o8 = rliteral2) then 50 else (if (o8 = rliteral3) then 51 else (if (o8 = rliteral4) then 52 else (if (o8 = rliteral5) then 53 else (if (o8 = rliteral6) then 54 else (if (o8 = rliteral7) then 55 else (if (o8 = rliteral8) then 56 else 57))))))))))) and
  (exists o10:character. ((to_rep(o10) = o9) and (((o7 <= last2) and
  (last2 <= o6)) and
  (exists s2:(int,character__init_wrapper) farray. ((s2 = to_array1({ elts1 =
  (s[last2 <- { rec__value = o10; us_attr__init = true }]); rt1 =
  (of_array1(s, o7, o6)).rt1 })) and (let o11 = (last2 - 1) : int in
  (in_range1(o11) and
  (exists last4:int. ((last4 = o11) and
  (exists w1:t. ((w1 = udiv(w, rliteral10)) and
  (if (w1 = rliteral) then ((s1 = s2) and
  (last3 = last4)) else (exists o12:int. ((to_rep1(s__last) = o12) and
                        (exists o13:int. ((to_rep1(s__first) = o13) and
                        (let o14 = urem(w1, rliteral10) : t in (let o15 =
                        char_of_byte_10(o14) : int in ((in_range4(o15) and
                        (o15 = (if (o14 = rliteral) then 48 else (if (o14 = rliteral1) then 49 else (if (o14 = rliteral2) then 50 else (if (o14 = rliteral3) then 51 else (if (o14 = rliteral4) then 52 else (if (o14 = rliteral5) then 53 else (if (o14 = rliteral6) then 54 else (if (o14 = rliteral7) then 55 else (if (o14 = rliteral8) then 56 else 57))))))))))) and
                        (exists o16:character. ((to_rep(o16) = o15) and
                        (((o13 <= last4) and (last4 <= o12)) and
                        (exists s3:(int,character__init_wrapper) farray.
                        ((s3 = to_array1({ elts1 = (s2[last4 <- {
                        rec__value = o16; us_attr__init = true }]); rt1 =
                        (of_array1(s2, o13, o12)).rt1 })) and (let o17 =
                        (last4 - 1) : int in (in_range1(o17) and
                        (exists last5:int. ((last5 = o17) and
                        (exists w2:t. ((w2 = udiv(w1, rliteral10)) and
                        (if (w2 = rliteral) then ((s1 = s3) and
                        (last3 = last5)) else (exists o18:int.
                                              ((to_rep1(s__last) = o18) and
                                              (exists o19:int.
                                              ((to_rep1(s__first) = o19) and
                                              (let o20 = urem(w2, rliteral10)
                                              : t in (let o21 =
                                              char_of_byte_10(o20) : int in
                                              ((in_range4(o21) and
                                              (o21 = (if (o20 = rliteral) then 48 else (if (o20 = rliteral1) then 49 else (if (o20 = rliteral2) then 50 else (if (o20 = rliteral3) then 51 else (if (o20 = rliteral4) then 52 else (if (o20 = rliteral5) then 53 else (if (o20 = rliteral6) then 54 else (if (o20 = rliteral7) then 55 else (if (o20 = rliteral8) then 56 else 57))))))))))) and
                                              (exists o22:character.
                                              ((to_rep(o22) = o21) and
                                              (((o19 <= last5) and
                                              (last5 <= o18)) and
                                              ((s1 = to_array1({ elts1 =
                                              (s3[last5 <- { rec__value =
                                              o22; us_attr__init = true }]);
                                              rt1 = (of_array1(s3, o19,
                                              o18)).rt1 })) and (let o23 =
                                              (last5 - 1) : int in
                                              (in_range1(o23) and
                                              ((last3 = o23) and
                                              (exists w3:t. ((w3 = udiv(w2,
                                              rliteral10)) and
                                              (w3 = rliteral)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ->
  (uge(v, rliteral10) -> (to_rep((to_array((let temp___727 =
  (let temp___725 = (last3 + 1) : int in of_array1(s1, temp___725, last2))
  : us_t1 in of_array(convert(to_array1(temp___727)), first(temp___727),
  last1(temp___727))))[(last((let temp___727 = (let temp___725 = (last3 + 1)
  : int in of_array1(s1, temp___725, last2)) : us_t1 in
  of_array(convert(to_array1(temp___727)), first(temp___727),
  last1(temp___727)))) - 1)])) = char_of_byte_10(urem(udiv(v, rliteral10),
  rliteral10))))))))))))))))))))
