;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-sort set_length 0)

;; "set_length'int"
(declare-fun set_lengthqtint (set_length) Int)

;; "set_length'axiom"
(assert
  (forall ((i set_length))
    (and (<= 0 (set_lengthqtint i)) (<= (set_lengthqtint i) 10))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 10)))

;; "to_rep"
(define-fun to_rep ((x set_length)) Int
  (set_lengthqtint x))

;; "of_rep"
(declare-fun of_rep (Int) set_length)

;; "inversion_axiom"
(assert
  (forall ((x set_length))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x set_length)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-sort element_t 0)

;; "element_t'int"
(declare-fun element_tqtint (element_t) Int)

;; "element_t'axiom"
(assert
  (forall ((i element_t))
    (and (<= (- 1) (element_tqtint i)) (<= (element_tqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= (- 1) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x element_t)) Int
  (element_tqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) element_t)

;; "inversion_axiom"
(assert
  (forall ((x element_t))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x element_t))
    (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__natural_set__t__len set_length)(rec__natural_set__t__m (Array Int element_t))))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const natural_set__t__len__first__bit Int)

(declare-const natural_set__t__len__last__bit Int)

(declare-const natural_set__t__len__position Int)

;; "natural_set__t__len__first__bit_axiom"
(assert (<= 0 natural_set__t__len__first__bit))

;; "natural_set__t__len__last__bit_axiom"
(assert (< natural_set__t__len__first__bit natural_set__t__len__last__bit))

;; "natural_set__t__len__position_axiom"
(assert (<= 0 natural_set__t__len__position))

(declare-const natural_set__t__m__first__bit Int)

(declare-const natural_set__t__m__last__bit Int)

(declare-const natural_set__t__m__position Int)

;; "natural_set__t__m__first__bit_axiom"
(assert (<= 0 natural_set__t__m__first__bit))

;; "natural_set__t__m__last__bit_axiom"
(assert (< natural_set__t__m__first__bit natural_set__t__m__last__bit))

;; "natural_set__t__m__position_axiom"
(assert (<= 0 natural_set__t__m__position))

(declare-const dummy us_rep)

;; "valid"
(define-fun valid ((param__s us_rep)) Bool
  (and (ite (forall ((i Int))
              (=>
                (and
                  (<= 1 i)
                  (<= i (to_rep
                          (rec__natural_set__t__len
                            (us_split_fields1 param__s)))))
                (in_range
                  (to_rep1
                    (let ((temp___170 (rec__natural_set__t__m
                                        (us_split_fields1 param__s))))
                      (select temp___170 i))))))
         true
         false) (ite (forall ((i Int))
                       (=>
                         (and
                           (<= (+ (to_rep
                                    (rec__natural_set__t__len
                                      (us_split_fields1 param__s))) 1) i)
                           (<= i 10))
                         (= (to_rep1
                              (let ((temp___172 (rec__natural_set__t__m
                                                  (us_split_fields1 param__s))))
                                (select temp___172 i))) (- 1))))
                  true
                  false)))

;; "full"
(declare-fun full (us_rep) Bool)

;; "members"
(declare-fun members (us_rep) Int)

;; "members__function_guard"
(declare-fun members__function_guard (Int
  us_rep) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_212 us_rep) (temp___is_init_208 Bool) (temp___skip_constant_209 Bool) (temp___do_toplevel_210 Bool) (temp___do_typ_inv_211 Bool)) Bool
  true)

;; "contains"
(define-fun contains ((param__s us_rep) (param__value Int)) Bool
  (ite (exists ((i Int))
         (and
           (and
             (<= 1 i)
             (<= i (to_rep
                     (rec__natural_set__t__len (us_split_fields1 param__s)))))
           (= (to_rep1
                (let ((temp___176 (rec__natural_set__t__m
                                    (us_split_fields1 param__s))))
                  (select temp___176 i))) param__value)))
    true
    false))

(declare-const value Int)

;; "members__post_axiom"
(assert
  (forall ((param__s us_rep))
    (! (=>
         (dynamic_invariant param__s true false true true)
         (let ((result (members param__s)))
           (=>
             (members__function_guard result param__s)
             (and (and (<= 0 result) (<= result 10)) (in_range result))))) :pattern (
    (members
      param__s)) )))

;; "members__def_axiom"
(assert
  (forall ((param__s us_rep))
    (! (= (members param__s) (to_rep
                               (rec__natural_set__t__len
                                 (us_split_fields1 param__s)))) :pattern (
    (members
      param__s)) )))

;; "full__post_axiom"
(assert true)

;; "full__def_axiom"
(assert
  (forall ((param__s us_rep))
    (! (and
         (members__function_guard (members param__s) param__s)
         (=
           (= (full param__s) true)
           (= (let ((temp___229qtunused param__s)) (members param__s)) 10))) :pattern (
    (full
      param__s)) )))

;; Goal "def'vc"
;; File "natural_set.ads", line 36, characters 0-0
(assert
  (not
  (forall ((s__split_fields us_split_fields))
    (=>
      (dynamic_invariant (us_repqtmk s__split_fields) true false true true)
      (=>
        (in_range value)
        (=>
          (and
            (= (valid (us_repqtmk s__split_fields)) true)
            (not (= (full (us_repqtmk s__split_fields)) true)))
          (let ((o value))
            (let ((o1 (contains (us_repqtmk s__split_fields) o)))
              (=>
                (=
                  (= o1 true)
                  (exists ((i Int))
                    (and
                      (and
                        (<= 1 i)
                        (<= i (to_rep
                                (rec__natural_set__t__len s__split_fields))))
                      (= (to_rep1
                           (select (rec__natural_set__t__m s__split_fields) i)) o))))
                (forall ((spark__branch Bool))
                  (=>
                    (= spark__branch (ite (= o1 true) false true))
                    (=>
                      (= spark__branch true)
                      (forall ((o2 Int))
                        (=>
                          (= (to_rep
                               (rec__natural_set__t__len s__split_fields)) o2)
                          (let ((o3 (+ o2 1)))
                            (=>
                              (in_range1 o3)
                              (forall ((o4 set_length))
                                (=>
                                  (= (to_rep o4) o3)
                                  (forall ((s__split_fields1 us_split_fields))
                                    (=>
                                      (= s__split_fields1 (us_split_fieldsqtmk
                                                            o4
                                                            (rec__natural_set__t__m
                                                              s__split_fields)))
                                      (forall ((o5 element_t))
                                        (=>
                                          (= (to_rep1 o5) value)
                                          (forall ((temp___268 Int))
                                            (=>
                                              (= (to_rep
                                                   (rec__natural_set__t__len
                                                     s__split_fields1)) temp___268)
                                              (=>
                                                (and
                                                  (<= 1 temp___268)
                                                  (<= temp___268 10))
                                                (forall ((s__split_fields2 us_split_fields))
                                                  (=>
                                                    (= s__split_fields2 
                                                    (us_split_fieldsqtmk
                                                      (rec__natural_set__t__len
                                                        s__split_fields1)
                                                      (store (rec__natural_set__t__m
                                                               s__split_fields1) temp___268 o5)))
                                                    (= (contains
                                                         (us_repqtmk
                                                           s__split_fields2)
                                                         value) true))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
