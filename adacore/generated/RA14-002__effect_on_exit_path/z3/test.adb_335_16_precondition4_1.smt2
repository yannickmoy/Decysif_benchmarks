;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const two_power_size_minus_one Int)

(declare-datatypes ()
  ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))

(declare-sort os_mbx_index_t 0)

;; "in_range"
(define-fun in_range ((x (_ BitVec 8))) Bool
  (and (bvule #x00 x) (bvule x #x02)))

;; "to_rep"
(declare-fun to_rep (os_mbx_index_t) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep ((_ BitVec 8)) os_mbx_index_t)

;; "inversion_axiom"
(assert
  (forall ((x os_mbx_index_t))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x os_mbx_index_t))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (let ((y (bvurem x #x03)))
         (=> (in_range y) (= (to_rep (of_rep x)) y))) :pattern ((to_rep
                                                                  (of_rep x))) )))

(declare-sort os_mbx_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; "in_range"
(define-fun in_range1 ((x (_ BitVec 8))) Bool
  (and (bvule #x00 x) (bvule x #x03)))

;; "to_rep"
(declare-fun to_rep1 (os_mbx_count_t) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 8)) os_mbx_count_t)

;; "inversion_axiom"
(assert
  (forall ((x os_mbx_count_t))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x os_mbx_count_t))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort os_task_id_t 0)

;; "os_task_id_t'int"
(declare-fun os_task_id_tqtint (os_task_id_t) Int)

;; "os_task_id_t'axiom"
(assert
  (forall ((i os_task_id_t))
    (and (<= (- 1) (os_task_id_tqtint i)) (<= (os_task_id_tqtint i) 4))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= (- 1) x) (<= x 4)))

;; "to_rep"
(define-fun to_rep2 ((x os_task_id_t)) Int
  (os_task_id_tqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) os_task_id_t)

;; "inversion_axiom"
(assert
  (forall ((x os_task_id_t))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x os_task_id_t))
    (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-sort os_mbx_msg_t 0)

;; "os_mbx_msg_t'int"
(declare-fun os_mbx_msg_tqtint (os_mbx_msg_t) Int)

;; "os_mbx_msg_t'axiom"
(assert
  (forall ((i os_mbx_msg_t))
    (and (<= 0 (os_mbx_msg_tqtint i)) (<= (os_mbx_msg_tqtint i) 4294967295))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 4294967295)))

;; "to_rep"
(define-fun to_rep3 ((x os_mbx_msg_t)) Int
  (os_mbx_msg_tqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) os_mbx_msg_t)

;; "inversion_axiom"
(assert
  (forall ((x os_mbx_msg_t))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x os_mbx_msg_t))
    (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__test__os_mbx_entry_t__sender_id os_task_id_t)(rec__test__os_mbx_entry_t__msg os_mbx_msg_t)))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const test__os_mbx_entry_t__sender_id__first__bit Int)

(declare-const test__os_mbx_entry_t__sender_id__last__bit Int)

(declare-const test__os_mbx_entry_t__sender_id__position Int)

;; "test__os_mbx_entry_t__sender_id__first__bit_axiom"
(assert (<= 0 test__os_mbx_entry_t__sender_id__first__bit))

;; "test__os_mbx_entry_t__sender_id__last__bit_axiom"
(assert
  (< test__os_mbx_entry_t__sender_id__first__bit test__os_mbx_entry_t__sender_id__last__bit))

;; "test__os_mbx_entry_t__sender_id__position_axiom"
(assert (<= 0 test__os_mbx_entry_t__sender_id__position))

(declare-const test__os_mbx_entry_t__msg__first__bit Int)

(declare-const test__os_mbx_entry_t__msg__last__bit Int)

(declare-const test__os_mbx_entry_t__msg__position Int)

;; "test__os_mbx_entry_t__msg__first__bit_axiom"
(assert (<= 0 test__os_mbx_entry_t__msg__first__bit))

;; "test__os_mbx_entry_t__msg__last__bit_axiom"
(assert
  (< test__os_mbx_entry_t__msg__first__bit test__os_mbx_entry_t__msg__last__bit))

;; "test__os_mbx_entry_t__msg__position_axiom"
(assert (<= 0 test__os_mbx_entry_t__msg__position))

(declare-const dummy us_rep)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__test__os_mbx_t__head os_mbx_index_t)(rec__test__os_mbx_t__count os_mbx_count_t)(rec__test__os_mbx_t__mbx_array (Array (_ BitVec 8) us_rep))))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const test__os_mbx_t__head__first__bit Int)

(declare-const test__os_mbx_t__head__last__bit Int)

(declare-const test__os_mbx_t__head__position Int)

;; "test__os_mbx_t__head__first__bit_axiom"
(assert (<= 0 test__os_mbx_t__head__first__bit))

;; "test__os_mbx_t__head__last__bit_axiom"
(assert (< test__os_mbx_t__head__first__bit test__os_mbx_t__head__last__bit))

;; "test__os_mbx_t__head__position_axiom"
(assert (<= 0 test__os_mbx_t__head__position))

(declare-const test__os_mbx_t__count__first__bit Int)

(declare-const test__os_mbx_t__count__last__bit Int)

(declare-const test__os_mbx_t__count__position Int)

;; "test__os_mbx_t__count__first__bit_axiom"
(assert (<= 0 test__os_mbx_t__count__first__bit))

;; "test__os_mbx_t__count__last__bit_axiom"
(assert
  (< test__os_mbx_t__count__first__bit test__os_mbx_t__count__last__bit))

;; "test__os_mbx_t__count__position_axiom"
(assert (<= 0 test__os_mbx_t__count__position))

(declare-const test__os_mbx_t__mbx_array__first__bit Int)

(declare-const test__os_mbx_t__mbx_array__last__bit Int)

(declare-const test__os_mbx_t__mbx_array__position Int)

;; "test__os_mbx_t__mbx_array__first__bit_axiom"
(assert (<= 0 test__os_mbx_t__mbx_array__first__bit))

;; "test__os_mbx_t__mbx_array__last__bit_axiom"
(assert
  (< test__os_mbx_t__mbx_array__first__bit test__os_mbx_t__mbx_array__last__bit))

;; "test__os_mbx_t__mbx_array__position_axiom"
(assert (<= 0 test__os_mbx_t__mbx_array__position))

(declare-const dummy1 us_rep1)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int us_rep1))))))

;; "os_mbx_get_mbx_count"
(define-fun os_mbx_get_mbx_count ((param__task_id Int) (Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1))) (_ BitVec 8)
  (to_rep1
    (rec__test__os_mbx_t__count
      (us_split_fields3
        (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))))

;; "os_ghost_mbx_are_well_formed"
(declare-fun os_ghost_mbx_are_well_formed ((Array Int us_rep1)) Bool)

;; "oadd"
(define-fun oadd ((param__left (_ BitVec 8)) (param__right (_ BitVec 8))) (_ BitVec 8)
  (let ((temp___172 (bvadd param__left (bvurem param__right #x03))))
    (ite (bvule (bvsub #x03 param__left) (bvurem param__right #x03))
      (bvsub temp___172 #x03)
      temp___172)))

;; "os_mbx_get_mbx_head"
(define-fun os_mbx_get_mbx_head ((param__task_id Int) (Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1))) (_ BitVec 8)
  (to_rep
    (rec__test__os_mbx_t__head
      (us_split_fields3
        (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 4)))

;; "os_ghost_task_mbx_are_well_formed"
(define-fun os_ghost_task_mbx_are_well_formed ((param__task_id Int) (Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1))) Bool
  (ite (forall ((index (_ BitVec 8)))
         (=>
           (and (bvule #x00 index) (bvule index #x02))
           (ite (bvuge index (os_mbx_get_mbx_count
                               param__task_id
                               Test__os_task_mbx_rw___os_task_mbx_rw___))
             (= (to_rep2
                  (rec__test__os_mbx_entry_t__sender_id
                    (us_split_fields1
                      (let ((temp___175 (rec__test__os_mbx_t__mbx_array
                                          (us_split_fields3
                                            (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))))
                        (select temp___175 (oadd
                                             (os_mbx_get_mbx_head
                                               param__task_id
                                               Test__os_task_mbx_rw___os_task_mbx_rw___)
                                             index)))))) (- 1))
             (in_range4
               (to_rep2
                 (rec__test__os_mbx_entry_t__sender_id
                   (us_split_fields1
                     (let ((temp___176 (rec__test__os_mbx_t__mbx_array
                                         (us_split_fields3
                                           (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))))
                       (select temp___176 (oadd
                                            (os_mbx_get_mbx_head
                                              param__task_id
                                              Test__os_task_mbx_rw___os_task_mbx_rw___)
                                            index))))))))))
    true
    false))

(declare-const two_power_size_minus_one1 Int)

(declare-sort os_mbx_mask_t 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; "to_rep"
(declare-fun to_rep4 (os_mbx_mask_t) (_ BitVec 32))

;; "of_rep"
(declare-fun of_rep4 ((_ BitVec 32)) os_mbx_mask_t)

;; "inversion_axiom"
(assert
  (forall ((x os_mbx_mask_t))
    (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 32)))
    (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__test__os_task_rw_t__next os_task_id_t)(rec__test__os_task_rw_t__prev os_task_id_t)(rec__test__os_task_rw_t__mbx_waiting_mask os_mbx_mask_t)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const test__os_task_rw_t__next__first__bit Int)

(declare-const test__os_task_rw_t__next__last__bit Int)

(declare-const test__os_task_rw_t__next__position Int)

;; "test__os_task_rw_t__next__first__bit_axiom"
(assert (<= 0 test__os_task_rw_t__next__first__bit))

;; "test__os_task_rw_t__next__last__bit_axiom"
(assert
  (< test__os_task_rw_t__next__first__bit test__os_task_rw_t__next__last__bit))

;; "test__os_task_rw_t__next__position_axiom"
(assert (<= 0 test__os_task_rw_t__next__position))

(declare-const test__os_task_rw_t__prev__first__bit Int)

(declare-const test__os_task_rw_t__prev__last__bit Int)

(declare-const test__os_task_rw_t__prev__position Int)

;; "test__os_task_rw_t__prev__first__bit_axiom"
(assert (<= 0 test__os_task_rw_t__prev__first__bit))

;; "test__os_task_rw_t__prev__last__bit_axiom"
(assert
  (< test__os_task_rw_t__prev__first__bit test__os_task_rw_t__prev__last__bit))

;; "test__os_task_rw_t__prev__position_axiom"
(assert (<= 0 test__os_task_rw_t__prev__position))

(declare-const test__os_task_rw_t__mbx_waiting_mask__first__bit Int)

(declare-const test__os_task_rw_t__mbx_waiting_mask__last__bit Int)

(declare-const test__os_task_rw_t__mbx_waiting_mask__position Int)

;; "test__os_task_rw_t__mbx_waiting_mask__first__bit_axiom"
(assert (<= 0 test__os_task_rw_t__mbx_waiting_mask__first__bit))

;; "test__os_task_rw_t__mbx_waiting_mask__last__bit_axiom"
(assert
  (< test__os_task_rw_t__mbx_waiting_mask__first__bit test__os_task_rw_t__mbx_waiting_mask__last__bit))

;; "test__os_task_rw_t__mbx_waiting_mask__position_axiom"
(assert (<= 0 test__os_task_rw_t__mbx_waiting_mask__position))

(declare-const dummy2 us_rep2)

(declare-datatypes ()
  ((map__ref1 (map__refqtmk1 (map__content1 (Array Int us_rep2))))))

;; "os_mbx_is_empty"
(define-fun os_mbx_is_empty ((param__task_id Int) (Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1))) Bool
  (= (to_rep1
       (rec__test__os_mbx_t__count
         (us_split_fields3
           (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))) #x00))

;; "os_mbx_get_mbx_entry_sender"
(declare-fun os_mbx_get_mbx_entry_sender (Int
  (_ BitVec 8)
  (Array Int us_rep1)) Int)

;; "os_mbx_get_mbx_entry_sender__function_guard"
(declare-fun os_mbx_get_mbx_entry_sender__function_guard (Int
  Int
  (_ BitVec 8)
  (Array Int us_rep1)) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_324 us_rep1) (temp___is_init_320 Bool) (temp___skip_constant_321 Bool) (temp___do_toplevel_322 Bool) (temp___do_typ_inv_323 Bool)) Bool
  true)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size1 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const current Int)

(declare-const r25b (_ BitVec 8))

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= (- 5) x) (<= x 0)))

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "os_ghost_mbx_are_well_formed__post_axiom"
(assert true)

;; "os_ghost_mbx_are_well_formed__def_axiom"
(assert
  (forall ((Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1)))
    (! (=
         (= (os_ghost_mbx_are_well_formed
              Test__os_task_mbx_rw___os_task_mbx_rw___) true)
         (forall ((task_id Int))
           (=>
             (and (<= 0 task_id) (<= task_id 4))
             (= (os_ghost_task_mbx_are_well_formed
                  task_id
                  Test__os_task_mbx_rw___os_task_mbx_rw___) true)))) :pattern (
    (os_ghost_mbx_are_well_formed
      Test__os_task_mbx_rw___os_task_mbx_rw___)) )))

;; "os_mbx_get_mbx_entry_sender__post_axiom"
(assert
  (forall ((param__task_id Int))
    (forall ((param__index (_ BitVec 8)))
      (forall ((Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1)))
        (! (=>
             (and
               (and
                 (and (in_range4 param__task_id) (in_range1 param__index))
                 (forall ((temp___386 Int))
                   (=>
                     (and (<= 0 temp___386) (<= temp___386 4))
                     (dynamic_invariant
                       (select Test__os_task_mbx_rw___os_task_mbx_rw___ temp___386)
                       true
                       false
                       true
                       true))))
               (in_range4
                 (to_rep2
                   (rec__test__os_mbx_entry_t__sender_id
                     (us_split_fields1
                       (let ((temp___382 (rec__test__os_mbx_t__mbx_array
                                           (us_split_fields3
                                             (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))))
                         (select temp___382 (oadd
                                              (os_mbx_get_mbx_head
                                                param__task_id
                                                Test__os_task_mbx_rw___os_task_mbx_rw___)
                                              param__index))))))))
             (let ((result (os_mbx_get_mbx_entry_sender
                             param__task_id
                             param__index
                             Test__os_task_mbx_rw___os_task_mbx_rw___)))
               (=>
                 (os_mbx_get_mbx_entry_sender__function_guard
                   result
                   param__task_id
                   param__index
                   Test__os_task_mbx_rw___os_task_mbx_rw___)
                 (in_range4 result)))) :pattern ((os_mbx_get_mbx_entry_sender
                                                   param__task_id
                                                   param__index
                                                   Test__os_task_mbx_rw___os_task_mbx_rw___)) )))))

;; "os_mbx_get_mbx_entry_sender__def_axiom"
(assert
  (forall ((param__task_id Int))
    (forall ((param__index (_ BitVec 8)))
      (forall ((Test__os_task_mbx_rw___os_task_mbx_rw___ (Array Int us_rep1)))
        (! (= (os_mbx_get_mbx_entry_sender
                param__task_id
                param__index
                Test__os_task_mbx_rw___os_task_mbx_rw___) (to_rep2
                                                            (rec__test__os_mbx_entry_t__sender_id
                                                              (us_split_fields1
                                                                (let ((temp___387 
                                                                  (rec__test__os_mbx_t__mbx_array
                                                                    (us_split_fields3
                                                                    (select Test__os_task_mbx_rw___os_task_mbx_rw___ param__task_id)))))
                                                                  (select temp___387 
                                                                  (oadd
                                                                    (os_mbx_get_mbx_head
                                                                    param__task_id
                                                                    Test__os_task_mbx_rw___os_task_mbx_rw___)
                                                                    param__index))))))) :pattern (
        (os_mbx_get_mbx_entry_sender
          param__task_id
          param__index
          Test__os_task_mbx_rw___os_task_mbx_rw___)) )))))

(declare-const rliteral os_task_id_t)

;; "rliteral_axiom"
(assert (= (os_task_id_tqtint rliteral) (- 1)))

(declare-const rliteral1 os_mbx_msg_t)

;; "rliteral_axiom"
(assert (= (os_mbx_msg_tqtint rliteral1) 0))

(declare-const os_task_mbx_rw (Array Int us_rep1))

(declare-const status Int)

(declare-const mbx_entry__split_fields us_split_fields)

(declare-const os_task_list_rw (Array Int us_rep2))

(declare-const os_task_current Int)

;; "os_task_current'unused"
(define-fun os_task_currentqtunused () int__ref
  (int__refqtmk os_task_current))

;; "os_task_list_rw'unused"
(define-fun os_task_list_rwqtunused () map__ref1
  (map__refqtmk1 os_task_list_rw))

;; "mbx_entry__split_fields'unused"
(define-fun mbx_entry__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk mbx_entry__split_fields))

;; "os_task_mbx_rw'unused"
(define-fun os_task_mbx_rwqtunused () map__ref
  (map__refqtmk os_task_mbx_rw))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (forall ((temp___479 Int))
    (=>
      (and (<= 0 temp___479) (<= temp___479 4))
      (dynamic_invariant
        (select os_task_mbx_rw temp___479)
        true
        false
        true
        true))))

;; "Assume"
(assert (in_range4 os_task_current))

;; "Assume"
(assert (in_range5 status))

;; "Assume"
(assert true)

;; "Assume"
(assert (= (os_ghost_mbx_are_well_formed os_task_mbx_rw) true))

;; "test__os_mbx_receive__current__assume"
(define-fun test__os_mbx_receive__current__assume () Int
  os_task_current)

;; "H"
(assert (in_range4 test__os_mbx_receive__current__assume))

;; "H"
(assert (= test__os_mbx_receive__current__assume os_task_current))

;; "os_sched_get_current_task_id'result'unused"
(define-fun os_sched_get_current_task_idqtresultqtunused () Int
  test__os_mbx_receive__current__assume)

;; "Assume"
(assert (= test__os_mbx_receive__current__assume current))

;; "Assume"
(assert (in_range4 current))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields
  mbx_entry__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep
  (us_repqtmk mbx_entry__split_fields))

;; "_q 'unused"
(define-fun usq_qtunused () us_split_fields
  mbx_entry__split_fields)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields
  mbx_entry__split_fields)

;; "o"
(define-fun o () os_mbx_msg_t
  (rec__test__os_mbx_entry_t__msg mbx_entry__split_fields))

;; "rec__test__os_mbx_entry_t__msg'result'unused"
(define-fun rec__test__os_mbx_entry_t__msgqtresultqtunused () os_mbx_msg_t
  o)

;; "o"
(define-fun o1 () us_split_fields
  (us_split_fieldsqtmk rliteral o))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep
  (us_repqtmk o1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields
  o1)

(declare-const mbx_entry__split_fields1 us_split_fields)

;; "mbx_entry__split_fields'unused"
(define-fun mbx_entry__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk mbx_entry__split_fields1))

;; "H"
(assert (= mbx_entry__split_fields1 o1))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields
  mbx_entry__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep
  (us_repqtmk mbx_entry__split_fields1))

;; "_q 'unused"
(define-fun usq_qtunused1 () us_split_fields
  mbx_entry__split_fields1)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields
  mbx_entry__split_fields1)

;; "o"
(define-fun o2 () os_task_id_t
  (rec__test__os_mbx_entry_t__sender_id mbx_entry__split_fields1))

;; "rec__test__os_mbx_entry_t__sender_id'result'unused"
(define-fun rec__test__os_mbx_entry_t__sender_idqtresultqtunused () os_task_id_t
  o2)

;; "o"
(define-fun o3 () us_split_fields
  (us_split_fieldsqtmk o2 rliteral1))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields
  o3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep
  (us_repqtmk o3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields
  o3)

(declare-const mbx_entry__split_fields2 us_split_fields)

;; "mbx_entry__split_fields'unused"
(define-fun mbx_entry__split_fieldsqtunused2 () us_split_fields__ref
  (us_split_fields__refqtmk mbx_entry__split_fields2))

;; "H"
(assert (= mbx_entry__split_fields2 o3))

;; "o"
(define-fun o4 () Int
  current)

;; "o"
(define-fun o5 () Bool
  (os_mbx_is_empty o4 os_task_mbx_rw))

;; "Ensures"
(assert
  (=
    (= o5 true)
    (= (to_rep1
         (rec__test__os_mbx_t__count
           (us_split_fields3 (select os_task_mbx_rw o4)))) #x00)))

;; "os_mbx_is_empty'result'unused"
(define-fun os_mbx_is_emptyqtresultqtunused () Bool
  o5)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o5))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

(declare-const status1 Int)

;; "status'unused"
(define-fun statusqtunused () int__ref
  (int__refqtmk status1))

;; "H"
(assert (= status1 (- 4)))

;; "o"
(define-fun o6 () Int
  current)

;; "o"
(define-fun o7 () (_ BitVec 8)
  (os_mbx_get_mbx_count o6 os_task_mbx_rw))

;; "H"
(assert (in_range1 o7))

;; "H"
(assert
  (= o7 (to_rep1
          (rec__test__os_mbx_t__count
            (us_split_fields3 (select os_task_mbx_rw o6))))))

;; "os_mbx_get_mbx_count'result'unused"
(define-fun os_mbx_get_mbx_countqtresultqtunused () (_ BitVec 8)
  o7)

;; "test__os_mbx_receive__L_1__R25b__assume"
(define-fun test__os_mbx_receive__L_1__R25b__assume () (_ BitVec 8)
  (bvsub o7 #x01))

;; "sub'result'unused"
(define-fun subqtresultqtunused () (_ BitVec 8)
  test__os_mbx_receive__L_1__R25b__assume)

;; "Assume"
(assert (= test__os_mbx_receive__L_1__R25b__assume r25b))

;; "Assume"
(assert true)

;; "temp___468"
(define-fun temp___468 () (_ BitVec 8)
  r25b)

(declare-const iterator (_ BitVec 8))

;; "iterator'unused"
(define-fun iteratorqtunused () t__ref
  (t__refqtmk iterator))

;; "H"
(assert (= iterator #x00))

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused () (_ BitVec 8)
  iterator)

;; "o"
(define-fun o8 () Bool
  (ite (bvule iterator temp___468) true false))

;; "ule'result'unused"
(define-fun uleqtresultqtunused () Bool
  o8)

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused1 () (_ BitVec 8)
  iterator)

;; "o"
(define-fun o9 () Bool
  (ite (bvule #x00 iterator) true false))

;; "ule'result'unused"
(define-fun uleqtresultqtunused1 () Bool
  o9)

;; "o"
(define-fun o10 () Bool
  (and o9 o8))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o10)

;; "H"
(assert (= o10 true))

;; "temp___loop_entry_473'unused"
(define-fun temp___loop_entry_473qtunused () (Array Int us_rep1)
  os_task_mbx_rw)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int us_rep1)
  os_task_mbx_rw)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields
  mbx_entry__split_fields2)

;; "temp___loop_entry_474'unused"
(define-fun temp___loop_entry_474qtunused () us_rep
  (us_repqtmk mbx_entry__split_fields2))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep
  (us_repqtmk mbx_entry__split_fields2))

;; "temp___loop_entry_472'unused"
(define-fun temp___loop_entry_472qtunused () Int
  status1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  status1)

;; "o"
(define-fun o11 () Int
  current)

;; "o"
(define-fun o12 () Bool
  (os_mbx_is_empty o11 os_task_mbx_rw))

;; "Ensures"
(assert
  (=
    (= o12 true)
    (= (to_rep1
         (rec__test__os_mbx_t__count
           (us_split_fields3 (select os_task_mbx_rw o11)))) #x00)))

;; "os_mbx_is_empty'result'unused"
(define-fun os_mbx_is_emptyqtresultqtunused1 () Bool
  o12)

;; "o"
(define-fun o13 () Bool
  (os_ghost_mbx_are_well_formed os_task_mbx_rw))

;; "Ensures"
(assert
  (=
    (= o13 true)
    (forall ((task_id Int))
      (=>
        (and (<= 0 task_id) (<= task_id 4))
        (= (os_ghost_task_mbx_are_well_formed task_id os_task_mbx_rw) true)))))

;; "os_ghost_mbx_are_well_formed'result'unused"
(define-fun os_ghost_mbx_are_well_formedqtresultqtunused () Bool
  o13)

;; "andb'result'unused"
(define-fun andbqtresultqtunused1 () Bool
  (and o13 (ite (= o12 true) false true)))

(declare-const os_task_mbx_rw1 (Array Int us_rep1))

(declare-const status2 Int)

(declare-const mbx_entry__split_fields3 us_split_fields)

(declare-const iterator1 (_ BitVec 8))

;; "iterator'unused"
(define-fun iteratorqtunused1 () t__ref
  (t__refqtmk iterator1))

;; "os_task_mbx_rw'unused"
(define-fun os_task_mbx_rwqtunused1 () map__ref
  (map__refqtmk os_task_mbx_rw1))

;; "LoopInvariant"
(assert
  (and
    (= (os_ghost_mbx_are_well_formed os_task_mbx_rw1) true)
    (not (= (os_mbx_is_empty current os_task_mbx_rw1) true))))

;; "Assume"
(assert
  (= (and (ite (and
                 (and (= status2 status1) (= os_task_mbx_rw1 os_task_mbx_rw))
                 (= mbx_entry__split_fields3 mbx_entry__split_fields2))
            true
            false) (ite (and (bvule #x00 iterator1) (bvule iterator1 r25b))
                     true
                     false)) true))

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused2 () (_ BitVec 8)
  iterator1)

;; "Ensures"
(assert (in_range1 iterator1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () (_ BitVec 8)
  iterator1)

;; "o"
(define-fun o14 () Int
  current)

;; "H"
(assert
  (forall ((o15 Int))
    (os_mbx_get_mbx_entry_sender__function_guard
      (os_mbx_get_mbx_entry_sender o15 iterator1 os_task_mbx_rw1)
      o15
      iterator1
      os_task_mbx_rw1)))

;; Goal "def'vc"
;; File "test.ads", line 80, characters 0-0
(assert
  (not (<= 0 (os_mbx_get_mbx_entry_sender o14 iterator1 os_task_mbx_rw1))))

(check-sat)
