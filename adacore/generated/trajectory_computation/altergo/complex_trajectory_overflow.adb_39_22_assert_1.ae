(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 65535)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (16 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth(ones, n) = true)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic two_power_size_minus_one : int

axiom two_power_size_minus_one_val :
  (two_power_size_minus_one = pow2((16 - 1)))

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(65536 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  65536)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 16)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 65535)

logic acc : ('a,('a,bool) farray) farray, 'a -> prop

axiom acc_x :
  (forall r:('a,('a,bool) farray) farray. forall x:'a.
  ((forall y:'a. ((((r[y])[x]) = true) -> acc(r, y))) -> acc(r, x)))

axiom acc_inversion :
  (forall z:('a,('a,bool) farray) farray. forall z1:'a. (acc(z, z1) ->
  (forall y:'a. ((((z[y])[z1]) = true) -> acc(z, y)))))

predicate well_founded(r: ('a,('a,bool) farray) farray) =
  (forall x:'a. acc(r, x))

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

logic ult_closure : (t,(t,bool) farray) farray

axiom ult_closure_def :
  (forall y:t. forall y1:t. ((((ult_closure[y])[y1]) = true) <-> ult(y, y1)))

axiom ult_wf : well_founded(ult_closure)

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

logic ugt_closure : (t,(t,bool) farray) farray

axiom ugt_closure_def :
  (forall y:t. forall y1:t. ((((ugt_closure[y])[y1]) = true) <-> ugt(y, y1)))

axiom ugt_wf : well_founded(ugt_closure)

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

logic slt_closure : (t,(t,bool) farray) farray

axiom slt_closure_def :
  (forall y:t. forall y1:t. ((((slt_closure[y])[y1]) = true) <-> slt(y, y1)))

axiom slt_wf : well_founded(slt_closure)

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

logic sgt_closure : (t,(t,bool) farray) farray

axiom sgt_closure_def :
  (forall y:t. forall y1:t. ((((sgt_closure[y])[y1]) = true) <-> sgt(y, y1)))

axiom sgt_wf : well_founded(sgt_closure)

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t1

logic tqtreal : t1 -> real

logic tqtisFinite : t1 -> prop

axiom tqtaxiom1 :
  (forall x:t1. (tqtisFinite(x) ->
  (((-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0) <= tqtreal(x)) and
  (tqtreal(x) <= 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0))))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> ((real_of_int(truncate(x)) <= x) and
  (x <  real_of_int((truncate(x) + 1))))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> ((real_of_int((truncate(x) - 1)) <  x) and
  (x <= real_of_int(truncate(x))))))

axiom Real_of_truncate :
  (forall x:real. (((x - 1.0) <= real_of_int(truncate(x))) and
  (real_of_int(truncate(x)) <= (x + 1.0))))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

logic floor : real -> int

logic ceil : real -> int

axiom Floor_int : (forall i:int. (floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (ceil(real_of_int(i)) = i))

axiom Floor_down :
  (forall x:real. ((real_of_int(floor(x)) <= x) and
  (x <  real_of_int((floor(x) + 1)))))

axiom Ceil_up :
  (forall x:real. ((real_of_int((ceil(x) - 1)) <  x) and
  (x <= real_of_int(ceil(x)))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (floor(x) <= floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (ceil(x) <= ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

axiom eb_gt_1 : (1 <  11)

axiom sb_gt_1 : (1 <  53)

logic zeroF : t1

logic add : fpa_rounding_mode, t1, t1 -> t1

logic sub : fpa_rounding_mode, t1, t1 -> t1

logic mul : fpa_rounding_mode, t1, t1 -> t1

logic div : fpa_rounding_mode, t1, t1 -> t1

logic abs : t1 -> t1

logic neg : t1 -> t1

logic fma : fpa_rounding_mode, t1, t1, t1 -> t1

logic sqrt : fpa_rounding_mode, t1 -> t1

logic roundToIntegral : fpa_rounding_mode, t1 -> t1

logic min1 : t1, t1 -> t1

logic max1 : t1, t1 -> t1

logic le : t1, t1 -> prop

logic lt : t1, t1 -> prop

logic eq : t1, t1 -> prop

logic is_zero : t1 -> prop

logic is_infinite : t1 -> prop

logic is_nan : t1 -> prop

logic is_positive : t1 -> prop

logic is_negative : t1 -> prop

predicate is_not_nan(x: t1) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t1. (is_not_nan(x) <-> (not is_nan(x))))

axiom is_not_finite :
  (forall x:t1. ((not tqtisFinite(x)) <-> (is_infinite(x) or is_nan(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t1 [is_zero(x)]. (is_zero(x) <-> (tqtisFinite(x) and
  (tqtreal(x) = 0.0))))

logic of_int1 : fpa_rounding_mode, int -> t1

logic to_int1 : fpa_rounding_mode, t1 -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int1(m, 0)))

axiom max_int_spec :
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368 = (pow2(pow2((11 - 1))) - pow2((pow2((11 - 1)) - 53))))

axiom max_real_int :
  (0x1.FFFFFFFFFFFFFp1023 = real_of_int(179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

predicate in_range(x: real) = (((-0x1.FFFFFFFFFFFFFp1023) <= x) and
  (x <= 0x1.FFFFFFFFFFFFFp1023))

predicate in_int_range(i: int) =
  (((-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368) <= i) and
  (i <= 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368))

axiom is_finite : (forall x:t1. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float64(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) -> no_overflow(m,
  x)))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  (float64(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float64(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float64(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float64(Down,(-x)) = (-float64(Up,x))))

axiom Round_up_neg : (forall x:real. (float64(Up,(-x)) = (-float64(Down,x))))

axiom pow2sb : (9007199254740992 = pow2(53))

predicate in_safe_int_range(i: int) = (((-9007199254740992) <= i) and
  (i <= 9007199254740992))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float64(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t1, y: t1) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t1, y: t1) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t1. forall y:t1. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t1. forall y:t1. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((x = y) -> eq(x, y)))))

axiom eq_refl : (forall x:t1. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t1. forall y:t1. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t1. forall y:t1. forall z:t1. (eq(x, y) -> (eq(y, z) -> eq(x,
  z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) <-> (tqtreal(x) = tqtreal(y)))))

axiom lt_finite :
  (forall x:t1. forall y:t1 [lt(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> (lt(x, y) <-> (tqtreal(x) <  tqtreal(y)))))

axiom le_finite :
  (forall x:t1. forall y:t1 [le(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> (le(x, y) <-> (tqtreal(x) <= tqtreal(y)))))

axiom le_lt_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((le(x, y) and lt(y, z)) -> lt(x,
  z)))

axiom lt_le_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((lt(x, y) and le(y, z)) -> lt(x,
  z)))

axiom le_ge_asym :
  (forall x:t1. forall y:t1. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t1. forall y:t1. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t1. forall y:t1. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t1. forall y:t1. forall z:t1. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t1 [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t1 [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t1 [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t1 [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t1. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t1. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> (tqtisFinite(add(m, x, y)) and
  (tqtreal(add(m, x, y)) = float64(m,(tqtreal(x) + tqtreal(y)))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) and (tqtreal(add(m, x,
  y)) = float64(m,(tqtreal(x) + tqtreal(y))))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> (tqtisFinite(sub(m, x, y)) and
  (tqtreal(sub(m, x, y)) = float64(m,(tqtreal(x) - tqtreal(y)))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) and (tqtreal(sub(m, x,
  y)) = float64(m,(tqtreal(x) - tqtreal(y))))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> (tqtisFinite(mul(m, x, y)) and
  (tqtreal(mul(m, x, y)) = float64(m,(tqtreal(x) * tqtreal(y)))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> (tqtisFinite(x) and tqtisFinite(y))))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) and (tqtreal(mul(m, x,
  y)) = float64(m,(tqtreal(x) * tqtreal(y))))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> (tqtisFinite(div(m, x, y)) and
  (tqtreal(div(m, x, y)) = float64(m,(tqtreal(x) / tqtreal(y))))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (no_overflow(m, (tqtreal(x) / tqtreal(y))) and (tqtreal(div(m, x,
  y)) = float64(m,(tqtreal(x) / tqtreal(y)))))))))

axiom neg_finite :
  (forall x:t1 [neg(x)]. (tqtisFinite(x) -> (tqtisFinite(neg(x)) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom neg_finite_rev :
  (forall x:t1 [neg(x)]. (tqtisFinite(neg(x)) -> (tqtisFinite(x) and
  (tqtreal(neg(x)) = (-tqtreal(x))))))

axiom abs_finite :
  (forall x:t1 [abs(x)]. (tqtisFinite(x) -> (tqtisFinite(abs(x)) and
  ((tqtreal(abs(x)) = abs_real(tqtreal(x))) and is_positive(abs(x))))))

axiom abs_finite_rev :
  (forall x:t1 [abs(x)]. (tqtisFinite(abs(x)) -> (tqtisFinite(x) and
  (tqtreal(abs(x)) = abs_real(tqtreal(x))))))

axiom abs_universal : (forall x:t1 [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (tqtisFinite(fma(m, x, y, z)) -> (tqtisFinite(x) and
  (tqtisFinite(y) and tqtisFinite(z)))))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (no_overflow(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) and
  (tqtreal(fma(m, x, y,
  z)) = float64(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtisFinite(x) and ((0.0 <= tqtreal(x)) and (tqtreal(sqrt(m,
  x)) = float64(m,sqrt_real(tqtreal(x))))))))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int1(m, (i + j)), add(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int1(m, (i - j)), sub(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int1(m, (i * j)), mul(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom Min_r1 : (forall x:t1. forall y:t1. (le(y, x) -> eq(min1(x, y), y)))

axiom Min_l : (forall x:t1. forall y:t1. (le(x, y) -> eq(min1(x, y), x)))

axiom Max_r : (forall x:t1. forall y:t1. (le(y, x) -> eq(max1(x, y), x)))

axiom Max_l1 : (forall x:t1. forall y:t1. (le(x, y) -> eq(max1(x, y), y)))

logic is_int : t1 -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int1(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t1. (tqtisFinite(i) -> ((le(i,
  neg(of_int1(m, 9007199254740992))) or le(of_int1(m, 9007199254740992),
  i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t1. forall y:t1. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t1. forall y:t1. forall z:t1. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t1. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t1. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t1. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int1(mqt, to_int1(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) ->
  in_int_range(to_int1(m, x))))

axiom is_int_is_finite : (forall x:t1. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int1(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t1. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t1. (tqtisFinite(x) -> (is_negative(x) ->
  (roundToIntegral(ToZero, x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t1. (tqtisFinite(x) -> (is_positive(x) ->
  (roundToIntegral(ToZero, x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t1. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t1. forall y:t1. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t1. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) -> (to_int1(m,
  roundToIntegral(Up, x)) = ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t1. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t1. forall y:t1. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t1. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) -> (to_int1(m,
  roundToIntegral(Down, x)) = floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t1. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t1. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t1. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t1. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t1. (to_int1(m, x) = to_int1(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int1(m, x) <= to_int1(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int1(m, of_int1(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int1(m, x) = to_int1(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) -> (to_int1(m,
  neg(x)) = (-to_int1(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float64(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  ((((x - (0x1.0p-53 * abs_real(x))) - 0x1.0p-1075) <= float64(NearestTiesToEven,x)) and
  (float64(NearestTiesToEven,x) <= ((x + (0x1.0p-53 * abs_real(x))) + 0x1.0p-1075)))))

type t2

logic tqtint1 : t2 -> int

axiom tqtaxiom2 : (forall i:t2. ((0 <= tqtint1(i)) and (tqtint1(i) <= 255)))

logic nth1 : t2, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t2. forall n:int. (((n <  0) or (8 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t2

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t2

logic ones1 : t2

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth1(ones1, n) = true)))

logic two_power_size_minus_one1 : int

axiom two_power_size_minus_one_val1 :
  (two_power_size_minus_one1 = pow2((8 - 1)))

logic is_signed_positive1 : t2 -> prop

logic of_int2 : int -> t2

function to_int2(x: t2) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(256 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t2. forall vqt:t2. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

axiom to_uint_bounds1 :
  (forall v:t2. ((0 <= tqtint1(v)) and (tqtint1(v) <  256)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint1(of_int2(i)) = i)))

logic size_bv1 : t2

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 8)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 255)

predicate ult1(x: t2, y: t2) = (tqtint1(x) <  tqtint1(y))

logic ult_closure1 : (t2,(t2,bool) farray) farray

axiom ult_closure_def1 :
  (forall y:t2. forall y1:t2. ((((ult_closure1[y])[y1]) = true) <-> ult1(y,
  y1)))

axiom ult_wf1 : well_founded(ult_closure1)

predicate ule1(x: t2, y: t2) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t2, y: t2) = (tqtint1(y) <  tqtint1(x))

logic ugt_closure1 : (t2,(t2,bool) farray) farray

axiom ugt_closure_def1 :
  (forall y:t2. forall y1:t2. ((((ugt_closure1[y])[y1]) = true) <-> ugt1(y,
  y1)))

axiom ugt_wf1 : well_founded(ugt_closure1)

predicate slt1(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

logic slt_closure1 : (t2,(t2,bool) farray) farray

axiom slt_closure_def1 :
  (forall y:t2. forall y1:t2. ((((slt_closure1[y])[y1]) = true) <-> slt1(y,
  y1)))

axiom slt_wf1 : well_founded(slt_closure1)

predicate sgt1(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

logic sgt_closure1 : (t2,(t2,bool) farray) farray

axiom sgt_closure_def1 :
  (forall y:t2. forall y1:t2. ((((sgt_closure1[y])[y1]) = true) <-> sgt1(y,
  y1)))

axiom sgt_wf1 : well_founded(sgt_closure1)

predicate sge1(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t2. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic nth_bv1 : t2, t2 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t2. forall i:t2. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv1(x,
  of_int2(i)) = nth1(x, i))))

type t3

logic tqtint2 : t3 -> int

axiom tqtaxiom3 :
  (forall i:t3. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t3, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t3. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t3

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t3

logic ones2 : t3

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic two_power_size_minus_one2 : int

axiom two_power_size_minus_one_val2 :
  (two_power_size_minus_one2 = pow2((32 - 1)))

logic is_signed_positive2 : t3 -> prop

logic of_int3 : int -> t3

function to_int3(x: t3) : int =
  (if is_signed_positive2(x) then tqtint2(x) else (-(4294967296 - tqtint2(x))))

axiom to_uint_extensionality2 :
  (forall v:t3. forall vqt:t3. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t3. forall vqt:t3. ((to_int3(v) = to_int3(vqt)) -> (v = vqt)))

axiom to_uint_bounds2 :
  (forall v:t3. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int3(i)) = i)))

logic size_bv2 : t3

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t3, y: t3) = (tqtint2(x) <  tqtint2(y))

logic ult_closure2 : (t3,(t3,bool) farray) farray

axiom ult_closure_def2 :
  (forall y:t3. forall y1:t3. ((((ult_closure2[y])[y1]) = true) <-> ult2(y,
  y1)))

axiom ult_wf2 : well_founded(ult_closure2)

predicate ule2(x: t3, y: t3) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t3, y: t3) = (tqtint2(y) <  tqtint2(x))

logic ugt_closure2 : (t3,(t3,bool) farray) farray

axiom ugt_closure_def2 :
  (forall y:t3. forall y1:t3. ((((ugt_closure2[y])[y1]) = true) <-> ugt2(y,
  y1)))

axiom ugt_wf2 : well_founded(ugt_closure2)

predicate slt2(v1: t3, v2: t3) = (to_int3(v1) <  to_int3(v2))

logic slt_closure2 : (t3,(t3,bool) farray) farray

axiom slt_closure_def2 :
  (forall y:t3. forall y1:t3. ((((slt_closure2[y])[y1]) = true) <-> slt2(y,
  y1)))

axiom slt_wf2 : well_founded(slt_closure2)

predicate sgt2(v1: t3, v2: t3) = (to_int3(v2) <  to_int3(v1))

logic sgt_closure2 : (t3,(t3,bool) farray) farray

axiom sgt_closure_def2 :
  (forall y:t3. forall y1:t3. ((((sgt_closure2[y])[y1]) = true) <-> sgt2(y,
  y1)))

axiom sgt_wf2 : well_founded(sgt_closure2)

predicate sge2(v1: t3, v2: t3) = (to_int3(v2) <= to_int3(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t3. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic nth_bv2 : t3, t3 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t3. forall i:t3. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t3. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int3(i)) = nth2(x, i))))

type t4

logic tqtint3 : t4 -> int

axiom tqtaxiom4 :
  (forall i:t4. ((0 <= tqtint3(i)) and (tqtint3(i) <= 18446744073709551615)))

logic nth3 : t4, int -> bool

axiom nth_out_of_bound3 :
  (forall x:t4. forall n:int. (((n <  0) or (64 <= n)) -> (nth3(x,
  n) = false)))

logic zeros3 : t4

axiom Nth_zeros3 : (forall n:int. (nth3(zeros3, n) = false))

logic one3 : t4

logic ones3 : t4

axiom Nth_ones3 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth3(ones3, n) = true)))

logic two_power_size_minus_one3 : int

axiom two_power_size_minus_one_val3 :
  (two_power_size_minus_one3 = pow2((64 - 1)))

logic is_signed_positive3 : t4 -> prop

logic of_int4 : int -> t4

function to_int4(x: t4) : int =
  (if is_signed_positive3(x) then tqtint3(x) else (-(18446744073709551616 - tqtint3(x))))

axiom to_uint_extensionality3 :
  (forall v:t4. forall vqt:t4. ((tqtint3(v) = tqtint3(vqt)) -> (v = vqt)))

axiom to_int_extensionality3 :
  (forall v:t4. forall vqt:t4. ((to_int4(v) = to_int4(vqt)) -> (v = vqt)))

axiom to_uint_bounds3 :
  (forall v:t4. ((0 <= tqtint3(v)) and (tqtint3(v) <  18446744073709551616)))

axiom to_uint_of_int3 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint3(of_int4(i)) = i)))

logic size_bv3 : t4

axiom to_uint_size_bv3 : (tqtint3(size_bv3) = 64)

axiom to_uint_zeros3 : (tqtint3(zeros3) = 0)

axiom to_uint_one3 : (tqtint3(one3) = 1)

axiom to_uint_ones3 : (tqtint3(ones3) = 18446744073709551615)

predicate ult3(x: t4, y: t4) = (tqtint3(x) <  tqtint3(y))

logic ult_closure3 : (t4,(t4,bool) farray) farray

axiom ult_closure_def3 :
  (forall y:t4. forall y1:t4. ((((ult_closure3[y])[y1]) = true) <-> ult3(y,
  y1)))

axiom ult_wf3 : well_founded(ult_closure3)

predicate ule3(x: t4, y: t4) = (tqtint3(x) <= tqtint3(y))

predicate ugt3(x: t4, y: t4) = (tqtint3(y) <  tqtint3(x))

logic ugt_closure3 : (t4,(t4,bool) farray) farray

axiom ugt_closure_def3 :
  (forall y:t4. forall y1:t4. ((((ugt_closure3[y])[y1]) = true) <-> ugt3(y,
  y1)))

axiom ugt_wf3 : well_founded(ugt_closure3)

predicate slt3(v1: t4, v2: t4) = (to_int4(v1) <  to_int4(v2))

logic slt_closure3 : (t4,(t4,bool) farray) farray

axiom slt_closure_def3 :
  (forall y:t4. forall y1:t4. ((((slt_closure3[y])[y1]) = true) <-> slt3(y,
  y1)))

axiom slt_wf3 : well_founded(slt_closure3)

predicate sgt3(v1: t4, v2: t4) = (to_int4(v2) <  to_int4(v1))

logic sgt_closure3 : (t4,(t4,bool) farray) farray

axiom sgt_closure_def3 :
  (forall y:t4. forall y1:t4. ((((sgt_closure3[y])[y1]) = true) <-> sgt3(y,
  y1)))

axiom sgt_wf3 : well_founded(sgt_closure3)

predicate sge3(v1: t4, v2: t4) = (to_int4(v2) <= to_int4(v1))

axiom positive_is_ge_zeros3 :
  (forall x:t4. (is_signed_positive3(x) <-> sge3(x, zeros3)))

logic nth_bv3 : t4, t4 -> bool

axiom Nth_bv_is_nth4 :
  (forall x:t4. forall i:t4. (nth3(x, tqtint3(i)) = nth_bv3(x, i)))

axiom Nth_bv_is_nth23 :
  (forall x:t4. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv3(x, of_int4(i)) = nth3(x, i))))

logic of_ubv8 : fpa_rounding_mode, t2 -> t1

logic of_ubv16 : fpa_rounding_mode, t -> t1

logic of_ubv32 : fpa_rounding_mode, t3 -> t1

logic of_ubv64 : fpa_rounding_mode, t4 -> t1

axiom of_ubv8_is_finite :
  (forall m:fpa_rounding_mode. forall x:t2. tqtisFinite(of_ubv8(m, x)))

axiom of_ubv16_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. tqtisFinite(of_ubv16(m, x)))

axiom of_ubv32_is_finite :
  (forall m:fpa_rounding_mode. forall x:t3. tqtisFinite(of_ubv32(m, x)))

axiom of_ubv64_is_finite :
  (forall m:fpa_rounding_mode. forall x:t4. tqtisFinite(of_ubv64(m, x)))

axiom of_ubv8_monotonic :
  (forall m:fpa_rounding_mode. forall x:t2. forall y:t2. (ule1(x, y) ->
  le(of_ubv8(m, x), of_ubv8(m, y))))

axiom of_ubv16_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (ule(x, y) ->
  le(of_ubv16(m, x), of_ubv16(m, y))))

axiom of_ubv32_monotonic :
  (forall m:fpa_rounding_mode. forall x:t3. forall y:t3. (ule2(x, y) ->
  le(of_ubv32(m, x), of_ubv32(m, y))))

axiom of_ubv64_monotonic :
  (forall m:fpa_rounding_mode. forall x:t4. forall y:t4. (ule3(x, y) ->
  le(of_ubv64(m, x), of_ubv64(m, y))))

axiom of_ubv8_to_real :
  (forall m:fpa_rounding_mode. forall x:t2. (tqtreal(of_ubv8(m,
  x)) = real_of_int(tqtint1(x))))

axiom of_ubv16_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtreal(of_ubv16(m,
  x)) = real_of_int(tqtint(x))))

axiom of_ubv32_to_real :
  (forall m:fpa_rounding_mode. forall x:t3. (tqtreal(of_ubv32(m,
  x)) = real_of_int(tqtint2(x))))

axiom of_ubv64_to_real :
  (forall m:fpa_rounding_mode. forall x:t4. (tqtreal(of_ubv64(m,
  x)) = float64(m,real_of_int(tqtint3(x)))))

logic fliteral : t1

axiom fliteral_axiom : (tqtisFinite(fliteral) and (tqtreal(fliteral) = 1.0))

logic bound : t1

logic fliteral1 : t1

axiom fliteral_axiom1 : (tqtisFinite(fliteral1) and
  (tqtreal(fliteral1) = 65.0))

function low_bound(param__n: int) : t1 = mul(NearestTiesToEven,
  of_int1(NearestTiesToEven, param__n), neg(fliteral1))

logic fliteral2 : t1

axiom fliteral_axiom2 : (tqtisFinite(fliteral2) and
  (tqtreal(fliteral2) = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0))

predicate dynamic_invariant(temp___expr_177: t1, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  le(neg(fliteral2), fliteral2)) -> tqtisFinite(temp___expr_177))

function high_bound(param__n: int) : t1 = mul(NearestTiesToEven,
  of_int1(NearestTiesToEven, param__n), bound)

logic fliteral3 : t1

axiom fliteral_axiom3 : (tqtisFinite(fliteral3) and
  (tqtreal(fliteral3) = 1625.0e3))

function in_bounds(param__v: t1) : bool = andb((if le(neg(fliteral3),
  param__v) then true else false), (if le(param__v,
  fliteral3) then true else false))

logic invariant__ : int, t1 -> bool

logic n : int

logic factor : t1

logic drag : t1

logic old_speed : t1

logic delta_speed : t1

logic n_bv : t

type frame

logic frameqtint : frame -> int

axiom frameqtaxiom :
  (forall i:frame. ((0 <= frameqtint(i)) and (frameqtint(i) <= 25000)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 25000))

predicate in_range2(x: t1) = (tqtisFinite(x) and (le(neg(fliteral), x) and
  le(x, fliteral)))

predicate dynamic_invariant1(temp___expr_191: t1, temp___is_init_187: bool,
  temp___skip_constant_188: bool, temp___do_toplevel_189: bool,
  temp___do_typ_inv_190: bool) = (((temp___is_init_187 = true) or
  le(neg(fliteral), fliteral)) -> in_range2(temp___expr_191))

logic fliteral4 : t1

axiom fliteral_axiom4 : (tqtisFinite(fliteral4) and
  (tqtreal(fliteral4) = 64.0))

predicate in_range3(x: t1) = (tqtisFinite(x) and (le(neg(fliteral4), x) and
  le(x, fliteral4)))

predicate dynamic_invariant2(temp___expr_198: t1, temp___is_init_194: bool,
  temp___skip_constant_195: bool, temp___do_toplevel_196: bool,
  temp___do_typ_inv_197: bool) = (((temp___is_init_194 = true) or
  le(neg(fliteral4), fliteral4)) -> in_range3(temp___expr_198))

logic attr__ATTRIBUTE_MODULUS : t

axiom bound__def_axiom : (bound = fliteral1)

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall param__n:int.
  (forall param__speed:t1 [invariant__(param__n, param__speed)].
  ((invariant__(param__n, param__speed) = true) <-> (le(low_bound(param__n),
  param__speed) and le(param__speed, high_bound(param__n))))))

logic fliteral5 : t1

axiom fliteral_axiom5 : (tqtisFinite(fliteral5) and
  (tqtreal(fliteral5) = 98070000000000003836930773104541003704071044921875.0e-49))

logic fliteral6 : t1

axiom fliteral_axiom6 : (tqtisFinite(fliteral6) and
  (tqtreal(fliteral6) = 166666666666666664353702032030923874117434024810791015625.0e-58))

 (* "complex_trajectory_overflow.ads", line 33, characters 0-0 *)
goal defqtvc :
  (forall speed:t1. forall distance:t1. forall average:t1.
  (dynamic_invariant(bound, true, false, true, true) ->
  ((fliteral1 = bound) -> (in_range1(n) -> (dynamic_invariant1(factor, true,
  false, true, true) -> (dynamic_invariant2(drag, true, false, true, true) ->
  (dynamic_invariant(speed, true, false, true, true) ->
  (dynamic_invariant(distance, true, false, true, true) ->
  (dynamic_invariant(average, false, false, true, true) -> (((n <  25000) and
  (invariant__(n, speed) = true)) -> ((speed = old_speed) ->
  (dynamic_invariant(old_speed, true, false, true, true) ->
  ((add(NearestTiesToEven, drag, mul(NearestTiesToEven,
  mul(NearestTiesToEven, factor, fliteral5), fliteral6)) = delta_speed) ->
  (dynamic_invariant(delta_speed, true, false, true, true) ->
  ((of_int(n) = n_bv) -> (let o = add(NearestTiesToEven, speed, delta_speed)
  : t1 in (tqtisFinite(o) ->
  (forall speed1:t1. ((speed1 = o) -> ((le(neg(fliteral1), delta_speed) and
  le(delta_speed, bound)) -> ((in_bounds(high_bound(n)) = true) ->
  ((in_bounds(low_bound(n)) = true) -> (eq(add(NearestTiesToEven,
  mul(NearestTiesToEven, of_ubv16(NearestTiesToEven, n_bv), bound), bound),
  mul(NearestTiesToEven, add(NearestTiesToEven, of_ubv16(NearestTiesToEven,
  n_bv), fliteral), bound)) -> (eq(add(NearestTiesToEven,
  mul(NearestTiesToEven, of_int1(NearestTiesToEven, n), bound), bound),
  mul(NearestTiesToEven, add(NearestTiesToEven, of_int1(NearestTiesToEven,
  n), fliteral), bound)) -> (eq(sub(NearestTiesToEven, mul(NearestTiesToEven,
  of_int1(NearestTiesToEven, n), neg(fliteral1)), bound),
  mul(NearestTiesToEven, add(NearestTiesToEven, of_int1(NearestTiesToEven,
  n), fliteral), neg(fliteral1))) -> (eq(of_int1(NearestTiesToEven, 1),
  fliteral) -> (eq(add(NearestTiesToEven, of_int1(NearestTiesToEven, n),
  fliteral), of_int1(NearestTiesToEven, (n + 1))) ->
  (le(sub(NearestTiesToEven, mul(NearestTiesToEven,
  of_int1(NearestTiesToEven, n), neg(fliteral1)), bound), speed1) ->
  (le(mul(NearestTiesToEven, of_int1(NearestTiesToEven, (n + 1)),
  neg(fliteral1)), speed1) -> le(speed1, add(NearestTiesToEven,
  mul(NearestTiesToEven, of_int1(NearestTiesToEven, n), bound),
  bound)))))))))))))))))))))))))))))))
