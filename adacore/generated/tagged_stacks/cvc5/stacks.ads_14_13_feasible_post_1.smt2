;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort less_than_max 0)

;; "less_than_max'int"
(declare-fun less_than_maxqtint (less_than_max) Int)

;; "less_than_max'axiom"
(assert
  (forall ((i less_than_max))
    (and (<= 0 (less_than_maxqtint i)) (<= (less_than_maxqtint i) 100))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "to_rep"
(define-fun to_rep ((x less_than_max)) Int
  (less_than_maxqtint x))

;; "of_rep"
(declare-fun of_rep (Int) less_than_max)

;; "inversion_axiom"
(assert
  (forall ((x less_than_max))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x less_than_max))
    (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort element 0)

;; "element'int"
(declare-fun elementqtint (element) Int)

;; "element'axiom"
(assert
  (forall ((i element))
    (and (<= 0 (elementqtint i)) (<= (elementqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x element)) Int
  (elementqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) element)

;; "inversion_axiom"
(assert
  (forall ((x element))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x element)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-sort us_ext_type 0)

(declare-const null__ext__ us_ext_type)

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__stacks__stack_root__content (Array Int element))(rec__stacks__stack_root__length less_than_max)(rec__ext__ us_ext_type)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const stacks__stack_root__content__first__bit Int)

(declare-const stacks__stack_root__content__last__bit Int)

(declare-const stacks__stack_root__content__position Int)

;; "stacks__stack_root__content__first__bit_axiom"
(assert (<= 0 stacks__stack_root__content__first__bit))

;; "stacks__stack_root__content__last__bit_axiom"
(assert
  (< stacks__stack_root__content__first__bit stacks__stack_root__content__last__bit))

;; "stacks__stack_root__content__position_axiom"
(assert (<= 0 stacks__stack_root__content__position))

(declare-const stacks__stack_root__length__first__bit Int)

(declare-const stacks__stack_root__length__last__bit Int)

(declare-const stacks__stack_root__length__position Int)

;; "stacks__stack_root__length__first__bit_axiom"
(assert (<= 0 stacks__stack_root__length__first__bit))

;; "stacks__stack_root__length__last__bit_axiom"
(assert
  (< stacks__stack_root__length__first__bit stacks__stack_root__length__last__bit))

;; "stacks__stack_root__length__position_axiom"
(assert (<= 0 stacks__stack_root__length__position))

(declare-const dummy us_rep)

;; "size"
(define-fun size ((param__s us_rep)) Int
  (to_rep (rec__stacks__stack_root__length (us_split_fields1 param__s))))

(declare-const s us_rep)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep2 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range2 low)
    (and
      (in_range2 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int element))(rt t)))))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep2 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep2 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_214 us_rep) (temp___is_init_210 Bool) (temp___skip_constant_211 Bool) (temp___do_toplevel_212 Bool) (temp___do_typ_inv_213 Bool)) Bool
  true)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_230 us_t) (temp___is_init_226 Bool) (temp___skip_constant_227 Bool) (temp___do_toplevel_228 Bool) (temp___do_typ_inv_229 Bool)) Bool
  (=>
    (not (= temp___skip_constant_227 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_230)
      (last temp___expr_230))))

;; Goal "def'vc"
;; File "stacks.ads", line 14, characters 0-0
(assert
  (not
  (=>
    (dynamic_invariant s true false true true)
    (exists ((result us_t))
      (and
        (dynamic_invariant1 result true false true true)
        (and
          (and (in_range (first result)) (in_range (last result)))
          (= (length result) (size s))))))))

(check-sat)
(get-info :reason-unknown)
