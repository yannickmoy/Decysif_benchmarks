;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort topt_indexB 0)

;; "topt_indexB'int"
(declare-fun topt_indexBqtint (topt_indexB) Int)

;; "topt_indexB'axiom"
(assert
  (forall ((i topt_indexB))
    (and
      (<= (- 2147483648) (topt_indexBqtint i))
      (<= (topt_indexBqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x topt_indexB)) Int
  (topt_indexBqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) topt_indexB)

;; "inversion_axiom"
(assert
  (forall ((x topt_indexB))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x topt_indexB))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first topt_indexB)(rec__last topt_indexB)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int integer))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int integer)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "empty"
(define-fun empty ((param__a us_t)) Bool
  (> (first param__a) (last param__a)))

;; "sorted"
(define-fun sorted ((param__a us_t)) Bool
  (ite (forall ((i1 Int))
         (=>
           (and (<= (first param__a) i1) (<= i1 (last param__a)))
           (forall ((i2 Int))
             (=>
               (and (<= i1 i2) (<= i2 (last param__a)))
               (<= (to_rep (select (to_array param__a) i1)) (to_rep
                                                              (select 
                                                              (to_array
                                                                param__a) i2)))))))
    true
    false))

(declare-const a us_t)

(declare-const i Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_190 us_t) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool
  (=>
    (not (= temp___skip_constant_187 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_190)
      (last temp___expr_190))))

;; Goal "def'vc"
;; File "binary_search.ads", line 30, characters 0-0
(assert
  (not
  (forall ((left Int) (right Int) (med Int))
    (=>
      (dynamic_invariant a true false true true)
      (=>
        (in_range i)
        (=>
          (= (sorted a) true)
          (=>
            (in_range2 left)
            (=>
              (in_range2 right)
              (=>
                (in_range2 med)
                (let ((o a))
                  (let ((o1 (empty o)))
                    (=>
                      (= (= o1 true) (< (last o) (first o)))
                      (forall ((spark__branch Bool))
                        (=>
                          (= spark__branch o1)
                          (=>
                            (not (= spark__branch true))
                            (let ((o2 (first a)))
                              (=>
                                (in_range2 o2)
                                (forall ((left1 Int))
                                  (=>
                                    (= left1 o2)
                                    (let ((o3 (last a)))
                                      (=>
                                        (in_range2 o3)
                                        (forall ((right1 Int))
                                          (=>
                                            (= right1 o3)
                                            (=>
                                              (and
                                                (<= (first a) left1)
                                                (<= left1 (last a)))
                                              (forall ((o4 Int))
                                                (=>
                                                  (= (to_rep
                                                       (select (to_array a) left1)) o4)
                                                  (forall ((spark__branch1 Bool))
                                                    (=>
                                                      (= spark__branch1 (and 
                                                      (ite (= left1 right1)
                                                        true
                                                        false) (ite (= o4 
                                                                 i)
                                                                 true
                                                                 false)))
                                                      (=>
                                                        (not
                                                          (= spark__branch1 true))
                                                        (=>
                                                          (and
                                                            (<= (first a) right1)
                                                            (<= right1 
                                                            (last
                                                              a)))
                                                          (forall ((o5 Int))
                                                            (=>
                                                              (= (to_rep
                                                                   (select 
                                                                   (to_array
                                                                    a) right1)) o5)
                                                              (=>
                                                                (and
                                                                  (<= 
                                                                  (first
                                                                    a) left1)
                                                                  (<= left1 
                                                                  (last
                                                                    a)))
                                                                (forall 
                                                                  ((o6 Int))
                                                                  (=>
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) left1)) o6)
                                                                    (forall 
                                                                    ((spark__branch2 Bool))
                                                                    (=>
                                                                    (= spark__branch2 (or 
                                                                    (ite (< 
                                                                    i o6)
                                                                    true
                                                                    false) 
                                                                    (ite (< o5 
                                                                    i)
                                                                    true
                                                                    false)))
                                                                    (=>
                                                                    (not
                                                                    (= spark__branch2 true))
                                                                    (=>
                                                                    (<= left1 right1)
                                                                    (forall 
                                                                    ((left2 Int) (right2 Int) (med1 Int))
                                                                    (=>
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) left2)
                                                                    (<= left2 
                                                                    (last
                                                                    a)))
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) right2)
                                                                    (<= right2 
                                                                    (last
                                                                    a))))
                                                                    (and
                                                                    (forall 
                                                                    ((index Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) index)
                                                                    (<= index (- left2 1)))
                                                                    (< 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) index)) 
                                                                    i)))
                                                                    (forall 
                                                                    ((index Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) index)
                                                                    (<= index 
                                                                    (last
                                                                    a)))
                                                                    (=>
                                                                    (< right2 index)
                                                                    (< 
                                                                    i (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) index))))))))
                                                                    (=>
                                                                    (= (and 
                                                                    (ite 
                                                                    (and
                                                                    (and
                                                                    (in_range2
                                                                    right2)
                                                                    (in_range2
                                                                    med1))
                                                                    (in_range2
                                                                    left2))
                                                                    true
                                                                    false) 
                                                                    (ite (<= left2 right2)
                                                                    true
                                                                    false)) true)
                                                                    (let ((o7 (+ left2 (__cdiv (- right2 left2) 2))))
                                                                    (=>
                                                                    (in_range1
                                                                    o7)
                                                                    (=>
                                                                    (in_range2
                                                                    o7)
                                                                    (forall 
                                                                    ((med2 Int))
                                                                    (=>
                                                                    (= med2 o7)
                                                                    (=>
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) i1)
                                                                    (<= i1 
                                                                    (last
                                                                    a)))
                                                                    (forall 
                                                                    ((i2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= i1 i2)
                                                                    (<= i2 
                                                                    (last
                                                                    a)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i1)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i2)))))))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) med2)
                                                                    (<= med2 
                                                                    (last
                                                                    a)))
                                                                    (forall 
                                                                    ((o8 Int))
                                                                    (=>
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)) o8)
                                                                    (forall 
                                                                    ((spark__branch3 Bool))
                                                                    (=>
                                                                    (= spark__branch3 
                                                                    (ite (< o8 
                                                                    i)
                                                                    true
                                                                    false))
                                                                    (=>
                                                                    (= spark__branch3 true)
                                                                    (let ((o9 (+ med2 1)))
                                                                    (=>
                                                                    (in_range1
                                                                    o9)
                                                                    (=>
                                                                    (in_range2
                                                                    o9)
                                                                    (forall 
                                                                    ((left3 Int))
                                                                    (=>
                                                                    (= left3 o9)
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) i1)
                                                                    (<= i1 med2))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i1)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
