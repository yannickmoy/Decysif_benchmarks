;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort topt_indexB 0)

;; "topt_indexB'int"
(declare-fun topt_indexBqtint (topt_indexB) Int)

;; "topt_indexB'axiom"
(assert
  (forall ((i topt_indexB))
    (and
      (<= (- 2147483648) (topt_indexBqtint i))
      (<= (topt_indexBqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x topt_indexB)) Int
  (topt_indexBqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) topt_indexB)

;; "inversion_axiom"
(assert
  (forall ((x topt_indexB))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x topt_indexB))
    (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ()
  ((t (tqtmk (rec__first topt_indexB)(rec__last topt_indexB)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int integer))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int integer)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "empty"
(define-fun empty ((param__a us_t)) Bool
  (> (first param__a) (last param__a)))

;; "sorted"
(define-fun sorted ((param__a us_t)) Bool
  (ite (forall ((i1 Int))
         (=>
           (and (<= (first param__a) i1) (<= i1 (last param__a)))
           (forall ((i2 Int))
             (=>
               (and (<= i1 i2) (<= i2 (last param__a)))
               (<= (to_rep (select (to_array param__a) i1)) (to_rep
                                                              (select 
                                                              (to_array
                                                                param__a) i2)))))))
    true
    false))

(declare-const a us_t)

(declare-const i Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_190 us_t) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool
  (=>
    (not (= temp___skip_constant_187 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_190)
      (last temp___expr_190))))

(declare-const left Int)

(declare-const right Int)

(declare-const med Int)

(declare-const binary_search__search__result Int)

;; "med'unused"
(define-fun medqtunused () int__ref
  (int__refqtmk med))

;; "right'unused"
(define-fun rightqtunused () int__ref
  (int__refqtmk right))

;; "left'unused"
(define-fun leftqtunused () int__ref
  (int__refqtmk left))

;; "Assume"
(assert (dynamic_invariant a true false true true))

;; "Assume"
(assert (in_range i))

;; "Assume"
(assert (= (sorted a) true))

(declare-const binary_search__search__result1 Int)

;; "binary_search__search__result'unused"
(define-fun binary_search__search__resultqtunused () int__ref
  (int__refqtmk binary_search__search__result1))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 left))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 right))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 med))

(declare-const o us_t)

;; "H"
(assert (= o a))

(declare-const o1 Bool)

;; "H"
(assert (= o1 (empty o)))

;; "Ensures"
(assert (= (= o1 true) (< (last o) (first o))))

(declare-const emptyqtresultqtunused Bool)

;; "H"
(assert (= emptyqtresultqtunused o1))

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

;; "H"
(assert (= spark__branchqtunused (bool__refqtmk spark__branch)))

;; "H"
(assert (= spark__branch o1))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const o2 Int)

(declare-const firstqtresultqtunused Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const left1 Int)

(declare-const leftqtunused1 int__ref)

(declare-const o3 Int)

(declare-const lastqtresultqtunused Int)

(declare-const range_check_qtresultqtunused1 Int)

(declare-const right1 Int)

(declare-const rightqtunused1 int__ref)

(declare-const int__contentqtresultqtunused Int)

(declare-const o4 (Array Int integer))

(declare-const to_arrayqtresultqtunused (Array Int integer))

(declare-const o5 integer)

(declare-const getqtresultqtunused integer)

(declare-const o6 Int)

(declare-const to_repqtresultqtunused Int)

(declare-const o7 Bool)

(declare-const infix_eqqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused1 Int)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const o8 Bool)

(declare-const infix_eqqtresultqtunused1 Bool)

(declare-const o9 Bool)

(declare-const andbqtresultqtunused Bool)

(declare-const spark__branch1 Bool)

(declare-const spark__branchqtunused1 bool__ref)

(declare-const bool__contentqtresultqtunused1 Bool)

(declare-const int__contentqtresultqtunused3 Int)

(declare-const o10 (Array Int integer))

(declare-const to_arrayqtresultqtunused1 (Array Int integer))

(declare-const o11 integer)

(declare-const getqtresultqtunused1 integer)

(declare-const o12 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const o13 Bool)

(declare-const infix_lsqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused4 Int)

(declare-const o14 (Array Int integer))

(declare-const to_arrayqtresultqtunused2 (Array Int integer))

(declare-const o15 integer)

(declare-const getqtresultqtunused2 integer)

(declare-const o16 Int)

(declare-const to_repqtresultqtunused2 Int)

(declare-const o17 Bool)

(declare-const infix_gtqtresultqtunused Bool)

(declare-const o18 Bool)

(declare-const orbqtresultqtunused Bool)

(declare-const spark__branch2 Bool)

(declare-const spark__branchqtunused2 bool__ref)

(declare-const bool__contentqtresultqtunused2 Bool)

(declare-const int__contentqtresultqtunused5 Int)

;; "H"
(assert
  (ite (= spark__branch true)
    (= binary_search__search__result1 0)
    (and
      (= o2 (first a))
      (and
        (= firstqtresultqtunused o2)
        (and
          (in_range2 o2)
          (and
            (= range_check_qtresultqtunused o2)
            (and
              (= leftqtunused1 (int__refqtmk left1))
              (and
                (= left1 o2)
                (and
                  (= o3 (last a))
                  (and
                    (= lastqtresultqtunused o3)
                    (and
                      (in_range2 o3)
                      (and
                        (= range_check_qtresultqtunused1 o3)
                        (and
                          (= rightqtunused1 (int__refqtmk right1))
                          (and
                            (= right1 o3)
                            (and
                              (and (<= (first a) left1) (<= left1 (last a)))
                              (and
                                (= int__contentqtresultqtunused left1)
                                (and
                                  (= o4 (to_array a))
                                  (and
                                    (= to_arrayqtresultqtunused o4)
                                    (and
                                      (= o5 (select o4 left1))
                                      (and
                                        (= getqtresultqtunused o5)
                                        (and
                                          (= (to_rep o5) o6)
                                          (and
                                            (= to_repqtresultqtunused 
                                            o6)
                                            (and
                                              (= o7 (ite (= o6 i) true false))
                                              (and
                                                (= infix_eqqtresultqtunused 
                                                o7)
                                                (and
                                                  (= int__contentqtresultqtunused1 
                                                  right1)
                                                  (and
                                                    (= int__contentqtresultqtunused2 
                                                    left1)
                                                    (and
                                                      (= o8 (ite (= left1 
                                                              right1)
                                                              true
                                                              false))
                                                      (and
                                                        (= infix_eqqtresultqtunused1 
                                                        o8)
                                                        (and
                                                          (= o9 (and 
                                                          o8 o7))
                                                          (and
                                                            (= andbqtresultqtunused 
                                                            o9)
                                                            (and
                                                              (= spark__branchqtunused1 
                                                              (bool__refqtmk
                                                                spark__branch1))
                                                              (and
                                                                (= spark__branch1 
                                                                o9)
                                                                (and
                                                                  (= 
                                                                  bool__contentqtresultqtunused1 
                                                                  spark__branch1)
                                                                  (ite (= 
                                                                    spark__branch1 true)
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused5 
                                                                    left1)
                                                                    (= 
                                                                    binary_search__search__result1 
                                                                    left1))
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) 
                                                                    right1)
                                                                    (<= 
                                                                    right1 
                                                                    (last
                                                                    a)))
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused3 
                                                                    right1)
                                                                    (and
                                                                    (= 
                                                                    o10 
                                                                    (to_array
                                                                    a))
                                                                    (and
                                                                    (= 
                                                                    to_arrayqtresultqtunused1 
                                                                    o10)
                                                                    (and
                                                                    (= 
                                                                    o11 (select 
                                                                    o10 
                                                                    right1))
                                                                    (and
                                                                    (= 
                                                                    getqtresultqtunused1 
                                                                    o11)
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    o11) 
                                                                    o12)
                                                                    (and
                                                                    (= 
                                                                    to_repqtresultqtunused1 
                                                                    o12)
                                                                    (and
                                                                    (= 
                                                                    o13 
                                                                    (ite (< 
                                                                    o12 
                                                                    i)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (= 
                                                                    infix_lsqtresultqtunused 
                                                                    o13)
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) 
                                                                    left1)
                                                                    (<= 
                                                                    left1 
                                                                    (last
                                                                    a)))
                                                                    (and
                                                                    (= 
                                                                    int__contentqtresultqtunused4 
                                                                    left1)
                                                                    (and
                                                                    (= 
                                                                    o14 
                                                                    (to_array
                                                                    a))
                                                                    (and
                                                                    (= 
                                                                    to_arrayqtresultqtunused2 
                                                                    o14)
                                                                    (and
                                                                    (= 
                                                                    o15 (select 
                                                                    o14 
                                                                    left1))
                                                                    (and
                                                                    (= 
                                                                    getqtresultqtunused2 
                                                                    o15)
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    o15) 
                                                                    o16)
                                                                    (and
                                                                    (= 
                                                                    to_repqtresultqtunused2 
                                                                    o16)
                                                                    (and
                                                                    (= 
                                                                    o17 
                                                                    (ite (< 
                                                                    i o16)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (= 
                                                                    infix_gtqtresultqtunused 
                                                                    o17)
                                                                    (and
                                                                    (= 
                                                                    o18 (or 
                                                                    o17 
                                                                    o13))
                                                                    (and
                                                                    (= 
                                                                    orbqtresultqtunused 
                                                                    o18)
                                                                    (and
                                                                    (= 
                                                                    spark__branchqtunused2 
                                                                    (bool__refqtmk
                                                                    spark__branch2))
                                                                    (and
                                                                    (= 
                                                                    spark__branch2 
                                                                    o18)
                                                                    (and
                                                                    (= 
                                                                    bool__contentqtresultqtunused2 
                                                                    spark__branch2)
                                                                    (ite (= 
                                                                    spark__branch2 true)
                                                                    (= 
                                                                    binary_search__search__result1 0)
                                                                    (or
                                                                    (and
                                                                    (<= 
                                                                    left1 
                                                                    right1)
                                                                    (exists 
                                                                    ((left2 Int) (right2 Int) (med1 Int))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) left2)
                                                                    (<= left2 
                                                                    (last
                                                                    a)))
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) right2)
                                                                    (<= right2 
                                                                    (last
                                                                    a))))
                                                                    (and
                                                                    (forall 
                                                                    ((index Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) index)
                                                                    (<= index (- left2 1)))
                                                                    (< 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) index)) 
                                                                    i)))
                                                                    (forall 
                                                                    ((index Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) index)
                                                                    (<= index 
                                                                    (last
                                                                    a)))
                                                                    (=>
                                                                    (< right2 index)
                                                                    (< 
                                                                    i (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) index))))))))
                                                                    (and
                                                                    (= (and 
                                                                    (ite 
                                                                    (and
                                                                    (and
                                                                    (in_range2
                                                                    right2)
                                                                    (in_range2
                                                                    med1))
                                                                    (in_range2
                                                                    left2))
                                                                    true
                                                                    false) 
                                                                    (ite (<= left2 right2)
                                                                    true
                                                                    false)) true)
                                                                    (let ((o19 (+ left2 (__cdiv (- right2 left2) 2))))
                                                                    (and
                                                                    (in_range1
                                                                    o19)
                                                                    (and
                                                                    (in_range2
                                                                    o19)
                                                                    (exists 
                                                                    ((med2 Int))
                                                                    (and
                                                                    (= med2 o19)
                                                                    (and
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) i1)
                                                                    (<= i1 
                                                                    (last
                                                                    a)))
                                                                    (forall 
                                                                    ((i2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= i1 i2)
                                                                    (<= i2 
                                                                    (last
                                                                    a)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i1)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i2)))))))
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) med2)
                                                                    (<= med2 
                                                                    (last
                                                                    a)))
                                                                    (exists 
                                                                    ((o20 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)) o20)
                                                                    (exists 
                                                                    ((spark__branch3 Bool))
                                                                    (and
                                                                    (= spark__branch3 
                                                                    (ite (< o20 
                                                                    i)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (not
                                                                    (= spark__branch3 true))
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) med2)
                                                                    (<= med2 
                                                                    (last
                                                                    a)))
                                                                    (exists 
                                                                    ((o21 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)) o21)
                                                                    (exists 
                                                                    ((spark__branch4 Bool))
                                                                    (and
                                                                    (= spark__branch4 
                                                                    (ite (< 
                                                                    i o21)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (not
                                                                    (= spark__branch4 true))
                                                                    (= 
                                                                    binary_search__search__result1 med2)))))))))))))))))))))))
                                                                    (exists 
                                                                    ((binary_search__search__result2 Int))
                                                                    (and
                                                                    (ite (<= 
                                                                    left1 
                                                                    right1)
                                                                    (exists 
                                                                    ((left2 Int) (right2 Int) (med1 Int))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) left2)
                                                                    (<= left2 
                                                                    (last
                                                                    a)))
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) right2)
                                                                    (<= right2 
                                                                    (last
                                                                    a))))
                                                                    (and
                                                                    (forall 
                                                                    ((index Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) index)
                                                                    (<= index (- left2 1)))
                                                                    (< 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) index)) 
                                                                    i)))
                                                                    (forall 
                                                                    ((index Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) index)
                                                                    (<= index 
                                                                    (last
                                                                    a)))
                                                                    (=>
                                                                    (< right2 index)
                                                                    (< 
                                                                    i (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) index))))))))
                                                                    (and
                                                                    (= (and 
                                                                    (ite 
                                                                    (and
                                                                    (and
                                                                    (in_range2
                                                                    right2)
                                                                    (in_range2
                                                                    med1))
                                                                    (in_range2
                                                                    left2))
                                                                    true
                                                                    false) 
                                                                    (ite (<= left2 right2)
                                                                    true
                                                                    false)) true)
                                                                    (let ((o19 (+ left2 (__cdiv (- right2 left2) 2))))
                                                                    (and
                                                                    (in_range1
                                                                    o19)
                                                                    (and
                                                                    (in_range2
                                                                    o19)
                                                                    (exists 
                                                                    ((med2 Int))
                                                                    (and
                                                                    (= med2 o19)
                                                                    (and
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) i1)
                                                                    (<= i1 
                                                                    (last
                                                                    a)))
                                                                    (forall 
                                                                    ((i2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= i1 i2)
                                                                    (<= i2 
                                                                    (last
                                                                    a)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i1)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i2)))))))
                                                                    (exists 
                                                                    ((left3 Int) (right3 Int))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) med2)
                                                                    (<= med2 
                                                                    (last
                                                                    a)))
                                                                    (exists 
                                                                    ((o20 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)) o20)
                                                                    (exists 
                                                                    ((spark__branch3 Bool))
                                                                    (and
                                                                    (= spark__branch3 
                                                                    (ite (< o20 
                                                                    i)
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch3 true)
                                                                    (and
                                                                    (let ((o21 (+ med2 1)))
                                                                    (and
                                                                    (in_range1
                                                                    o21)
                                                                    (and
                                                                    (in_range2
                                                                    o21)
                                                                    (and
                                                                    (= left3 o21)
                                                                    (forall 
                                                                    ((i1 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) i1)
                                                                    (<= i1 med2))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i1)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)))))))))
                                                                    (= right3 right2))
                                                                    (and
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) med2)
                                                                    (<= med2 
                                                                    (last
                                                                    a)))
                                                                    (exists 
                                                                    ((o21 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)) o21)
                                                                    (exists 
                                                                    ((spark__branch4 Bool))
                                                                    (and
                                                                    (= spark__branch4 
                                                                    (ite (< 
                                                                    i o21)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (= spark__branch4 true)
                                                                    (let ((o22 (- med2 1)))
                                                                    (and
                                                                    (in_range2
                                                                    o22)
                                                                    (and
                                                                    (= right3 o22)
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    a) med2)
                                                                    (<= med2 
                                                                    (last
                                                                    a)))
                                                                    (forall 
                                                                    ((i2 Int))
                                                                    (=>
                                                                    (and
                                                                    (<= med2 i2)
                                                                    (<= i2 
                                                                    (last
                                                                    a)))
                                                                    (<= 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) med2)) 
                                                                    (to_rep
                                                                    (select 
                                                                    (to_array
                                                                    a) i2)))))))))))))))
                                                                    (= left3 left2))))))))
                                                                    (not
                                                                    (<= left3 right3)))))))))))))
                                                                    (= binary_search__search__result2 
                                                                    binary_search__search__result))
                                                                    (= 
                                                                    binary_search__search__result1 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

;; "result'unused"
(define-fun resultqtunused () Int
  binary_search__search__result1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  binary_search__search__result1)

;; "H"
(assert
  (not
    (and
      (<= (first a) binary_search__search__result1)
      (<= binary_search__search__result1 (last a)))))

(declare-const index Int)

;; "H"
(assert (<= (first a) index))

;; "H"
(assert (<= index (last a)))

;; Goal "def'vc"
;; File "binary_search.ads", line 30, characters 0-0
(assert
  (not (not (= (to_rep (select (to_array a) index)) i))))

(check-sat)
