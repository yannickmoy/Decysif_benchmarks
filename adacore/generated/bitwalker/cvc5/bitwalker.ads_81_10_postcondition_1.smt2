;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "length"
(define-fun length ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

;; "lsr"
(declare-fun lsr ((_ BitVec 8)
  Int) (_ BitVec 8))

;; "pow2"
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one (pow2 (- 8 1))))

;; "lsr_bv_is_lsr"
(assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483646)))

;; "to_rep"
(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)

;; "inversion_axiom"
(assert
  (forall ((x unsigned_8))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep (rec__first (mk f l))) f)
             (= (to_rep (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int unsigned_8))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int unsigned_8)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int unsigned_8)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "nth8_stream"
(declare-fun nth8_stream (us_t
  Int) Bool)

;; "nth"
(define-fun nth ((param__x (_ BitVec 8)) (param__pos Int)) Bool
  (= (bvand (ite (< param__pos 8)
              (bvlshr param__x ((_ int2bv 8) param__pos))
              #x00) #x01) #x01))

;; "pokebit8"
(declare-fun pokebit8 ((_ BitVec 8)
  Int
  Bool) (_ BitVec 8))

;; "pokebit8__function_guard"
(declare-fun pokebit8__function_guard ((_ BitVec 8)
  (_ BitVec 8)
  Int
  Bool) Bool)

(declare-const addr__first integer)

(declare-const addr__last integer)

(declare-const left Int)

(declare-const flag Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_204 us_t) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool
  (=>
    (not (= temp___skip_constant_201 true))
    (dynamic_property
      0
      2147483646
      (first temp___expr_204)
      (last temp___expr_204))))

;; "nth8_stream__post_axiom"
(assert true)

;; "nth8_stream__def_axiom"
(assert
  (forall ((param__stream us_t))
    (forall ((param__pos Int))
      (! (=
           (= (nth8_stream param__stream param__pos) true)
           (= (nth
                (to_rep1
                  (select (to_array param__stream) (__cdiv param__pos 8)))
                (- 7 (__cmod param__pos 8))) true)) :pattern ((nth8_stream
                                                                param__stream
                                                                param__pos)) ))))

;; Goal "def'vc"
;; File "bitwalker.ads", line 75, characters 0-0
(assert
  (not
  (forall ((addr (Array Int unsigned_8)))
    (=>
      (dynamic_property
        0
        2147483646
        (to_rep addr__first)
        (to_rep addr__last))
      (=>
        (in_range1 left)
        (=>
          (and
            (= (to_rep addr__first) 0)
            (< left (* 8 (length (to_rep addr__first) (to_rep addr__last)))))
          (forall ((o Int))
            (=>
              (= (to_rep addr__last) o)
              (forall ((o1 Int))
                (=>
                  (= (to_rep addr__first) o1)
                  (forall ((o2 Int))
                    (=>
                      (= (to_rep addr__last) o2)
                      (forall ((o3 Int))
                        (=>
                          (= (to_rep addr__first) o3)
                          (let ((o4 flag))
                            (let ((o5 (__cmod left 8)))
                              (forall ((o6 Int))
                                (=>
                                  (= (to_rep addr__last) o6)
                                  (forall ((o7 Int))
                                    (=>
                                      (= (to_rep addr__first) o7)
                                      (let ((temp___338 (__cdiv left 8)))
                                        (=>
                                          (and
                                            (<= o7 temp___338)
                                            (<= temp___338 o6))
                                          (forall ((o8 (_ BitVec 8)))
                                            (=>
                                              (= (to_rep1
                                                   (select addr temp___338)) o8)
                                              (let ((o9 (pokebit8 o8 o5 o4)))
                                                (=>
                                                  (and
                                                    (pokebit8__function_guard
                                                      o9
                                                      o8
                                                      o5
                                                      o4)
                                                    (and
                                                      (forall ((i Int))
                                                        (=>
                                                          (and
                                                            (<= 0 i)
                                                            (<= i 7))
                                                          (=>
                                                            (not
                                                              (= i (- 7 o5)))
                                                            (=
                                                              (= (nth o9 i) true)
                                                              (= (nth o8 i) true)))))
                                                      (=
                                                        (= (nth o9 (- 7 o5)) true)
                                                        (= o4 true))))
                                                  (forall ((o10 unsigned_8))
                                                    (=>
                                                      (= (to_rep1 o10) o9)
                                                      (let ((temp___341 (__cdiv 
                                                        left 8)))
                                                        (=>
                                                          (and
                                                            (<= o3 temp___341)
                                                            (<= temp___341 o2))
                                                          (forall ((addr1 (Array Int unsigned_8)))
                                                            (=>
                                                              (= addr1 
                                                              (to_array
                                                                (us_tqtmk
                                                                  (store addr temp___341 o10)
                                                                  (rt
                                                                    (of_array
                                                                    addr
                                                                    o3
                                                                    o2)))))
                                                              (forall 
                                                                ((i Int))
                                                                (=>
                                                                  (and
                                                                    (<= 0 i)
                                                                    (<= i (- (* 8 
                                                                    (length
                                                                    (to_rep
                                                                    addr__first)
                                                                    (to_rep
                                                                    addr__last))) 1)))
                                                                  (=>
                                                                    (not
                                                                    (= i 
                                                                    left))
                                                                    (=>
                                                                    (= 
                                                                    (nth8_stream
                                                                    (let ((temp___361qtunused 
                                                                    (of_array
                                                                    addr1
                                                                    (to_rep
                                                                    addr__first)
                                                                    (to_rep
                                                                    addr__last))))
                                                                    (of_array
                                                                    addr1
                                                                    (to_rep
                                                                    addr__first)
                                                                    (to_rep
                                                                    addr__last)))
                                                                    i) true)
                                                                    (= 
                                                                    (nth8_stream
                                                                    (let ((temp___363qtunused 
                                                                    (of_array
                                                                    addr
                                                                    (to_rep
                                                                    addr__first)
                                                                    (to_rep
                                                                    addr__last))))
                                                                    (of_array
                                                                    addr
                                                                    (to_rep
                                                                    addr__first)
                                                                    (to_rep
                                                                    addr__last)))
                                                                    i) true)))))))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
