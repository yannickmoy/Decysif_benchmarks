;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "lsr"
(declare-fun lsr ((_ BitVec 64)
  Int) (_ BitVec 64))

;; "lsl"
(declare-fun lsl ((_ BitVec 64)
  Int) (_ BitVec 64))

;; "pow2"
(declare-fun pow2 (Int) Int)

(declare-const two_power_size_minus_one Int)

;; "two_power_size_minus_one_val"
(assert (= two_power_size_minus_one (pow2 (- 64 1))))

;; "lsr_bv_is_lsr"
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvlshr x n) (lsr x (bv2nat n)))))

;; "lsl_bv_is_lsl"
(assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
    (= (bvshl x n) (lsl x (bv2nat n)))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; "nth"
(define-fun nth ((param__x (_ BitVec 64)) (param__pos Int)) Bool
  (= (bvand (bvlshr param__x ((_ int2bv 64) param__pos)) #x0000000000000001) #x0000000000000001))

(declare-const x (_ BitVec 64))

(declare-const y (_ BitVec 64))

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

;; Goal "def'vc"
;; File "bitwalker.ads", line 131, characters 0-0
(assert
  (not
  (=>
    (forall ((i Int))
      (=> (and (<= 0 i) (<= i 63)) (= (= (nth x i) true) (= (nth y i) true))))
    (forall ((i Int))
      (=>
        (= i 63)
        (=>
          (= (and (ite (<= 0 i) true false) (ite (<= i 63) true false)) true)
          (let ((o x))
            (=>
              (= (bvlshr o ((_ int2bv 64) i)) (bvadd (bvshl (bvlshr o ((_ int2bv 64) (+ i 1))) ((_ int2bv 64) 1)) 
              (ite (= (nth o i) true)
                #x0000000000000001
                #x0000000000000000)))
              (let ((o1 y))
                (=>
                  (= (bvlshr o1 ((_ int2bv 64) i)) (bvadd (bvshl (bvlshr o1 ((_ int2bv 64) (+ i 1))) ((_ int2bv 64) 1)) 
                  (ite (= (nth o1 i) true)
                    #x0000000000000001
                    #x0000000000000000)))
                  (= (bvlshr x ((_ int2bv 64) i)) (bvlshr y ((_ int2bv 64) i)))))))))))))

(check-sat)
(get-info :reason-unknown)
