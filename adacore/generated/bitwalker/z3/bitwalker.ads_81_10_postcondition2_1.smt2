;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "length"
(define-fun length ((x Int) (y Int)) Int
  (ite (<= x y) (+ (- y x) 1) 0))

(declare-const two_power_size_minus_one Int)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483646)))

;; "to_rep"
(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)

;; "inversion_axiom"
(assert
  (forall ((x unsigned_8))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int unsigned_8))))))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep (rec__first (mk f l))) f)
             (= (to_rep (rec__last (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int unsigned_8))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int unsigned_8)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array Int unsigned_8)) (f Int) (l Int)) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "nth8_stream"
(declare-fun nth8_stream (us_t
  Int) Bool)

;; "nth"
(define-fun nth ((param__x (_ BitVec 8)) (param__pos Int)) Bool
  (= (bvand (ite (< param__pos 8)
              (bvlshr param__x ((_ int2bv 8) param__pos))
              #x00) #x01) #x01))

;; "pokebit8"
(declare-fun pokebit8 ((_ BitVec 8)
  Int
  Bool) (_ BitVec 8))

;; "pokebit8__function_guard"
(declare-fun pokebit8__function_guard ((_ BitVec 8)
  (_ BitVec 8)
  Int
  Bool) Bool)

(declare-const addr__first integer)

(declare-const addr__last integer)

(declare-const left Int)

(declare-const flag Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_204 us_t) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool
  (=>
    (not (= temp___skip_constant_201 true))
    (dynamic_property
      0
      2147483646
      (first temp___expr_204)
      (last temp___expr_204))))

;; "nth8_stream__post_axiom"
(assert true)

;; "nth8_stream__def_axiom"
(assert
  (forall ((param__stream us_t))
    (forall ((param__pos Int))
      (! (=
           (= (nth8_stream param__stream param__pos) true)
           (= (nth
                (to_rep1
                  (select (to_array param__stream) (__cdiv param__pos 8)))
                (- 7 (__cmod param__pos 8))) true)) :pattern ((nth8_stream
                                                                param__stream
                                                                param__pos)) ))))

(declare-const addr (Array Int unsigned_8))

;; "addr'unused"
(define-fun addrqtunused () map__ref
  (map__refqtmk addr))

;; "addr'unused"
(define-fun addrqtunused1 () map__ref
  (map__refqtmk addr))

;; "Assume"
(assert
  (dynamic_property 0 2147483646 (to_rep addr__first) (to_rep addr__last)))

;; "Assume"
(assert (in_range1 left))

;; "Assume"
(assert
  (and
    (= (to_rep addr__first) 0)
    (< left (* 8 (length (to_rep addr__first) (to_rep addr__last))))))

(declare-const o Int)

;; "Ensures"
(assert (= (to_rep addr__last) o))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o)

(declare-const o1 Int)

;; "Ensures"
(assert (= (to_rep addr__first) o1))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int unsigned_8)
  addr)

;; "temp___old_346"
(define-fun temp___old_346 () us_t
  (of_array addr o1 o))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused () us_t
  temp___old_346)

(declare-const o2 Int)

;; "Ensures"
(assert (= (to_rep addr__last) o2))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o2)

(declare-const o3 Int)

;; "Ensures"
(assert (= (to_rep addr__first) o3))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () Int
  o3)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int unsigned_8)
  addr)

;; "temp___339"
(define-fun temp___339 () us_t
  (of_array addr o3 o2))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused1 () us_t
  temp___339)

;; "o"
(define-fun o4 () t
  (rt temp___339))

;; "rt'result'unused"
(define-fun rtqtresultqtunused () t
  o4)

;; "o"
(define-fun o5 () Bool
  flag)

;; "o"
(define-fun o6 () Int
  (__cmod left 8))

;; "rem_'result'unused"
(define-fun rem_qtresultqtunused () Int
  o6)

(declare-const o7 Int)

;; "Ensures"
(assert (= (to_rep addr__last) o7))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () Int
  o7)

(declare-const o8 Int)

;; "Ensures"
(assert (= (to_rep addr__first) o8))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused5 () Int
  o8)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int unsigned_8)
  addr)

;; "temp___337"
(define-fun temp___337 () us_t
  (of_array addr o8 o7))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused2 () us_t
  temp___337)

;; "temp___338"
(define-fun temp___338 () Int
  (__cdiv left 8))

;; "div_'result'unused"
(define-fun div_qtresultqtunused () Int
  temp___338)

;; "Assert"
(assert (and (<= o8 temp___338) (<= temp___338 o7)))

;; "o"
(define-fun o9 () (Array Int unsigned_8)
  addr)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int unsigned_8)
  o9)

;; "o"
(define-fun o10 () unsigned_8
  (select o9 temp___338))

;; "get'result'unused"
(define-fun getqtresultqtunused () unsigned_8
  o10)

(declare-const o11 (_ BitVec 8))

;; "Ensures"
(assert (= (to_rep1 o10) o11))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused6 () (_ BitVec 8)
  o11)

;; "o"
(define-fun o12 () (_ BitVec 8)
  (pokebit8 o11 o6 o5))

;; "H"
(assert (pokebit8__function_guard o12 o11 o6 o5))

;; "H"
(assert true)

;; "H"
(assert
  (forall ((i Int))
    (=>
      (and (<= 0 i) (<= i 7))
      (=> (not (= i (- 7 o6))) (= (= (nth o12 i) true) (= (nth o11 i) true))))))

;; "H"
(assert (= (= (nth o12 (- 7 o6)) true) (= o5 true)))

;; "pokebit8'result'unused"
(define-fun pokebit8qtresultqtunused () (_ BitVec 8)
  o12)

(declare-const o13 unsigned_8)

;; "Ensures"
(assert (= (to_rep1 o13) o12))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () unsigned_8
  o13)

;; "temp___341"
(define-fun temp___341 () Int
  (__cdiv left 8))

;; "div_'result'unused"
(define-fun div_qtresultqtunused1 () Int
  temp___341)

;; "Assert"
(assert (and (<= o3 temp___341) (<= temp___341 o2)))

;; "o"
(define-fun o14 () (Array Int unsigned_8)
  addr)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array Int unsigned_8)
  o14)

;; "o"
(define-fun o15 () (Array Int unsigned_8)
  (store o14 temp___341 o13))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int unsigned_8)
  o15)

;; "o"
(define-fun o16 () us_t
  (us_tqtmk o15 o4))

;; "__t'mk'result'unused"
(define-fun us_tqtmkqtresultqtunused () us_t
  o16)

;; "o"
(define-fun o17 () (Array Int unsigned_8)
  (to_array o16))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int unsigned_8)
  o17)

(declare-const addr1 (Array Int unsigned_8))

;; "addr'unused"
(define-fun addrqtunused2 () map__ref
  (map__refqtmk addr1))

;; "H"
(assert (= addr1 o17))

(declare-const i Int)

;; "H"
(assert (<= 0 i))

;; "H"
(assert (<= i (- (* 8 (length (to_rep addr__first) (to_rep addr__last))) 1)))

;; "H"
(assert (not (= i left)))

;; "H"
(assert
  (= (nth8_stream
       (let ((temp___363 (of_array
                           addr
                           (to_rep addr__first)
                           (to_rep addr__last))))
         (of_array addr (to_rep addr__first) (to_rep addr__last)))
       i) true))

;; Goal "def'vc"
;; File "bitwalker.ads", line 75, characters 0-0
(assert
  (not
  (= (nth8_stream
       (let ((temp___361 (of_array
                           addr1
                           (to_rep addr__first)
                           (to_rep addr__last))))
         (of_array addr1 (to_rep addr__first) (to_rep addr__last)))
       i) true)))

(check-sat)
