;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const two_power_size_minus_one Int)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-const byte (_ BitVec 8))

(declare-const left Int)

;; "nth"
(define-fun nth ((param__x (_ BitVec 8)) (param__pos Int)) Bool
  (= (bvand (ite (< param__pos 8)
              (bvlshr param__x ((_ int2bv 8) param__pos))
              #x00) #x01) #x01))

(declare-const ret Bool)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range left))

;; "Assume"
(assert (< left 8))

(declare-const o (_ BitVec 8))

(declare-const o1 Int)

;; "H"
(assert (= o1 (- 7 left)))

(declare-const infix_mnqtresultqtunused Int)

;; "H"
(assert (= infix_mnqtresultqtunused o1))

;; "Ensures"
(assert (in_range o1))

(declare-const range_check_qtresultqtunused Int)

;; "H"
(assert (= range_check_qtresultqtunused o1))

(declare-const infix_lsqtresultqtunused Bool)

;; "H"
(assert (= infix_lsqtresultqtunused (ite (< o1 8) true false)))

(declare-const o2 Int)

(declare-const infix_mnqtresultqtunused1 Int)

(declare-const range_check_qtresultqtunused1 Int)

(declare-const o3 (_ BitVec 8))

(declare-const of_intqtresultqtunused (_ BitVec 8))

(declare-const lsl_bvqtresultqtunused (_ BitVec 8))

;; "H"
(assert
  (ite (< o1 8)
    (and
      (= o2 (- 7 left))
      (and
        (= infix_mnqtresultqtunused1 o2)
        (and
          (in_range o2)
          (and
            (= range_check_qtresultqtunused1 o2)
            (and
              (= o3 ((_ int2bv 8) o2))
              (and
                (= of_intqtresultqtunused o3)
                (and (= o (bvshl #x01 o3)) (= lsl_bvqtresultqtunused o))))))))
    (= o #x00)))

;; "o"
(define-fun o4 () (_ BitVec 8)
  (bvand byte o))

;; "bw_and'result'unused"
(define-fun bw_andqtresultqtunused () (_ BitVec 8)
  o4)

;; "bitwalker__peekbit8__ret__assume"
(define-fun bitwalker__peekbit8__ret__assume () Bool
  (ite (not (= o4 #x00)) true false))

;; "neq'result'unused"
(define-fun neqqtresultqtunused () Bool
  bitwalker__peekbit8__ret__assume)

;; "Assume"
(assert (= bitwalker__peekbit8__ret__assume ret))

(declare-const bitwalker__peekbit8__result Bool)

;; "bitwalker__peekbit8__result'unused"
(define-fun bitwalker__peekbit8__resultqtunused () bool__ref
  (bool__refqtmk bitwalker__peekbit8__result))

;; "H"
(assert (= bitwalker__peekbit8__result ret))

;; "result'unused"
(define-fun resultqtunused () Bool
  bitwalker__peekbit8__result)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  bitwalker__peekbit8__result)

;; "H"
(assert (= bitwalker__peekbit8__result true))

;; Goal "def'vc"
;; File "bitwalker.ads", line 9, characters 0-0
(assert
  (not (= (nth byte (- 7 left)) true)))

(check-sat)
