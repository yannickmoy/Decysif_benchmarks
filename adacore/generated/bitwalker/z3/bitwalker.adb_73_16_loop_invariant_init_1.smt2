;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const two_power_size_minus_one Int)

(declare-datatypes ()
  ((t__ref (t__refqtmk (t__content (_ BitVec 64))))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-const two_power_size_minus_one1 Int)

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483646)))

;; "to_rep"
(declare-fun to_rep1 (unsigned_8) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 8)) unsigned_8)

;; "inversion_axiom"
(assert
  (forall ((x unsigned_8))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int unsigned_8))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int unsigned_8)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "nth8_stream"
(declare-fun nth8_stream (us_t
  Int) Bool)

;; "nth"
(define-fun nth ((param__x (_ BitVec 8)) (param__pos Int)) Bool
  (= (bvand (ite (< param__pos 8)
              (bvlshr param__x ((_ int2bv 8) param__pos))
              #x00) #x01) #x01))

;; "nth"
(define-fun nth1 ((param__x (_ BitVec 64)) (param__pos Int)) Bool
  (= (bvand (bvlshr param__x ((_ int2bv 64) param__pos)) #x0000000000000001) #x0000000000000001))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-const start Int)

(declare-const length1 Int)

(declare-const addr us_t)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_204 us_t) (temp___is_init_200 Bool) (temp___skip_constant_201 Bool) (temp___do_toplevel_202 Bool) (temp___do_typ_inv_203 Bool)) Bool
  (=>
    (not (= temp___skip_constant_201 true))
    (dynamic_property
      0
      2147483646
      (first temp___expr_204)
      (last temp___expr_204))))

;; "nth8_stream__post_axiom"
(assert true)

;; "nth8_stream__def_axiom"
(assert
  (forall ((param__stream us_t))
    (forall ((param__pos Int))
      (! (=
           (= (nth8_stream param__stream param__pos) true)
           (= (nth
                (to_rep1
                  (select (to_array param__stream) (__cdiv param__pos 8)))
                (- 7 (__cmod param__pos 8))) true)) :pattern ((nth8_stream
                                                                param__stream
                                                                param__pos)) ))))

(declare-const flag Bool)

;; "flag'unused"
(define-fun flagqtunused () bool__ref
  (bool__refqtmk flag))

;; "Assume"
(assert (in_range1 start))

;; "Assume"
(assert (in_range1 length1))

;; "Assume"
(assert (dynamic_invariant addr true false true true))

;; "Assume"
(assert
  (and
    (and
      (and (= (first addr) 0) (<= length1 64))
      (<= (+ start length1) 2147483647))
    (<= (* 8 (length addr)) 2147483647)))

;; "o"
(define-fun o () Int
  (length addr))

;; "length'result'unused"
(define-fun lengthqtresultqtunused () Int
  o)

;; "Ensures"
(assert (in_range o))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o)

;; "o"
(define-fun o1 () Int
  (* 8 o))

;; "infix *'result'unused"
(define-fun infix_asqtresultqtunused () Int
  o1)

;; "o"
(define-fun o2 () Int
  (+ start length1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o2)

;; "infix >'result'unused"
(define-fun infix_gtqtresultqtunused () Bool
  (ite (< o1 o2) true false))

;; "o"
(define-fun o3 () Int
  (length addr))

;; "length'result'unused"
(define-fun lengthqtresultqtunused1 () Int
  o3)

;; "Ensures"
(assert (in_range o3))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o3)

;; "o"
(define-fun o4 () Int
  (* 8 o3))

;; "infix *'result'unused"
(define-fun infix_asqtresultqtunused1 () Int
  o4)

;; "o"
(define-fun o5 () Int
  (+ start length1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused1 () Int
  o5)

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  (ite (<= o5 o4) true false))

;; "o"
(define-fun o6 () Int
  (length addr))

;; "length'result'unused"
(define-fun lengthqtresultqtunused2 () Int
  o6)

;; "Ensures"
(assert (in_range o6))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  o6)

;; "o"
(define-fun o7 () Int
  (* 8 o6))

;; "infix *'result'unused"
(define-fun infix_asqtresultqtunused2 () Int
  o7)

;; "Ensures"
(assert (in_range o7))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused3 () Int
  o7)

;; "o"
(define-fun o8 () Int
  (+ start length1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused2 () Int
  o8)

;; "Ensures"
(assert (in_range o8))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused4 () Int
  o8)

;; "o"
(define-fun o9 () Bool
  (ite (< o7 o8) true false))

;; "infix >'result'unused"
(define-fun infix_gtqtresultqtunused1 () Bool
  o9)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o9))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

(declare-const retval (_ BitVec 64))

;; "retval'unused"
(define-fun retvalqtunused () t__ref
  (t__refqtmk retval))

;; "H"
(assert (= retval #x0000000000000000))

;; "Assume"
(assert true)

;; "temp___328"
(define-fun temp___328 () Int
  (- length1 1))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused () Int
  temp___328)

(declare-const i Int)

;; "i'unused"
(define-fun iqtunused () int__ref
  (int__refqtmk i))

;; "H"
(assert (= i 0))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  i)

;; "o"
(define-fun o10 () Bool
  (ite (<= i temp___328) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o10)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  i)

;; "o"
(define-fun o11 () Bool
  (ite (<= 0 i) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused2 () Bool
  o11)

;; "o"
(define-fun o12 () Bool
  (and o11 o10))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o12)

;; "H"
(assert (= o12 true))

;; "temp___loop_entry_332'unused"
(define-fun temp___loop_entry_332qtunused () Bool
  flag)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  flag)

;; "temp___loop_entry_331'unused"
(define-fun temp___loop_entry_331qtunused () (_ BitVec 64)
  retval)

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused () (_ BitVec 64)
  retval)

(declare-const usf Int)

(declare-const anyqtresultqtunused Int)

;; "H"
(assert (= anyqtresultqtunused usf))

(declare-const jqtunused Int)

;; "H"
(assert (= jqtunused usf))

(declare-const o13 Int)

;; "H"
(assert (= o13 (- length1 1)))

(declare-const infix_mnqtresultqtunused1 Int)

;; "H"
(assert (= infix_mnqtresultqtunused1 o13))

(declare-const o14 Bool)

;; "H"
(assert (= o14 (ite (<= usf o13) true false)))

(declare-const infix_lseqqtresultqtunused3 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused3 o14))

(declare-const int__contentqtresultqtunused2 Int)

;; "H"
(assert (= int__contentqtresultqtunused2 i))

(declare-const o15 Int)

;; "H"
(assert (= o15 (- length1 i)))

(declare-const infix_mnqtresultqtunused2 Int)

;; "H"
(assert (= infix_mnqtresultqtunused2 o15))

(declare-const o16 Bool)

;; "H"
(assert (= o16 (ite (<= o15 usf) true false)))

(declare-const infix_lseqqtresultqtunused4 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused4 o16))

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert (= andbqtresultqtunused1 (and o16 o14)))

;; "_f'unused"
(define-fun usfqtunused () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= (- length1 i) j) (<= j (- length1 1)))
           (=
             (= (nth8_stream addr (- (- (+ start length1) j) 1)) true)
             (= (nth1 retval j) true))))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused1 () Bool
  (ite (forall ((j Int))
         (=>
           (and (<= (- length1 i) j) (<= j (- length1 1)))
           (=
             (= (nth8_stream addr (- (- (+ start length1) j) 1)) true)
             (= (nth1 retval j) true))))
    true
    false))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= (- length1 i) j) (<= j (- length1 1)))
      (=
        (= (nth8_stream addr (- (- (+ start length1) j) 1)) true)
        (= (nth1 retval j) true)))))

(declare-const j Int)

;; "H"
(assert (<= length1 j))

;; "H"
(assert (<= j 63))

;; Goal "def'vc"
;; File "bitwalker.ads", line 35, characters 0-0
(assert
  (not (not (= (nth1 retval j) true))))

(check-sat)
