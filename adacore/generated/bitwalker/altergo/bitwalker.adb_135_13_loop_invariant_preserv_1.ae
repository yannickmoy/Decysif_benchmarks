(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 18446744073709551615)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (64 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic two_power_size_minus_one : int

axiom two_power_size_minus_one_val :
  (two_power_size_minus_one = pow2((64 - 1)))

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(18446744073709551616 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  18446744073709551616)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 64)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 18446744073709551615)

logic acc : ('a,('a,bool) farray) farray, 'a -> prop

axiom acc_x :
  (forall r:('a,('a,bool) farray) farray. forall x:'a.
  ((forall y:'a. ((((r[y])[x]) = true) -> acc(r, y))) -> acc(r, x)))

axiom acc_inversion :
  (forall z:('a,('a,bool) farray) farray. forall z1:'a. (acc(z, z1) ->
  (forall y:'a. ((((z[y])[z1]) = true) -> acc(z, y)))))

predicate well_founded(r: ('a,('a,bool) farray) farray) =
  (forall x:'a. acc(r, x))

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

logic ult_closure : (t,(t,bool) farray) farray

axiom ult_closure_def :
  (forall y:t. forall y1:t. ((((ult_closure[y])[y1]) = true) <-> ult(y, y1)))

axiom ult_wf : well_founded(ult_closure)

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

logic ugt_closure : (t,(t,bool) farray) farray

axiom ugt_closure_def :
  (forall y:t. forall y1:t. ((((ugt_closure[y])[y1]) = true) <-> ugt(y, y1)))

axiom ugt_wf : well_founded(ugt_closure)

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

logic slt_closure : (t,(t,bool) farray) farray

axiom slt_closure_def :
  (forall y:t. forall y1:t. ((((slt_closure[y])[y1]) = true) <-> slt(y, y1)))

axiom slt_wf : well_founded(slt_closure)

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

logic sgt_closure : (t,(t,bool) farray) farray

axiom sgt_closure_def :
  (forall y:t. forall y1:t. ((((sgt_closure[y])[y1]) = true) <-> sgt(y, y1)))

axiom sgt_wf : well_founded(sgt_closure)

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 18446744073709551616)))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv(x, of_int(i)) = nth(x, i))))

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 : (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 255)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (8 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth1(bw_and1(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic two_power_size_minus_one1 : int

axiom two_power_size_minus_one_val1 :
  (two_power_size_minus_one1 = pow2((8 - 1)))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(256 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  256)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 8)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 255)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

logic ult_closure1 : (t1,(t1,bool) farray) farray

axiom ult_closure_def1 :
  (forall y:t1. forall y1:t1. ((((ult_closure1[y])[y1]) = true) <-> ult1(y,
  y1)))

axiom ult_wf1 : well_founded(ult_closure1)

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

logic ugt_closure1 : (t1,(t1,bool) farray) farray

axiom ugt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((ugt_closure1[y])[y1]) = true) <-> ugt1(y,
  y1)))

axiom ugt_wf1 : well_founded(ugt_closure1)

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

logic slt_closure1 : (t1,(t1,bool) farray) farray

axiom slt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((slt_closure1[y])[y1]) = true) <-> slt1(y,
  y1)))

axiom slt_wf1 : well_founded(slt_closure1)

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

logic sgt_closure1 : (t1,(t1,bool) farray) farray

axiom sgt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((sgt_closure1[y])[y1]) = true) <-> sgt1(y,
  y1)))

axiom sgt_wf1 : well_founded(sgt_closure1)

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

function bool_eq1(x: t1, y: t1) : bool = (if (x = y) then true else false)

type unsigned_8

logic attr__ATTRIBUTE_MODULUS : t1

type my_index

logic my_indexqtint : my_index -> int

axiom my_indexqtaxiom :
  (forall i:my_index. ((0 <= my_indexqtint(i)) and
  (my_indexqtint(i) <= 2147483646)))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483646))

logic to_rep1 : unsigned_8 -> t1

logic of_rep1 : t1 -> unsigned_8

axiom inversion_axiom1 :
  (forall x:unsigned_8 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t1 [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

type t2 = { rec__first : integer; rec__last : integer
}

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep((mk(f, l)).rec__first) = f) and (to_rep((mk(f,
  l)).rec__last) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,unsigned_8) farray; rt : t2
}

function to_array(a: us_t) : (int,unsigned_8) farray = (a).elts

function of_array(a: (int,unsigned_8) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first(a: us_t) : int = to_rep(((a).rt).rec__first)

function last(a: us_t) : int = to_rep(((a).rt).rec__last)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic nth8_stream : us_t, int -> bool

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs_int(y)) <  mod(x,
  y)) and (mod(x, y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_11 : (forall x:int. (div(x, 1) = x))

axiom Mod_11 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 0)

logic rliteral1 : t1

axiom rliteral_axiom1 : (tqtint1(rliteral1) = 1)

function nth2(param__x: t1, param__pos: int) : bool =
  bool_eq1(bw_and1((if (param__pos <  8) then lsr_bv1(param__x,
  of_int1(param__pos)) else rliteral), rliteral1), rliteral1)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 1)

function nth3(param__x: t, param__pos: int) : bool =
  bool_eq(bw_and(lsr_bv(param__x, of_int(param__pos)), rliteral2), rliteral2)

logic peekbit64 : t, int -> bool

logic peekbit64__function_guard : bool, t, int -> prop

predicate dynamic_invariant(temp___expr_204: us_t, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = ((not (temp___skip_constant_201 = true)) ->
  dynamic_property(0, 2147483646, first(temp___expr_204),
  last(temp___expr_204)))

logic start : int

logic len : int

logic addr__first : integer

logic addr__last : integer

logic value : t

logic maxvalue : int -> t

logic maxvalue__function_guard : t, int -> prop

logic attr__ATTRIBUTE_MODULUS1 : t

axiom nth8_stream__post_axiom : true

axiom nth8_stream__def_axiom :
  (forall param__stream:us_t.
  (forall param__pos:int [nth8_stream(param__stream, param__pos)].
  ((nth8_stream(param__stream, param__pos) = true) <->
  (nth2(to_rep1((to_array(param__stream)[div(param__pos, 8)])),
  (7 - mod(param__pos, 8))) = true))))

axiom maxvalue__post_axiom : true

axiom maxvalue__def_axiom :
  (forall param__len:int [maxvalue(param__len)].
  (maxvalue(param__len) = lsl_bv(rliteral2, of_int(param__len))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. (((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))) and (((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))) and (((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))) and ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d))))))))))

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 0)

 (* "bitwalker.ads", line 87, characters 0-0 *)
goal defqtvc :
  (forall addr:(int,unsigned_8) farray. forall result__:int.
  (in_range1(start) -> (in_range1(len) -> (dynamic_property(0, 2147483646,
  to_rep(addr__first), to_rep(addr__last)) -> (in_range(result__) ->
  (((((to_rep(addr__first) = 0) and ((8 * length(to_rep(addr__first),
  to_rep(addr__last))) <= 2147483647)) and ((start + len) <  2147483647)) and
  ((0 <= len) and (len <= 63))) ->
  (forall o:int. ((to_rep(addr__last) = o) ->
  (forall o1:int. ((to_rep(addr__first) = o1) ->
  (forall o2:int. ((to_rep(addr__last) = o2) ->
  (forall o3:int. ((to_rep(addr__first) = o3) ->
  (forall o4:int. ((to_rep(addr__last) = o4) ->
  (forall o5:int. ((to_rep(addr__first) = o5) ->
  (forall o6:int. ((to_rep(addr__last) = o6) ->
  (forall o7:int. ((to_rep(addr__first) = o7) -> (let o8 = length(o7, o6)
  : int in (in_range(o8) -> (let o9 = (o8 * 8) : int in (in_range(o9) ->
  (let o10 = (start + len) : int in (in_range(o10) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o9 <  o10) then true else false)) ->
  ((not (spark__branch = true)) -> (let o11 = len : int in (let o12 =
  maxvalue(o11) : t in ((maxvalue__function_guard(o12, o11) and
  (o12 = lsl_bv(rliteral2, of_int(o11)))) ->
  (forall spark__branch1:bool. ((spark__branch1 = (if uge(value,
  o12) then true else false)) -> ((not (spark__branch1 = true)) ->
  (let temp___371 = (len - 1) : int in
  (forall i:int. ((i = 0) -> ((andb((if (0 <= i) then true else false),
  (if (i <= temp___371) then true else false)) = true) ->
  (forall o13:int. ((to_rep(addr__last) = o13) ->
  (forall o14:int. ((to_rep(addr__first) = o14) ->
  (forall o15:int. ((to_rep(addr__last) = o15) ->
  (forall o16:int. ((to_rep(addr__first) = o16) ->
  (forall o17:int. ((to_rep(addr__last) = o17) ->
  (forall o18:int. ((to_rep(addr__first) = o18) ->
  (forall addr1:(int,unsigned_8) farray. forall i1:int. ((((0 <= i1) and
  (i1 <= len)) and
  ((forall j:int. (((0 <= j) and (j <= (start - 1))) ->
   ((nth8_stream(of_array(addr, o16, o15), j) = true) <->
   (nth8_stream((let temp___422qtunused = of_array(addr1,
   to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr1,
   to_rep(addr__first), to_rep(addr__last))), j) = true)))) and
  ((forall j:int. (((start <= j) and (j <= ((start + i1) - 1))) ->
   ((nth8_stream((let temp___411qtunused = of_array(addr1,
   to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr1,
   to_rep(addr__first), to_rep(addr__last))), j) = true) <-> (nth3(value,
   (((len - j) - 1) + start)) = true)))) and
  (forall j:int. ((((start + i1) <= j) and
  (j <= ((8 * length(to_rep(addr__first), to_rep(addr__last))) - 1))) ->
  ((nth8_stream((let temp___403qtunused = of_array(addr1,
  to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr1,
  to_rep(addr__first), to_rep(addr__last))), j) = true) <->
  (nth8_stream(of_array(addr, o14, o13), j) = true))))))) ->
  ((andb((if true then true else false), (if ((0 <= i1) and
  (i1 <= (len - 1))) then true else false)) = true) -> (let o19 =
  ((64 - len) + i1) : int in (in_range(o19) -> (in_range1(o19) -> (let o20 =
  value : t in (let o21 = peekbit64(o20, o19) : bool in
  ((peekbit64__function_guard(o21, o20, o19) and (((o21 = true) <->
  (not (bw_and(o20, lsl_bv(rliteral2, of_int((63 - o19)))) = rliteral3))) and
  ((o21 = true) <-> (nth3(o20, (63 - o19)) = true)))) ->
  (forall flag:bool. ((flag = o21) ->
  (forall o22:int. ((to_rep(addr__last) = o22) ->
  (forall o23:int. ((to_rep(addr__first) = o23) -> (let o24 = (start + i1)
  : int in (in_range(o24) -> (let o25 = addr__last : integer in (let o26 =
  addr__first : integer in
  (forall addr2:(int,unsigned_8) farray.
  ((((forall i2:int. (((0 <= i2) and (i2 <= ((8 * length(to_rep(o26),
     to_rep(o25))) - 1))) -> ((not (i2 = o24)) ->
     ((nth8_stream(of_array(addr2, to_rep(o26), to_rep(o25)), i2) = true) <->
     (nth8_stream(of_array(addr1, to_rep(o26), to_rep(o25)), i2) = true))))) and
  ((nth8_stream(of_array(addr2, to_rep(o26), to_rep(o25)), o24) = true) <->
  (flag = true))) and dynamic_invariant(of_array(addr2, to_rep(o26),
  to_rep(o25)), true, true, true, true)) ->
  (((nth8_stream((let temp___378qtunused = of_array(addr2,
  to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr2,
  to_rep(addr__first), to_rep(addr__last))), (start + i1)) = true) <->
  (nth3(value, ((len - i1) - 1)) = true)) ->
  ((forall k:int. (((start <= k) and (k <= ((start + i1) - 1))) ->
   (((not (k = (start + i1))) and ((0 <= k) and
   (k <= ((8 * length(to_rep(addr__first), to_rep(addr__last))) - 1)))) and
   ((nth8_stream((let temp___387qtunused = of_array(addr2,
   to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr2,
   to_rep(addr__first), to_rep(addr__last))), k) = true) <-> (nth3(value,
   (((start + len) - k) - 1)) = true))))) ->
  ((not (i1 = temp___371)) ->
  (forall i2:int. ((i2 = (i1 + 1)) -> (((0 <= i2) and (i2 <= len)) ->
  ((forall j:int. (((0 <= j) and (j <= (start - 1))) ->
   ((nth8_stream(of_array(addr, o16, o15), j) = true) <->
   (nth8_stream((let temp___422qtunused = of_array(addr2,
   to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr2,
   to_rep(addr__first), to_rep(addr__last))), j) = true)))) ->
  (forall j:int. (((start <= j) and (j <= ((start + i2) - 1))) ->
  ((nth8_stream((let temp___411qtunused = of_array(addr2,
  to_rep(addr__first), to_rep(addr__last)) : us_t in of_array(addr2,
  to_rep(addr__first), to_rep(addr__last))), j) = true) -> (nth3(value,
  (((len - j) - 1) + start)) = true)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
