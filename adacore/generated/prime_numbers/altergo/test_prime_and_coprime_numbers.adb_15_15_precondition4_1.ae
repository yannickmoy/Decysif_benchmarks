(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function notb(x: bool) : bool = match_bool(x, false, true)

type us_private

logic us_null_ext__ : us_private

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic max_value : int

logic valid_prime_data : (int,bool) farray -> bool

logic bool_eq : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs_int(y)) <  mod(x,
  y)) and (mod(x, y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <= y) then (x % y) else (-((-x) % y)))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function are_coprime(param__v1: int, param__v2: int) : bool =
  andb(andb(bool_gt(param__v1, 0), bool_gt(param__v2, 0)),
  (if (forall v:int. (((2 <= v) and (v <= min(param__v1, param__v2))) ->
      (not ((mod1(param__v1, v) = 0) and (mod1(param__v2, v) = 0))))) then true else false))

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic initialize_coprime_list : int -> (int,bool) farray

logic initialize_coprime_list__function_guard : (int,bool) farray,
  int -> prop

function has_true(param__number_list: (int,bool) farray, param__low: int,
  param__high: int) : bool =
  (if (exists v:int. (((param__low <= v) and (v <= param__high)) and
      ((param__number_list[v]) = true))) then true else false)

function is_prime(param__value: int) : bool = andb(bool_ge(param__value, 2),
  (if (forall v:int. (((2 <= v) and (v <= (param__value - 1))) ->
      (not (mod1(param__value, v) = 0)))) then true else false))

logic nearest_prime_number : int, int, (int,bool) farray -> int

logic nearest_prime_number__function_guard : int, int, int,
  (int,bool) farray -> prop

axiom valid_prime_data__post_axiom : true

axiom valid_prime_data__def_axiom :
  (forall Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___:(int,bool) farray
  [valid_prime_data(Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___)].
  ((valid_prime_data(Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___) = true) <->
  (forall v:int. (((0 <= v) and (v <= 100000)) ->
  (((Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___[v]) = true) <->
  (is_prime(v) = true))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. (((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))) and (((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))) and (((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))) and ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d))))))))))

 (* "test_prime_and_coprime_numbers.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall is_prime1:(int,bool) farray. forall result__:int.
  (in_range(max_value) -> ((100000 = max_value) ->
  ((valid_prime_data(is_prime1) = true) -> (in_range1(result__) -> (let o =
  nearest_prime_number(555, 1, is_prime1) : int in
  ((nearest_prime_number__function_guard(o, 555, 1, is_prime1) and
  (in_range(o) and ((((0 <= o) and (o <= 100000)) and
  (is_prime(o) = true)) and
  (if (is_prime(555) = true) then (o = 555) else (if (andb(notb(is_prime(555)),
  bool_eq(1, 0)) = true) then ((555 <  o) and
  (forall v:int. (((555 <= v) and (v <= (o - 1))) ->
  (not (is_prime(v) = true))))) else (if (andb(notb(is_prime(555)),
  bool_eq(1, 1)) = true) then ((o <  555) and
  (forall v:int. ((((o + 1) <= v) and (v <= 555)) ->
  (not (is_prime(v) = true))))) else ((andb(notb(is_prime(555)), bool_eq(1,
  2)) = true) ->
  ((forall v:int. (((max(0, ((555 - abs_int((555 - o))) + 1)) <= v) and
   (v <= 555)) -> (not (is_prime(v) = true)))) and
  (forall v:int. (((555 <= v) and (v <= min(100000,
  ((555 + abs_int((555 - o))) - 1)))) -> (not (is_prime(v) = true)))))))))))) ->
  (in_range1(o) -> (let o1 = initialize_coprime_list(2000)
  : (int,bool) farray in ((initialize_coprime_list__function_guard(o1,
  2000) and
  (forall v:int. (((0 <= v) and (v <= 100000)) -> (((o1[v]) = true) <->
  (are_coprime(2000, v) = true))))) ->
  (forall coprimes:(int,bool) farray. ((coprimes = o1) -> ((are_coprime(2000,
  1) = true) -> ((not (1 = 0)) -> (has_true(coprimes, 0, 555) = true)))))))))))))))
