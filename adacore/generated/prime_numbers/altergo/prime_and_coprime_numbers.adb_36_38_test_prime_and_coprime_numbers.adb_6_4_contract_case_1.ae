(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs_int(y)) <  mod(x,
  y)) and (mod(x, y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <= y) then (x % y) else (-((-x) % y)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_gt : int, int -> bool

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function are_coprime(param__v1: int, param__v2: int) : bool =
  andb(andb(bool_gt(param__v1, 0), bool_gt(param__v2, 0)),
  (if (forall v:int. (((2 <= v) and (v <= min(param__v1, param__v2))) ->
      (not ((mod1(param__v1, v) = 0) and (mod1(param__v2, v) = 0))))) then true else false))

logic left : int

logic right : int

type taS

logic taSqtint : taS -> int

axiom taSqtaxiom :
  (forall i:taS. ((1 <= taSqtint(i)) and (taSqtint(i) <= 2147483647)))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

type tbS

logic tbSqtint : tbS -> int

axiom tbSqtaxiom :
  (forall i:tbS. ((1 <= tbSqtint(i)) and (tbSqtint(i) <= 2147483647)))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

type trS

logic trSqtint : trS -> int

axiom trSqtaxiom :
  (forall i:trS. ((0 <= trSqtint(i)) and (trSqtint(i) <= 2147483647)))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. (((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))) and (((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))) and (((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))) and ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d))))))))))

 (* "prime_and_coprime_numbers.adb", line 29, characters 0-0 *)
goal defqtvc :
  (forall a:int. forall b:int. forall r:int. (in_range(left) ->
  (in_range(right) -> (((2 <= left) and (0 <= right)) -> (let o = right
  : int in (let o1 = left : int in (let temp___278 = are_coprime(o1, o)
  : bool in (((temp___278 = true) <-> (((0 <  o1) and (0 <  o)) and
  (forall v:int. (((2 <= v) and (v <= min(o1, o))) -> (not ((mod1(o1,
  v) = 0) and (mod1(o, v) = 0))))))) ->
  (forall test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result:int.
  ((in_range1(a) and (in_range2(b) and (in_range3(r) and
  (exists spark__branch:bool.
  ((spark__branch = (if (left = 0) then true else false)) and
  (if (spark__branch = true) then (test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result = right) else 
  (exists spark__branch1:bool.
  ((spark__branch1 = (if (right = 0) then true else false)) and
  (if (spark__branch1 = true) then (test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result = left) else (let o2 =
  left : int in (in_range1(o2) and
  (exists a1:int. ((a1 = o2) and (let o3 = right : int in (in_range2(o3) and
  (exists b1:int. ((b1 = o3) and
  (exists a2:int. exists b2:int.
  ((exists a3:int. exists b3:int. exists r1:int. ((((0 <  a3) and
   (0 <  b3)) and ((not ((a3 = 1) and (b3 = 1))) and ((are_coprime(a3,
   b3) = true) <-> (are_coprime(left, right) = true)))) and
   (((in_range1(a3) and in_range2(b3)) and in_range3(r1)) and
   (exists r2:int. ((r2 = mod1(a3, b3)) and ((r2 = 0) and ((a2 = a3) and
   (b2 = b3)))))))) and
  ((not ((a2 = 1) and (0 <  b2))) and
  (test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result = b2))))))))))))))))))))) ->
  ((temp___278 = true) ->
  (test_prime_and_coprime_numbers__p__initialize_coprime_list__euclid__result = 1))))))))))))
