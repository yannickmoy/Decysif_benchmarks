;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int Bool))))))

;; "mod"
(define-fun mod1 ((x Int) (y Int)) Int
  (ite (<= 0 y) (mod x y) (- (mod (- x) y))))

;; "is_prime"
(define-fun is_prime ((param__value Int)) Bool
  (and (>= param__value 2) (ite (forall ((v Int))
                                  (=>
                                    (and (<= 2 v) (<= v (- param__value 1)))
                                    (not (= (mod1 param__value v) 0))))
                             true
                             false)))

;; "valid_prime_data"
(declare-fun valid_prime_data ((Array Int Bool)) Bool)

;; "has_prime"
(declare-fun has_prime (Int
  Int) Bool)

;; "nearest_number"
(declare-fun nearest_number ((Array Int Bool)
  Int
  Int) Int)

;; "nearest_number__function_guard"
(declare-fun nearest_number__function_guard (Int
  (Array Int Bool)
  Int
  Int) Bool)

(declare-const value Int)

(declare-const mode Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "valid_prime_data__post_axiom"
(assert true)

;; "valid_prime_data__def_axiom"
(assert
  (forall ((Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___ (Array Int Bool)))
    (! (=
         (= (valid_prime_data
              Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___) true)
         (forall ((v Int))
           (=>
             (and (<= 0 v) (<= v 100000))
             (=
               (= (select Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___ v) true)
               (= (is_prime v) true))))) :pattern ((valid_prime_data
                                                     Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___)) )))

;; "has_prime__post_axiom"
(assert true)

;; "has_prime__def_axiom"
(assert
  (forall ((param__low Int) (param__high Int))
    (! (=
         (= (has_prime param__low param__high) true)
         (exists ((v Int))
           (and
             (and (<= param__low v) (<= v param__high))
             (= (is_prime v) true)))) :pattern ((has_prime
                                                  param__low
                                                  param__high)) )))

(declare-const is_prime1 (Array Int Bool))

;; "is_prime'unused"
(define-fun is_primeqtunused () map__ref
  (map__refqtmk is_prime1))

;; "Assume"
(assert (in_range value))

;; "Assume"
(assert (in_range1 mode))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (and
    (and
      (and (<= 0 value) (<= value 100000))
      (= (valid_prime_data is_prime1) true))
    (ite (= mode 0)
      (= (has_prime value 100000) true)
      (ite (= mode 1)
        (= (has_prime 0 value) true)
        (= (has_prime 0 100000) true)))))

;; "o"
(define-fun o () Bool
  (ite (= mode 1) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o)

;; "o"
(define-fun o1 () Int
  value)

;; "o"
(define-fun o2 () Bool
  (is_prime o1))

;; "Ensures"
(assert
  (=
    (= o2 true)
    (and
      (<= 2 o1)
      (forall ((v Int))
        (=> (and (<= 2 v) (<= v (- o1 1))) (not (= (mod1 o1 v) 0)))))))

;; "is_prime'result'unused"
(define-fun is_primeqtresultqtunused () Bool
  o2)

;; "temp___275"
(define-fun temp___275 () Bool
  (and (ite (= o2 true) false true) o))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  temp___275)

;; "o"
(define-fun o3 () Bool
  (ite (= mode 2) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused1 () Bool
  o3)

;; "o"
(define-fun o4 () Int
  value)

;; "o"
(define-fun o5 () Bool
  (is_prime o4))

;; "Ensures"
(assert
  (=
    (= o5 true)
    (and
      (<= 2 o4)
      (forall ((v Int))
        (=> (and (<= 2 v) (<= v (- o4 1))) (not (= (mod1 o4 v) 0)))))))

;; "is_prime'result'unused"
(define-fun is_primeqtresultqtunused1 () Bool
  o5)

;; "temp___276"
(define-fun temp___276 () Bool
  (and (ite (= o5 true) false true) o3))

;; "andb'result'unused"
(define-fun andbqtresultqtunused1 () Bool
  temp___276)

;; "o"
(define-fun o6 () Bool
  (ite (= mode 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused2 () Bool
  o6)

;; "o"
(define-fun o7 () Int
  value)

;; "o"
(define-fun o8 () Bool
  (is_prime o7))

;; "Ensures"
(assert
  (=
    (= o8 true)
    (and
      (<= 2 o7)
      (forall ((v Int))
        (=> (and (<= 2 v) (<= v (- o7 1))) (not (= (mod1 o7 v) 0)))))))

;; "is_prime'result'unused"
(define-fun is_primeqtresultqtunused2 () Bool
  o8)

;; "temp___274"
(define-fun temp___274 () Bool
  (and (ite (= o8 true) false true) o6))

;; "andb'result'unused"
(define-fun andbqtresultqtunused2 () Bool
  temp___274)

;; "o"
(define-fun o9 () Int
  value)

;; "temp___273"
(define-fun temp___273 () Bool
  (is_prime o9))

;; "Ensures"
(assert
  (=
    (= temp___273 true)
    (and
      (<= 2 o9)
      (forall ((v Int))
        (=> (and (<= 2 v) (<= v (- o9 1))) (not (= (mod1 o9 v) 0)))))))

;; "is_prime'result'unused"
(define-fun is_primeqtresultqtunused3 () Bool
  temp___273)

;; "o"
(define-fun o10 () Int
  value)

;; "o"
(define-fun o11 () Int
  mode)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int Bool)
  is_prime1)

;; "o"
(define-fun o12 () Int
  (nearest_number is_prime1 o11 o10))

;; "H"
(assert (nearest_number__function_guard o12 is_prime1 o11 o10))

;; "H"
(assert (in_range o12))

;; "H"
(assert (<= 0 o12))

;; "H"
(assert (<= o12 100000))

;; "H"
(assert (= (select is_prime1 o12) true))

;; "H"
(assert
  (ite (= (= (ite (select is_prime1 o10) 1 0) (ite (distinct 1 0) 1 0)) true)
    (= o12 o10)
    (ite (= (and (= (ite (select is_prime1 o10) 1 0) (ite (distinct 0 0) 1 0)) (= 
      o11 0)) true)
      (and
        (< o10 o12)
        (forall ((v Int))
          (=>
            (and (<= o10 v) (<= v (- o12 1)))
            (not (= (select is_prime1 v) true)))))
      (ite (= (and (= (ite (select is_prime1 o10) 1 0) (ite (distinct 0 0) 1 0)) (= 
        o11 1)) true)
        (and
          (< o12 o10)
          (forall ((v Int))
            (=>
              (and (<= (+ o12 1) v) (<= v o10))
              (not (= (select is_prime1 v) true)))))
        (=>
          (= (and (= (ite (select is_prime1 o10) 1 0) (ite (distinct 0 0) 1 0)) (= 
          o11 2)) true)
          (and
            (forall ((v Int))
              (=>
                (and
                  (<= (max 0 (+ (- o10 (abs (- o10 o12))) 1)) v)
                  (<= v o10))
                (not (= (select is_prime1 v) true))))
            (forall ((v Int))
              (=>
                (and
                  (<= o10 v)
                  (<= v (min 100000 (- (+ o10 (abs (- o10 o12))) 1))))
                (not (= (select is_prime1 v) true))))))))))

;; "nearest_number'result'unused"
(define-fun nearest_numberqtresultqtunused () Int
  o12)

(declare-const test_prime_and_coprime_numbers__p__nearest_prime_number__result Int)

;; "test_prime_and_coprime_numbers__p__nearest_prime_number__result'unused"
(define-fun test_prime_and_coprime_numbers__p__nearest_prime_number__resultqtunused 
  () int__ref
  (int__refqtmk
    test_prime_and_coprime_numbers__p__nearest_prime_number__result))

;; "H"
(assert
  (= test_prime_and_coprime_numbers__p__nearest_prime_number__result 
  o12))

;; "Assert"
(assert
  (=>
    (= temp___273 true)
    (= test_prime_and_coprime_numbers__p__nearest_prime_number__result 
    value)))

;; "Assert"
(assert
  (=>
    (= temp___274 true)
    (and
      (< value test_prime_and_coprime_numbers__p__nearest_prime_number__result)
      (forall ((v Int))
        (=>
          (and
            (<= value v)
            (<= v (- test_prime_and_coprime_numbers__p__nearest_prime_number__result 1)))
          (not (= (is_prime v) true)))))))

;; "Assert"
(assert
  (=>
    (= temp___275 true)
    (and
      (< test_prime_and_coprime_numbers__p__nearest_prime_number__result 
      value)
      (forall ((v Int))
        (=>
          (and
            (<= (+ test_prime_and_coprime_numbers__p__nearest_prime_number__result 1) v)
            (<= v value))
          (not (= (is_prime v) true)))))))

;; "H"
(assert (= temp___276 true))

(declare-const v Int)

;; "H"
(assert
  (<= (max
        0
        (+ (- value (abs (- value test_prime_and_coprime_numbers__p__nearest_prime_number__result))) 1)) 
  v))

;; "H"
(assert (<= v value))

;; Goal "def'vc"
;; File "prime_and_coprime_numbers.ads", line 105, characters 0-0
(assert
  (not (not (= (is_prime v) true))))

(check-sat)
