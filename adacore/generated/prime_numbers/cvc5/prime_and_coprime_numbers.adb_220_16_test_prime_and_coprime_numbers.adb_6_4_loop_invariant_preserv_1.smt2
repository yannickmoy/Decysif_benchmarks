;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "mod"
(define-fun mod1 ((x Int) (y Int)) Int
  (ite (<= 0 y) (mod x y) (- (mod (- x) y))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "is_prime"
(define-fun is_prime ((param__value Int)) Bool
  (and (>= param__value 2) (ite (forall ((v Int))
                                  (=>
                                    (and (<= 2 v) (<= v (- param__value 1)))
                                    (not (= (mod1 param__value v) 0))))
                             true
                             false)))

(declare-const v Int)

;; Goal "def'vc"
;; File "prime_and_coprime_numbers.adb", line 209, characters 0-0
(assert
  (not
  (=>
    (in_range v)
    (=>
      (and (<= 2 v) (not (= (is_prime v) true)))
      (let ((temp___333 (- v 1)))
        (forall ((value Int))
          (=>
            (= value 2)
            (=>
              (= (and (ite (<= 2 value) true false) (ite (<= value temp___333)
                                                      true
                                                      false)) true)
              (forall ((value1 Int))
                (=>
                  (exists ((w Int))
                    (and (and (<= value1 w) (<= w (- v 1))) (= (mod1 v w) 0)))
                  (=>
                    (and (<= 2 value1) (<= value1 (- v 1)))
                    (forall ((spark__branch Bool))
                      (=>
                        (= spark__branch (ite (= (mod1 v value1) 0)
                                           true
                                           false))
                        (=>
                          (not (= spark__branch true))
                          (=>
                            (not (= value1 temp___333))
                            (forall ((value2 Int))
                              (=>
                                (= value2 (+ value1 1))
                                (exists ((w Int))
                                  (and
                                    (and (<= value2 w) (<= w (- v 1)))
                                    (= (mod1 v w) 0))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
