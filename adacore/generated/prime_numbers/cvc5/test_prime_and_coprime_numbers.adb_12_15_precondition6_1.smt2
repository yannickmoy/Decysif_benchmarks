;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-const max_value Int)

;; "valid_prime_data"
(declare-fun valid_prime_data ((Array Int Bool)) Bool)

;; "mod"
(define-fun mod1 ((x Int) (y Int)) Int
  (ite (<= 0 y) (mod x y) (- (mod (- x) y))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "is_prime"
(define-fun is_prime ((param__value Int)) Bool
  (and (>= param__value 2) (ite (forall ((v Int))
                                  (=>
                                    (and (<= 2 v) (<= v (- param__value 1)))
                                    (not (= (mod1 param__value v) 0))))
                             true
                             false)))

;; "has_prime"
(declare-fun has_prime (Int
  Int) Bool)

;; "valid_prime_data__post_axiom"
(assert true)

;; "valid_prime_data__def_axiom"
(assert
  (forall ((Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___ (Array Int Bool)))
    (! (=
         (= (valid_prime_data
              Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___) true)
         (forall ((v Int))
           (=>
             (and (<= 0 v) (<= v 100000))
             (=
               (= (select Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___ v) true)
               (= (is_prime v) true))))) :pattern ((valid_prime_data
                                                     Test_prime_and_coprime_numbers__p__set__is_prime___is_prime___)) )))

;; "has_prime__post_axiom"
(assert true)

;; "has_prime__def_axiom"
(assert
  (forall ((param__low Int) (param__high Int))
    (! (=
         (= (has_prime param__low param__high) true)
         (exists ((v Int))
           (and
             (and (<= param__low v) (<= v param__high))
             (= (is_prime v) true)))) :pattern ((has_prime
                                                  param__low
                                                  param__high)) )))

;; Goal "def'vc"
;; File "test_prime_and_coprime_numbers.adb", line 3, characters 0-0
(assert
  (not
  (forall ((is_prime1 (Array Int Bool)) (result__ Int))
    (=>
      (in_range max_value)
      (=>
        (= 100000 max_value)
        (=>
          (= (valid_prime_data is_prime1) true)
          (=>
            (in_range1 result__)
            (=> (not (= 1 0)) (= (has_prime 0 555) true)))))))))

(check-sat)
(get-info :reason-unknown)
