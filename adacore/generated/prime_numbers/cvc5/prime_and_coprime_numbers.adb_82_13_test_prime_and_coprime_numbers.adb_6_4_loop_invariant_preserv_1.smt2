;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "mod"
(define-fun mod1 ((x Int) (y Int)) Int
  (ite (<= 0 y) (mod x y) (- (mod (- x) y))))

;; "min"
(define-fun min ((x Int) (y Int)) Int
  (ite (<= x y) x y))

;; "max"
(define-fun max ((x Int) (y Int)) Int
  (ite (<= x y) y x))

;; "Min_r"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; "Max_l"
(assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; "Min_comm"
(assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; "Max_comm"
(assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; "Min_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; "Max_assoc"
(assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

;; "are_coprime"
(define-fun are_coprime ((param__v1 Int) (param__v2 Int)) Bool
  (and (and (> param__v1 0) (> param__v2 0)) (ite (forall ((v Int))
                                                    (=>
                                                      (and
                                                        (<= 2 v)
                                                        (<= v (min
                                                                param__v1
                                                                param__v2)))
                                                      (not
                                                        (and
                                                          (= (mod1
                                                               param__v1
                                                               v) 0)
                                                          (= (mod1
                                                               param__v2
                                                               v) 0)))))
                                               true
                                               false)))

(declare-const value Int)

;; "euclid"
(declare-fun euclid (Int
  Int) Int)

;; "euclid__function_guard"
(declare-fun euclid__function_guard (Int
  Int
  Int) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; Goal "def'vc"
;; File "prime_and_coprime_numbers.ads", line 51, characters 0-0
(assert
  (not
  (forall ((result__ (Array Int Bool)))
    (=>
      (in_range value)
      (=>
        (<= 2 value)
        (forall ((index Int))
          (=>
            (= index 0)
            (=>
              (= (and (ite (<= 0 index) true false) (ite (<= index 100000)
                                                      true
                                                      false)) true)
              (let ((o value))
                (let ((o1 (euclid o index)))
                  (=>
                    (and
                      (euclid__function_guard o1 o index)
                      (and
                        (in_range o1)
                        (ite (= (are_coprime o index) true)
                          (= o1 1)
                          (< 1 o1))))
                    (forall ((result__1 (Array Int Bool)))
                      (=>
                        (= result__1 (store result__ index (ite (= o1 1)
                                                             true
                                                             false)))
                        (forall ((result__2 (Array Int Bool)) (index1 Int))
                          (=>
                            (forall ((v Int))
                              (=>
                                (and (<= 0 v) (<= v index1))
                                (=
                                  (= (select result__2 v) true)
                                  (= (are_coprime value v) true))))
                            (=>
                              (= (and (ite (forall ((temp___251 Int))
                                             (=>
                                               (and
                                                 (<= 0 temp___251)
                                                 (<= temp___251 100000))
                                               (=>
                                                 (or
                                                   (< 100000 temp___251)
                                                   (or
                                                     (< temp___251 0)
                                                     (< index1 temp___251)))
                                                 (= (select result__2 temp___251) (select result__ temp___251)))))
                                        true
                                        false) (ite (and
                                                      (<= 0 index1)
                                                      (<= index1 100000))
                                                 true
                                                 false)) true)
                              (=>
                                (not (= index1 100000))
                                (forall ((index2 Int))
                                  (=>
                                    (= index2 (+ index1 1))
                                    (let ((o2 value))
                                      (let ((o3 (euclid o2 index2)))
                                        (=>
                                          (and
                                            (euclid__function_guard
                                              o3
                                              o2
                                              index2)
                                            (and
                                              (in_range o3)
                                              (ite (= (are_coprime o2 index2) true)
                                                (= o3 1)
                                                (< 1 o3))))
                                          (forall ((result__3 (Array Int Bool)))
                                            (=>
                                              (= result__3 (store result__2 index2 
                                              (ite (= o3 1)
                                                true
                                                false)))
                                              (forall ((v Int))
                                                (=>
                                                  (and
                                                    (<= 0 v)
                                                    (<= v index2))
                                                  (=>
                                                    (= (select result__3 v) true)
                                                    (= (are_coprime value v) true))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
