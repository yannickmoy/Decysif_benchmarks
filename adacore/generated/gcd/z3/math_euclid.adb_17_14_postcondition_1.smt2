;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "divides"
(declare-fun divides (Int
  Int) Bool)

;; "divides__function_guard"
(declare-fun divides__function_guard (Bool
  Int
  Int) Bool)

;; "mod"
(define-fun mod1 ((x Int) (y Int)) Int
  (ite (<= 0 y) (mod x y) (- (mod (- x) y))))

(declare-const a Int)

(declare-const b Int)

(declare-const x Int)

;; "divides__post_axiom"
(assert true)

;; "divides__def_axiom"
(assert
  (forall ((param__a Int) (param__b Int))
    (! (=
         (= (divides param__a param__b) true)
         (= (mod1 param__b param__a) 0)) :pattern ((divides
                                                     param__a
                                                     param__b)) )))

;; "Assume"
(assert (in_range a))

;; "Assume"
(assert (in_range b))

;; "Assume"
(assert (in_range x))

;; "H"
(assert (divides__function_guard (divides b a) b a))

;; "H"
(assert (divides__function_guard (divides x b) x b))

;; "Assume"
(assert (and (= (divides b a) true) (= (divides x b) true)))

;; "H"
(assert (divides__function_guard (divides x a) x a))

;; Goal "def'vc"
;; File "math_euclid.adb", line 13, characters 0-0
(assert
  (not (= (divides x a) true)))

(check-sat)
