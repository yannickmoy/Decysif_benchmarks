;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort index 0)

;; "index'int"
(declare-fun indexqtint (index) Int)

;; "index'axiom"
(assert
  (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 8))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 1 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep ((x index)) Int
  (indexqtint x))

;; "of_rep"
(declare-fun of_rep (Int) index)

;; "inversion_axiom"
(assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x index)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "consistent"
(define-fun consistent ((param__b (Array Int index)) (param__k Int)) Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i param__k))
           (forall ((j Int))
             (=>
               (and (<= 1 j) (<= j (- i 1)))
               (and
                 (and
                   (not
                     (= (to_rep (select param__b i)) (to_rep
                                                       (select param__b j))))
                   (not
                     (= (- i j) (- (to_rep (select param__b i)) (to_rep
                                                                  (select param__b j))))))
                 (not
                   (= (- i j) (- (to_rep (select param__b j)) (to_rep
                                                                (select param__b i))))))))))
    true
    false))

(declare-const i Int)

(declare-const c (Array Int index))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; Goal "def'vc"
;; File "queen.ads", line 34, characters 0-0
(assert
  (not
  (forall ((b (Array Int index)) (done__ Bool))
    (=>
      (in_range i)
      (=>
        (and
          (and
            (not (= done__ true))
            (forall ((j Int))
              (=>
                (and (<= 1 j) (<= j i))
                (= (to_rep (select c j)) (to_rep (select b j))))))
          (=> (< 1 i) (= (consistent b (- i 1)) true)))
        (forall ((b1 (Array Int index)) (done__1 Bool))
          (=>
            (let ((o i))
              (let ((o1 (consistent b o)))
                (and
                  (=
                    (= o1 true)
                    (forall ((i1 Int))
                      (=>
                        (and (<= 1 i1) (<= i1 o))
                        (forall ((j Int))
                          (=>
                            (and (<= 1 j) (<= j (- i1 1)))
                            (and
                              (and
                                (not
                                  (= (to_rep (select b i1)) (to_rep
                                                              (select b j))))
                                (not
                                  (= (- i1 j) (- (to_rep (select b i1)) 
                                  (to_rep
                                    (select b j))))))
                              (not
                                (= (- i1 j) (- (to_rep (select b j)) 
                                (to_rep
                                  (select b i1)))))))))))
                  (exists ((spark__branch Bool))
                    (and
                      (= spark__branch o1)
                      (ite (= spark__branch true)
                        (exists ((spark__branch1 Bool))
                          (and
                            (= spark__branch1 (ite (= 8 i) true false))
                            (ite (= spark__branch1 true)
                              (and (= done__1 (distinct 1 0)) (= b1 b))
                              (let ((o2 (+ i 1)))
                                (and
                                  (in_range o2)
                                  (and
                                    (ite (= done__1 true)
                                      (= (consistent b1 8) true)
                                      (not (= (consistent c 8) true)))
                                    (forall ((j Int))
                                      (=>
                                        (and (<= 1 j) (<= j (- o2 1)))
                                        (= (to_rep (select b1 j)) (to_rep
                                                                    (select b j)))))))))))
                        (and
                          (and
                            (and
                              (not (= (consistent c i) true))
                              (not
                                (forall ((j Int))
                                  (=>
                                    (and (<= i j) (<= j 8))
                                    (= (consistent c j) true)))))
                            (= b1 b))
                          (= done__1 done__))))))))
            (=> (= done__1 true) (= (consistent b1 8) true)))))))))

(check-sat)
(get-info :reason-unknown)
