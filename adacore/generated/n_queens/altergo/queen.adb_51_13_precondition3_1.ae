(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

function of_int(i: int) : bool = (if (i = 0) then false else true)

type index

logic indexqtint : index -> int

axiom indexqtaxiom :
  (forall i:index. ((1 <= indexqtint(i)) and (indexqtint(i) <= 8)))

predicate in_range(x: int) = ((1 <= x) and (x <= 8))

function to_rep(x: index) : int = indexqtint(x)

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

function consistent(param__b: (int,index) farray, param__k: int) : bool =
  (if (forall i:int. (((1 <= i) and (i <= param__k)) ->
      (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
      (((not (to_rep((param__b[i])) = to_rep((param__b[j])))) and
      (not ((i - j) = (to_rep((param__b[i])) - to_rep((param__b[j])))))) and
      (not ((i - j) = (to_rep((param__b[j])) - to_rep((param__b[i])))))))))) then true else false)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic copy_until : (int,index) farray, int,
  (int,index) farray -> (int,index) farray

logic copy_until__function_guard : (int,index) farray, (int,index) farray,
  int, (int,index) farray -> prop

logic i : int

logic c : (int,index) farray

 (* "queen.ads", line 47, characters 0-0 *)
goal defqtvc :
  (forall b:(int,index) farray. forall done__:bool. (in_range(i) ->
  ((((not (done__ = true)) and
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (to_rep((c[j])) = to_rep((b[j])))))) and ((1 <  i) -> (consistent(b,
  (i - 1)) = true))) ->
  (forall r:int. ((r = 1) -> ((andb((if (1 <= r) then true else false),
  (if (r <= 8) then true else false)) = true) ->
  (forall o:bool.
  ((exists o1:int. ((to_rep((c[i])) = o1) and (if (o1 <  r) then (let o2 = c
   : (int,index) farray in (let o3 = consistent(o2, 8) : bool in
   (((o3 = true) <->
   (forall i1:int. (((1 <= i1) and (i1 <= 8)) ->
   (forall j:int. (((1 <= j) and (j <= (i1 - 1))) ->
   (((not (to_rep((o2[i1])) = to_rep((o2[j])))) and
   (not ((i1 - j) = (to_rep((o2[i1])) - to_rep((o2[j])))))) and
   (not ((i1 - j) = (to_rep((o2[j])) - to_rep((o2[i1]))))))))))) and
   (o = (if (o3 = true) then false else true))))) else (o = of_int(1))))) ->
  (forall b1:(int,index) farray. forall done__1:bool. forall r1:int.
  ((((not (done__1 = true)) and
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (to_rep((b1[j])) = to_rep((b[j])))))) and ((to_rep((c[i])) <  r1) ->
  (not (consistent(c, 8) = true)))) -> ((andb((if true then true else false),
  (if ((1 <= r1) and (r1 <= 8)) then true else false)) = true) ->
  (forall o1:index. ((to_rep(o1) = r1) ->
  (forall b2:(int,index) farray. ((b2 = (b1[i <- o1])) ->
  (forall o2:int. ((to_rep((c[i])) = o2) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o2 = r1) then true else false)) ->
  ((not (spark__branch = true)) -> (let o3 = c : (int,index) farray in
  (let o4 = i : int in (let o5 = copy_until(b2, o4, o3)
  : (int,index) farray in ((copy_until__function_guard(o5, b2, o4, o3) and
  (forall j:int. (((1 <= j) and (j <= o4)) ->
  (to_rep((o5[j])) = to_rep((b2[j])))))) -> (let o6 = i : int in
  ((1 <  o6) -> (consistent(b2, (o6 - 1)) = true)))))))))))))))))))))))))))
