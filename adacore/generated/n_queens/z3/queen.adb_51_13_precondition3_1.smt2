;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort index 0)

;; "index'int"
(declare-fun indexqtint (index) Int)

;; "index'axiom"
(assert
  (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 8))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 1 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep ((x index)) Int
  (indexqtint x))

;; "of_rep"
(declare-fun of_rep (Int) index)

;; "inversion_axiom"
(assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x index)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int index))))))

;; "consistent"
(define-fun consistent ((param__b (Array Int index)) (param__k Int)) Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i param__k))
           (forall ((j Int))
             (=>
               (and (<= 1 j) (<= j (- i 1)))
               (and
                 (and
                   (not
                     (= (to_rep (select param__b i)) (to_rep
                                                       (select param__b j))))
                   (not
                     (= (- i j) (- (to_rep (select param__b i)) (to_rep
                                                                  (select param__b j))))))
                 (not
                   (= (- i j) (- (to_rep (select param__b j)) (to_rep
                                                                (select param__b i))))))))))
    true
    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "copy_until"
(declare-fun copy_until ((Array Int index)
  Int
  (Array Int index)) (Array Int index))

;; "copy_until__function_guard"
(declare-fun copy_until__function_guard ((Array Int index)
  (Array Int index)
  Int
  (Array Int index)) Bool)

(declare-const i Int)

(declare-const c (Array Int index))

(declare-const b (Array Int index))

(declare-const done__ Bool)

;; "done__'unused"
(define-fun done__qtunused () bool__ref
  (bool__refqtmk done__))

;; "b'unused"
(define-fun bqtunused () map__ref
  (map__refqtmk b))

;; "b'unused"
(define-fun bqtunused1 () map__ref
  (map__refqtmk b))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range i))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (and
    (and
      (not (= done__ true))
      (forall ((j Int))
        (=>
          (and (<= 1 j) (<= j (- i 1)))
          (= (to_rep (select c j)) (to_rep (select b j))))))
    (=> (< 1 i) (= (consistent b (- i 1)) true))))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int index)
  b)

(declare-const r Int)

;; "r'unused"
(define-fun rqtunused () int__ref
  (int__refqtmk r))

;; "H"
(assert (= r 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  r)

;; "o"
(define-fun o () Bool
  (ite (<= r 8) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  r)

;; "o"
(define-fun o1 () Bool
  (ite (<= 1 r) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o1)

;; "o"
(define-fun o2 () Bool
  (and o1 o))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o2)

;; "H"
(assert (= o2 true))

;; "temp___loop_entry_240'unused"
(define-fun temp___loop_entry_240qtunused () (Array Int index)
  b)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int index)
  b)

;; "temp___loop_entry_238'unused"
(define-fun temp___loop_entry_238qtunused () Bool
  done__)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  done__)

;; "temp___loop_entry_237'unused"
(define-fun temp___loop_entry_237qtunused () (Array Int index)
  b)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array Int index)
  b)

(declare-const o3 Bool)

(declare-const int__contentqtresultqtunused2 Int)

;; "H"
(assert (= int__contentqtresultqtunused2 r))

(declare-const o4 index)

;; "H"
(assert (= o4 (select c i)))

(declare-const getqtresultqtunused index)

;; "H"
(assert (= getqtresultqtunused o4))

(declare-const o5 Int)

;; "Ensures"
(assert (= (to_rep o4) o5))

(declare-const to_repqtresultqtunused Int)

;; "H"
(assert (= to_repqtresultqtunused o5))

(declare-const infix_lsqtresultqtunused Bool)

;; "H"
(assert (= infix_lsqtresultqtunused (ite (< o5 r) true false)))

(declare-const of_intqtresultqtunused Bool)

(declare-const o6 (Array Int index))

(declare-const o7 Bool)

(declare-const consistentqtresultqtunused Bool)

;; "H"
(assert
  (ite (< o5 r)
    (and
      (= o6 c)
      (and
        (= o7 (consistent o6 8))
        (and
          (=
            (= o7 true)
            (forall ((i1 Int))
              (=>
                (and (<= 1 i1) (<= i1 8))
                (forall ((j Int))
                  (=>
                    (and (<= 1 j) (<= j (- i1 1)))
                    (and
                      (and
                        (not
                          (= (to_rep (select o6 i1)) (to_rep (select o6 j))))
                        (not
                          (= (- i1 j) (- (to_rep (select o6 i1)) (to_rep
                                                                   (select 
                                                                   o6 j))))))
                      (not
                        (= (- i1 j) (- (to_rep (select o6 j)) (to_rep
                                                                (select 
                                                                o6 i1)))))))))))
          (and
            (= consistentqtresultqtunused o7)
            (= o3 (ite (= o7 true) false true))))))
    (and (= o3 (distinct 1 0)) (= of_intqtresultqtunused o3))))

(declare-const usf Int)

(declare-const anyqtresultqtunused Int)

;; "H"
(assert (= anyqtresultqtunused usf))

(declare-const jqtunused Int)

;; "H"
(assert (= jqtunused usf))

(declare-const o8 Int)

;; "H"
(assert (= o8 (- i 1)))

(declare-const infix_mnqtresultqtunused Int)

;; "H"
(assert (= infix_mnqtresultqtunused o8))

(declare-const o9 Bool)

;; "H"
(assert (= o9 (ite (<= usf o8) true false)))

(declare-const infix_lseqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused2 o9))

(declare-const o10 Bool)

;; "H"
(assert (= o10 (ite (<= 1 usf) true false)))

(declare-const infix_lseqqtresultqtunused3 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused3 o10))

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert (= andbqtresultqtunused1 (and o10 o9)))

;; "_f"
(define-fun usf1 () Bool
  (ite true true false))

;; "any'result'unused"
(define-fun anyqtresultqtunused1 () Bool
  usf1)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  done__)

;; "o"
(define-fun o11 () Bool
  (and (ite (= done__ true) false true) usf1))

;; "andb'result'unused"
(define-fun andbqtresultqtunused2 () Bool
  o11)

;; "andb'result'unused"
(define-fun andbqtresultqtunused3 () Bool
  (and o11 o3))

(declare-const b1 (Array Int index))

(declare-const done__1 Bool)

(declare-const r1 Int)

;; "r'unused"
(define-fun rqtunused1 () int__ref
  (int__refqtmk r1))

;; "done__'unused"
(define-fun done__qtunused1 () bool__ref
  (bool__refqtmk done__1))

;; "b'unused"
(define-fun bqtunused2 () map__ref
  (map__refqtmk b1))

;; "LoopInvariant"
(assert
  (and
    (and
      (not (= done__1 true))
      (forall ((j Int))
        (=>
          (and (<= 1 j) (<= j (- i 1)))
          (= (to_rep (select b1 j)) (to_rep (select b j))))))
    (=> (< (to_rep (select c i)) r1) (not (= (consistent c 8) true)))))

;; "Assume"
(assert
  (= (and (ite true true false) (ite (and (<= 1 r1) (<= r1 8)) true false)) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  r1)

(declare-const o12 index)

;; "Ensures"
(assert (= (to_rep o12) r1))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () index
  o12)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int index)
  b1)

;; "o"
(define-fun o13 () (Array Int index)
  (store b1 i o12))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int index)
  o13)

(declare-const b2 (Array Int index))

;; "b"
(define-fun b3 () map__ref
  (map__refqtmk b2))

;; "H"
(assert (= b2 o13))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  r1)

;; "o"
(define-fun o14 () index
  (select c i))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () index
  o14)

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep o14) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o15)

;; "o"
(define-fun o16 () Bool
  (ite (= o15 r1) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o16)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o16))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused2 () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused4 () (Array Int index)
  b2)

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused3 () Bool
  done__1)

;; "o"
(define-fun o17 () (Array Int index)
  c)

;; "o"
(define-fun o18 () Int
  i)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused5 () (Array Int index)
  b2)

;; "o"
(define-fun o19 () (Array Int index)
  (copy_until b2 o18 o17))

;; "H"
(assert (copy_until__function_guard o19 b2 o18 o17))

;; "H"
(assert true)

;; "H"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j o18))
      (= (to_rep (select o19 j)) (to_rep (select b2 j))))))

;; "copy_until'result'unused"
(define-fun copy_untilqtresultqtunused () (Array Int index)
  o19)

;; "o"
(define-fun o20 () Int
  i)

;; "H"
(assert (< 1 o20))

;; Goal "def'vc"
;; File "queen.ads", line 47, characters 0-0
(assert
  (not (= (consistent b2 (- o20 1)) true)))

(check-sat)
