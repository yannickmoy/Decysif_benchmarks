;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort index 0)

;; "index'int"
(declare-fun indexqtint (index) Int)

;; "index'axiom"
(assert
  (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 8))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 1 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep ((x index)) Int
  (indexqtint x))

;; "of_rep"
(declare-fun of_rep (Int) index)

;; "inversion_axiom"
(assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x index)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int index))))))

;; "consistent"
(define-fun consistent ((param__b (Array Int index)) (param__k Int)) Bool
  (ite (forall ((i Int))
         (=>
           (and (<= 1 i) (<= i param__k))
           (forall ((j Int))
             (=>
               (and (<= 1 j) (<= j (- i 1)))
               (and
                 (and
                   (not
                     (= (to_rep (select param__b i)) (to_rep
                                                       (select param__b j))))
                   (not
                     (= (- i j) (- (to_rep (select param__b i)) (to_rep
                                                                  (select param__b j))))))
                 (not
                   (= (- i j) (- (to_rep (select param__b j)) (to_rep
                                                                (select param__b i))))))))))
    true
    false))

(declare-const i Int)

(declare-const c (Array Int index))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const b (Array Int index))

(declare-const done__ Bool)

;; "done__'unused"
(define-fun done__qtunused () bool__ref
  (bool__refqtmk done__))

;; "b"
(define-fun b1 () map__ref
  (map__refqtmk b))

;; "b'unused"
(define-fun bqtunused () map__ref
  b1)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range i))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (and
    (and
      (not (= done__ true))
      (forall ((j Int))
        (=>
          (and (<= 1 j) (<= j i))
          (= (to_rep (select c j)) (to_rep (select b j))))))
    (=> (< 1 i) (= (consistent b (- i 1)) true))))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int index)
  b)

(declare-const b2 (Array Int index))

(declare-const done__1 Bool)

;; "done__'unused"
(define-fun done__qtunused1 () bool__ref
  (bool__refqtmk done__1))

;; "b'unused"
(define-fun bqtunused1 () map__ref
  (map__refqtmk b2))

(declare-const o Int)

;; "H"
(assert (= o i))

(declare-const map__contentqtresultqtunused1 (Array Int index))

;; "H"
(assert (= map__contentqtresultqtunused1 b))

(declare-const o1 Bool)

;; "H"
(assert (= o1 (consistent b o)))

;; "Ensures"
(assert
  (=
    (= o1 true)
    (forall ((i1 Int))
      (=>
        (and (<= 1 i1) (<= i1 o))
        (forall ((j Int))
          (=>
            (and (<= 1 j) (<= j (- i1 1)))
            (and
              (and
                (not (= (to_rep (select b i1)) (to_rep (select b j))))
                (not
                  (= (- i1 j) (- (to_rep (select b i1)) (to_rep (select b j))))))
              (not
                (= (- i1 j) (- (to_rep (select b j)) (to_rep (select b i1))))))))))))

(declare-const consistentqtresultqtunused Bool)

;; "H"
(assert (= consistentqtresultqtunused o1))

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

;; "H"
(assert (= spark__branchqtunused (bool__refqtmk spark__branch)))

;; "H"
(assert (= spark__branch o1))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const o2 Bool)

(declare-const infix_eqqtresultqtunused Bool)

(declare-const spark__branch1 Bool)

(declare-const spark__branchqtunused1 bool__ref)

(declare-const bool__contentqtresultqtunused1 Bool)

(declare-const map__contentqtresultqtunused2 (Array Int index))

(declare-const bool__contentqtresultqtunused2 Bool)

(declare-const o3 Int)

(declare-const infix_plqtresultqtunused Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const param__bqtunused map__ref)

(declare-const o4 Bool)

(declare-const of_intqtresultqtunused Bool)

;; "H"
(assert
  (ite (= spark__branch true)
    (and
      (= o2 (ite (= 8 i) true false))
      (and
        (= infix_eqqtresultqtunused o2)
        (and
          (= spark__branchqtunused1 (bool__refqtmk spark__branch1))
          (and
            (= spark__branch1 o2)
            (and
              (= bool__contentqtresultqtunused1 spark__branch1)
              (ite (= spark__branch1 true)
                (and
                  (and
                    (= o4 (distinct 1 0))
                    (and (= of_intqtresultqtunused o4) (= done__1 o4)))
                  (= b2 b))
                (and
                  (= map__contentqtresultqtunused2 b)
                  (and
                    (= bool__contentqtresultqtunused2 done__)
                    (and
                      (= o3 (+ i 1))
                      (and
                        (= infix_plqtresultqtunused o3)
                        (and
                          (in_range o3)
                          (and
                            (= range_check_qtresultqtunused o3)
                            (and
                              (= param__bqtunused b1)
                              (and
                                (ite (= done__1 true)
                                  (= (consistent b2 8) true)
                                  (not (= (consistent c 8) true)))
                                (forall ((j Int))
                                  (=>
                                    (and (<= 1 j) (<= j (- o3 1)))
                                    (= (to_rep (select b2 j)) (to_rep
                                                                (select 
                                                                b j)))))))))))))))))))
    (and
      (and
        (and
          (not (= (consistent c i) true))
          (not
            (forall ((j Int))
              (=> (and (<= i j) (<= j 8)) (= (consistent c j) true)))))
        (= b2 b))
      (= done__1 done__))))

;; "H"
(assert (not (= done__1 true)))

;; Goal "def'vc"
;; File "queen.ads", line 34, characters 0-0
(assert
  (not (not (= (consistent c 8) true))))

(check-sat)
