(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom :
  (forall i:positive. ((1 <= positiveqtint(i)) and
  (positiveqtint(i) <= 2147483647)))

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type location

logic locationqtint : location -> int

axiom locationqtaxiom :
  (forall i:location. ((1 <= locationqtint(i)) and (locationqtint(i) <= 5)))

predicate in_range1(x: int) = ((1 <= x) and (x <= 5))

function to_rep1(x: location) : int = locationqtint(x)

logic of_rep1 : int -> location

axiom inversion_axiom1 :
  (forall x:location [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:location [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__trains__track__from : location;
rec__trains__track__to : location; rec__trains__track__length : positive
}

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic trains__track__from__first__bit : int

logic trains__track__from__last__bit : int

logic trains__track__from__position : int

axiom trains__track__from__first__bit_axiom :
  (0 <= trains__track__from__first__bit)

axiom trains__track__from__last__bit_axiom :
  (trains__track__from__first__bit <  trains__track__from__last__bit)

axiom trains__track__from__position_axiom :
  (0 <= trains__track__from__position)

logic trains__track__to__first__bit : int

logic trains__track__to__last__bit : int

logic trains__track__to__position : int

axiom trains__track__to__first__bit_axiom :
  (0 <= trains__track__to__first__bit)

axiom trains__track__to__last__bit_axiom :
  (trains__track__to__first__bit <  trains__track__to__last__bit)

axiom trains__track__to__position_axiom : (0 <= trains__track__to__position)

logic trains__track__length__first__bit : int

logic trains__track__length__last__bit : int

logic trains__track__length__position : int

axiom trains__track__length__first__bit_axiom :
  (0 <= trains__track__length__first__bit)

axiom trains__track__length__last__bit_axiom :
  (trains__track__length__first__bit <  trains__track__length__last__bit)

axiom trains__track__length__position_axiom :
  (0 <= trains__track__length__position)

logic dummy : us_rep

logic tracks : (int,us_rep) farray

type track_opt_id

logic track_opt_idqtint : track_opt_id -> int

axiom track_opt_idqtaxiom :
  (forall i:track_opt_id. ((0 <= track_opt_idqtint(i)) and
  (track_opt_idqtint(i) <= 8)))

predicate in_range2(x: int) = ((0 <= x) and (x <= 8))

function to_rep2(x: track_opt_id) : int = track_opt_idqtint(x)

logic of_rep2 : int -> track_opt_id

axiom inversion_axiom2 :
  (forall x:track_opt_id [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:track_opt_id [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic previous_tracks : (int,(int,track_opt_id) farray) farray

function no_track_precedes_itself(us_void_param: unit) : bool =
  (if (forall track:int. (((1 <= track) and (track <= 8)) ->
      (forall id:int. (((1 <= id) and (id <= 3)) ->
      (not (to_rep2((let temp___240 =
      (previous_tracks[to_rep1((((tracks[track])).us_split_fields1).rec__trains__track__from)])
      : (int,track_opt_id) farray in (temp___240[id]))) = track)))))) then true else false)

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function to_rep3(x: natural) : int = naturalqtint(x)

logic of_rep3 : int -> natural

axiom inversion_axiom3 :
  (forall x:natural [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:natural [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type track_id

logic track_idqtint : track_id -> int

axiom track_idqtaxiom :
  (forall i:track_id. ((1 <= track_idqtint(i)) and (track_idqtint(i) <= 8)))

predicate in_range4(x: int) = ((1 <= x) and (x <= 8))

function to_rep4(x: track_id) : int = track_idqtint(x)

logic of_rep4 : int -> track_id

axiom inversion_axiom4 :
  (forall x:track_id [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:track_id [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields2 = { rec__trains__train_position__track_begin :
track_id; rec__trains__train_position__pos_begin : natural;
rec__trains__train_position__track_end : track_id }

type us_rep1 = { us_split_fields3 : us_split_fields2
}

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic trains__train_position__track_begin__first__bit : int

logic trains__train_position__track_begin__last__bit : int

logic trains__train_position__track_begin__position : int

axiom trains__train_position__track_begin__first__bit_axiom :
  (0 <= trains__train_position__track_begin__first__bit)

axiom trains__train_position__track_begin__last__bit_axiom :
  (trains__train_position__track_begin__first__bit <  trains__train_position__track_begin__last__bit)

axiom trains__train_position__track_begin__position_axiom :
  (0 <= trains__train_position__track_begin__position)

logic trains__train_position__pos_begin__first__bit : int

logic trains__train_position__pos_begin__last__bit : int

logic trains__train_position__pos_begin__position : int

axiom trains__train_position__pos_begin__first__bit_axiom :
  (0 <= trains__train_position__pos_begin__first__bit)

axiom trains__train_position__pos_begin__last__bit_axiom :
  (trains__train_position__pos_begin__first__bit <  trains__train_position__pos_begin__last__bit)

axiom trains__train_position__pos_begin__position_axiom :
  (0 <= trains__train_position__pos_begin__position)

logic trains__train_position__track_end__first__bit : int

logic trains__train_position__track_end__last__bit : int

logic trains__train_position__track_end__position : int

axiom trains__train_position__track_end__first__bit_axiom :
  (0 <= trains__train_position__track_end__first__bit)

axiom trains__train_position__track_end__last__bit_axiom :
  (trains__train_position__track_end__first__bit <  trains__train_position__track_end__last__bit)

axiom trains__train_position__track_end__position_axiom :
  (0 <= trains__train_position__track_end__position)

logic dummy1 : us_rep1

function one_train_at_most_per_track(Trains__cur_num_trains___cur_num_trains___: int,
  Trains__trains___trains___: (int,us_rep1) farray) : bool =
  (if (forall train:int. (((1 <= train) and
      (train <= Trains__cur_num_trains___cur_num_trains___)) ->
      (forall other_train:int. (((1 <= other_train) and
      (other_train <= Trains__cur_num_trains___cur_num_trains___)) ->
      ((not (other_train = train)) ->
      ((((not (to_rep4((((Trains__trains___trains___[train])).us_split_fields3).rec__trains__train_position__track_begin) = to_rep4((((Trains__trains___trains___[other_train])).us_split_fields3).rec__trains__train_position__track_begin))) and
      (not (to_rep4((((Trains__trains___trains___[train])).us_split_fields3).rec__trains__train_position__track_begin) = to_rep4((((Trains__trains___trains___[other_train])).us_split_fields3).rec__trains__train_position__track_end)))) and
      (not (to_rep4((((Trains__trains___trains___[train])).us_split_fields3).rec__trains__train_position__track_end) = to_rep4((((Trains__trains___trains___[other_train])).us_split_fields3).rec__trains__train_position__track_begin)))) and
      (not (to_rep4((((Trains__trains___trains___[train])).us_split_fields3).rec__trains__train_position__track_end) = to_rep4((((Trains__trains___trains___[other_train])).us_split_fields3).rec__trains__train_position__track_end))))))))) then true else false)

type signal

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic to_rep5 : signal -> int

logic of_rep5 : int -> signal

axiom inversion_axiom5 :
  (forall x:signal [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:signal [to_rep5(x)]. in_range5(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range5(x) ->
  (to_rep5(of_rep5(x)) = x)))

function occupied_tracks_on_red(Trains__cur_num_trains___cur_num_trains___: int,
  Trains__trains___trains___: (int,us_rep1) farray,
  Trains__track_signals___track_signals___: (int,signal) farray) : bool =
  (if (forall train:int. (((1 <= train) and
      (train <= Trains__cur_num_trains___cur_num_trains___)) ->
      ((to_rep5((Trains__track_signals___track_signals___[to_rep4((((Trains__trains___trains___[train])).us_split_fields3).rec__trains__train_position__track_begin)])) = 2) and
      (to_rep5((Trains__track_signals___track_signals___[to_rep4((((Trains__trains___trains___[train])).us_split_fields3).rec__trains__train_position__track_end)])) = 2)))) then true else false)

function get_previous_track(param__position: us_rep1, param__id: int) : int =
  to_rep2((let temp___249 =
  (previous_tracks[to_rep1((((tracks[to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_end)])).us_split_fields1).rec__trains__track__from)])
  : (int,track_opt_id) farray in (temp___249[param__id])))

function get_other_previous_track(param__position: us_rep1,
  param__id: int) : int = (if (to_rep2((let temp___252 =
  (previous_tracks[to_rep1((((tracks[to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_begin)])).us_split_fields1).rec__trains__track__from)])
  : (int,track_opt_id) farray in
  (temp___252[param__id]))) = to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_end)) then 0 else to_rep2((let temp___251 =
  (previous_tracks[to_rep1((((tracks[to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_begin)])).us_split_fields1).rec__trains__track__from)])
  : (int,track_opt_id) farray in (temp___251[param__id]))))

logic is_previous_track : us_rep1, int -> bool

logic previous_tracks_on_orange_or_red : int, (int,us_rep1) farray,
  (int,signal) farray -> bool

logic safe_signaling : int, (int,us_rep1) farray, (int,signal) farray -> bool

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

function moving_inside_current_tracks(param__cur_position: us_rep1,
  param__new_position: us_rep1) : bool =
  andb(bool_eq(to_rep4(((param__cur_position).us_split_fields3).rec__trains__train_position__track_begin),
  to_rep4(((param__new_position).us_split_fields3).rec__trains__train_position__track_begin)),
  bool_eq(to_rep4(((param__cur_position).us_split_fields3).rec__trains__train_position__track_end),
  to_rep4(((param__new_position).us_split_fields3).rec__trains__train_position__track_end)))

function entering_a_track(param__position: us_rep1) : bool =
  andb(bool_ne(to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_begin),
  to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_end)),
  (if (exists id:int. (((1 <= id) and (id <= 3)) and
      (to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_end) = to_rep2((let temp___243 =
      (previous_tracks[to_rep1((((tracks[to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_begin)])).us_split_fields1).rec__trains__track__from)])
      : (int,track_opt_id) farray in (temp___243[id])))))) then true else false))

function inside_a_track(param__position: us_rep1) : bool =
  bool_eq(to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_begin),
  to_rep4(((param__position).us_split_fields3).rec__trains__train_position__track_end))

logic moving_away_from_current_track : us_rep1, us_rep1 -> bool

logic valid_move : us_rep1, us_rep1 -> bool

logic moving_to_a_new_track : us_rep1, us_rep1 -> bool

logic train : int

logic new_position : us_rep1

logic value__size3 : int

logic object__size3 : int

logic component__size1 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom3 : (0 <= alignment3)

logic cur_position : us_rep1

type prev_id

logic prev_idqtint : prev_id -> int

axiom prev_idqtaxiom :
  (forall i:prev_id. ((1 <= prev_idqtint(i)) and (prev_idqtint(i) <= 3)))

type train_id

logic train_idqtint : train_id -> int

axiom train_idqtaxiom :
  (forall i:train_id. ((1 <= train_idqtint(i)) and (train_idqtint(i) <= 10)))

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

logic value__size4 : int

logic object__size4 : int

logic component__size2 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom4 : (0 <= alignment4)

predicate in_range7(x: int) = ((0 <= x) and (x <= 3))

logic value__size5 : int

logic object__size5 : int

logic component__size3 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom5 : (0 <= alignment5)

logic trains__tracks__aggregate_def : us_rep, us_rep, us_rep, us_rep, us_rep,
  us_rep, us_rep, us_rep -> (int,us_rep) farray

logic rliteral : location

axiom rliteral_axiom : (locationqtint(rliteral) = 1)

logic rliteral1 : location

axiom rliteral_axiom1 : (locationqtint(rliteral1) = 2)

logic rliteral2 : positive

axiom rliteral_axiom2 : (positiveqtint(rliteral2) = 10)

logic rliteral3 : location

axiom rliteral_axiom3 : (locationqtint(rliteral3) = 3)

logic rliteral4 : location

axiom rliteral_axiom4 : (locationqtint(rliteral4) = 5)

logic rliteral5 : location

axiom rliteral_axiom5 : (locationqtint(rliteral5) = 4)

axiom tracks__def_axiom : (tracks = (let temp___180qtunused =
  trains__tracks__aggregate_def({ us_split_fields1 = {
  rec__trains__track__from = rliteral; rec__trains__track__to = rliteral1;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral; rec__trains__track__to = rliteral3;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral1; rec__trains__track__to = rliteral3;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral1; rec__trains__track__to = rliteral4;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral3; rec__trains__track__to = rliteral5;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral3; rec__trains__track__to = rliteral4;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral5; rec__trains__track__to = rliteral4;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral4; rec__trains__track__to = rliteral;
  rec__trains__track__length = rliteral2 } }) : (int,us_rep) farray in
  trains__tracks__aggregate_def({ us_split_fields1 = {
  rec__trains__track__from = rliteral; rec__trains__track__to = rliteral1;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral; rec__trains__track__to = rliteral3;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral1; rec__trains__track__to = rliteral3;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral1; rec__trains__track__to = rliteral4;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral3; rec__trains__track__to = rliteral5;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral3; rec__trains__track__to = rliteral4;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral5; rec__trains__track__to = rliteral4;
  rec__trains__track__length = rliteral2 } }, { us_split_fields1 = {
  rec__trains__track__from = rliteral4; rec__trains__track__to = rliteral;
  rec__trains__track__length = rliteral2 } })))

axiom def_axiom :
  (forall temp___169:us_rep. forall temp___170:us_rep.
  forall temp___171:us_rep. forall temp___172:us_rep.
  forall temp___173:us_rep. forall temp___174:us_rep.
  forall temp___175:us_rep. forall temp___176:us_rep. (let temp___177 =
  trains__tracks__aggregate_def(temp___169, temp___170, temp___171,
  temp___172, temp___173, temp___174, temp___175, temp___176)
  : (int,us_rep) farray in ((((temp___177[1]) = temp___169) and
  ((temp___177[2]) = temp___170)) and (((((temp___177[3]) = temp___171) and
  ((temp___177[4]) = temp___172)) and ((temp___177[5]) = temp___173)) and
  ((((temp___177[6]) = temp___174) and ((temp___177[7]) = temp___175)) and
  ((temp___177[8]) = temp___176))))))

logic value__size6 : int

logic object__size6 : int

logic component__size4 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom component__size_axiom4 : (0 <= component__size4)

axiom alignment_axiom6 : (0 <= alignment6)

logic value__size7 : int

logic object__size7 : int

logic component__size5 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom component__size_axiom5 : (0 <= component__size5)

axiom alignment_axiom7 : (0 <= alignment7)

logic value__size8 : int

logic object__size8 : int

logic component__size6 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom component__size_axiom6 : (0 <= component__size6)

axiom alignment_axiom8 : (0 <= alignment8)

logic value__size9 : int

logic object__size9 : int

logic component__size7 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom component__size_axiom7 : (0 <= component__size7)

axiom alignment_axiom9 : (0 <= alignment9)

logic value__size10 : int

logic object__size10 : int

logic component__size8 : int

logic alignment10 : int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (0 <= object__size10)

axiom component__size_axiom8 : (0 <= component__size8)

axiom alignment_axiom10 : (0 <= alignment10)

logic value__size11 : int

logic object__size11 : int

logic component__size9 : int

logic alignment11 : int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 : (0 <= object__size11)

axiom component__size_axiom9 : (0 <= component__size9)

axiom alignment_axiom11 : (0 <= alignment11)

logic trains__previous_tracks__aggregate_def : (int,track_opt_id) farray,
  (int,track_opt_id) farray, (int,track_opt_id) farray,
  (int,track_opt_id) farray,
  (int,track_opt_id) farray -> (int,(int,track_opt_id) farray) farray

logic temp_____aggregate_def_195 : int, int, int -> (int,track_opt_id) farray

logic temp_____aggregate_def_204 : int, int, int -> (int,track_opt_id) farray

logic temp_____aggregate_def_213 : int, int, int -> (int,track_opt_id) farray

logic temp_____aggregate_def_222 : int, int, int -> (int,track_opt_id) farray

logic temp_____aggregate_def_231 : int, int, int -> (int,track_opt_id) farray

axiom previous_tracks__def_axiom :
  (previous_tracks = (let temp___237qtunused =
  trains__previous_tracks__aggregate_def((let temp___199 =
  temp_____aggregate_def_195(8, 0, 0) : (int,track_opt_id) farray in
  (let temp___200 = temp___199 : (int,track_opt_id) farray in temp___200)),
  (let temp___208 = temp_____aggregate_def_204(1, 0, 0)
  : (int,track_opt_id) farray in (let temp___209 = temp___208
  : (int,track_opt_id) farray in temp___209)), (let temp___217 =
  temp_____aggregate_def_213(2, 3, 0) : (int,track_opt_id) farray in
  (let temp___218 = temp___217 : (int,track_opt_id) farray in temp___218)),
  (let temp___226 = temp_____aggregate_def_222(5, 0, 0)
  : (int,track_opt_id) farray in (let temp___227 = temp___226
  : (int,track_opt_id) farray in temp___227)), (let temp___235 =
  temp_____aggregate_def_231(4, 6, 7) : (int,track_opt_id) farray in
  (let temp___236 = temp___235 : (int,track_opt_id) farray in temp___236)))
  : (int,(int,track_opt_id) farray) farray in
  trains__previous_tracks__aggregate_def((let temp___199 =
  temp_____aggregate_def_195(8, 0, 0) : (int,track_opt_id) farray in
  (let temp___200 = temp___199 : (int,track_opt_id) farray in temp___200)),
  (let temp___208 = temp_____aggregate_def_204(1, 0, 0)
  : (int,track_opt_id) farray in (let temp___209 = temp___208
  : (int,track_opt_id) farray in temp___209)), (let temp___217 =
  temp_____aggregate_def_213(2, 3, 0) : (int,track_opt_id) farray in
  (let temp___218 = temp___217 : (int,track_opt_id) farray in temp___218)),
  (let temp___226 = temp_____aggregate_def_222(5, 0, 0)
  : (int,track_opt_id) farray in (let temp___227 = temp___226
  : (int,track_opt_id) farray in temp___227)), (let temp___235 =
  temp_____aggregate_def_231(4, 6, 7) : (int,track_opt_id) farray in
  (let temp___236 = temp___235 : (int,track_opt_id) farray in temp___236)))))

axiom def_axiom1 :
  (forall temp___184:(int,track_opt_id) farray.
  forall temp___185:(int,track_opt_id) farray.
  forall temp___186:(int,track_opt_id) farray.
  forall temp___187:(int,track_opt_id) farray.
  forall temp___188:(int,track_opt_id) farray. (let temp___189 =
  trains__previous_tracks__aggregate_def(temp___184, temp___185, temp___186,
  temp___187, temp___188) : (int,(int,track_opt_id) farray) farray in
  ((((temp___189[1]) = temp___184) and ((temp___189[2]) = temp___185)) and
  ((((temp___189[3]) = temp___186) and ((temp___189[4]) = temp___187)) and
  ((temp___189[5]) = temp___188)))))

logic rliteral6 : track_opt_id

axiom rliteral_axiom6 : (track_opt_idqtint(rliteral6) = 8)

logic rliteral7 : track_opt_id

axiom rliteral_axiom7 : (track_opt_idqtint(rliteral7) = 0)

axiom def_axiom2 :
  (forall temp___192:int. forall temp___193:int. forall temp___194:int.
  (let temp___196 = temp_____aggregate_def_195(temp___192, temp___193,
  temp___194) : (int,track_opt_id) farray in
  ((((temp___196[1]) = rliteral6) and ((temp___196[2]) = rliteral7)) and
  ((temp___196[3]) = rliteral7))))

logic rliteral8 : track_opt_id

axiom rliteral_axiom8 : (track_opt_idqtint(rliteral8) = 1)

axiom def_axiom3 :
  (forall temp___201:int. forall temp___202:int. forall temp___203:int.
  (let temp___205 = temp_____aggregate_def_204(temp___201, temp___202,
  temp___203) : (int,track_opt_id) farray in
  ((((temp___205[1]) = rliteral8) and ((temp___205[2]) = rliteral7)) and
  ((temp___205[3]) = rliteral7))))

logic rliteral9 : track_opt_id

axiom rliteral_axiom9 : (track_opt_idqtint(rliteral9) = 2)

logic rliteral10 : track_opt_id

axiom rliteral_axiom10 : (track_opt_idqtint(rliteral10) = 3)

axiom def_axiom4 :
  (forall temp___210:int. forall temp___211:int. forall temp___212:int.
  (let temp___214 = temp_____aggregate_def_213(temp___210, temp___211,
  temp___212) : (int,track_opt_id) farray in
  ((((temp___214[1]) = rliteral9) and ((temp___214[2]) = rliteral10)) and
  ((temp___214[3]) = rliteral7))))

logic rliteral11 : track_opt_id

axiom rliteral_axiom11 : (track_opt_idqtint(rliteral11) = 5)

axiom def_axiom5 :
  (forall temp___219:int. forall temp___220:int. forall temp___221:int.
  (let temp___223 = temp_____aggregate_def_222(temp___219, temp___220,
  temp___221) : (int,track_opt_id) farray in
  ((((temp___223[1]) = rliteral11) and ((temp___223[2]) = rliteral7)) and
  ((temp___223[3]) = rliteral7))))

logic rliteral12 : track_opt_id

axiom rliteral_axiom12 : (track_opt_idqtint(rliteral12) = 4)

logic rliteral13 : track_opt_id

axiom rliteral_axiom13 : (track_opt_idqtint(rliteral13) = 6)

logic rliteral14 : track_opt_id

axiom rliteral_axiom14 : (track_opt_idqtint(rliteral14) = 7)

axiom def_axiom6 :
  (forall temp___228:int. forall temp___229:int. forall temp___230:int.
  (let temp___232 = temp_____aggregate_def_231(temp___228, temp___229,
  temp___230) : (int,track_opt_id) farray in
  ((((temp___232[1]) = rliteral12) and ((temp___232[2]) = rliteral13)) and
  ((temp___232[3]) = rliteral14))))

axiom is_previous_track__post_axiom : true

axiom is_previous_track__def_axiom :
  (forall param__position:us_rep1.
  (forall param__track:int [is_previous_track(param__position,
  param__track)]. ((is_previous_track(param__position,
  param__track) = true) <->
  (exists id:int. (((1 <= id) and (id <= 3)) and
  ((param__track = get_previous_track(param__position, id)) or
  (param__track = get_other_previous_track(param__position, id))))))))

axiom previous_tracks_on_orange_or_red__post_axiom : true

axiom previous_tracks_on_orange_or_red__def_axiom :
  (forall Trains__cur_num_trains___cur_num_trains___:int.
  (forall Trains__trains___trains___:(int,us_rep1) farray.
  (forall Trains__track_signals___track_signals___:(int,signal) farray
  [previous_tracks_on_orange_or_red(Trains__cur_num_trains___cur_num_trains___,
  Trains__trains___trains___, Trains__track_signals___track_signals___)].
  ((previous_tracks_on_orange_or_red(Trains__cur_num_trains___cur_num_trains___,
  Trains__trains___trains___,
  Trains__track_signals___track_signals___) = true) <->
  (forall train1:int. (((1 <= train1) and
  (train1 <= Trains__cur_num_trains___cur_num_trains___)) ->
  (forall id:int. (((1 <= id) and (id <= 3)) ->
  (((not (get_previous_track((Trains__trains___trains___[train1]),
  id) = 0)) -> (let temp___352 =
  to_rep5((Trains__track_signals___track_signals___[get_previous_track((Trains__trains___trains___[train1]),
  id)])) : int in ((temp___352 = 1) or (temp___352 = 2)))) and
  ((not (get_other_previous_track((Trains__trains___trains___[train1]),
  id) = 0)) -> (let temp___354 =
  to_rep5((Trains__track_signals___track_signals___[get_other_previous_track((Trains__trains___trains___[train1]),
  id)])) : int in ((temp___354 = 1) or (temp___354 = 2)))))))))))))

axiom safe_signaling__post_axiom : true

axiom safe_signaling__def_axiom :
  (forall Trains__cur_num_trains___cur_num_trains___:int.
  (forall Trains__trains___trains___:(int,us_rep1) farray.
  (forall Trains__track_signals___track_signals___:(int,signal) farray
  [safe_signaling(Trains__cur_num_trains___cur_num_trains___,
  Trains__trains___trains___, Trains__track_signals___track_signals___)].
  ((safe_signaling(Trains__cur_num_trains___cur_num_trains___,
  Trains__trains___trains___,
  Trains__track_signals___track_signals___) = true) <->
  ((occupied_tracks_on_red(Trains__cur_num_trains___cur_num_trains___,
  Trains__trains___trains___,
  Trains__track_signals___track_signals___) = true) and
  (previous_tracks_on_orange_or_red(Trains__cur_num_trains___cur_num_trains___,
  Trains__trains___trains___,
  Trains__track_signals___track_signals___) = true))))))

axiom moving_to_a_new_track__post_axiom : true

axiom moving_to_a_new_track__def_axiom :
  (forall param__cur_position:us_rep1. forall param__new_position:us_rep1
  [moving_to_a_new_track(param__cur_position, param__new_position)].
  ((moving_to_a_new_track(param__cur_position,
  param__new_position) = true) <->
  (((inside_a_track(param__cur_position) = true) and
  (entering_a_track(param__new_position) = true)) and
  (to_rep4(((param__cur_position).us_split_fields3).rec__trains__train_position__track_begin) = to_rep4(((param__new_position).us_split_fields3).rec__trains__train_position__track_end)))))

axiom moving_away_from_current_track__post_axiom : true

axiom moving_away_from_current_track__def_axiom :
  (forall param__cur_position:us_rep1. forall param__new_position:us_rep1
  [moving_away_from_current_track(param__cur_position, param__new_position)].
  ((moving_away_from_current_track(param__cur_position,
  param__new_position) = true) <->
  (((entering_a_track(param__cur_position) = true) and
  (inside_a_track(param__new_position) = true)) and
  (to_rep4(((param__cur_position).us_split_fields3).rec__trains__train_position__track_begin) = to_rep4(((param__new_position).us_split_fields3).rec__trains__train_position__track_end)))))

axiom valid_move__post_axiom : true

axiom valid_move__def_axiom :
  (forall param__cur_position:us_rep1. forall param__new_position:us_rep1
  [valid_move(param__cur_position, param__new_position)].
  ((valid_move(param__cur_position, param__new_position) = true) <->
  (((moving_inside_current_tracks(param__cur_position,
  param__new_position) = true) or (moving_to_a_new_track(param__cur_position,
  param__new_position) = true)) or
  (moving_away_from_current_track(param__cur_position,
  param__new_position) = true))))

 (* "trains.ads", line 217, characters 0-0 *)
goal defqtvc :
  (forall cur_num_trains:int. forall trains:(int,us_rep1) farray.
  forall track_signals:(int,signal) farray. forall result__:int.
  forall prev:int. (in_range6(cur_num_trains) -> (in_range6(train) ->
  (in_range7(result__) -> ((((((1 <= train) and
  (train <= cur_num_trains)) and (valid_move((trains[train]),
  new_position) = true)) and (one_train_at_most_per_track(cur_num_trains,
  trains) = true)) and (safe_signaling(cur_num_trains, trains,
  track_signals) = true)) -> (((trains[train]) = cur_position) ->
  (in_range2(prev) ->
  (forall trains1:(int,us_rep1) farray.
  forall track_signals1:(int,signal) farray. ((let o = new_position
  : us_rep1 in (let o1 = cur_position : us_rep1 in (let o2 =
  moving_inside_current_tracks(o1, o) : bool in (((o2 = true) <->
  ((to_rep4(((o1).us_split_fields3).rec__trains__train_position__track_begin) = to_rep4(((o).us_split_fields3).rec__trains__train_position__track_begin)) and
  (to_rep4(((o1).us_split_fields3).rec__trains__train_position__track_end) = to_rep4(((o).us_split_fields3).rec__trains__train_position__track_end)))) and
  (exists spark__branch:bool. ((spark__branch = o2) and
  (if (spark__branch = true) then (((trains1 = (trains[train <- new_position])) and
  ((occupied_tracks_on_red(cur_num_trains, trains1,
  track_signals) = true) and
  ((forall train1:int. (((1 <= train1) and (train1 <= cur_num_trains)) ->
   (forall id:int. (((1 <= id) and (id <= 3)) ->
   ((not (get_previous_track((trains1[train1]), id) = 0)) ->
   (let temp___655 =
   to_rep5((track_signals[get_previous_track((trains1[train1]), id)]))
   : int in ((temp___655 = 1) or (temp___655 = 2)))))))) and
  ((forall train1:int. (((1 <= train1) and (train1 <= cur_num_trains)) ->
   (forall id:int. (((1 <= id) and (id <= 3)) ->
   ((not (get_other_previous_track((trains1[train1]), id) = 0)) ->
   (let temp___664 =
   to_rep5((track_signals[get_other_previous_track((trains1[train1]), id)]))
   : int in ((temp___664 = 1) or (temp___664 = 2)))))))) and
  ((previous_tracks_on_orange_or_red(cur_num_trains, trains1,
  track_signals) = true) and (safe_signaling(cur_num_trains, trains1,
  track_signals) = true)))))) and
  (track_signals1 = track_signals)) else (let o3 = new_position : us_rep1 in
  (let o4 = cur_position : us_rep1 in (let o5 =
  moving_away_from_current_track(o4, o3) : bool in (((o5 = true) <->
  (((entering_a_track(o4) = true) and (inside_a_track(o3) = true)) and
  (to_rep4(((o4).us_split_fields3).rec__trains__train_position__track_begin) = to_rep4(((o3).us_split_fields3).rec__trains__train_position__track_end)))) and
  (exists spark__branch1:bool. ((spark__branch1 = o5) and
  (if (spark__branch1 = true) then ((trains1 = (trains[train <- new_position])) and
  ((previous_tracks_on_orange_or_red(cur_num_trains, trains1,
  track_signals) = true) and
  (exists o6:signal. ((to_rep5(o6) = 1) and
  (exists o7:int.
  ((to_rep4(((cur_position).us_split_fields3).rec__trains__train_position__track_end) = o7) and
  (exists track_signals2:(int,signal) farray.
  ((track_signals2 = (track_signals[o7 <- o6])) and
  ((no_track_precedes_itself(void) = true) and
  ((occupied_tracks_on_red(cur_num_trains, trains1,
  track_signals2) = true) and
  ((previous_tracks_on_orange_or_red(cur_num_trains, trains1,
  track_signals2) = true) and
  ((exists id:int. ((id = 1) and
   (if (andb((if (1 <= id) then true else false),
   (if (id <= 3) then true else false)) = true) then (let o8 = cur_position
   : us_rep1 in (let o9 = get_previous_track(o8, id) : int in
   ((in_range2(o9) and
   (o9 = to_rep2(((previous_tracks[to_rep1((((tracks[to_rep4(((o8).us_split_fields3).rec__trains__train_position__track_end)])).us_split_fields1).rec__trains__track__from)])[id])))) and
   (exists prev1:int. ((prev1 = o9) and
   (exists spark__branch2:bool. exists track_signals3:(int,signal) farray.
   ((exists o10:bool. ((if (not (prev1 = 0)) then (((1 <= prev1) and
    (prev1 <= 8)) and
    (exists o11:int. ((to_rep5((track_signals2[prev1])) = o11) and
    (o10 = (if (o11 = 1) then true else false))))) else (o10 = false)) and
    ((spark__branch2 = o10) and
    (if (spark__branch2 = true) then (in_range4(prev1) and
    ((if (exists t:int. (((1 <= t) and (t <= cur_num_trains)) and
         (is_previous_track((trains1[t]), prev1) = true))) then (to_rep5((track_signals3[prev1])) = 1) else (to_rep5((track_signals3[prev1])) = 0)) and
    (forall other_track:int. (((1 <= other_track) and (other_track <= 8)) ->
    ((not (other_track = prev1)) ->
    (to_rep5((track_signals3[other_track])) = to_rep5((track_signals2[other_track])))))))) else (track_signals3 = track_signals2))))) and
   (exists prev2:int. exists id1:int.
   ((forall j:int. (((1 <= j) and (j <= 8)) ->
    (((to_rep5((track_signals2[j])) = 2) ->
    (to_rep5((track_signals1[j])) = 2)) and
    (((to_rep5((track_signals2[j])) = 1) and
    (exists t:int. (((1 <= t) and (t <= cur_num_trains)) and
    (is_previous_track((trains1[t]), j) = true)))) ->
    (to_rep5((track_signals1[j])) = 1))))) and
   ((andb((if in_range2(prev2) then true else false), (if ((1 <= id1) and
   (id1 <= 3)) then true else false)) = true) and (id1 = 3))))))))))) else (track_signals1 = track_signals2)))) and
  ((no_track_precedes_itself(void) = true) and
  ((occupied_tracks_on_red(cur_num_trains, trains1,
  track_signals1) = true) and
  ((previous_tracks_on_orange_or_red(cur_num_trains, trains1,
  track_signals1) = true) and (safe_signaling(cur_num_trains, trains1,
  track_signals1) = true)))))))))))))))) else (exists o6:int.
                                              ((to_rep4(((new_position).us_split_fields3).rec__trains__train_position__track_begin) = o6) and
                                              (exists temp___677:int.
                                              ((to_rep5((track_signals[o6])) = temp___677) and
                                              (exists spark__branch2:bool.
                                              ((spark__branch2 = (if (temp___677 = 2) then true else false)) and
                                              (if (spark__branch2 = true) then ((trains1 = trains) and
                                              (track_signals1 = track_signals)) else 
                                              (exists spark__branch3:bool.
                                              ((exists o7:int.
                                               ((to_rep4(((new_position).us_split_fields3).rec__trains__train_position__track_begin) = o7) and
                                               (exists o8:int.
                                               ((to_rep5((track_signals[o7])) = o8) and
                                               (spark__branch3 = (if (o8 = 0) then true else false)))))) and
                                              ((forall id:int.
                                               (((1 <= id) and (id <= 3)) ->
                                               ((not (get_previous_track(new_position,
                                               id) = 0)) -> (let temp___687 =
                                               to_rep5((track_signals[get_previous_track((trains[train]),
                                               id)])) : int in
                                               ((temp___687 = 1) or
                                               (temp___687 = 2)))))) and
                                              ((trains1 = (trains[train <- new_position])) and
                                              (exists o7:signal.
                                              ((to_rep5(o7) = 2) and
                                              (exists o8:int.
                                              ((to_rep4(((new_position).us_split_fields3).rec__trains__train_position__track_begin) = o8) and
                                              (exists track_signals2:(int,signal) farray.
                                              ((track_signals2 = (track_signals[o8 <- o7])) and
                                              ((exists id:int. ((id = 1) and
                                               (if (andb((if (1 <= id) then true else false),
                                               (if (id <= 3) then true else false)) = true) then (let o9 =
                                               new_position : us_rep1 in
                                               (let o10 =
                                               get_other_previous_track(o9,
                                               id) : int in
                                               ((in_range2(o10) and
                                               (o10 = (if (to_rep2(((previous_tracks[to_rep1((((tracks[to_rep4(((o9).us_split_fields3).rec__trains__train_position__track_begin)])).us_split_fields1).rec__trains__track__from)])[id])) = to_rep4(((o9).us_split_fields3).rec__trains__train_position__track_end)) then 0 else to_rep2(((previous_tracks[to_rep1((((tracks[to_rep4(((o9).us_split_fields3).rec__trains__train_position__track_begin)])).us_split_fields1).rec__trains__track__from)])[id]))))) and
                                               (exists prev1:int.
                                               ((prev1 = o10) and
                                               (exists spark__branch4:bool.
                                               exists track_signals3:(int,signal) farray.
                                               ((exists o11:bool.
                                                ((if (not (prev1 = 0)) then (((1 <= prev1) and
                                                (prev1 <= 8)) and
                                                (exists o12:int.
                                                ((to_rep5((track_signals2[prev1])) = o12) and
                                                (o11 = (if (o12 = 0) then true else false))))) else (o11 = false)) and
                                                ((spark__branch4 = o11) and
                                                (if (spark__branch4 = true) then 
                                                (exists o12:signal.
                                                ((to_rep5(o12) = 1) and
                                                (((1 <= prev1) and
                                                (prev1 <= 8)) and
                                                (track_signals3 = (track_signals2[prev1 <- o12]))))) else (track_signals3 = track_signals2))))) and
                                               (exists prev2:int.
                                               exists id1:int.
                                               (((forall k:int.
                                                 (((1 <= k) and
                                                 (k <= id1)) ->
                                                 ((not (get_other_previous_track(new_position,
                                                 k) = 0)) ->
                                                 (let temp___718 =
                                                 to_rep5((track_signals1[get_other_previous_track(new_position,
                                                 k)])) : int in
                                                 ((temp___718 = 1) or
                                                 (temp___718 = 2)))))) and
                                               ((forall j:int. (((1 <= j) and
                                                (j <= 8)) ->
                                                (((to_rep5((track_signals2[j])) = 2) ->
                                                (to_rep5((track_signals1[j])) = 2)) and
                                                ((to_rep5((track_signals2[j])) = 1) ->
                                                (to_rep5((track_signals1[j])) = 1))))) and
                                               (forall train1:int.
                                               (((1 <= train1) and
                                               (train1 <= cur_num_trains)) ->
                                               (forall id2:int.
                                               (((1 <= id2) and
                                               (id2 <= 3)) ->
                                               ((not (get_previous_track((trains1[train1]),
                                               id2) = 0)) ->
                                               (let temp___707 =
                                               to_rep5((track_signals1[get_previous_track((trains1[train1]),
                                               id2)])) : int in
                                               ((temp___707 = 1) or
                                               (temp___707 = 2)))))))))) and
                                               ((andb((if in_range2(prev2) then true else false),
                                               (if ((1 <= id1) and
                                               (id1 <= 3)) then true else false)) = true) and
                                               (id1 = 3))))))))))) else (track_signals1 = track_signals2)))) and
                                              ((occupied_tracks_on_red(cur_num_trains,
                                              trains1,
                                              track_signals1) = true) and
                                              ((previous_tracks_on_orange_or_red(cur_num_trains,
                                              trains1,
                                              track_signals1) = true) and
                                              (safe_signaling(cur_num_trains,
                                              trains1,
                                              track_signals1) = true))))))))))))))))))))))))))))))))))) ->
  (one_train_at_most_per_track(cur_num_trains, trains1) = true))))))))))
