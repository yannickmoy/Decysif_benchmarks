;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort positive 0)

;; "positive'int"
(declare-fun positiveqtint (positive) Int)

;; "positive'axiom"
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x positive)) Int
  (positiveqtint x))

;; "of_rep"
(declare-fun of_rep (Int) positive)

;; "inversion_axiom"
(assert
  (forall ((x positive))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x positive)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort location 0)

;; "location'int"
(declare-fun locationqtint (location) Int)

;; "location'axiom"
(assert
  (forall ((i location))
    (and (<= 1 (locationqtint i)) (<= (locationqtint i) 5))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 5)))

;; "to_rep"
(define-fun to_rep1 ((x location)) Int
  (locationqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) location)

;; "inversion_axiom"
(assert
  (forall ((x location))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x location)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__trains__track__from location)(rec__trains__track__to location)(rec__trains__track__length positive)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const trains__track__from__first__bit Int)

(declare-const trains__track__from__last__bit Int)

(declare-const trains__track__from__position Int)

;; "trains__track__from__first__bit_axiom"
(assert (<= 0 trains__track__from__first__bit))

;; "trains__track__from__last__bit_axiom"
(assert (< trains__track__from__first__bit trains__track__from__last__bit))

;; "trains__track__from__position_axiom"
(assert (<= 0 trains__track__from__position))

(declare-const trains__track__to__first__bit Int)

(declare-const trains__track__to__last__bit Int)

(declare-const trains__track__to__position Int)

;; "trains__track__to__first__bit_axiom"
(assert (<= 0 trains__track__to__first__bit))

;; "trains__track__to__last__bit_axiom"
(assert (< trains__track__to__first__bit trains__track__to__last__bit))

;; "trains__track__to__position_axiom"
(assert (<= 0 trains__track__to__position))

(declare-const trains__track__length__first__bit Int)

(declare-const trains__track__length__last__bit Int)

(declare-const trains__track__length__position Int)

;; "trains__track__length__first__bit_axiom"
(assert (<= 0 trains__track__length__first__bit))

;; "trains__track__length__last__bit_axiom"
(assert
  (< trains__track__length__first__bit trains__track__length__last__bit))

;; "trains__track__length__position_axiom"
(assert (<= 0 trains__track__length__position))

(declare-const dummy us_rep)

(declare-const tracks (Array Int us_rep))

(declare-sort track_opt_id 0)

;; "track_opt_id'int"
(declare-fun track_opt_idqtint (track_opt_id) Int)

;; "track_opt_id'axiom"
(assert
  (forall ((i track_opt_id))
    (and (<= 0 (track_opt_idqtint i)) (<= (track_opt_idqtint i) 8))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep2 ((x track_opt_id)) Int
  (track_opt_idqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) track_opt_id)

;; "inversion_axiom"
(assert
  (forall ((x track_opt_id))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x track_opt_id))
    (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const previous_tracks (Array Int (Array Int track_opt_id)))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep3 ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-sort track_id 0)

;; "track_id'int"
(declare-fun track_idqtint (track_id) Int)

;; "track_id'axiom"
(assert
  (forall ((i track_id))
    (and (<= 1 (track_idqtint i)) (<= (track_idqtint i) 8))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep4 ((x track_id)) Int
  (track_idqtint x))

;; "of_rep"
(declare-fun of_rep4 (Int) track_id)

;; "inversion_axiom"
(assert
  (forall ((x track_id))
    (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert
  (forall ((x track_id)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__trains__train_position__track_begin track_id)(rec__trains__train_position__pos_begin natural)(rec__trains__train_position__track_end track_id)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const trains__train_position__track_begin__first__bit Int)

(declare-const trains__train_position__track_begin__last__bit Int)

(declare-const trains__train_position__track_begin__position Int)

;; "trains__train_position__track_begin__first__bit_axiom"
(assert (<= 0 trains__train_position__track_begin__first__bit))

;; "trains__train_position__track_begin__last__bit_axiom"
(assert
  (< trains__train_position__track_begin__first__bit trains__train_position__track_begin__last__bit))

;; "trains__train_position__track_begin__position_axiom"
(assert (<= 0 trains__train_position__track_begin__position))

(declare-const trains__train_position__pos_begin__first__bit Int)

(declare-const trains__train_position__pos_begin__last__bit Int)

(declare-const trains__train_position__pos_begin__position Int)

;; "trains__train_position__pos_begin__first__bit_axiom"
(assert (<= 0 trains__train_position__pos_begin__first__bit))

;; "trains__train_position__pos_begin__last__bit_axiom"
(assert
  (< trains__train_position__pos_begin__first__bit trains__train_position__pos_begin__last__bit))

;; "trains__train_position__pos_begin__position_axiom"
(assert (<= 0 trains__train_position__pos_begin__position))

(declare-const trains__train_position__track_end__first__bit Int)

(declare-const trains__train_position__track_end__last__bit Int)

(declare-const trains__train_position__track_end__position Int)

;; "trains__train_position__track_end__first__bit_axiom"
(assert (<= 0 trains__train_position__track_end__first__bit))

;; "trains__train_position__track_end__last__bit_axiom"
(assert
  (< trains__train_position__track_end__first__bit trains__train_position__track_end__last__bit))

;; "trains__train_position__track_end__position_axiom"
(assert (<= 0 trains__train_position__track_end__position))

(declare-const dummy1 us_rep1)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array Int us_rep1))))))

;; "one_train_at_most_per_track"
(define-fun one_train_at_most_per_track ((Trains__cur_num_trains___cur_num_trains___ Int) (Trains__trains___trains___ (Array Int us_rep1))) Bool
  (ite (forall ((train Int))
         (=>
           (and
             (<= 1 train)
             (<= train Trains__cur_num_trains___cur_num_trains___))
           (forall ((other_train Int))
             (=>
               (and
                 (<= 1 other_train)
                 (<= other_train Trains__cur_num_trains___cur_num_trains___))
               (=>
                 (not (= other_train train))
                 (and
                   (and
                     (and
                       (not
                         (= (to_rep4
                              (rec__trains__train_position__track_begin
                                (us_split_fields3
                                  (select Trains__trains___trains___ train)))) 
                         (to_rep4
                           (rec__trains__train_position__track_begin
                             (us_split_fields3
                               (select Trains__trains___trains___ other_train))))))
                       (not
                         (= (to_rep4
                              (rec__trains__train_position__track_begin
                                (us_split_fields3
                                  (select Trains__trains___trains___ train)))) 
                         (to_rep4
                           (rec__trains__train_position__track_end
                             (us_split_fields3
                               (select Trains__trains___trains___ other_train)))))))
                     (not
                       (= (to_rep4
                            (rec__trains__train_position__track_end
                              (us_split_fields3
                                (select Trains__trains___trains___ train)))) 
                       (to_rep4
                         (rec__trains__train_position__track_begin
                           (us_split_fields3
                             (select Trains__trains___trains___ other_train)))))))
                   (not
                     (= (to_rep4
                          (rec__trains__train_position__track_end
                            (us_split_fields3
                              (select Trains__trains___trains___ train)))) 
                     (to_rep4
                       (rec__trains__train_position__track_end
                         (us_split_fields3
                           (select Trains__trains___trains___ other_train))))))))))))
    true
    false))

(declare-sort signal 0)

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep5 (signal) Int)

;; "of_rep"
(declare-fun of_rep5 (Int) signal)

;; "inversion_axiom"
(assert
  (forall ((x signal))
    (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; "range_axiom"
(assert
  (forall ((x signal)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range5 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

(declare-datatypes ()
  ((map__ref1 (map__refqtmk1 (map__content1 (Array Int signal))))))

;; "occupied_tracks_on_red"
(define-fun occupied_tracks_on_red ((Trains__cur_num_trains___cur_num_trains___ Int) (Trains__trains___trains___ (Array Int us_rep1)) (Trains__track_signals___track_signals___ (Array Int signal))) Bool
  (ite (forall ((train Int))
         (=>
           (and
             (<= 1 train)
             (<= train Trains__cur_num_trains___cur_num_trains___))
           (and
             (= (to_rep5
                  (select Trains__track_signals___track_signals___ (to_rep4
                                                                    (rec__trains__train_position__track_begin
                                                                    (us_split_fields3
                                                                    (select Trains__trains___trains___ train)))))) 2)
             (= (to_rep5
                  (select Trains__track_signals___track_signals___ (to_rep4
                                                                    (rec__trains__train_position__track_end
                                                                    (us_split_fields3
                                                                    (select Trains__trains___trains___ train)))))) 2))))
    true
    false))

;; "get_previous_track"
(define-fun get_previous_track ((param__position us_rep1) (param__id Int)) Int
  (to_rep2
    (let ((temp___249 (select previous_tracks (to_rep1
                                                (rec__trains__track__from
                                                  (us_split_fields1
                                                    (select tracks (to_rep4
                                                                    (rec__trains__train_position__track_end
                                                                    (us_split_fields3
                                                                    param__position))))))))))
      (select temp___249 param__id))))

;; "get_other_previous_track"
(define-fun get_other_previous_track ((param__position us_rep1) (param__id Int)) Int
  (ite (= (to_rep2
            (let ((temp___252 (select previous_tracks (to_rep1
                                                        (rec__trains__track__from
                                                          (us_split_fields1
                                                            (select tracks 
                                                            (to_rep4
                                                              (rec__trains__train_position__track_begin
                                                                (us_split_fields3
                                                                  param__position))))))))))
              (select temp___252 param__id))) (to_rep4
                                                (rec__trains__train_position__track_end
                                                  (us_split_fields3
                                                    param__position))))
    0
    (to_rep2
      (let ((temp___251 (select previous_tracks (to_rep1
                                                  (rec__trains__track__from
                                                    (us_split_fields1
                                                      (select tracks 
                                                      (to_rep4
                                                        (rec__trains__train_position__track_begin
                                                          (us_split_fields3
                                                            param__position))))))))))
        (select temp___251 param__id)))))

;; "previous_tracks_on_orange_or_red"
(declare-fun previous_tracks_on_orange_or_red (Int
  (Array Int us_rep1)
  (Array Int signal)) Bool)

;; "safe_signaling"
(declare-fun safe_signaling (Int
  (Array Int us_rep1)
  (Array Int signal)) Bool)

;; "moving_inside_current_tracks"
(define-fun moving_inside_current_tracks ((param__cur_position us_rep1) (param__new_position us_rep1)) Bool
  (and (= (to_rep4
            (rec__trains__train_position__track_begin
              (us_split_fields3 param__cur_position))) (to_rep4
                                                         (rec__trains__train_position__track_begin
                                                           (us_split_fields3
                                                             param__new_position)))) (= 
  (to_rep4
    (rec__trains__train_position__track_end
      (us_split_fields3 param__cur_position))) (to_rep4
                                                 (rec__trains__train_position__track_end
                                                   (us_split_fields3
                                                     param__new_position))))))

;; "entering_a_track"
(define-fun entering_a_track ((param__position us_rep1)) Bool
  (and (not (= (to_rep4
                 (rec__trains__train_position__track_begin
                   (us_split_fields3 param__position))) (to_rep4
                                                          (rec__trains__train_position__track_end
                                                            (us_split_fields3
                                                              param__position))))) 
  (ite (exists ((id Int))
         (and
           (and (<= 1 id) (<= id 3))
           (= (to_rep4
                (rec__trains__train_position__track_end
                  (us_split_fields3 param__position))) (to_rep2
                                                         (let ((temp___243 (select 
                                                           previous_tracks 
                                                           (to_rep1
                                                             (rec__trains__track__from
                                                               (us_split_fields1
                                                                 (select 
                                                                 tracks 
                                                                 (to_rep4
                                                                   (rec__trains__train_position__track_begin
                                                                    (us_split_fields3
                                                                    param__position))))))))))
                                                           (select temp___243 id))))))
    true
    false)))

;; "inside_a_track"
(define-fun inside_a_track ((param__position us_rep1)) Bool
  (= (to_rep4
       (rec__trains__train_position__track_begin
         (us_split_fields3 param__position))) (to_rep4
                                                (rec__trains__train_position__track_end
                                                  (us_split_fields3
                                                    param__position)))))

;; "moving_away_from_current_track"
(declare-fun moving_away_from_current_track (us_rep1
  us_rep1) Bool)

;; "valid_move"
(declare-fun valid_move (us_rep1
  us_rep1) Bool)

;; "moving_to_a_new_track"
(declare-fun moving_to_a_new_track (us_rep1
  us_rep1) Bool)

(declare-const train Int)

(declare-const new_position us_rep1)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const cur_position us_rep1)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 1 x) (<= x 10)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size2 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment4))

;; "in_range"
(define-fun in_range7 ((x Int)) Bool
  (and (<= 0 x) (<= x 3)))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size3 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "trains__tracks__aggregate_def"
(declare-fun trains__tracks__aggregate_def (us_rep
  us_rep
  us_rep
  us_rep
  us_rep
  us_rep
  us_rep
  us_rep) (Array Int us_rep))

(declare-const rliteral location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral) 1))

(declare-const rliteral1 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral1) 2))

(declare-const rliteral2 positive)

;; "rliteral_axiom"
(assert (= (positiveqtint rliteral2) 10))

(declare-const rliteral3 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral3) 3))

(declare-const rliteral4 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral4) 5))

(declare-const rliteral5 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral5) 4))

;; "tracks__def_axiom"
(assert
  (= tracks (let ((temp___180 (trains__tracks__aggregate_def
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral
                                    rliteral1
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral
                                    rliteral3
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral1
                                    rliteral3
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral1
                                    rliteral4
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral3
                                    rliteral5
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral3
                                    rliteral4
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral5
                                    rliteral4
                                    rliteral2))
                                (us_repqtmk
                                  (us_split_fieldsqtmk
                                    rliteral4
                                    rliteral
                                    rliteral2)))))
              (let ((temp___181 temp___180)) temp___181))))

;; "def_axiom"
(assert
  (forall ((temp___169 us_rep) (temp___170 us_rep) (temp___171 us_rep) (temp___172 us_rep) (temp___173 us_rep) (temp___174 us_rep) (temp___175 us_rep) (temp___176 us_rep))
    (let ((temp___177 (trains__tracks__aggregate_def
                        temp___169
                        temp___170
                        temp___171
                        temp___172
                        temp___173
                        temp___174
                        temp___175
                        temp___176)))
      (and
        (and
          (= (select temp___177 1) temp___169)
          (= (select temp___177 2) temp___170))
        (and
          (and
            (and
              (= (select temp___177 3) temp___171)
              (= (select temp___177 4) temp___172))
            (= (select temp___177 5) temp___173))
          (and
            (and
              (= (select temp___177 6) temp___174)
              (= (select temp___177 7) temp___175))
            (= (select temp___177 8) temp___176)))))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size4 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size5 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "component__size_axiom"
(assert (<= 0 component__size5))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size6 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "component__size_axiom"
(assert (<= 0 component__size6))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const component__size7 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "component__size_axiom"
(assert (<= 0 component__size7))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const component__size8 Int)

(declare-const alignment10 Int)

;; "value__size_axiom"
(assert (<= 0 value__size10))

;; "object__size_axiom"
(assert (<= 0 object__size10))

;; "component__size_axiom"
(assert (<= 0 component__size8))

;; "alignment_axiom"
(assert (<= 0 alignment10))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const component__size9 Int)

(declare-const alignment11 Int)

;; "value__size_axiom"
(assert (<= 0 value__size11))

;; "object__size_axiom"
(assert (<= 0 object__size11))

;; "component__size_axiom"
(assert (<= 0 component__size9))

;; "alignment_axiom"
(assert (<= 0 alignment11))

;; "trains__previous_tracks__aggregate_def"
(declare-fun trains__previous_tracks__aggregate_def ((Array Int track_opt_id)
  (Array Int track_opt_id)
  (Array Int track_opt_id)
  (Array Int track_opt_id)
  (Array Int track_opt_id)) (Array Int (Array Int track_opt_id)))

;; "temp_____aggregate_def_195"
(declare-fun temp_____aggregate_def_195 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_204"
(declare-fun temp_____aggregate_def_204 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_213"
(declare-fun temp_____aggregate_def_213 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_222"
(declare-fun temp_____aggregate_def_222 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_231"
(declare-fun temp_____aggregate_def_231 (Int
  Int
  Int) (Array Int track_opt_id))

;; "previous_tracks__def_axiom"
(assert
  (= previous_tracks (let ((temp___237 (trains__previous_tracks__aggregate_def
                                         (let ((temp___199 (temp_____aggregate_def_195
                                                             8
                                                             0
                                                             0)))
                                           (let ((temp___200 temp___199))
                                             temp___200))
                                         (let ((temp___208 (temp_____aggregate_def_204
                                                             1
                                                             0
                                                             0)))
                                           (let ((temp___209 temp___208))
                                             temp___209))
                                         (let ((temp___217 (temp_____aggregate_def_213
                                                             2
                                                             3
                                                             0)))
                                           (let ((temp___218 temp___217))
                                             temp___218))
                                         (let ((temp___226 (temp_____aggregate_def_222
                                                             5
                                                             0
                                                             0)))
                                           (let ((temp___227 temp___226))
                                             temp___227))
                                         (let ((temp___235 (temp_____aggregate_def_231
                                                             4
                                                             6
                                                             7)))
                                           (let ((temp___236 temp___235))
                                             temp___236)))))
                       (let ((temp___238 temp___237)) temp___238))))

;; "def_axiom"
(assert
  (forall ((temp___184 (Array Int track_opt_id)) (temp___185 (Array Int track_opt_id)) (temp___186 (Array Int track_opt_id)) (temp___187 (Array Int track_opt_id)) (temp___188 (Array Int track_opt_id)))
    (let ((temp___189 (trains__previous_tracks__aggregate_def
                        temp___184
                        temp___185
                        temp___186
                        temp___187
                        temp___188)))
      (and
        (and
          (= (select temp___189 1) temp___184)
          (= (select temp___189 2) temp___185))
        (and
          (and
            (= (select temp___189 3) temp___186)
            (= (select temp___189 4) temp___187))
          (= (select temp___189 5) temp___188))))))

(declare-const rliteral6 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral6) 8))

(declare-const rliteral7 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral7) 0))

;; "def_axiom"
(assert
  (forall ((temp___192 Int) (temp___193 Int) (temp___194 Int))
    (let ((temp___196 (temp_____aggregate_def_195
                        temp___192
                        temp___193
                        temp___194)))
      (and
        (and
          (= (select temp___196 1) rliteral6)
          (= (select temp___196 2) rliteral7))
        (= (select temp___196 3) rliteral7)))))

(declare-const rliteral8 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral8) 1))

;; "def_axiom"
(assert
  (forall ((temp___201 Int) (temp___202 Int) (temp___203 Int))
    (let ((temp___205 (temp_____aggregate_def_204
                        temp___201
                        temp___202
                        temp___203)))
      (and
        (and
          (= (select temp___205 1) rliteral8)
          (= (select temp___205 2) rliteral7))
        (= (select temp___205 3) rliteral7)))))

(declare-const rliteral9 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral9) 2))

(declare-const rliteral10 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral10) 3))

;; "def_axiom"
(assert
  (forall ((temp___210 Int) (temp___211 Int) (temp___212 Int))
    (let ((temp___214 (temp_____aggregate_def_213
                        temp___210
                        temp___211
                        temp___212)))
      (and
        (and
          (= (select temp___214 1) rliteral9)
          (= (select temp___214 2) rliteral10))
        (= (select temp___214 3) rliteral7)))))

(declare-const rliteral11 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral11) 5))

;; "def_axiom"
(assert
  (forall ((temp___219 Int) (temp___220 Int) (temp___221 Int))
    (let ((temp___223 (temp_____aggregate_def_222
                        temp___219
                        temp___220
                        temp___221)))
      (and
        (and
          (= (select temp___223 1) rliteral11)
          (= (select temp___223 2) rliteral7))
        (= (select temp___223 3) rliteral7)))))

(declare-const rliteral12 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral12) 4))

(declare-const rliteral13 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral13) 6))

(declare-const rliteral14 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral14) 7))

;; "def_axiom"
(assert
  (forall ((temp___228 Int) (temp___229 Int) (temp___230 Int))
    (let ((temp___232 (temp_____aggregate_def_231
                        temp___228
                        temp___229
                        temp___230)))
      (and
        (and
          (= (select temp___232 1) rliteral12)
          (= (select temp___232 2) rliteral13))
        (= (select temp___232 3) rliteral14)))))

;; "previous_tracks_on_orange_or_red__post_axiom"
(assert true)

;; "previous_tracks_on_orange_or_red__def_axiom"
(assert
  (forall ((Trains__cur_num_trains___cur_num_trains___ Int))
    (forall ((Trains__trains___trains___ (Array Int us_rep1)))
      (forall ((Trains__track_signals___track_signals___ (Array Int signal)))
        (! (=
             (= (previous_tracks_on_orange_or_red
                  Trains__cur_num_trains___cur_num_trains___
                  Trains__trains___trains___
                  Trains__track_signals___track_signals___) true)
             (forall ((train1 Int))
               (=>
                 (and
                   (<= 1 train1)
                   (<= train1 Trains__cur_num_trains___cur_num_trains___))
                 (forall ((id Int))
                   (=>
                     (and (<= 1 id) (<= id 3))
                     (and
                       (=>
                         (not
                           (= (get_previous_track
                                (select Trains__trains___trains___ train1)
                                id) 0))
                         (let ((temp___352 (to_rep5
                                             (select Trains__track_signals___track_signals___ 
                                             (get_previous_track
                                               (select Trains__trains___trains___ train1)
                                               id)))))
                           (or (= temp___352 1) (= temp___352 2))))
                       (=>
                         (not
                           (= (get_other_previous_track
                                (select Trains__trains___trains___ train1)
                                id) 0))
                         (let ((temp___354 (to_rep5
                                             (select Trains__track_signals___track_signals___ 
                                             (get_other_previous_track
                                               (select Trains__trains___trains___ train1)
                                               id)))))
                           (or (= temp___354 1) (= temp___354 2)))))))))) :pattern (
        (previous_tracks_on_orange_or_red
          Trains__cur_num_trains___cur_num_trains___
          Trains__trains___trains___
          Trains__track_signals___track_signals___)) )))))

;; "safe_signaling__post_axiom"
(assert true)

;; "safe_signaling__def_axiom"
(assert
  (forall ((Trains__cur_num_trains___cur_num_trains___ Int))
    (forall ((Trains__trains___trains___ (Array Int us_rep1)))
      (forall ((Trains__track_signals___track_signals___ (Array Int signal)))
        (! (=
             (= (safe_signaling
                  Trains__cur_num_trains___cur_num_trains___
                  Trains__trains___trains___
                  Trains__track_signals___track_signals___) true)
             (and
               (= (occupied_tracks_on_red
                    Trains__cur_num_trains___cur_num_trains___
                    Trains__trains___trains___
                    Trains__track_signals___track_signals___) true)
               (= (previous_tracks_on_orange_or_red
                    Trains__cur_num_trains___cur_num_trains___
                    Trains__trains___trains___
                    Trains__track_signals___track_signals___) true))) :pattern (
        (safe_signaling
          Trains__cur_num_trains___cur_num_trains___
          Trains__trains___trains___
          Trains__track_signals___track_signals___)) )))))

;; "moving_to_a_new_track__post_axiom"
(assert true)

;; "moving_to_a_new_track__def_axiom"
(assert
  (forall ((param__cur_position us_rep1) (param__new_position us_rep1))
    (! (=
         (= (moving_to_a_new_track param__cur_position param__new_position) true)
         (and
           (and
             (= (inside_a_track param__cur_position) true)
             (= (entering_a_track param__new_position) true))
           (= (to_rep4
                (rec__trains__train_position__track_begin
                  (us_split_fields3 param__cur_position))) (to_rep4
                                                             (rec__trains__train_position__track_end
                                                               (us_split_fields3
                                                                 param__new_position)))))) :pattern (
    (moving_to_a_new_track
      param__cur_position
      param__new_position)) )))

;; "moving_away_from_current_track__post_axiom"
(assert true)

;; "moving_away_from_current_track__def_axiom"
(assert
  (forall ((param__cur_position us_rep1) (param__new_position us_rep1))
    (! (=
         (= (moving_away_from_current_track
              param__cur_position
              param__new_position) true)
         (and
           (and
             (= (entering_a_track param__cur_position) true)
             (= (inside_a_track param__new_position) true))
           (= (to_rep4
                (rec__trains__train_position__track_begin
                  (us_split_fields3 param__cur_position))) (to_rep4
                                                             (rec__trains__train_position__track_end
                                                               (us_split_fields3
                                                                 param__new_position)))))) :pattern (
    (moving_away_from_current_track
      param__cur_position
      param__new_position)) )))

;; "valid_move__post_axiom"
(assert true)

;; "valid_move__def_axiom"
(assert
  (forall ((param__cur_position us_rep1) (param__new_position us_rep1))
    (! (=
         (= (valid_move param__cur_position param__new_position) true)
         (or
           (or
             (= (moving_inside_current_tracks
                  param__cur_position
                  param__new_position) true)
             (= (moving_to_a_new_track
                  param__cur_position
                  param__new_position) true))
           (= (moving_away_from_current_track
                param__cur_position
                param__new_position) true))) :pattern ((valid_move
                                                         param__cur_position
                                                         param__new_position)) )))

(declare-const cur_num_trains Int)

(declare-const trains (Array Int us_rep1))

(declare-const track_signals (Array Int signal))

(declare-const result__ Int)

(declare-const prev Int)

;; "prev'unused"
(define-fun prevqtunused () int__ref
  (int__refqtmk prev))

;; "track_signals'unused"
(define-fun track_signalsqtunused () map__ref1
  (map__refqtmk1 track_signals))

;; "trains'unused"
(define-fun trainsqtunused () map__ref
  (map__refqtmk trains))

;; "cur_num_trains'unused"
(define-fun cur_num_trainsqtunused () int__ref
  (int__refqtmk cur_num_trains))

;; "Assume"
(assert (in_range6 cur_num_trains))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range6 train))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range7 result__))

;; "Assume"
(assert
  (and
    (and
      (and
        (and (<= 1 train) (<= train cur_num_trains))
        (= (valid_move (select trains train) new_position) true))
      (= (one_train_at_most_per_track cur_num_trains trains) true))
    (= (safe_signaling cur_num_trains trains track_signals) true)))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array Int us_rep1)
  trains)

;; "trains__move__cur_position__assume"
(define-fun trains__move__cur_position__assume () us_rep1
  (select trains train))

;; "get'result'unused"
(define-fun getqtresultqtunused () us_rep1
  trains__move__cur_position__assume)

;; "Assume"
(assert (= trains__move__cur_position__assume cur_position))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 prev))

;; "o"
(define-fun o () us_rep1
  new_position)

;; "o"
(define-fun o1 () us_rep1
  cur_position)

;; "o"
(define-fun o2 () Bool
  (moving_inside_current_tracks o1 o))

;; "Ensures"
(assert
  (=
    (= o2 true)
    (and
      (= (to_rep4
           (rec__trains__train_position__track_begin (us_split_fields3 o1))) 
      (to_rep4
        (rec__trains__train_position__track_begin (us_split_fields3 o))))
      (= (to_rep4
           (rec__trains__train_position__track_end (us_split_fields3 o1))) 
      (to_rep4
        (rec__trains__train_position__track_end (us_split_fields3 o)))))))

;; "moving_inside_current_tracks'result'unused"
(define-fun moving_inside_current_tracksqtresultqtunused () Bool
  o2)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o2))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

;; "o"
(define-fun o3 () us_rep1
  new_position)

;; "o"
(define-fun o4 () us_rep1
  cur_position)

;; "o"
(define-fun o5 () Bool
  (moving_away_from_current_track o4 o3))

;; "Ensures"
(assert
  (=
    (= o5 true)
    (and
      (and (= (entering_a_track o4) true) (= (inside_a_track o3) true))
      (= (to_rep4
           (rec__trains__train_position__track_begin (us_split_fields3 o4))) 
      (to_rep4
        (rec__trains__train_position__track_end (us_split_fields3 o3)))))))

;; "moving_away_from_current_track'result'unused"
(define-fun moving_away_from_current_trackqtresultqtunused () Bool
  o5)

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o5))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (not (= spark__branch1 true)))

;; "o"
(define-fun o6 () us_split_fields2
  (us_split_fields3 new_position))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields2
  o6)

;; "o"
(define-fun o7 () track_id
  (rec__trains__train_position__track_begin o6))

;; "rec__trains__train_position__track_begin'result'unused"
(define-fun rec__trains__train_position__track_beginqtresultqtunused 
  () track_id
  o7)

(declare-const o8 Int)

;; "Ensures"
(assert (= (to_rep4 o7) o8))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o8)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array Int signal)
  track_signals)

;; "o"
(define-fun o9 () signal
  (select track_signals o8))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () signal
  o9)

(declare-const temp___677 Int)

;; "Ensures"
(assert (= (to_rep5 o9) temp___677))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  temp___677)

;; "o"
(define-fun o10 () Bool
  (ite (= temp___677 2) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o10)

(declare-const spark__branch2 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused2 () bool__ref
  (bool__refqtmk spark__branch2))

;; "H"
(assert (= spark__branch2 o10))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused2 () Bool
  spark__branch2)

;; "H"
(assert (not (= spark__branch2 true)))

(declare-const spark__branch3 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused3 () bool__ref
  (bool__refqtmk spark__branch3))

(declare-const o11 us_split_fields2)

;; "H"
(assert (= o11 (us_split_fields3 new_position)))

(declare-const us_split_fieldsqtresultqtunused1 us_split_fields2)

;; "H"
(assert (= us_split_fieldsqtresultqtunused1 o11))

(declare-const o12 track_id)

;; "H"
(assert (= o12 (rec__trains__train_position__track_begin o11)))

(declare-const rec__trains__train_position__track_beginqtresultqtunused1 track_id)

;; "H"
(assert (= rec__trains__train_position__track_beginqtresultqtunused1 o12))

(declare-const o13 Int)

;; "Ensures"
(assert (= (to_rep4 o12) o13))

(declare-const to_repqtresultqtunused2 Int)

;; "H"
(assert (= to_repqtresultqtunused2 o13))

(declare-const map__contentqtresultqtunused2 (Array Int signal))

;; "H"
(assert (= map__contentqtresultqtunused2 track_signals))

(declare-const o14 signal)

;; "H"
(assert (= o14 (select track_signals o13)))

(declare-const getqtresultqtunused2 signal)

;; "H"
(assert (= getqtresultqtunused2 o14))

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep5 o14) o15))

(declare-const to_repqtresultqtunused3 Int)

;; "H"
(assert (= to_repqtresultqtunused3 o15))

(declare-const o16 Bool)

;; "H"
(assert (= o16 (ite (= o15 0) true false)))

(declare-const infix_eqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused1 o16))

;; "H"
(assert (= spark__branch3 o16))

(declare-const bool__contentqtresultqtunused3 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused3 spark__branch3))

;; "Assert"
(assert
  (forall ((id Int))
    (=>
      (and (<= 1 id) (<= id 3))
      (=>
        (not (= (get_previous_track new_position id) 0))
        (let ((temp___687 (to_rep5
                            (select track_signals (get_previous_track
                                                    (select trains train)
                                                    id)))))
          (or (= temp___687 1) (= temp___687 2)))))))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array Int us_rep1)
  trains)

;; "o"
(define-fun o17 () (Array Int us_rep1)
  (store trains train new_position))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int us_rep1)
  o17)

(declare-const trains1 (Array Int us_rep1))

;; "trains'unused"
(define-fun trainsqtunused1 () map__ref
  (map__refqtmk trains1))

;; "H"
(assert (= trains1 o17))

(declare-const o18 signal)

;; "Ensures"
(assert (= (to_rep5 o18) 2))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () signal
  o18)

;; "o"
(define-fun o19 () us_split_fields2
  (us_split_fields3 new_position))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields2
  o19)

;; "o"
(define-fun o20 () track_id
  (rec__trains__train_position__track_begin o19))

;; "rec__trains__train_position__track_begin'result'unused"
(define-fun rec__trains__train_position__track_beginqtresultqtunused2 
  () track_id
  o20)

(declare-const o21 Int)

;; "Ensures"
(assert (= (to_rep4 o20) o21))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () Int
  o21)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused4 () (Array Int signal)
  track_signals)

;; "o"
(define-fun o22 () (Array Int signal)
  (store track_signals o21 o18))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int signal)
  o22)

(declare-const track_signals1 (Array Int signal))

;; "track_signals'unused"
(define-fun track_signalsqtunused1 () map__ref1
  (map__refqtmk1 track_signals1))

;; "H"
(assert (= track_signals1 o22))

(declare-const id Int)

;; "id'unused"
(define-fun idqtunused () int__ref
  (int__refqtmk id))

;; "H"
(assert (= id 1))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  id)

;; "o"
(define-fun o23 () Bool
  (ite (<= id 3) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o23)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  id)

;; "o"
(define-fun o24 () Bool
  (ite (<= 1 id) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o24)

;; "o"
(define-fun o25 () Bool
  (and o24 o23))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o25)

;; "H"
(assert (= o25 true))

;; "temp___loop_entry_710'unused"
(define-fun temp___loop_entry_710qtunused () (Array Int signal)
  track_signals1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused5 () (Array Int signal)
  track_signals1)

;; "temp___loop_entry_709'unused"
(define-fun temp___loop_entry_709qtunused () (Array Int signal)
  track_signals1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused6 () (Array Int signal)
  track_signals1)

;; "temp___loop_entry_696'unused"
(define-fun temp___loop_entry_696qtunused () (Array Int signal)
  track_signals1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused7 () (Array Int signal)
  track_signals1)

;; "temp___loop_entry_694'unused"
(define-fun temp___loop_entry_694qtunused () Int
  prev)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  prev)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  id)

;; "o"
(define-fun o26 () us_rep1
  new_position)

;; "o"
(define-fun o27 () Int
  (get_other_previous_track o26 id))

;; "H"
(assert (in_range2 o27))

;; "H"
(assert
  (= o27 (ite (= (to_rep2
                   (select (select previous_tracks (to_rep1
                                                     (rec__trains__track__from
                                                       (us_split_fields1
                                                         (select tracks 
                                                         (to_rep4
                                                           (rec__trains__train_position__track_begin
                                                             (us_split_fields3
                                                               o26)))))))) 
                   id)) (to_rep4
                          (rec__trains__train_position__track_end
                            (us_split_fields3 o26))))
           0
           (to_rep2
             (select (select previous_tracks (to_rep1
                                               (rec__trains__track__from
                                                 (us_split_fields1
                                                   (select tracks (to_rep4
                                                                    (rec__trains__train_position__track_begin
                                                                    (us_split_fields3
                                                                    o26)))))))) 
             id)))))

;; "get_other_previous_track'result'unused"
(define-fun get_other_previous_trackqtresultqtunused () Int
  o27)

(declare-const prev1 Int)

;; "prev'unused"
(define-fun prevqtunused1 () int__ref
  (int__refqtmk prev1))

;; "H"
(assert (= prev1 o27))

(declare-const spark__branch4 Bool)

(declare-const track_signals2 (Array Int signal))

;; "track_signals'unused"
(define-fun track_signalsqtunused2 () map__ref1
  (map__refqtmk1 track_signals2))

;; "spark__branch'unused"
(define-fun spark__branchqtunused4 () bool__ref
  (bool__refqtmk spark__branch4))

(declare-const int__contentqtresultqtunused4 Int)

;; "H"
(assert (= int__contentqtresultqtunused4 prev1))

(declare-const infix_eqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused2 (ite (= prev1 0) true false)))

(declare-const o28 Bool)

(declare-const int__contentqtresultqtunused5 Int)

(declare-const map__contentqtresultqtunused8 (Array Int signal))

(declare-const o29 signal)

(declare-const getqtresultqtunused3 signal)

(declare-const o30 Int)

(declare-const to_repqtresultqtunused5 Int)

(declare-const infix_eqqtresultqtunused3 Bool)

;; "H"
(assert
  (ite (not (= prev1 0))
    (and
      (and (<= 1 prev1) (<= prev1 8))
      (and
        (= int__contentqtresultqtunused5 prev1)
        (and
          (= map__contentqtresultqtunused8 track_signals1)
          (and
            (= o29 (select track_signals1 prev1))
            (and
              (= getqtresultqtunused3 o29)
              (and
                (= (to_rep5 o29) o30)
                (and
                  (= to_repqtresultqtunused5 o30)
                  (and
                    (= o28 (ite (= o30 0) true false))
                    (= infix_eqqtresultqtunused3 o28)))))))))
    (= o28 false)))

;; "H"
(assert (= spark__branch4 o28))

(declare-const bool__contentqtresultqtunused4 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused4 spark__branch4))

(declare-const o31 signal)

(declare-const of_repqtresultqtunused1 signal)

(declare-const int__contentqtresultqtunused6 Int)

(declare-const map__contentqtresultqtunused9 (Array Int signal))

(declare-const o32 (Array Int signal))

(declare-const setqtresultqtunused2 (Array Int signal))

;; "H"
(assert
  (ite (= spark__branch4 true)
    (and
      (= (to_rep5 o31) 1)
      (and
        (= of_repqtresultqtunused1 o31)
        (and
          (and (<= 1 prev1) (<= prev1 8))
          (and
            (= int__contentqtresultqtunused6 prev1)
            (and
              (= map__contentqtresultqtunused9 track_signals1)
              (and
                (= o32 (store track_signals1 prev1 o31))
                (and (= setqtresultqtunused2 o32) (= track_signals2 o32))))))))
    (= track_signals2 track_signals1)))

(declare-const usf Int)

(declare-const anyqtresultqtunused Int)

;; "H"
(assert (= anyqtresultqtunused usf))

(declare-const kqtunused Int)

;; "H"
(assert (= kqtunused usf))

(declare-const int__contentqtresultqtunused7 Int)

;; "H"
(assert (= int__contentqtresultqtunused7 id))

(declare-const o33 Bool)

;; "H"
(assert (= o33 (ite (<= usf id) true false)))

(declare-const infix_lseqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused2 o33))

(declare-const o34 Bool)

;; "H"
(assert (= o34 (ite (<= 1 usf) true false)))

(declare-const infix_lseqqtresultqtunused3 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused3 o34))

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert (= andbqtresultqtunused1 (and o34 o33)))

;; "_f'unused"
(define-fun usfqtunused () Bool
  (ite (forall ((k Int))
         (=>
           (and (<= 1 k) (<= k id))
           (=>
             (not (= (get_other_previous_track new_position k) 0))
             (let ((temp___716 (to_rep5
                                 (select track_signals2 (get_other_previous_track
                                                          new_position
                                                          k)))))
               (or (= temp___716 1) (= temp___716 2))))))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused1 () Bool
  (ite (forall ((k Int))
         (=>
           (and (<= 1 k) (<= k id))
           (=>
             (not (= (get_other_previous_track new_position k) 0))
             (let ((temp___716 (to_rep5
                                 (select track_signals2 (get_other_previous_track
                                                          new_position
                                                          k)))))
               (or (= temp___716 1) (= temp___716 2))))))
    true
    false))

(declare-const track_signals3 (Array Int signal))

(declare-const prev2 Int)

(declare-const id1 Int)

;; "id'unused"
(define-fun idqtunused1 () int__ref
  (int__refqtmk id1))

;; "track_signals'unused"
(define-fun track_signalsqtunused3 () map__ref1
  (map__refqtmk1 track_signals3))

;; "LoopInvariant"
(assert
  (forall ((k Int))
    (=>
      (and (<= 1 k) (<= k id1))
      (=>
        (not (= (get_other_previous_track new_position k) 0))
        (let ((temp___718 (to_rep5
                            (select track_signals3 (get_other_previous_track
                                                     new_position
                                                     k)))))
          (or (= temp___718 1) (= temp___718 2)))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 8))
      (and
        (=>
          (= (to_rep5 (select track_signals1 j)) 2)
          (= (to_rep5 (select track_signals3 j)) 2))
        (=>
          (= (to_rep5 (select track_signals1 j)) 1)
          (= (to_rep5 (select track_signals3 j)) 1))))))

;; "LoopInvariant"
(assert
  (forall ((train1 Int))
    (=>
      (and (<= 1 train1) (<= train1 cur_num_trains))
      (forall ((id2 Int))
        (=>
          (and (<= 1 id2) (<= id2 3))
          (=>
            (not (= (get_previous_track (select trains1 train1) id2) 0))
            (let ((temp___707 (to_rep5
                                (select track_signals3 (get_previous_track
                                                         (select trains1 train1)
                                                         id2)))))
              (or (= temp___707 1) (= temp___707 2)))))))))

;; "Assume"
(assert
  (= (and (ite (in_range2 prev2) true false) (ite (and (<= 1 id1) (<= id1 3))
                                               true
                                               false)) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  id1)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused4 () Bool
  (ite (= id1 3) true false))

;; "H"
(assert (not (= id1 3)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  id1)

;; "o"
(define-fun o35 () Int
  (+ id1 1))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o35)

(declare-const id2 Int)

;; "id'unused"
(define-fun idqtunused2 () int__ref
  (int__refqtmk id2))

;; "H"
(assert (= id2 o35))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  id2)

;; "o"
(define-fun o36 () us_rep1
  new_position)

;; "o"
(define-fun o37 () Int
  (get_other_previous_track o36 id2))

;; "H"
(assert (in_range2 o37))

;; "H"
(assert
  (= o37 (ite (= (to_rep2
                   (select (select previous_tracks (to_rep1
                                                     (rec__trains__track__from
                                                       (us_split_fields1
                                                         (select tracks 
                                                         (to_rep4
                                                           (rec__trains__train_position__track_begin
                                                             (us_split_fields3
                                                               o36)))))))) 
                   id2)) (to_rep4
                           (rec__trains__train_position__track_end
                             (us_split_fields3 o36))))
           0
           (to_rep2
             (select (select previous_tracks (to_rep1
                                               (rec__trains__track__from
                                                 (us_split_fields1
                                                   (select tracks (to_rep4
                                                                    (rec__trains__train_position__track_begin
                                                                    (us_split_fields3
                                                                    o36)))))))) 
             id2)))))

;; "get_other_previous_track'result'unused"
(define-fun get_other_previous_trackqtresultqtunused1 () Int
  o37)

(declare-const prev3 Int)

;; "prev'unused"
(define-fun prevqtunused2 () int__ref
  (int__refqtmk prev3))

;; "H"
(assert (= prev3 o37))

(declare-const track_signals4 (Array Int signal))

;; "track_signals'unused"
(define-fun track_signalsqtunused4 () map__ref1
  (map__refqtmk1 track_signals4))

(declare-const int__contentqtresultqtunused11 Int)

;; "H"
(assert (= int__contentqtresultqtunused11 prev3))

(declare-const infix_eqqtresultqtunused5 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused5 (ite (= prev3 0) true false)))

(declare-const o38 Bool)

(declare-const int__contentqtresultqtunused12 Int)

(declare-const map__contentqtresultqtunused10 (Array Int signal))

(declare-const o39 signal)

(declare-const getqtresultqtunused4 signal)

(declare-const o40 Int)

(declare-const to_repqtresultqtunused6 Int)

(declare-const infix_eqqtresultqtunused6 Bool)

;; "H"
(assert
  (ite (not (= prev3 0))
    (and
      (and (<= 1 prev3) (<= prev3 8))
      (and
        (= int__contentqtresultqtunused12 prev3)
        (and
          (= map__contentqtresultqtunused10 track_signals3)
          (and
            (= o39 (select track_signals3 prev3))
            (and
              (= getqtresultqtunused4 o39)
              (and
                (= (to_rep5 o39) o40)
                (and
                  (= to_repqtresultqtunused6 o40)
                  (and
                    (= o38 (ite (= o40 0) true false))
                    (= infix_eqqtresultqtunused6 o38)))))))))
    (= o38 false)))

(declare-const spark__branch5 Bool)

(declare-const spark__branchqtunused5 bool__ref)

;; "H"
(assert (= spark__branchqtunused5 (bool__refqtmk spark__branch5)))

;; "H"
(assert (= spark__branch5 o38))

(declare-const bool__contentqtresultqtunused5 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused5 spark__branch5))

(declare-const o41 signal)

(declare-const of_repqtresultqtunused2 signal)

(declare-const int__contentqtresultqtunused13 Int)

(declare-const map__contentqtresultqtunused11 (Array Int signal))

(declare-const o42 (Array Int signal))

(declare-const setqtresultqtunused3 (Array Int signal))

;; "H"
(assert
  (ite (= spark__branch5 true)
    (and
      (= (to_rep5 o41) 1)
      (and
        (= of_repqtresultqtunused2 o41)
        (and
          (and (<= 1 prev3) (<= prev3 8))
          (and
            (= int__contentqtresultqtunused13 prev3)
            (and
              (= map__contentqtresultqtunused11 track_signals3)
              (and
                (= o42 (store track_signals3 prev3 o41))
                (and (= setqtresultqtunused3 o42) (= track_signals4 o42))))))))
    (= track_signals4 track_signals3)))

(declare-const usf1 Int)

(declare-const anyqtresultqtunused2 Int)

;; "H"
(assert (= anyqtresultqtunused2 usf1))

(declare-const kqtunused1 Int)

;; "H"
(assert (= kqtunused1 usf1))

(declare-const int__contentqtresultqtunused14 Int)

;; "H"
(assert (= int__contentqtresultqtunused14 id2))

(declare-const o43 Bool)

;; "H"
(assert (= o43 (ite (<= usf1 id2) true false)))

(declare-const infix_lseqqtresultqtunused4 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused4 o43))

(declare-const o44 Bool)

;; "H"
(assert (= o44 (ite (<= 1 usf1) true false)))

(declare-const infix_lseqqtresultqtunused5 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused5 o44))

(declare-const andbqtresultqtunused2 Bool)

;; "H"
(assert (= andbqtresultqtunused2 (and o44 o43)))

;; "_f'unused"
(define-fun usfqtunused1 () Bool
  (ite (forall ((k Int))
         (=>
           (and (<= 1 k) (<= k id2))
           (=>
             (not (= (get_other_previous_track new_position k) 0))
             (let ((temp___716 (to_rep5
                                 (select track_signals4 (get_other_previous_track
                                                          new_position
                                                          k)))))
               (or (= temp___716 1) (= temp___716 2))))))
    true
    false))

;; "any'result'unused"
(define-fun anyqtresultqtunused3 () Bool
  (ite (forall ((k Int))
         (=>
           (and (<= 1 k) (<= k id2))
           (=>
             (not (= (get_other_previous_track new_position k) 0))
             (let ((temp___716 (to_rep5
                                 (select track_signals4 (get_other_previous_track
                                                          new_position
                                                          k)))))
               (or (= temp___716 1) (= temp___716 2))))))
    true
    false))

;; "LoopInvariant"
(assert
  (forall ((k Int))
    (=>
      (and (<= 1 k) (<= k id2))
      (=>
        (not (= (get_other_previous_track new_position k) 0))
        (let ((temp___718 (to_rep5
                            (select track_signals4 (get_other_previous_track
                                                     new_position
                                                     k)))))
          (or (= temp___718 1) (= temp___718 2)))))))

;; "LoopInvariant"
(assert
  (forall ((j Int))
    (=>
      (and (<= 1 j) (<= j 8))
      (and
        (=>
          (= (to_rep5 (select track_signals1 j)) 2)
          (= (to_rep5 (select track_signals4 j)) 2))
        (=>
          (= (to_rep5 (select track_signals1 j)) 1)
          (= (to_rep5 (select track_signals4 j)) 1))))))

(declare-const train1 Int)

;; "H"
(assert (<= 1 train1))

;; "H"
(assert (<= train1 cur_num_trains))

(declare-const id3 Int)

;; "H"
(assert (<= 1 id3))

;; "H"
(assert (<= id3 3))

;; "H"
(assert (not (= (get_previous_track (select trains1 train1) id3) 0)))

;; "temp___707"
(define-fun temp___707 () Int
  (to_rep5
    (select track_signals4 (get_previous_track (select trains1 train1) id3))))

;; Goal "def'vc"
;; File "trains.ads", line 217, characters 0-0
(assert
  (not (or (= temp___707 1) (= temp___707 2))))

(check-sat)
