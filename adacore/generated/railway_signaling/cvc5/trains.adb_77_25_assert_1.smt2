;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort positive 0)

;; "positive'int"
(declare-fun positiveqtint (positive) Int)

;; "positive'axiom"
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x positive)) Int
  (positiveqtint x))

;; "of_rep"
(declare-fun of_rep (Int) positive)

;; "inversion_axiom"
(assert
  (forall ((x positive))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x positive)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-sort location 0)

;; "location'int"
(declare-fun locationqtint (location) Int)

;; "location'axiom"
(assert
  (forall ((i location))
    (and (<= 1 (locationqtint i)) (<= (locationqtint i) 5))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 5)))

;; "to_rep"
(define-fun to_rep1 ((x location)) Int
  (locationqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) location)

;; "inversion_axiom"
(assert
  (forall ((x location))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x location)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__trains__track__from location)(rec__trains__track__to location)(rec__trains__track__length positive)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const trains__track__from__first__bit Int)

(declare-const trains__track__from__last__bit Int)

(declare-const trains__track__from__position Int)

;; "trains__track__from__first__bit_axiom"
(assert (<= 0 trains__track__from__first__bit))

;; "trains__track__from__last__bit_axiom"
(assert (< trains__track__from__first__bit trains__track__from__last__bit))

;; "trains__track__from__position_axiom"
(assert (<= 0 trains__track__from__position))

(declare-const trains__track__to__first__bit Int)

(declare-const trains__track__to__last__bit Int)

(declare-const trains__track__to__position Int)

;; "trains__track__to__first__bit_axiom"
(assert (<= 0 trains__track__to__first__bit))

;; "trains__track__to__last__bit_axiom"
(assert (< trains__track__to__first__bit trains__track__to__last__bit))

;; "trains__track__to__position_axiom"
(assert (<= 0 trains__track__to__position))

(declare-const trains__track__length__first__bit Int)

(declare-const trains__track__length__last__bit Int)

(declare-const trains__track__length__position Int)

;; "trains__track__length__first__bit_axiom"
(assert (<= 0 trains__track__length__first__bit))

;; "trains__track__length__last__bit_axiom"
(assert
  (< trains__track__length__first__bit trains__track__length__last__bit))

;; "trains__track__length__position_axiom"
(assert (<= 0 trains__track__length__position))

(declare-const dummy us_rep)

(declare-const tracks (Array Int us_rep))

(declare-sort track_opt_id 0)

;; "track_opt_id'int"
(declare-fun track_opt_idqtint (track_opt_id) Int)

;; "track_opt_id'axiom"
(assert
  (forall ((i track_opt_id))
    (and (<= 0 (track_opt_idqtint i)) (<= (track_opt_idqtint i) 8))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep2 ((x track_opt_id)) Int
  (track_opt_idqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) track_opt_id)

;; "inversion_axiom"
(assert
  (forall ((x track_opt_id))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x track_opt_id))
    (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const previous_tracks (Array Int (Array Int track_opt_id)))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep3 ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-sort track_id 0)

;; "track_id'int"
(declare-fun track_idqtint (track_id) Int)

;; "track_id'axiom"
(assert
  (forall ((i track_id))
    (and (<= 1 (track_idqtint i)) (<= (track_idqtint i) 8))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 1 x) (<= x 8)))

;; "to_rep"
(define-fun to_rep4 ((x track_id)) Int
  (track_idqtint x))

;; "of_rep"
(declare-fun of_rep4 (Int) track_id)

;; "inversion_axiom"
(assert
  (forall ((x track_id))
    (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert
  (forall ((x track_id)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-datatypes ((us_split_fields2 0))
  (((us_split_fieldsqtmk1
    (rec__trains__train_position__track_begin track_id)(rec__trains__train_position__pos_begin natural)(rec__trains__train_position__track_end track_id)))))

(declare-datatypes ((us_rep1 0))
  (((us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const trains__train_position__track_begin__first__bit Int)

(declare-const trains__train_position__track_begin__last__bit Int)

(declare-const trains__train_position__track_begin__position Int)

;; "trains__train_position__track_begin__first__bit_axiom"
(assert (<= 0 trains__train_position__track_begin__first__bit))

;; "trains__train_position__track_begin__last__bit_axiom"
(assert
  (< trains__train_position__track_begin__first__bit trains__train_position__track_begin__last__bit))

;; "trains__train_position__track_begin__position_axiom"
(assert (<= 0 trains__train_position__track_begin__position))

(declare-const trains__train_position__pos_begin__first__bit Int)

(declare-const trains__train_position__pos_begin__last__bit Int)

(declare-const trains__train_position__pos_begin__position Int)

;; "trains__train_position__pos_begin__first__bit_axiom"
(assert (<= 0 trains__train_position__pos_begin__first__bit))

;; "trains__train_position__pos_begin__last__bit_axiom"
(assert
  (< trains__train_position__pos_begin__first__bit trains__train_position__pos_begin__last__bit))

;; "trains__train_position__pos_begin__position_axiom"
(assert (<= 0 trains__train_position__pos_begin__position))

(declare-const trains__train_position__track_end__first__bit Int)

(declare-const trains__train_position__track_end__last__bit Int)

(declare-const trains__train_position__track_end__position Int)

;; "trains__train_position__track_end__first__bit_axiom"
(assert (<= 0 trains__train_position__track_end__first__bit))

;; "trains__train_position__track_end__last__bit_axiom"
(assert
  (< trains__train_position__track_end__first__bit trains__train_position__track_end__last__bit))

;; "trains__train_position__track_end__position_axiom"
(assert (<= 0 trains__train_position__track_end__position))

(declare-const dummy1 us_rep1)

;; "one_train_at_most_per_track"
(define-fun one_train_at_most_per_track ((Trains__cur_num_trains___cur_num_trains___ Int) (Trains__trains___trains___ (Array Int us_rep1))) Bool
  (ite (forall ((train Int))
         (=>
           (and
             (<= 1 train)
             (<= train Trains__cur_num_trains___cur_num_trains___))
           (forall ((other_train Int))
             (=>
               (and
                 (<= 1 other_train)
                 (<= other_train Trains__cur_num_trains___cur_num_trains___))
               (=>
                 (not (= other_train train))
                 (and
                   (and
                     (and
                       (not
                         (= (to_rep4
                              (rec__trains__train_position__track_begin
                                (us_split_fields3
                                  (select Trains__trains___trains___ train)))) 
                         (to_rep4
                           (rec__trains__train_position__track_begin
                             (us_split_fields3
                               (select Trains__trains___trains___ other_train))))))
                       (not
                         (= (to_rep4
                              (rec__trains__train_position__track_begin
                                (us_split_fields3
                                  (select Trains__trains___trains___ train)))) 
                         (to_rep4
                           (rec__trains__train_position__track_end
                             (us_split_fields3
                               (select Trains__trains___trains___ other_train)))))))
                     (not
                       (= (to_rep4
                            (rec__trains__train_position__track_end
                              (us_split_fields3
                                (select Trains__trains___trains___ train)))) 
                       (to_rep4
                         (rec__trains__train_position__track_begin
                           (us_split_fields3
                             (select Trains__trains___trains___ other_train)))))))
                   (not
                     (= (to_rep4
                          (rec__trains__train_position__track_end
                            (us_split_fields3
                              (select Trains__trains___trains___ train)))) 
                     (to_rep4
                       (rec__trains__train_position__track_end
                         (us_split_fields3
                           (select Trains__trains___trains___ other_train))))))))))))
    true
    false))

(declare-sort signal 0)

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 2)))

;; "to_rep"
(declare-fun to_rep5 (signal) Int)

;; "of_rep"
(declare-fun of_rep5 (Int) signal)

;; "inversion_axiom"
(assert
  (forall ((x signal))
    (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; "range_axiom"
(assert
  (forall ((x signal)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range5 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

;; "occupied_tracks_on_red"
(define-fun occupied_tracks_on_red ((Trains__cur_num_trains___cur_num_trains___ Int) (Trains__trains___trains___ (Array Int us_rep1)) (Trains__track_signals___track_signals___ (Array Int signal))) Bool
  (ite (forall ((train Int))
         (=>
           (and
             (<= 1 train)
             (<= train Trains__cur_num_trains___cur_num_trains___))
           (and
             (= (to_rep5
                  (select Trains__track_signals___track_signals___ (to_rep4
                                                                    (rec__trains__train_position__track_begin
                                                                    (us_split_fields3
                                                                    (select Trains__trains___trains___ train)))))) 2)
             (= (to_rep5
                  (select Trains__track_signals___track_signals___ (to_rep4
                                                                    (rec__trains__train_position__track_end
                                                                    (us_split_fields3
                                                                    (select Trains__trains___trains___ train)))))) 2))))
    true
    false))

;; "get_previous_track"
(define-fun get_previous_track ((param__position us_rep1) (param__id Int)) Int
  (to_rep2
    (let ((temp___249 (select previous_tracks (to_rep1
                                                (rec__trains__track__from
                                                  (us_split_fields1
                                                    (select tracks (to_rep4
                                                                    (rec__trains__train_position__track_end
                                                                    (us_split_fields3
                                                                    param__position))))))))))
      (select temp___249 param__id))))

;; "get_other_previous_track"
(define-fun get_other_previous_track ((param__position us_rep1) (param__id Int)) Int
  (ite (= (to_rep2
            (let ((temp___252 (select previous_tracks (to_rep1
                                                        (rec__trains__track__from
                                                          (us_split_fields1
                                                            (select tracks 
                                                            (to_rep4
                                                              (rec__trains__train_position__track_begin
                                                                (us_split_fields3
                                                                  param__position))))))))))
              (select temp___252 param__id))) (to_rep4
                                                (rec__trains__train_position__track_end
                                                  (us_split_fields3
                                                    param__position))))
    0
    (to_rep2
      (let ((temp___251 (select previous_tracks (to_rep1
                                                  (rec__trains__track__from
                                                    (us_split_fields1
                                                      (select tracks 
                                                      (to_rep4
                                                        (rec__trains__train_position__track_begin
                                                          (us_split_fields3
                                                            param__position))))))))))
        (select temp___251 param__id)))))

;; "previous_tracks_on_orange_or_red"
(declare-fun previous_tracks_on_orange_or_red (Int
  (Array Int us_rep1)
  (Array Int signal)) Bool)

;; "safe_signaling"
(declare-fun safe_signaling (Int
  (Array Int us_rep1)
  (Array Int signal)) Bool)

;; "moving_inside_current_tracks"
(define-fun moving_inside_current_tracks ((param__cur_position us_rep1) (param__new_position us_rep1)) Bool
  (and (= (to_rep4
            (rec__trains__train_position__track_begin
              (us_split_fields3 param__cur_position))) (to_rep4
                                                         (rec__trains__train_position__track_begin
                                                           (us_split_fields3
                                                             param__new_position)))) (= 
  (to_rep4
    (rec__trains__train_position__track_end
      (us_split_fields3 param__cur_position))) (to_rep4
                                                 (rec__trains__train_position__track_end
                                                   (us_split_fields3
                                                     param__new_position))))))

;; "entering_a_track"
(define-fun entering_a_track ((param__position us_rep1)) Bool
  (and (not (= (to_rep4
                 (rec__trains__train_position__track_begin
                   (us_split_fields3 param__position))) (to_rep4
                                                          (rec__trains__train_position__track_end
                                                            (us_split_fields3
                                                              param__position))))) 
  (ite (exists ((id Int))
         (and
           (and (<= 1 id) (<= id 3))
           (= (to_rep4
                (rec__trains__train_position__track_end
                  (us_split_fields3 param__position))) (to_rep2
                                                         (let ((temp___243 (select 
                                                           previous_tracks 
                                                           (to_rep1
                                                             (rec__trains__track__from
                                                               (us_split_fields1
                                                                 (select 
                                                                 tracks 
                                                                 (to_rep4
                                                                   (rec__trains__train_position__track_begin
                                                                    (us_split_fields3
                                                                    param__position))))))))))
                                                           (select temp___243 id))))))
    true
    false)))

;; "inside_a_track"
(define-fun inside_a_track ((param__position us_rep1)) Bool
  (= (to_rep4
       (rec__trains__train_position__track_begin
         (us_split_fields3 param__position))) (to_rep4
                                                (rec__trains__train_position__track_end
                                                  (us_split_fields3
                                                    param__position)))))

;; "moving_away_from_current_track"
(declare-fun moving_away_from_current_track (us_rep1
  us_rep1) Bool)

;; "valid_move"
(declare-fun valid_move (us_rep1
  us_rep1) Bool)

;; "moving_to_a_new_track"
(declare-fun moving_to_a_new_track (us_rep1
  us_rep1) Bool)

(declare-const train Int)

(declare-const new_position us_rep1)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const cur_position us_rep1)

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 1 x) (<= x 10)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size2 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment4))

;; "in_range"
(define-fun in_range7 ((x Int)) Bool
  (and (<= 0 x) (<= x 3)))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size3 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment5))

;; "trains__tracks__aggregate_def"
(declare-fun trains__tracks__aggregate_def (us_rep
  us_rep
  us_rep
  us_rep
  us_rep
  us_rep
  us_rep
  us_rep) (Array Int us_rep))

(declare-const rliteral location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral) 1))

(declare-const rliteral1 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral1) 2))

(declare-const rliteral2 positive)

;; "rliteral_axiom"
(assert (= (positiveqtint rliteral2) 10))

(declare-const rliteral3 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral3) 3))

(declare-const rliteral4 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral4) 5))

(declare-const rliteral5 location)

;; "rliteral_axiom"
(assert (= (locationqtint rliteral5) 4))

;; "tracks__def_axiom"
(assert
  (= tracks (let ((temp___180qtunused (trains__tracks__aggregate_def
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral
                                            rliteral1
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral
                                            rliteral3
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral1
                                            rliteral3
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral1
                                            rliteral4
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral3
                                            rliteral5
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral3
                                            rliteral4
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral5
                                            rliteral4
                                            rliteral2))
                                        (us_repqtmk
                                          (us_split_fieldsqtmk
                                            rliteral4
                                            rliteral
                                            rliteral2)))))
              (trains__tracks__aggregate_def
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral rliteral1 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral rliteral3 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral1 rliteral3 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral1 rliteral4 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral3 rliteral5 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral3 rliteral4 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral5 rliteral4 rliteral2))
                (us_repqtmk
                  (us_split_fieldsqtmk rliteral4 rliteral rliteral2))))))

;; "def_axiom"
(assert
  (forall ((temp___169 us_rep) (temp___170 us_rep) (temp___171 us_rep) (temp___172 us_rep) (temp___173 us_rep) (temp___174 us_rep) (temp___175 us_rep) (temp___176 us_rep))
    (let ((temp___177 (trains__tracks__aggregate_def
                        temp___169
                        temp___170
                        temp___171
                        temp___172
                        temp___173
                        temp___174
                        temp___175
                        temp___176)))
      (and
        (and
          (= (select temp___177 1) temp___169)
          (= (select temp___177 2) temp___170))
        (and
          (and
            (and
              (= (select temp___177 3) temp___171)
              (= (select temp___177 4) temp___172))
            (= (select temp___177 5) temp___173))
          (and
            (and
              (= (select temp___177 6) temp___174)
              (= (select temp___177 7) temp___175))
            (= (select temp___177 8) temp___176)))))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size4 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size4))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size5 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "component__size_axiom"
(assert (<= 0 component__size5))

;; "alignment_axiom"
(assert (<= 0 alignment7))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size6 Int)

(declare-const alignment8 Int)

;; "value__size_axiom"
(assert (<= 0 value__size8))

;; "object__size_axiom"
(assert (<= 0 object__size8))

;; "component__size_axiom"
(assert (<= 0 component__size6))

;; "alignment_axiom"
(assert (<= 0 alignment8))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const component__size7 Int)

(declare-const alignment9 Int)

;; "value__size_axiom"
(assert (<= 0 value__size9))

;; "object__size_axiom"
(assert (<= 0 object__size9))

;; "component__size_axiom"
(assert (<= 0 component__size7))

;; "alignment_axiom"
(assert (<= 0 alignment9))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const component__size8 Int)

(declare-const alignment10 Int)

;; "value__size_axiom"
(assert (<= 0 value__size10))

;; "object__size_axiom"
(assert (<= 0 object__size10))

;; "component__size_axiom"
(assert (<= 0 component__size8))

;; "alignment_axiom"
(assert (<= 0 alignment10))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const component__size9 Int)

(declare-const alignment11 Int)

;; "value__size_axiom"
(assert (<= 0 value__size11))

;; "object__size_axiom"
(assert (<= 0 object__size11))

;; "component__size_axiom"
(assert (<= 0 component__size9))

;; "alignment_axiom"
(assert (<= 0 alignment11))

;; "trains__previous_tracks__aggregate_def"
(declare-fun trains__previous_tracks__aggregate_def ((Array Int track_opt_id)
  (Array Int track_opt_id)
  (Array Int track_opt_id)
  (Array Int track_opt_id)
  (Array Int track_opt_id)) (Array Int (Array Int track_opt_id)))

;; "temp_____aggregate_def_195"
(declare-fun temp_____aggregate_def_195 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_204"
(declare-fun temp_____aggregate_def_204 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_213"
(declare-fun temp_____aggregate_def_213 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_222"
(declare-fun temp_____aggregate_def_222 (Int
  Int
  Int) (Array Int track_opt_id))

;; "temp_____aggregate_def_231"
(declare-fun temp_____aggregate_def_231 (Int
  Int
  Int) (Array Int track_opt_id))

;; "previous_tracks__def_axiom"
(assert
  (= previous_tracks (let ((temp___237qtunused (trains__previous_tracks__aggregate_def
                                                 (let ((temp___199 (temp_____aggregate_def_195
                                                                    8
                                                                    0
                                                                    0)))
                                                   (let ((temp___200 temp___199))
                                                     temp___200))
                                                 (let ((temp___208 (temp_____aggregate_def_204
                                                                    1
                                                                    0
                                                                    0)))
                                                   (let ((temp___209 temp___208))
                                                     temp___209))
                                                 (let ((temp___217 (temp_____aggregate_def_213
                                                                    2
                                                                    3
                                                                    0)))
                                                   (let ((temp___218 temp___217))
                                                     temp___218))
                                                 (let ((temp___226 (temp_____aggregate_def_222
                                                                    5
                                                                    0
                                                                    0)))
                                                   (let ((temp___227 temp___226))
                                                     temp___227))
                                                 (let ((temp___235 (temp_____aggregate_def_231
                                                                    4
                                                                    6
                                                                    7)))
                                                   (let ((temp___236 temp___235))
                                                     temp___236)))))
                       (trains__previous_tracks__aggregate_def
                         (let ((temp___199 (temp_____aggregate_def_195 8 0 0)))
                           (let ((temp___200 temp___199)) temp___200))
                         (let ((temp___208 (temp_____aggregate_def_204 1 0 0)))
                           (let ((temp___209 temp___208)) temp___209))
                         (let ((temp___217 (temp_____aggregate_def_213 2 3 0)))
                           (let ((temp___218 temp___217)) temp___218))
                         (let ((temp___226 (temp_____aggregate_def_222 5 0 0)))
                           (let ((temp___227 temp___226)) temp___227))
                         (let ((temp___235 (temp_____aggregate_def_231 4 6 7)))
                           (let ((temp___236 temp___235)) temp___236))))))

;; "def_axiom"
(assert
  (forall ((temp___184 (Array Int track_opt_id)) (temp___185 (Array Int track_opt_id)) (temp___186 (Array Int track_opt_id)) (temp___187 (Array Int track_opt_id)) (temp___188 (Array Int track_opt_id)))
    (let ((temp___189 (trains__previous_tracks__aggregate_def
                        temp___184
                        temp___185
                        temp___186
                        temp___187
                        temp___188)))
      (and
        (and
          (= (select temp___189 1) temp___184)
          (= (select temp___189 2) temp___185))
        (and
          (and
            (= (select temp___189 3) temp___186)
            (= (select temp___189 4) temp___187))
          (= (select temp___189 5) temp___188))))))

(declare-const rliteral6 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral6) 8))

(declare-const rliteral7 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral7) 0))

;; "def_axiom"
(assert
  (forall ((temp___192 Int) (temp___193 Int) (temp___194 Int))
    (let ((temp___196 (temp_____aggregate_def_195
                        temp___192
                        temp___193
                        temp___194)))
      (and
        (and
          (= (select temp___196 1) rliteral6)
          (= (select temp___196 2) rliteral7))
        (= (select temp___196 3) rliteral7)))))

(declare-const rliteral8 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral8) 1))

;; "def_axiom"
(assert
  (forall ((temp___201 Int) (temp___202 Int) (temp___203 Int))
    (let ((temp___205 (temp_____aggregate_def_204
                        temp___201
                        temp___202
                        temp___203)))
      (and
        (and
          (= (select temp___205 1) rliteral8)
          (= (select temp___205 2) rliteral7))
        (= (select temp___205 3) rliteral7)))))

(declare-const rliteral9 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral9) 2))

(declare-const rliteral10 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral10) 3))

;; "def_axiom"
(assert
  (forall ((temp___210 Int) (temp___211 Int) (temp___212 Int))
    (let ((temp___214 (temp_____aggregate_def_213
                        temp___210
                        temp___211
                        temp___212)))
      (and
        (and
          (= (select temp___214 1) rliteral9)
          (= (select temp___214 2) rliteral10))
        (= (select temp___214 3) rliteral7)))))

(declare-const rliteral11 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral11) 5))

;; "def_axiom"
(assert
  (forall ((temp___219 Int) (temp___220 Int) (temp___221 Int))
    (let ((temp___223 (temp_____aggregate_def_222
                        temp___219
                        temp___220
                        temp___221)))
      (and
        (and
          (= (select temp___223 1) rliteral11)
          (= (select temp___223 2) rliteral7))
        (= (select temp___223 3) rliteral7)))))

(declare-const rliteral12 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral12) 4))

(declare-const rliteral13 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral13) 6))

(declare-const rliteral14 track_opt_id)

;; "rliteral_axiom"
(assert (= (track_opt_idqtint rliteral14) 7))

;; "def_axiom"
(assert
  (forall ((temp___228 Int) (temp___229 Int) (temp___230 Int))
    (let ((temp___232 (temp_____aggregate_def_231
                        temp___228
                        temp___229
                        temp___230)))
      (and
        (and
          (= (select temp___232 1) rliteral12)
          (= (select temp___232 2) rliteral13))
        (= (select temp___232 3) rliteral14)))))

;; "previous_tracks_on_orange_or_red__post_axiom"
(assert true)

;; "previous_tracks_on_orange_or_red__def_axiom"
(assert
  (forall ((Trains__cur_num_trains___cur_num_trains___ Int))
    (forall ((Trains__trains___trains___ (Array Int us_rep1)))
      (forall ((Trains__track_signals___track_signals___ (Array Int signal)))
        (! (=
             (= (previous_tracks_on_orange_or_red
                  Trains__cur_num_trains___cur_num_trains___
                  Trains__trains___trains___
                  Trains__track_signals___track_signals___) true)
             (forall ((train1 Int))
               (=>
                 (and
                   (<= 1 train1)
                   (<= train1 Trains__cur_num_trains___cur_num_trains___))
                 (forall ((id Int))
                   (=>
                     (and (<= 1 id) (<= id 3))
                     (and
                       (=>
                         (not
                           (= (get_previous_track
                                (select Trains__trains___trains___ train1)
                                id) 0))
                         (let ((temp___352 (to_rep5
                                             (select Trains__track_signals___track_signals___ 
                                             (get_previous_track
                                               (select Trains__trains___trains___ train1)
                                               id)))))
                           (or (= temp___352 1) (= temp___352 2))))
                       (=>
                         (not
                           (= (get_other_previous_track
                                (select Trains__trains___trains___ train1)
                                id) 0))
                         (let ((temp___354 (to_rep5
                                             (select Trains__track_signals___track_signals___ 
                                             (get_other_previous_track
                                               (select Trains__trains___trains___ train1)
                                               id)))))
                           (or (= temp___354 1) (= temp___354 2)))))))))) :pattern (
        (previous_tracks_on_orange_or_red
          Trains__cur_num_trains___cur_num_trains___
          Trains__trains___trains___
          Trains__track_signals___track_signals___)) )))))

;; "safe_signaling__post_axiom"
(assert true)

;; "safe_signaling__def_axiom"
(assert
  (forall ((Trains__cur_num_trains___cur_num_trains___ Int))
    (forall ((Trains__trains___trains___ (Array Int us_rep1)))
      (forall ((Trains__track_signals___track_signals___ (Array Int signal)))
        (! (=
             (= (safe_signaling
                  Trains__cur_num_trains___cur_num_trains___
                  Trains__trains___trains___
                  Trains__track_signals___track_signals___) true)
             (and
               (= (occupied_tracks_on_red
                    Trains__cur_num_trains___cur_num_trains___
                    Trains__trains___trains___
                    Trains__track_signals___track_signals___) true)
               (= (previous_tracks_on_orange_or_red
                    Trains__cur_num_trains___cur_num_trains___
                    Trains__trains___trains___
                    Trains__track_signals___track_signals___) true))) :pattern (
        (safe_signaling
          Trains__cur_num_trains___cur_num_trains___
          Trains__trains___trains___
          Trains__track_signals___track_signals___)) )))))

;; "moving_to_a_new_track__post_axiom"
(assert true)

;; "moving_to_a_new_track__def_axiom"
(assert
  (forall ((param__cur_position us_rep1) (param__new_position us_rep1))
    (! (=
         (= (moving_to_a_new_track param__cur_position param__new_position) true)
         (and
           (and
             (= (inside_a_track param__cur_position) true)
             (= (entering_a_track param__new_position) true))
           (= (to_rep4
                (rec__trains__train_position__track_begin
                  (us_split_fields3 param__cur_position))) (to_rep4
                                                             (rec__trains__train_position__track_end
                                                               (us_split_fields3
                                                                 param__new_position)))))) :pattern (
    (moving_to_a_new_track
      param__cur_position
      param__new_position)) )))

;; "moving_away_from_current_track__post_axiom"
(assert true)

;; "moving_away_from_current_track__def_axiom"
(assert
  (forall ((param__cur_position us_rep1) (param__new_position us_rep1))
    (! (=
         (= (moving_away_from_current_track
              param__cur_position
              param__new_position) true)
         (and
           (and
             (= (entering_a_track param__cur_position) true)
             (= (inside_a_track param__new_position) true))
           (= (to_rep4
                (rec__trains__train_position__track_begin
                  (us_split_fields3 param__cur_position))) (to_rep4
                                                             (rec__trains__train_position__track_end
                                                               (us_split_fields3
                                                                 param__new_position)))))) :pattern (
    (moving_away_from_current_track
      param__cur_position
      param__new_position)) )))

;; "valid_move__post_axiom"
(assert true)

;; "valid_move__def_axiom"
(assert
  (forall ((param__cur_position us_rep1) (param__new_position us_rep1))
    (! (=
         (= (valid_move param__cur_position param__new_position) true)
         (or
           (or
             (= (moving_inside_current_tracks
                  param__cur_position
                  param__new_position) true)
             (= (moving_to_a_new_track
                  param__cur_position
                  param__new_position) true))
           (= (moving_away_from_current_track
                param__cur_position
                param__new_position) true))) :pattern ((valid_move
                                                         param__cur_position
                                                         param__new_position)) )))

;; Goal "def'vc"
;; File "trains.ads", line 217, characters 0-0
(assert
  (not
  (forall ((cur_num_trains Int) (trains (Array Int us_rep1)) (track_signals (Array Int signal)) (result__ Int) (prev Int))
    (=>
      (in_range6 cur_num_trains)
      (=>
        (in_range6 train)
        (=>
          (in_range7 result__)
          (=>
            (and
              (and
                (and
                  (and (<= 1 train) (<= train cur_num_trains))
                  (= (valid_move (select trains train) new_position) true))
                (= (one_train_at_most_per_track cur_num_trains trains) true))
              (= (safe_signaling cur_num_trains trains track_signals) true))
            (=>
              (= (select trains train) cur_position)
              (=>
                (in_range2 prev)
                (let ((o new_position))
                  (let ((o1 cur_position))
                    (let ((o2 (moving_inside_current_tracks o1 o)))
                      (=>
                        (=
                          (= o2 true)
                          (and
                            (= (to_rep4
                                 (rec__trains__train_position__track_begin
                                   (us_split_fields3 o1))) (to_rep4
                                                             (rec__trains__train_position__track_begin
                                                               (us_split_fields3
                                                                 o))))
                            (= (to_rep4
                                 (rec__trains__train_position__track_end
                                   (us_split_fields3 o1))) (to_rep4
                                                             (rec__trains__train_position__track_end
                                                               (us_split_fields3
                                                                 o))))))
                        (forall ((spark__branch Bool))
                          (=>
                            (= spark__branch o2)
                            (=>
                              (not (= spark__branch true))
                              (let ((o3 new_position))
                                (let ((o4 cur_position))
                                  (let ((o5 (moving_away_from_current_track
                                              o4
                                              o3)))
                                    (=>
                                      (=
                                        (= o5 true)
                                        (and
                                          (and
                                            (= (entering_a_track o4) true)
                                            (= (inside_a_track o3) true))
                                          (= (to_rep4
                                               (rec__trains__train_position__track_begin
                                                 (us_split_fields3 o4))) 
                                          (to_rep4
                                            (rec__trains__train_position__track_end
                                              (us_split_fields3 o3))))))
                                      (forall ((spark__branch1 Bool))
                                        (=>
                                          (= spark__branch1 o5)
                                          (=>
                                            (= spark__branch1 true)
                                            (forall ((trains1 (Array Int us_rep1)))
                                              (=>
                                                (= trains1 (store trains 
                                                train new_position))
                                                (forall ((train1 Int))
                                                  (=>
                                                    (and
                                                      (<= 1 train1)
                                                      (<= train1 cur_num_trains))
                                                    (forall ((id Int))
                                                      (=>
                                                        (and
                                                          (<= 1 id)
                                                          (<= id 3))
                                                        (=>
                                                          (not
                                                            (= (get_previous_track
                                                                 (select trains1 train1)
                                                                 id) 0))
                                                          (let ((temp___352 
                                                            (to_rep5
                                                              (select track_signals 
                                                              (get_previous_track
                                                                (select trains1 train1)
                                                                id)))))
                                                            (or
                                                              (= temp___352 1)
                                                              (= temp___352 2)))))))))))))))))))))))))))))))))

(check-sat)
(get-info :reason-unknown)
