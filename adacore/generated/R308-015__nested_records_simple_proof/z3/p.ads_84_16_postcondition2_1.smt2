;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ()
  ((tuple0 (Tuple0))))

(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort type_0 0)

;; "type_0'int"
(declare-fun type_0qtint (type_0) Int)

;; "type_0'axiom"
(assert
  (forall ((i type_0))
    (and (<= (- 2147483648) (type_0qtint i)) (<= (type_0qtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x type_0)) Int
  (type_0qtint x))

;; "of_rep"
(declare-fun of_rep (Int) type_0)

;; "inversion_axiom"
(assert
  (forall ((x type_0)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x type_0)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__p__type_1__field_0 type_0)(rec__p__type_1__field_1 type_0)(rec__p__type_1__field_2 type_0)(rec__p__type_1__field_3 type_0)(rec__p__type_1__field_4 type_0)(rec__p__type_1__field_5 type_0)(rec__p__type_1__field_6 type_0)(rec__p__type_1__field_7 type_0)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

;; "bool_eq"
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool
  (ite (and
         (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 a))) (to_rep
                                                                    (rec__p__type_1__field_0
                                                                    (us_split_fields1
                                                                    b))))
         (and
           (and
             (and
               (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 a))) 
               (to_rep
                 (rec__p__type_1__field_1 (us_split_fields1 b))))
               (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 a))) 
               (to_rep
                 (rec__p__type_1__field_2 (us_split_fields1 b)))))
             (and
               (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 a))) 
               (to_rep
                 (rec__p__type_1__field_3 (us_split_fields1 b))))
               (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 a))) 
               (to_rep
                 (rec__p__type_1__field_4 (us_split_fields1 b))))))
           (and
             (and
               (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 a))) 
               (to_rep
                 (rec__p__type_1__field_5 (us_split_fields1 b))))
               (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 a))) 
               (to_rep
                 (rec__p__type_1__field_6 (us_split_fields1 b)))))
             (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 a))) 
             (to_rep
               (rec__p__type_1__field_7 (us_split_fields1 b)))))))
    true
    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const p__type_1__field_0__first__bit Int)

(declare-const p__type_1__field_0__last__bit Int)

(declare-const p__type_1__field_0__position Int)

;; "p__type_1__field_0__first__bit_axiom"
(assert (<= 0 p__type_1__field_0__first__bit))

;; "p__type_1__field_0__last__bit_axiom"
(assert (< p__type_1__field_0__first__bit p__type_1__field_0__last__bit))

;; "p__type_1__field_0__position_axiom"
(assert (<= 0 p__type_1__field_0__position))

(declare-const p__type_1__field_1__first__bit Int)

(declare-const p__type_1__field_1__last__bit Int)

(declare-const p__type_1__field_1__position Int)

;; "p__type_1__field_1__first__bit_axiom"
(assert (<= 0 p__type_1__field_1__first__bit))

;; "p__type_1__field_1__last__bit_axiom"
(assert (< p__type_1__field_1__first__bit p__type_1__field_1__last__bit))

;; "p__type_1__field_1__position_axiom"
(assert (<= 0 p__type_1__field_1__position))

(declare-const p__type_1__field_2__first__bit Int)

(declare-const p__type_1__field_2__last__bit Int)

(declare-const p__type_1__field_2__position Int)

;; "p__type_1__field_2__first__bit_axiom"
(assert (<= 0 p__type_1__field_2__first__bit))

;; "p__type_1__field_2__last__bit_axiom"
(assert (< p__type_1__field_2__first__bit p__type_1__field_2__last__bit))

;; "p__type_1__field_2__position_axiom"
(assert (<= 0 p__type_1__field_2__position))

(declare-const p__type_1__field_3__first__bit Int)

(declare-const p__type_1__field_3__last__bit Int)

(declare-const p__type_1__field_3__position Int)

;; "p__type_1__field_3__first__bit_axiom"
(assert (<= 0 p__type_1__field_3__first__bit))

;; "p__type_1__field_3__last__bit_axiom"
(assert (< p__type_1__field_3__first__bit p__type_1__field_3__last__bit))

;; "p__type_1__field_3__position_axiom"
(assert (<= 0 p__type_1__field_3__position))

(declare-const p__type_1__field_4__first__bit Int)

(declare-const p__type_1__field_4__last__bit Int)

(declare-const p__type_1__field_4__position Int)

;; "p__type_1__field_4__first__bit_axiom"
(assert (<= 0 p__type_1__field_4__first__bit))

;; "p__type_1__field_4__last__bit_axiom"
(assert (< p__type_1__field_4__first__bit p__type_1__field_4__last__bit))

;; "p__type_1__field_4__position_axiom"
(assert (<= 0 p__type_1__field_4__position))

(declare-const p__type_1__field_5__first__bit Int)

(declare-const p__type_1__field_5__last__bit Int)

(declare-const p__type_1__field_5__position Int)

;; "p__type_1__field_5__first__bit_axiom"
(assert (<= 0 p__type_1__field_5__first__bit))

;; "p__type_1__field_5__last__bit_axiom"
(assert (< p__type_1__field_5__first__bit p__type_1__field_5__last__bit))

;; "p__type_1__field_5__position_axiom"
(assert (<= 0 p__type_1__field_5__position))

(declare-const p__type_1__field_6__first__bit Int)

(declare-const p__type_1__field_6__last__bit Int)

(declare-const p__type_1__field_6__position Int)

;; "p__type_1__field_6__first__bit_axiom"
(assert (<= 0 p__type_1__field_6__first__bit))

;; "p__type_1__field_6__last__bit_axiom"
(assert (< p__type_1__field_6__first__bit p__type_1__field_6__last__bit))

;; "p__type_1__field_6__position_axiom"
(assert (<= 0 p__type_1__field_6__position))

(declare-const p__type_1__field_7__first__bit Int)

(declare-const p__type_1__field_7__last__bit Int)

(declare-const p__type_1__field_7__position Int)

;; "p__type_1__field_7__first__bit_axiom"
(assert (<= 0 p__type_1__field_7__first__bit))

;; "p__type_1__field_7__last__bit_axiom"
(assert (< p__type_1__field_7__first__bit p__type_1__field_7__last__bit))

;; "p__type_1__field_7__position_axiom"
(assert (<= 0 p__type_1__field_7__position))

(declare-const dummy us_rep)

;; "create_type_1"
(declare-fun create_type_1 (tuple0) us_rep)

;; "create_type_1__function_guard"
(declare-fun create_type_1__function_guard (us_rep
  tuple0) Bool)

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__p__type_2__field_0 us_rep)(rec__p__type_2__field_1 us_rep)(rec__p__type_2__field_2 us_rep)(rec__p__type_2__field_3 us_rep)(rec__p__type_2__field_4 us_rep)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

;; "bool_eq"
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool
  (ite (and
         (= (bool_eq
              (rec__p__type_2__field_0 (us_split_fields3 a))
              (rec__p__type_2__field_0 (us_split_fields3 b))) true)
         (and
           (and
             (= (bool_eq
                  (rec__p__type_2__field_1 (us_split_fields3 a))
                  (rec__p__type_2__field_1 (us_split_fields3 b))) true)
             (= (bool_eq
                  (rec__p__type_2__field_2 (us_split_fields3 a))
                  (rec__p__type_2__field_2 (us_split_fields3 b))) true))
           (and
             (= (bool_eq
                  (rec__p__type_2__field_3 (us_split_fields3 a))
                  (rec__p__type_2__field_3 (us_split_fields3 b))) true)
             (= (bool_eq
                  (rec__p__type_2__field_4 (us_split_fields3 a))
                  (rec__p__type_2__field_4 (us_split_fields3 b))) true))))
    true
    false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const p__type_2__field_0__first__bit Int)

(declare-const p__type_2__field_0__last__bit Int)

(declare-const p__type_2__field_0__position Int)

;; "p__type_2__field_0__first__bit_axiom"
(assert (<= 0 p__type_2__field_0__first__bit))

;; "p__type_2__field_0__last__bit_axiom"
(assert (< p__type_2__field_0__first__bit p__type_2__field_0__last__bit))

;; "p__type_2__field_0__position_axiom"
(assert (<= 0 p__type_2__field_0__position))

(declare-const p__type_2__field_1__first__bit Int)

(declare-const p__type_2__field_1__last__bit Int)

(declare-const p__type_2__field_1__position Int)

;; "p__type_2__field_1__first__bit_axiom"
(assert (<= 0 p__type_2__field_1__first__bit))

;; "p__type_2__field_1__last__bit_axiom"
(assert (< p__type_2__field_1__first__bit p__type_2__field_1__last__bit))

;; "p__type_2__field_1__position_axiom"
(assert (<= 0 p__type_2__field_1__position))

(declare-const p__type_2__field_2__first__bit Int)

(declare-const p__type_2__field_2__last__bit Int)

(declare-const p__type_2__field_2__position Int)

;; "p__type_2__field_2__first__bit_axiom"
(assert (<= 0 p__type_2__field_2__first__bit))

;; "p__type_2__field_2__last__bit_axiom"
(assert (< p__type_2__field_2__first__bit p__type_2__field_2__last__bit))

;; "p__type_2__field_2__position_axiom"
(assert (<= 0 p__type_2__field_2__position))

(declare-const p__type_2__field_3__first__bit Int)

(declare-const p__type_2__field_3__last__bit Int)

(declare-const p__type_2__field_3__position Int)

;; "p__type_2__field_3__first__bit_axiom"
(assert (<= 0 p__type_2__field_3__first__bit))

;; "p__type_2__field_3__last__bit_axiom"
(assert (< p__type_2__field_3__first__bit p__type_2__field_3__last__bit))

;; "p__type_2__field_3__position_axiom"
(assert (<= 0 p__type_2__field_3__position))

(declare-const p__type_2__field_4__first__bit Int)

(declare-const p__type_2__field_4__last__bit Int)

(declare-const p__type_2__field_4__position Int)

;; "p__type_2__field_4__first__bit_axiom"
(assert (<= 0 p__type_2__field_4__first__bit))

;; "p__type_2__field_4__last__bit_axiom"
(assert (< p__type_2__field_4__first__bit p__type_2__field_4__last__bit))

;; "p__type_2__field_4__position_axiom"
(assert (<= 0 p__type_2__field_4__position))

(declare-const dummy1 us_rep1)

;; "create_type_2"
(declare-fun create_type_2 (tuple0) us_rep1)

;; "create_type_2__function_guard"
(declare-fun create_type_2__function_guard (us_rep1
  tuple0) Bool)

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__p__type_4__field_0 us_rep)(rec__p__type_4__field_1 us_rep)(rec__p__type_4__field_2 us_rep1)(rec__p__type_4__field_3 us_rep1)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

;; "bool_eq"
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool
  (ite (and
         (= (bool_eq
              (rec__p__type_4__field_0 (us_split_fields5 a))
              (rec__p__type_4__field_0 (us_split_fields5 b))) true)
         (and
           (and
             (= (bool_eq
                  (rec__p__type_4__field_1 (us_split_fields5 a))
                  (rec__p__type_4__field_1 (us_split_fields5 b))) true)
             (= (bool_eq1
                  (rec__p__type_4__field_2 (us_split_fields5 a))
                  (rec__p__type_4__field_2 (us_split_fields5 b))) true))
           (= (bool_eq1
                (rec__p__type_4__field_3 (us_split_fields5 a))
                (rec__p__type_4__field_3 (us_split_fields5 b))) true)))
    true
    false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const p__type_4__field_0__first__bit Int)

(declare-const p__type_4__field_0__last__bit Int)

(declare-const p__type_4__field_0__position Int)

;; "p__type_4__field_0__first__bit_axiom"
(assert (<= 0 p__type_4__field_0__first__bit))

;; "p__type_4__field_0__last__bit_axiom"
(assert (< p__type_4__field_0__first__bit p__type_4__field_0__last__bit))

;; "p__type_4__field_0__position_axiom"
(assert (<= 0 p__type_4__field_0__position))

(declare-const p__type_4__field_1__first__bit Int)

(declare-const p__type_4__field_1__last__bit Int)

(declare-const p__type_4__field_1__position Int)

;; "p__type_4__field_1__first__bit_axiom"
(assert (<= 0 p__type_4__field_1__first__bit))

;; "p__type_4__field_1__last__bit_axiom"
(assert (< p__type_4__field_1__first__bit p__type_4__field_1__last__bit))

;; "p__type_4__field_1__position_axiom"
(assert (<= 0 p__type_4__field_1__position))

(declare-const p__type_4__field_2__first__bit Int)

(declare-const p__type_4__field_2__last__bit Int)

(declare-const p__type_4__field_2__position Int)

;; "p__type_4__field_2__first__bit_axiom"
(assert (<= 0 p__type_4__field_2__first__bit))

;; "p__type_4__field_2__last__bit_axiom"
(assert (< p__type_4__field_2__first__bit p__type_4__field_2__last__bit))

;; "p__type_4__field_2__position_axiom"
(assert (<= 0 p__type_4__field_2__position))

(declare-const p__type_4__field_3__first__bit Int)

(declare-const p__type_4__field_3__last__bit Int)

(declare-const p__type_4__field_3__position Int)

;; "p__type_4__field_3__first__bit_axiom"
(assert (<= 0 p__type_4__field_3__first__bit))

;; "p__type_4__field_3__last__bit_axiom"
(assert (< p__type_4__field_3__first__bit p__type_4__field_3__last__bit))

;; "p__type_4__field_3__position_axiom"
(assert (<= 0 p__type_4__field_3__position))

(declare-const dummy2 us_rep2)

(declare-sort type_3 0)

;; "type_3'int"
(declare-fun type_3qtint (type_3) Int)

;; "type_3'axiom"
(assert
  (forall ((i type_3))
    (and (<= (- 2147483648) (type_3qtint i)) (<= (type_3qtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x type_3)) Int
  (type_3qtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) type_3)

;; "inversion_axiom"
(assert
  (forall ((x type_3))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x type_3)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((us_split_fields6
   (us_split_fieldsqtmk3
   (rec__p__type_5__field_0 type_3)(rec__p__type_5__field_1 us_rep2)(rec__p__type_5__field_2 us_rep1)(rec__p__type_5__field_3 us_rep2)(rec__p__type_5__field_4 us_rep2)))))

(declare-datatypes ()
  ((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))

;; "bool_eq"
(define-fun bool_eq3 ((a us_rep3) (b us_rep3)) Bool
  (ite (and
         (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 a))) 
         (to_rep1
           (rec__p__type_5__field_0 (us_split_fields7 b))))
         (and
           (and
             (= (bool_eq2
                  (rec__p__type_5__field_1 (us_split_fields7 a))
                  (rec__p__type_5__field_1 (us_split_fields7 b))) true)
             (= (bool_eq1
                  (rec__p__type_5__field_2 (us_split_fields7 a))
                  (rec__p__type_5__field_2 (us_split_fields7 b))) true))
           (and
             (= (bool_eq2
                  (rec__p__type_5__field_3 (us_split_fields7 a))
                  (rec__p__type_5__field_3 (us_split_fields7 b))) true)
             (= (bool_eq2
                  (rec__p__type_5__field_4 (us_split_fields7 a))
                  (rec__p__type_5__field_4 (us_split_fields7 b))) true))))
    true
    false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const p__type_5__field_0__first__bit Int)

(declare-const p__type_5__field_0__last__bit Int)

(declare-const p__type_5__field_0__position Int)

;; "p__type_5__field_0__first__bit_axiom"
(assert (<= 0 p__type_5__field_0__first__bit))

;; "p__type_5__field_0__last__bit_axiom"
(assert (< p__type_5__field_0__first__bit p__type_5__field_0__last__bit))

;; "p__type_5__field_0__position_axiom"
(assert (<= 0 p__type_5__field_0__position))

(declare-const p__type_5__field_1__first__bit Int)

(declare-const p__type_5__field_1__last__bit Int)

(declare-const p__type_5__field_1__position Int)

;; "p__type_5__field_1__first__bit_axiom"
(assert (<= 0 p__type_5__field_1__first__bit))

;; "p__type_5__field_1__last__bit_axiom"
(assert (< p__type_5__field_1__first__bit p__type_5__field_1__last__bit))

;; "p__type_5__field_1__position_axiom"
(assert (<= 0 p__type_5__field_1__position))

(declare-const p__type_5__field_2__first__bit Int)

(declare-const p__type_5__field_2__last__bit Int)

(declare-const p__type_5__field_2__position Int)

;; "p__type_5__field_2__first__bit_axiom"
(assert (<= 0 p__type_5__field_2__first__bit))

;; "p__type_5__field_2__last__bit_axiom"
(assert (< p__type_5__field_2__first__bit p__type_5__field_2__last__bit))

;; "p__type_5__field_2__position_axiom"
(assert (<= 0 p__type_5__field_2__position))

(declare-const p__type_5__field_3__first__bit Int)

(declare-const p__type_5__field_3__last__bit Int)

(declare-const p__type_5__field_3__position Int)

;; "p__type_5__field_3__first__bit_axiom"
(assert (<= 0 p__type_5__field_3__first__bit))

;; "p__type_5__field_3__last__bit_axiom"
(assert (< p__type_5__field_3__first__bit p__type_5__field_3__last__bit))

;; "p__type_5__field_3__position_axiom"
(assert (<= 0 p__type_5__field_3__position))

(declare-const p__type_5__field_4__first__bit Int)

(declare-const p__type_5__field_4__last__bit Int)

(declare-const p__type_5__field_4__position Int)

;; "p__type_5__field_4__first__bit_axiom"
(assert (<= 0 p__type_5__field_4__first__bit))

;; "p__type_5__field_4__last__bit_axiom"
(assert (< p__type_5__field_4__first__bit p__type_5__field_4__last__bit))

;; "p__type_5__field_4__position_axiom"
(assert (<= 0 p__type_5__field_4__position))

(declare-const dummy3 us_rep3)

;; "create_type_5"
(declare-fun create_type_5 (tuple0) us_rep3)

;; "create_type_5__function_guard"
(declare-fun create_type_5__function_guard (us_rep3
  tuple0) Bool)

;; "create_type_4"
(declare-fun create_type_4 (tuple0) us_rep2)

;; "create_type_4__function_guard"
(declare-fun create_type_4__function_guard (us_rep2
  tuple0) Bool)

(declare-datatypes ()
  ((us_split_fields8
   (us_split_fieldsqtmk4
   (rec__p__type_6__field_0 us_rep)(rec__p__type_6__field_1 us_rep3)(rec__p__type_6__field_2 us_rep1)(rec__p__type_6__field_3 us_rep3)))))

(declare-datatypes ()
  ((us_rep4 (us_repqtmk4 (us_split_fields9 us_split_fields8)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const p__type_6__field_0__first__bit Int)

(declare-const p__type_6__field_0__last__bit Int)

(declare-const p__type_6__field_0__position Int)

;; "p__type_6__field_0__first__bit_axiom"
(assert (<= 0 p__type_6__field_0__first__bit))

;; "p__type_6__field_0__last__bit_axiom"
(assert (< p__type_6__field_0__first__bit p__type_6__field_0__last__bit))

;; "p__type_6__field_0__position_axiom"
(assert (<= 0 p__type_6__field_0__position))

(declare-const p__type_6__field_1__first__bit Int)

(declare-const p__type_6__field_1__last__bit Int)

(declare-const p__type_6__field_1__position Int)

;; "p__type_6__field_1__first__bit_axiom"
(assert (<= 0 p__type_6__field_1__first__bit))

;; "p__type_6__field_1__last__bit_axiom"
(assert (< p__type_6__field_1__first__bit p__type_6__field_1__last__bit))

;; "p__type_6__field_1__position_axiom"
(assert (<= 0 p__type_6__field_1__position))

(declare-const p__type_6__field_2__first__bit Int)

(declare-const p__type_6__field_2__last__bit Int)

(declare-const p__type_6__field_2__position Int)

;; "p__type_6__field_2__first__bit_axiom"
(assert (<= 0 p__type_6__field_2__first__bit))

;; "p__type_6__field_2__last__bit_axiom"
(assert (< p__type_6__field_2__first__bit p__type_6__field_2__last__bit))

;; "p__type_6__field_2__position_axiom"
(assert (<= 0 p__type_6__field_2__position))

(declare-const p__type_6__field_3__first__bit Int)

(declare-const p__type_6__field_3__last__bit Int)

(declare-const p__type_6__field_3__position Int)

;; "p__type_6__field_3__first__bit_axiom"
(assert (<= 0 p__type_6__field_3__first__bit))

;; "p__type_6__field_3__last__bit_axiom"
(assert (< p__type_6__field_3__first__bit p__type_6__field_3__last__bit))

;; "p__type_6__field_3__position_axiom"
(assert (<= 0 p__type_6__field_3__position))

(declare-const dummy4 us_rep4)

(declare-datatypes ()
  ((type_6__ref (type_6__refqtmk (type_6__content us_rep4)))))

;; "create_type_1__post_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (create_type_1 us_void_param)))
         (=>
           (create_type_1__function_guard result us_void_param)
           (and
             (and
               (and
                 (and
                   (and
                     (and
                       (and
                         (= (to_rep
                              (rec__p__type_1__field_0
                                (us_split_fields1 result))) 0)
                         (= (to_rep
                              (rec__p__type_1__field_1
                                (us_split_fields1 result))) 0))
                       (= (to_rep
                            (rec__p__type_1__field_2
                              (us_split_fields1 result))) 0))
                     (= (to_rep
                          (rec__p__type_1__field_3 (us_split_fields1 result))) 0))
                   (= (to_rep
                        (rec__p__type_1__field_4 (us_split_fields1 result))) 0))
                 (= (to_rep
                      (rec__p__type_1__field_5 (us_split_fields1 result))) 0))
               (= (to_rep
                    (rec__p__type_1__field_6 (us_split_fields1 result))) 0))
             (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 result))) 0)))) :pattern (
    (create_type_1
      us_void_param)) )))

;; "create_type_2__post_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (create_type_2 us_void_param)))
         (and
           (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
           (and
             (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
             (and
               (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
               (and
                 (create_type_1__function_guard
                   (create_type_1 Tuple0)
                   Tuple0)
                 (and
                   (create_type_1__function_guard
                     (create_type_1 Tuple0)
                     Tuple0)
                   (=>
                     (create_type_2__function_guard result us_void_param)
                     (and
                       (and
                         (and
                           (and
                             (= (bool_eq
                                  (rec__p__type_2__field_0
                                    (us_split_fields3 result))
                                  (create_type_1 Tuple0)) true)
                             (= (bool_eq
                                  (rec__p__type_2__field_1
                                    (us_split_fields3 result))
                                  (create_type_1 Tuple0)) true))
                           (= (bool_eq
                                (rec__p__type_2__field_2
                                  (us_split_fields3 result))
                                (create_type_1 Tuple0)) true))
                         (= (bool_eq
                              (rec__p__type_2__field_3
                                (us_split_fields3 result))
                              (create_type_1 Tuple0)) true))
                       (= (bool_eq
                            (rec__p__type_2__field_4
                              (us_split_fields3 result))
                            (create_type_1 Tuple0)) true))))))))) :pattern (
    (create_type_2
      us_void_param)) )))

;; "create_type_4__post_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (create_type_4 us_void_param)))
         (and
           (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
           (and
             (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
             (and
               (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
               (and
                 (create_type_2__function_guard
                   (create_type_2 Tuple0)
                   Tuple0)
                 (=>
                   (create_type_4__function_guard result us_void_param)
                   (and
                     (and
                       (and
                         (= (bool_eq
                              (rec__p__type_4__field_0
                                (us_split_fields5 result))
                              (create_type_1 Tuple0)) true)
                         (= (bool_eq
                              (rec__p__type_4__field_1
                                (us_split_fields5 result))
                              (create_type_1 Tuple0)) true))
                       (= (bool_eq1
                            (rec__p__type_4__field_2
                              (us_split_fields5 result))
                            (create_type_2 Tuple0)) true))
                     (= (bool_eq1
                          (rec__p__type_4__field_3 (us_split_fields5 result))
                          (create_type_2 Tuple0)) true)))))))) :pattern (
    (create_type_4
      us_void_param)) )))

;; "create_type_5__post_axiom"
(assert
  (forall ((us_void_param tuple0))
    (! (let ((result (create_type_5 us_void_param)))
         (and
           (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
           (and
             (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
             (and
               (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
               (and
                 (create_type_4__function_guard
                   (create_type_4 Tuple0)
                   Tuple0)
                 (=>
                   (create_type_5__function_guard result us_void_param)
                   (and
                     (and
                       (and
                         (and
                           (= (to_rep1
                                (rec__p__type_5__field_0
                                  (us_split_fields7 result))) 0)
                           (= (bool_eq2
                                (rec__p__type_5__field_1
                                  (us_split_fields7 result))
                                (create_type_4 Tuple0)) true))
                         (= (bool_eq1
                              (rec__p__type_5__field_2
                                (us_split_fields7 result))
                              (create_type_2 Tuple0)) true))
                       (= (bool_eq2
                            (rec__p__type_5__field_3
                              (us_split_fields7 result))
                            (create_type_4 Tuple0)) true))
                     (= (bool_eq2
                          (rec__p__type_5__field_4 (us_split_fields7 result))
                          (create_type_4 Tuple0)) true)))))))) :pattern (
    (create_type_5
      us_void_param)) )))

;; "o"
(define-fun o () us_rep3
  (create_type_5 Tuple0))

;; "H"
(assert (create_type_4__function_guard (create_type_4 Tuple0) Tuple0))

;; "H"
(assert (create_type_2__function_guard (create_type_2 Tuple0) Tuple0))

;; "H"
(assert (create_type_4__function_guard (create_type_4 Tuple0) Tuple0))

;; "H"
(assert (create_type_4__function_guard (create_type_4 Tuple0) Tuple0))

;; "H"
(assert (create_type_5__function_guard o Tuple0))

;; "H"
(assert true)

;; "H"
(assert (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o))) 0))

;; "H"
(assert
  (= (bool_eq2
       (rec__p__type_5__field_1 (us_split_fields7 o))
       (create_type_4 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq1
       (rec__p__type_5__field_2 (us_split_fields7 o))
       (create_type_2 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq2
       (rec__p__type_5__field_3 (us_split_fields7 o))
       (create_type_4 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq2
       (rec__p__type_5__field_4 (us_split_fields7 o))
       (create_type_4 Tuple0)) true))

;; "create_type_5'result'unused"
(define-fun create_type_5qtresultqtunused () us_rep3
  o)

;; "o"
(define-fun o1 () us_rep1
  (create_type_2 Tuple0))

;; "H"
(assert (create_type_1__function_guard (create_type_1 Tuple0) Tuple0))

;; "H"
(assert (create_type_1__function_guard (create_type_1 Tuple0) Tuple0))

;; "H"
(assert (create_type_1__function_guard (create_type_1 Tuple0) Tuple0))

;; "H"
(assert (create_type_1__function_guard (create_type_1 Tuple0) Tuple0))

;; "H"
(assert (create_type_1__function_guard (create_type_1 Tuple0) Tuple0))

;; "H"
(assert (create_type_2__function_guard o1 Tuple0))

;; "H"
(assert true)

;; "H"
(assert
  (= (bool_eq
       (rec__p__type_2__field_0 (us_split_fields3 o1))
       (create_type_1 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq
       (rec__p__type_2__field_1 (us_split_fields3 o1))
       (create_type_1 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq
       (rec__p__type_2__field_2 (us_split_fields3 o1))
       (create_type_1 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq
       (rec__p__type_2__field_3 (us_split_fields3 o1))
       (create_type_1 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq
       (rec__p__type_2__field_4 (us_split_fields3 o1))
       (create_type_1 Tuple0)) true))

;; "create_type_2'result'unused"
(define-fun create_type_2qtresultqtunused () us_rep1
  o1)

;; "o"
(define-fun o2 () us_rep3
  (create_type_5 Tuple0))

;; "H"
(assert (create_type_4__function_guard (create_type_4 Tuple0) Tuple0))

;; "H"
(assert (create_type_2__function_guard (create_type_2 Tuple0) Tuple0))

;; "H"
(assert (create_type_4__function_guard (create_type_4 Tuple0) Tuple0))

;; "H"
(assert (create_type_4__function_guard (create_type_4 Tuple0) Tuple0))

;; "H"
(assert (create_type_5__function_guard o2 Tuple0))

;; "H"
(assert true)

;; "H"
(assert (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o2))) 0))

;; "H"
(assert
  (= (bool_eq2
       (rec__p__type_5__field_1 (us_split_fields7 o2))
       (create_type_4 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq1
       (rec__p__type_5__field_2 (us_split_fields7 o2))
       (create_type_2 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq2
       (rec__p__type_5__field_3 (us_split_fields7 o2))
       (create_type_4 Tuple0)) true))

;; "H"
(assert
  (= (bool_eq2
       (rec__p__type_5__field_4 (us_split_fields7 o2))
       (create_type_4 Tuple0)) true))

;; "create_type_5'result'unused"
(define-fun create_type_5qtresultqtunused1 () us_rep3
  o2)

;; "o"
(define-fun o3 () us_rep
  (create_type_1 Tuple0))

;; "H"
(assert (create_type_1__function_guard o3 Tuple0))

;; "H"
(assert true)

;; "H"
(assert (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 o3))) 0))

;; "H"
(assert (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 o3))) 0))

;; "create_type_1'result'unused"
(define-fun create_type_1qtresultqtunused () us_rep
  o3)

;; "o"
(define-fun o4 () us_split_fields8
  (us_split_fieldsqtmk4 o3 o2 o1 o))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields8
  o4)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep4
  (us_repqtmk4 o4))

(declare-const p__create_type_6__result us_split_fields8)

;; "p__create_type_6__result'unused"
(define-fun p__create_type_6__resultqtunused () type_6__ref
  (type_6__refqtmk (us_repqtmk4 p__create_type_6__result)))

;; "H"
(assert (= p__create_type_6__result o4))

;; "result'unused"
(define-fun resultqtunused () us_rep4
  (us_repqtmk4 p__create_type_6__result))

;; "type_6__content'result'unused"
(define-fun type_6__contentqtresultqtunused () us_rep4
  (us_repqtmk4 p__create_type_6__result))

;; "H"
(assert (create_type_5__function_guard (create_type_5 Tuple0) Tuple0))

;; Goal "def'vc"
;; File "p.ads", line 82, characters 0-0
(assert
  (not
  (= (bool_eq3
       (rec__p__type_6__field_1 p__create_type_6__result)
       (create_type_5 Tuple0)) true)))

(check-sat)
