(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

type us_private

logic us_null_ext__ : us_private

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic two_power_size_minus_one : int

axiom two_power_size_minus_one_val :
  (two_power_size_minus_one = pow2((8 - 1)))

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

logic acc : ('a,('a,bool) farray) farray, 'a -> prop

axiom acc_x :
  (forall r:('a,('a,bool) farray) farray. forall x:'a.
  ((forall y:'a. ((((r[y])[x]) = true) -> acc(r, y))) -> acc(r, x)))

axiom acc_inversion :
  (forall z:('a,('a,bool) farray) farray. forall z1:'a. (acc(z, z1) ->
  (forall y:'a. ((((z[y])[z1]) = true) -> acc(z, y)))))

predicate well_founded(r: ('a,('a,bool) farray) farray) =
  (forall x:'a. acc(r, x))

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

logic ult_closure : (t,(t,bool) farray) farray

axiom ult_closure_def :
  (forall y:t. forall y1:t. ((((ult_closure[y])[y1]) = true) <-> ult(y, y1)))

axiom ult_wf : well_founded(ult_closure)

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

logic ugt_closure : (t,(t,bool) farray) farray

axiom ugt_closure_def :
  (forall y:t. forall y1:t. ((((ugt_closure[y])[y1]) = true) <-> ugt(y, y1)))

axiom ugt_wf : well_founded(ugt_closure)

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

logic slt_closure : (t,(t,bool) farray) farray

axiom slt_closure_def :
  (forall y:t. forall y1:t. ((((slt_closure[y])[y1]) = true) <-> slt(y, y1)))

axiom slt_wf : well_founded(slt_closure)

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

logic sgt_closure : (t,(t,bool) farray) farray

axiom sgt_closure_def :
  (forall y:t. forall y1:t. ((((sgt_closure[y])[y1]) = true) <-> sgt(y, y1)))

axiom sgt_wf : well_founded(sgt_closure)

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 65535)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic two_power_size_minus_one1 : int

axiom two_power_size_minus_one_val1 :
  (two_power_size_minus_one1 = pow2((16 - 1)))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(65536 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  65536)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

logic ult_closure1 : (t1,(t1,bool) farray) farray

axiom ult_closure_def1 :
  (forall y:t1. forall y1:t1. ((((ult_closure1[y])[y1]) = true) <-> ult1(y,
  y1)))

axiom ult_wf1 : well_founded(ult_closure1)

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

logic ugt_closure1 : (t1,(t1,bool) farray) farray

axiom ugt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((ugt_closure1[y])[y1]) = true) <-> ugt1(y,
  y1)))

axiom ugt_wf1 : well_founded(ugt_closure1)

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

logic slt_closure1 : (t1,(t1,bool) farray) farray

axiom slt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((slt_closure1[y])[y1]) = true) <-> slt1(y,
  y1)))

axiom slt_wf1 : well_founded(slt_closure1)

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

logic sgt_closure1 : (t1,(t1,bool) farray) farray

axiom sgt_closure_def1 :
  (forall y:t1. forall y1:t1. ((((sgt_closure1[y])[y1]) = true) <-> sgt1(y,
  y1)))

axiom sgt_wf1 : well_founded(sgt_closure1)

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 4294967295)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (32 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth2(ones2, n) = true)))

logic two_power_size_minus_one2 : int

axiom two_power_size_minus_one_val2 :
  (two_power_size_minus_one2 = pow2((32 - 1)))

logic is_signed_positive2 : t2 -> prop

logic of_int2 : int -> t2

function to_int2(x: t2) : int =
  (if is_signed_positive2(x) then tqtint2(x) else (-(4294967296 - tqtint2(x))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int2(v) = to_int2(vqt)) -> (v = vqt)))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  4294967296)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 32)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 4294967295)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

logic ult_closure2 : (t2,(t2,bool) farray) farray

axiom ult_closure_def2 :
  (forall y:t2. forall y1:t2. ((((ult_closure2[y])[y1]) = true) <-> ult2(y,
  y1)))

axiom ult_wf2 : well_founded(ult_closure2)

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

logic ugt_closure2 : (t2,(t2,bool) farray) farray

axiom ugt_closure_def2 :
  (forall y:t2. forall y1:t2. ((((ugt_closure2[y])[y1]) = true) <-> ugt2(y,
  y1)))

axiom ugt_wf2 : well_founded(ugt_closure2)

predicate slt2(v1: t2, v2: t2) = (to_int2(v1) <  to_int2(v2))

logic slt_closure2 : (t2,(t2,bool) farray) farray

axiom slt_closure_def2 :
  (forall y:t2. forall y1:t2. ((((slt_closure2[y])[y1]) = true) <-> slt2(y,
  y1)))

axiom slt_wf2 : well_founded(slt_closure2)

predicate sgt2(v1: t2, v2: t2) = (to_int2(v2) <  to_int2(v1))

logic sgt_closure2 : (t2,(t2,bool) farray) farray

axiom sgt_closure_def2 :
  (forall y:t2. forall y1:t2. ((((sgt_closure2[y])[y1]) = true) <-> sgt2(y,
  y1)))

axiom sgt_wf2 : well_founded(sgt_closure2)

predicate sge2(v1: t2, v2: t2) = (to_int2(v2) <= to_int2(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv2(x, of_int2(i)) = nth2(x, i))))

type t3

logic tqtint3 : t3 -> int

axiom tqtaxiom3 :
  (forall i:t3. ((0 <= tqtint3(i)) and (tqtint3(i) <= 18446744073709551615)))

logic nth3 : t3, int -> bool

axiom nth_out_of_bound3 :
  (forall x:t3. forall n:int. (((n <  0) or (64 <= n)) -> (nth3(x,
  n) = false)))

logic zeros3 : t3

axiom Nth_zeros3 : (forall n:int. (nth3(zeros3, n) = false))

logic one3 : t3

logic ones3 : t3

axiom Nth_ones3 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth3(ones3, n) = true)))

logic bw_and : t3, t3 -> t3

axiom Nth_bw_and :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth3(bw_and(v1, v2), n) = andb(nth3(v1, n), nth3(v2, n)))))

logic lsr : t3, int -> t3

axiom Lsr_nth_low :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth3(lsr(b, s), n) = nth3(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth3(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t3. (lsr(x, 0) = x))

logic two_power_size_minus_one3 : int

axiom two_power_size_minus_one_val3 :
  (two_power_size_minus_one3 = pow2((64 - 1)))

logic is_signed_positive3 : t3 -> prop

logic of_int3 : int -> t3

function to_int3(x: t3) : int =
  (if is_signed_positive3(x) then tqtint3(x) else (-(18446744073709551616 - tqtint3(x))))

axiom to_uint_extensionality3 :
  (forall v:t3. forall vqt:t3. ((tqtint3(v) = tqtint3(vqt)) -> (v = vqt)))

axiom to_int_extensionality3 :
  (forall v:t3. forall vqt:t3. ((to_int3(v) = to_int3(vqt)) -> (v = vqt)))

axiom to_uint_bounds3 :
  (forall v:t3. ((0 <= tqtint3(v)) and (tqtint3(v) <  18446744073709551616)))

axiom to_uint_of_int3 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint3(of_int3(i)) = i)))

logic size_bv3 : t3

axiom to_uint_size_bv3 : (tqtint3(size_bv3) = 64)

axiom to_uint_zeros3 : (tqtint3(zeros3) = 0)

axiom to_uint_one3 : (tqtint3(one3) = 1)

axiom to_uint_ones3 : (tqtint3(ones3) = 18446744073709551615)

predicate ult3(x: t3, y: t3) = (tqtint3(x) <  tqtint3(y))

logic ult_closure3 : (t3,(t3,bool) farray) farray

axiom ult_closure_def3 :
  (forall y:t3. forall y1:t3. ((((ult_closure3[y])[y1]) = true) <-> ult3(y,
  y1)))

axiom ult_wf3 : well_founded(ult_closure3)

predicate ule1(x: t3, y: t3) = (tqtint3(x) <= tqtint3(y))

predicate ugt3(x: t3, y: t3) = (tqtint3(y) <  tqtint3(x))

logic ugt_closure3 : (t3,(t3,bool) farray) farray

axiom ugt_closure_def3 :
  (forall y:t3. forall y1:t3. ((((ugt_closure3[y])[y1]) = true) <-> ugt3(y,
  y1)))

axiom ugt_wf3 : well_founded(ugt_closure3)

predicate slt3(v1: t3, v2: t3) = (to_int3(v1) <  to_int3(v2))

logic slt_closure3 : (t3,(t3,bool) farray) farray

axiom slt_closure_def3 :
  (forall y:t3. forall y1:t3. ((((slt_closure3[y])[y1]) = true) <-> slt3(y,
  y1)))

axiom slt_wf3 : well_founded(slt_closure3)

predicate sgt3(v1: t3, v2: t3) = (to_int3(v2) <  to_int3(v1))

logic sgt_closure3 : (t3,(t3,bool) farray) farray

axiom sgt_closure_def3 :
  (forall y:t3. forall y1:t3. ((((sgt_closure3[y])[y1]) = true) <-> sgt3(y,
  y1)))

axiom sgt_wf3 : well_founded(sgt_closure3)

predicate sge3(v1: t3, v2: t3) = (to_int3(v2) <= to_int3(v1))

axiom positive_is_ge_zeros3 :
  (forall x:t3. (is_signed_positive3(x) <-> sge3(x, zeros3)))

logic add : t3, t3 -> t3

axiom to_uint_add_bounded :
  (forall v1:t3. forall v2:t3.
  (((tqtint3(v1) + tqtint3(v2)) <  18446744073709551616) -> (tqtint3(add(v1,
  v2)) = (tqtint3(v1) + tqtint3(v2)))))

logic sub : t3, t3 -> t3

axiom to_uint_sub_bounded :
  (forall v1:t3. forall v2:t3. (((0 <= (tqtint3(v1) - tqtint3(v2))) and
  ((tqtint3(v1) - tqtint3(v2)) <  18446744073709551616)) -> (tqtint3(sub(v1,
  v2)) = (tqtint3(v1) - tqtint3(v2)))))

logic udiv : t3, t3 -> t3

axiom to_uint_udiv :
  (forall v1:t3. forall v2:t3. (tqtint3(udiv(v1,
  v2)) = (tqtint3(v1) / tqtint3(v2))))

logic lsr_bv : t3, t3 -> t3

axiom lsr_bv_is_lsr :
  (forall x:t3. forall n:t3. (lsr_bv(x, n) = lsr(x, tqtint3(n))))

axiom to_uint_lsr :
  (forall v:t3. forall n:t3. (tqtint3(lsr_bv(v,
  n)) = (tqtint3(v) / pow2(tqtint3(n)))))

logic nth_bv3 : t3, t3 -> bool

axiom Nth_bv_is_nth4 :
  (forall x:t3. forall i:t3. (nth3(x, tqtint3(i)) = nth_bv3(x, i)))

axiom Nth_bv_is_nth23 :
  (forall x:t3. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv3(x, of_int3(i)) = nth3(x, i))))

logic toBig : t -> t3

logic toSmall : t3 -> t

logic rliteral : t3

axiom rliteral_axiom : (tqtint3(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t3. (ule1(x, rliteral) -> (tqtint3(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint3(toBig(x))))

function of_int4(i: int) : bool = (if (i = 0) then false else true)

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

type u16

logic attr__ATTRIBUTE_MODULUS : t1

logic to_rep : u16 -> t1

logic of_rep : t1 -> u16

axiom inversion_axiom : (forall x:u16 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t1 [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

type u32

logic attr__ATTRIBUTE_MODULUS1 : t2

logic to_rep1 : u32 -> t2

logic of_rep1 : t2 -> u32

axiom inversion_axiom1 :
  (forall x:u32 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t2 [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

type u64

logic attr__ATTRIBUTE_MODULUS2 : t3

logic to_rep2 : u64 -> t3

logic of_rep2 : t3 -> u64

axiom inversion_axiom2 :
  (forall x:u64 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t3 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

type u7

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 0)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 127)

predicate in_range(x: t) = (ule(rliteral1, x) and ule(x, rliteral2))

logic to_rep3 : u7 -> t

logic of_rep3 : t -> u7

axiom inversion_axiom3 :
  (forall x:u7 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:u7 [to_rep3(x)]. in_range(to_rep3(x)))

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 128)

axiom coerce_axiom3 :
  (forall x:t [to_rep3(of_rep3(x))]. (let y = urem(x, rliteral3) : t in
  (in_range(y) -> (to_rep3(of_rep3(x)) = y))))

type u6

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 63)

predicate in_range1(x: t) = (ule(rliteral1, x) and ule(x, rliteral4))

logic to_rep4 : u6 -> t

logic of_rep4 : t -> u6

axiom inversion_axiom4 :
  (forall x:u6 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:u6 [to_rep4(x)]. in_range1(to_rep4(x)))

logic rliteral5 : t

axiom rliteral_axiom5 : (tqtint(rliteral5) = 64)

axiom coerce_axiom4 :
  (forall x:t [to_rep4(of_rep4(x))]. (let y = urem(x, rliteral5) : t in
  (in_range1(y) -> (to_rep4(of_rep4(x)) = y))))

type us_split_fields = { rec__skein__tweak_value__byte_count_lsb : u64;
rec__skein__tweak_value__byte_count_msb : u32;
rec__skein__tweak_value__reserved : u16; rec__skein__tweak_value__tree_level
: u7; rec__skein__tweak_value__bit_pad : bool;
rec__skein__tweak_value__field_type : u6;
rec__skein__tweak_value__first_block : bool;
rec__skein__tweak_value__final_block : bool }

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic skein__tweak_value__byte_count_lsb__first__bit : int

logic skein__tweak_value__byte_count_lsb__last__bit : int

logic skein__tweak_value__byte_count_lsb__position : int

axiom skein__tweak_value__byte_count_lsb__first__bit_axiom :
  (0 <= skein__tweak_value__byte_count_lsb__first__bit)

axiom skein__tweak_value__byte_count_lsb__last__bit_axiom :
  (skein__tweak_value__byte_count_lsb__first__bit <  skein__tweak_value__byte_count_lsb__last__bit)

axiom skein__tweak_value__byte_count_lsb__position_axiom :
  (0 <= skein__tweak_value__byte_count_lsb__position)

logic skein__tweak_value__byte_count_msb__first__bit : int

logic skein__tweak_value__byte_count_msb__last__bit : int

logic skein__tweak_value__byte_count_msb__position : int

axiom skein__tweak_value__byte_count_msb__first__bit_axiom :
  (0 <= skein__tweak_value__byte_count_msb__first__bit)

axiom skein__tweak_value__byte_count_msb__last__bit_axiom :
  (skein__tweak_value__byte_count_msb__first__bit <  skein__tweak_value__byte_count_msb__last__bit)

axiom skein__tweak_value__byte_count_msb__position_axiom :
  (0 <= skein__tweak_value__byte_count_msb__position)

logic skein__tweak_value__reserved__first__bit : int

logic skein__tweak_value__reserved__last__bit : int

logic skein__tweak_value__reserved__position : int

axiom skein__tweak_value__reserved__first__bit_axiom :
  (0 <= skein__tweak_value__reserved__first__bit)

axiom skein__tweak_value__reserved__last__bit_axiom :
  (skein__tweak_value__reserved__first__bit <  skein__tweak_value__reserved__last__bit)

axiom skein__tweak_value__reserved__position_axiom :
  (0 <= skein__tweak_value__reserved__position)

logic skein__tweak_value__tree_level__first__bit : int

logic skein__tweak_value__tree_level__last__bit : int

logic skein__tweak_value__tree_level__position : int

axiom skein__tweak_value__tree_level__first__bit_axiom :
  (0 <= skein__tweak_value__tree_level__first__bit)

axiom skein__tweak_value__tree_level__last__bit_axiom :
  (skein__tweak_value__tree_level__first__bit <  skein__tweak_value__tree_level__last__bit)

axiom skein__tweak_value__tree_level__position_axiom :
  (0 <= skein__tweak_value__tree_level__position)

logic skein__tweak_value__bit_pad__first__bit : int

logic skein__tweak_value__bit_pad__last__bit : int

logic skein__tweak_value__bit_pad__position : int

axiom skein__tweak_value__bit_pad__first__bit_axiom :
  (0 <= skein__tweak_value__bit_pad__first__bit)

axiom skein__tweak_value__bit_pad__last__bit_axiom :
  (skein__tweak_value__bit_pad__first__bit <  skein__tweak_value__bit_pad__last__bit)

axiom skein__tweak_value__bit_pad__position_axiom :
  (0 <= skein__tweak_value__bit_pad__position)

logic skein__tweak_value__field_type__first__bit : int

logic skein__tweak_value__field_type__last__bit : int

logic skein__tweak_value__field_type__position : int

axiom skein__tweak_value__field_type__first__bit_axiom :
  (0 <= skein__tweak_value__field_type__first__bit)

axiom skein__tweak_value__field_type__last__bit_axiom :
  (skein__tweak_value__field_type__first__bit <  skein__tweak_value__field_type__last__bit)

axiom skein__tweak_value__field_type__position_axiom :
  (0 <= skein__tweak_value__field_type__position)

logic skein__tweak_value__first_block__first__bit : int

logic skein__tweak_value__first_block__last__bit : int

logic skein__tweak_value__first_block__position : int

axiom skein__tweak_value__first_block__first__bit_axiom :
  (0 <= skein__tweak_value__first_block__first__bit)

axiom skein__tweak_value__first_block__last__bit_axiom :
  (skein__tweak_value__first_block__first__bit <  skein__tweak_value__first_block__last__bit)

axiom skein__tweak_value__first_block__position_axiom :
  (0 <= skein__tweak_value__first_block__position)

logic skein__tweak_value__final_block__first__bit : int

logic skein__tweak_value__final_block__last__bit : int

logic skein__tweak_value__final_block__position : int

axiom skein__tweak_value__final_block__first__bit_axiom :
  (0 <= skein__tweak_value__final_block__first__bit)

axiom skein__tweak_value__final_block__last__bit_axiom :
  (skein__tweak_value__final_block__first__bit <  skein__tweak_value__final_block__last__bit)

axiom skein__tweak_value__final_block__position_axiom :
  (0 <= skein__tweak_value__final_block__position)

logic dummy : us_rep

type hash_bit_length

logic attr__ATTRIBUTE_MODULUS3 : t3

logic rliteral6 : t3

axiom rliteral_axiom6 : (tqtint3(rliteral6) = 0)

logic rliteral7 : t3

axiom rliteral_axiom7 : (tqtint3(rliteral7) = 18446744073709551608)

predicate in_range2(x: t3) = (ule1(rliteral6, x) and ule1(x, rliteral7))

logic to_rep5 : hash_bit_length -> t3

logic of_rep5 : t3 -> hash_bit_length

axiom inversion_axiom5 :
  (forall x:hash_bit_length [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:hash_bit_length [to_rep5(x)]. in_range2(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:t3 [to_rep5(of_rep5(x))]. (in_range2(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__skein__context_header__tweak_words : us_rep;
rec__skein__context_header__hash_bit_len : hash_bit_length;
rec__skein__context_header__byte_count : u64 }

type us_rep1 = { us_split_fields3 : us_split_fields2
}

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic skein__context_header__tweak_words__first__bit : int

logic skein__context_header__tweak_words__last__bit : int

logic skein__context_header__tweak_words__position : int

axiom skein__context_header__tweak_words__first__bit_axiom :
  (0 <= skein__context_header__tweak_words__first__bit)

axiom skein__context_header__tweak_words__last__bit_axiom :
  (skein__context_header__tweak_words__first__bit <  skein__context_header__tweak_words__last__bit)

axiom skein__context_header__tweak_words__position_axiom :
  (0 <= skein__context_header__tweak_words__position)

logic skein__context_header__hash_bit_len__first__bit : int

logic skein__context_header__hash_bit_len__last__bit : int

logic skein__context_header__hash_bit_len__position : int

axiom skein__context_header__hash_bit_len__first__bit_axiom :
  (0 <= skein__context_header__hash_bit_len__first__bit)

axiom skein__context_header__hash_bit_len__last__bit_axiom :
  (skein__context_header__hash_bit_len__first__bit <  skein__context_header__hash_bit_len__last__bit)

axiom skein__context_header__hash_bit_len__position_axiom :
  (0 <= skein__context_header__hash_bit_len__position)

logic skein__context_header__byte_count__first__bit : int

logic skein__context_header__byte_count__last__bit : int

logic skein__context_header__byte_count__position : int

axiom skein__context_header__byte_count__first__bit_axiom :
  (0 <= skein__context_header__byte_count__first__bit)

axiom skein__context_header__byte_count__last__bit_axiom :
  (skein__context_header__byte_count__first__bit <  skein__context_header__byte_count__last__bit)

axiom skein__context_header__byte_count__position_axiom :
  (0 <= skein__context_header__byte_count__position)

logic dummy1 : us_rep1

logic value__size2 : int

logic object__size2 : int

logic component__size : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom2 : (0 <= alignment2)

type byte

logic attr__ATTRIBUTE_MODULUS4 : t

logic to_rep6 : byte -> t

logic of_rep6 : t -> byte

axiom inversion_axiom6 :
  (forall x:byte [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : true

axiom coerce_axiom6 :
  (forall x:t [to_rep6(of_rep6(x))]. (to_rep6(of_rep6(x)) = x))

logic slide : (t3,byte) farray, t3, t3 -> (t3,byte) farray

axiom slide_eq :
  (forall a:(t3,byte) farray.
  (forall first:t3 [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t3,byte) farray.
  (forall old_first:t3.
  (forall new_first:t3.
  (forall i:t3 [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

logic value__size3 : int

logic object__size3 : int

logic component__size1 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom3 : (0 <= alignment3)

type us_split_fields4 = { rec__skein__skein_512_context__h : us_rep1;
rec__skein__skein_512_context__x : (t3,u64) farray;
rec__skein__skein_512_context__b : (t3,byte) farray }

type us_rep2 = { us_split_fields5 : us_split_fields4
}

logic rliteral8 : t3

axiom rliteral_axiom8 : (tqtint3(rliteral8) = 7)

logic rliteral9 : t3

axiom rliteral_axiom9 : (tqtint3(rliteral9) = 63)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic skein__skein_512_context__h__first__bit : int

logic skein__skein_512_context__h__last__bit : int

logic skein__skein_512_context__h__position : int

axiom skein__skein_512_context__h__first__bit_axiom :
  (0 <= skein__skein_512_context__h__first__bit)

axiom skein__skein_512_context__h__last__bit_axiom :
  (skein__skein_512_context__h__first__bit <  skein__skein_512_context__h__last__bit)

axiom skein__skein_512_context__h__position_axiom :
  (0 <= skein__skein_512_context__h__position)

logic skein__skein_512_context__x__first__bit : int

logic skein__skein_512_context__x__last__bit : int

logic skein__skein_512_context__x__position : int

axiom skein__skein_512_context__x__first__bit_axiom :
  (0 <= skein__skein_512_context__x__first__bit)

axiom skein__skein_512_context__x__last__bit_axiom :
  (skein__skein_512_context__x__first__bit <  skein__skein_512_context__x__last__bit)

axiom skein__skein_512_context__x__position_axiom :
  (0 <= skein__skein_512_context__x__position)

logic skein__skein_512_context__b__first__bit : int

logic skein__skein_512_context__b__last__bit : int

logic skein__skein_512_context__b__position : int

axiom skein__skein_512_context__b__first__bit_axiom :
  (0 <= skein__skein_512_context__b__first__bit)

axiom skein__skein_512_context__b__last__bit_axiom :
  (skein__skein_512_context__b__first__bit <  skein__skein_512_context__b__last__bit)

axiom skein__skein_512_context__b__position_axiom :
  (0 <= skein__skein_512_context__b__position)

logic dummy2 : us_rep2

function hash_bit_len_of(param__ctx: us_rep2) : t3 =
  to_rep5(((((param__ctx).us_split_fields5).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len)

function byte_count_of(param__ctx: us_rep2) : t3 =
  to_rep2(((((param__ctx).us_split_fields5).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count)

predicate dynamic_invariant(temp___expr_623: us_rep2,
  temp___is_init_619: bool, temp___skip_constant_620: bool,
  temp___do_toplevel_621: bool, temp___do_typ_inv_622: bool) = true

type unsigned_64

logic attr__ATTRIBUTE_MODULUS5 : t3

logic to_rep7 : unsigned_64 -> t3

logic of_rep7 : t3 -> unsigned_64

axiom inversion_axiom7 :
  (forall x:unsigned_64 [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : true

axiom coerce_axiom7 :
  (forall x:t3 [to_rep7(of_rep7(x))]. (to_rep7(of_rep7(x)) = x))

type t4 = { rec__first : unsigned_64; rec__last : unsigned_64
}

predicate dynamic_property(range_first: t3, range_last: t3, low: t3,
  high: t3) = true

type us_t = { elts : (t3,byte) farray; rt : t4
}

function to_array(a: us_t) : (t3,byte) farray = (a).elts

function first(a: us_t) : t3 = to_rep7(((a).rt).rec__first)

function last(a: us_t) : t3 = to_rep7(((a).rt).rec__last)

logic value__size5 : int

logic object__size5 : int

logic component__size2 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom5 : (0 <= alignment5)

logic ctx : us_rep2

logic hash__first : unsigned_64

logic hash__last : unsigned_64

logic rliteral10 : t3

axiom rliteral_axiom10 : (tqtint3(rliteral10) = 18446744073709551615)

logic attr__ATTRIBUTE_MODULUS6 : t3

logic rliteral11 : t3

axiom rliteral_axiom11 : (tqtint3(rliteral11) = 1)

predicate in_range3(x: t3) = (ule1(rliteral11, x) and ule1(x, rliteral7))

logic attr__ATTRIBUTE_MODULUS7 : t3

logic rliteral12 : t3

axiom rliteral_axiom12 : (tqtint3(rliteral12) = 64)

predicate in_range4(x: t3) = (ule1(rliteral6, x) and ule1(x, rliteral12))

logic r252b : t3

logic r256b : t3

logic c258b : t3

logic c260b : t

logic c261b : bool

logic c262b : bool

logic c266b : t3

logic c268b : (t3,u64) farray

logic c269b : t3

logic attr__ATTRIBUTE_MODULUS8 : t3

logic attr__ATTRIBUTE_MODULUS9 : t3

logic attr__ATTRIBUTE_MODULUS10 : t3

logic rliteral13 : t3

axiom rliteral_axiom13 : (tqtint3(rliteral13) = 2305843009213693951)

predicate in_range5(x: t3) = (ule1(rliteral11, x) and ule1(x, rliteral13))

logic attr__ATTRIBUTE_MODULUS11 : t3

logic rliteral14 : t3

axiom rliteral_axiom14 : (tqtint3(rliteral14) = 36028797018963968)

predicate in_range6(x: t3) = (ule1(rliteral11, x) and ule1(x, rliteral14))

logic temp_____aggregate_def_1116 : t, t3, t3 -> us_t

logic attr__ATTRIBUTE_MODULUS12 : t3

logic value__size6 : int

logic object__size6 : int

logic component__size3 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom6 : (0 <= alignment6)

logic temp_____aggregate_def_1165 : t -> (t3,byte) farray

logic rliteral15 : t3

axiom rliteral_axiom15 : (tqtint3(rliteral15) = 8)

logic rliteral16 : t

axiom rliteral_axiom16 : (tqtint(rliteral16) = 255)

 (* "skein.ads", line 197, characters 0-0 *)
goal defqtvc :
  (forall local_ctx__split_fields:us_split_fields4.
  forall blocks_required:t3. forall byte_count:t3. (dynamic_invariant(ctx,
  true, false, true, true) -> (dynamic_property(rliteral6, rliteral10,
  to_rep7(hash__first), to_rep7(hash__last)) ->
  (((((in_range3(hash_bit_len_of(ctx)) and in_range4(byte_count_of(ctx))) and
  (to_rep7(hash__first) = rliteral6)) and ult3(to_rep7(hash__last),
  rliteral10)) and ule1(sub(udiv(add(hash_bit_len_of(ctx), rliteral8),
  rliteral15), rliteral11), to_rep7(hash__last))) -> (dynamic_invariant({
  us_split_fields5 = local_ctx__split_fields }, false, false, true, true) ->
  (in_range6(blocks_required) -> (in_range5(byte_count) ->
  (forall local_ctx__split_fields1:us_split_fields4.
  ((local_ctx__split_fields1 = (ctx).us_split_fields5) ->
  (forall o:t3. ((to_rep7(hash__last) = o) ->
  (forall o1:t3. ((to_rep7(hash__first) = o1) ->
  (forall temp___1124:us_t. (((((first(temp___1124) = o1) and
  (last(temp___1124) = o)) and
  (forall temp___1119:t3 [(to_array(temp___1124)[temp___1119])].
  ((ule1(first(temp___1124), temp___1119) and ule1(temp___1119,
  last(temp___1124))) ->
  (to_rep6((to_array(temp___1124)[temp___1119])) = rliteral1)))) and
  (temp___1124 = temp_____aggregate_def_1116(rliteral1, o1, o))) ->
  ((first(temp___1124) = to_rep7(hash__first)) ->
  ((last(temp___1124) = to_rep7(hash__last)) -> (ult3(last(temp___1124),
  rliteral10) -> (ult3(last(temp___1124), rliteral10) ->
  (dynamic_property(rliteral6, rliteral10, first(temp___1124),
  last(temp___1124)) ->
  (forall o2:t3. ((to_rep7(hash__last) = o2) ->
  (forall o3:t3. ((to_rep7(hash__first) = o3) ->
  ((if ule1(first(temp___1124), last(temp___1124)) then (ule1(o3, o2) and
  (sub(last(temp___1124), first(temp___1124)) = sub(o2, o3))) else ult3(o2,
  o3)) ->
  (forall o4:t3. ((to_rep7(hash__first) = o4) ->
  (forall o5:t3. ((to_rep7(hash__last) = o5) ->
  (forall o6:t3. ((to_rep7(hash__first) = o6) ->
  (forall hash:(t3,byte) farray. ((hash = slide(to_array(temp___1124),
  first(temp___1124), o4)) -> (let usq_ =
  ((local_ctx__split_fields1).rec__skein__skein_512_context__h).us_split_fields3
  : us_split_fields2 in (let usq_1 =
  ((((local_ctx__split_fields1).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1
  : us_split_fields in
  (forall local_ctx__split_fields2:us_split_fields4.
  ((local_ctx__split_fields2 = { rec__skein__skein_512_context__h = {
  us_split_fields3 = { rec__skein__context_header__tweak_words = {
  us_split_fields1 = { rec__skein__tweak_value__byte_count_lsb =
  (usq_1).rec__skein__tweak_value__byte_count_lsb;
  rec__skein__tweak_value__byte_count_msb =
  (usq_1).rec__skein__tweak_value__byte_count_msb;
  rec__skein__tweak_value__reserved =
  (usq_1).rec__skein__tweak_value__reserved;
  rec__skein__tweak_value__tree_level =
  (usq_1).rec__skein__tweak_value__tree_level;
  rec__skein__tweak_value__bit_pad =
  (usq_1).rec__skein__tweak_value__bit_pad;
  rec__skein__tweak_value__field_type =
  (usq_1).rec__skein__tweak_value__field_type;
  rec__skein__tweak_value__first_block =
  (usq_1).rec__skein__tweak_value__first_block;
  rec__skein__tweak_value__final_block = of_int4(1) } };
  rec__skein__context_header__hash_bit_len =
  (usq_).rec__skein__context_header__hash_bit_len;
  rec__skein__context_header__byte_count =
  (usq_).rec__skein__context_header__byte_count } };
  rec__skein__skein_512_context__x =
  (local_ctx__split_fields1).rec__skein__skein_512_context__x;
  rec__skein__skein_512_context__b =
  (local_ctx__split_fields1).rec__skein__skein_512_context__b }) ->
  (forall spark__branch:bool.
  forall local_ctx__split_fields3:us_split_fields4.
  ((exists o7:t3.
   ((to_rep2((((local_ctx__split_fields2).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count) = o7) and
   ((spark__branch = (if ult3(o7, rliteral12) then true else false)) and
   (if (spark__branch = true) then (exists skein__skein_512_final__B251b__L_10__R252b__assume:t3.
                                   ((to_rep2((((local_ctx__split_fields2).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count) = skein__skein_512_final__B251b__L_10__R252b__assume) and
                                   ((skein__skein_512_final__B251b__L_10__R252b__assume = r252b) and
                                   (let temp___1147 = r252b : t3 in
                                   (exists i:t3. ((i = temp___1147) and
                                   (if (andb((if ule1(temp___1147,
                                   i) then true else false), (if ule1(i,
                                   rliteral9) then true else false)) = true) then 
                                   (exists local_ctx__split_fields4:us_split_fields4.
                                   exists i1:t3.
                                   ((andb((if (dynamic_invariant({
                                   us_split_fields5 =
                                   local_ctx__split_fields4 }, false, true,
                                   true, true) and
                                   ((((local_ctx__split_fields4).rec__skein__skein_512_context__h = (local_ctx__split_fields2).rec__skein__skein_512_context__h) and
                                   ((local_ctx__split_fields4).rec__skein__skein_512_context__x = (local_ctx__split_fields2).rec__skein__skein_512_context__x)) and
                                   (forall temp___1156:t3. ((ule1(rliteral6,
                                   temp___1156) and ule1(temp___1156,
                                   rliteral9)) -> ((ult3(rliteral9,
                                   temp___1156) or (ult3(temp___1156,
                                   temp___1147) or ule1(i1, temp___1156))) ->
                                   (((local_ctx__split_fields4).rec__skein__skein_512_context__b[temp___1156]) = ((local_ctx__split_fields2).rec__skein__skein_512_context__b[temp___1156]))))))) then true else false),
                                   (if (ule1(r252b, i1) and ule1(i1,
                                   rliteral9)) then true else false)) = true) and
                                   (exists o8:byte.
                                   ((to_rep6(o8) = rliteral1) and
                                   ((local_ctx__split_fields3 = {
                                   rec__skein__skein_512_context__h =
                                   (local_ctx__split_fields4).rec__skein__skein_512_context__h;
                                   rec__skein__skein_512_context__x =
                                   (local_ctx__split_fields4).rec__skein__skein_512_context__x;
                                   rec__skein__skein_512_context__b =
                                   ((local_ctx__split_fields4).rec__skein__skein_512_context__b[i1 <- o8])
                                   }) and (i1 = rliteral9)))))) else (local_ctx__split_fields3 = local_ctx__split_fields2)))))))) else (local_ctx__split_fields3 = local_ctx__split_fields2))))) ->
  (forall tmp_b:(t3,byte) farray.
  ((tmp_b = (local_ctx__split_fields3).rec__skein__skein_512_context__b) ->
  (forall o7:t3.
  ((to_rep2((((local_ctx__split_fields3).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count) = o7) ->
  (forall tmp_byte_count_add:t3. ((tmp_byte_count_add = o7) ->
  (ult3(rliteral9, rliteral10) -> (dynamic_property(rliteral6, rliteral10,
  rliteral6, rliteral9) ->
  (forall local_ctx__split_fields4:us_split_fields4.
  (((((in_range3(to_rep5((((local_ctx__split_fields4).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len)) and
  (to_rep5((((local_ctx__split_fields4).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len) = to_rep5((((local_ctx__split_fields3).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len))) and
  in_range4(to_rep2((((local_ctx__split_fields4).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count))) and
  (to_rep2((((local_ctx__split_fields4).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count) = to_rep2((((local_ctx__split_fields3).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count))) and
  dynamic_invariant({ us_split_fields5 = local_ctx__split_fields4 }, true,
  true, true, true)) ->
  (forall o8:t3.
  ((to_rep5((((local_ctx__split_fields4).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len) = o8) ->
  (let o9 = udiv(add(o8, rliteral8), rliteral15) : t3 in (in_range5(o9) ->
  (forall byte_count1:t3. ((byte_count1 = o9) ->
  (forall temp___1169:(t3,byte) farray.
  (((forall temp___1168:t3 [(temp___1169[temp___1168])]. ((ule1(rliteral6,
    temp___1168) and ule1(temp___1168, rliteral9)) ->
    (to_rep6((temp___1169[temp___1168])) = rliteral1))) and
  (temp___1169 = temp_____aggregate_def_1165(rliteral1))) ->
  (forall local_ctx__split_fields5:us_split_fields4.
  ((local_ctx__split_fields5 = { rec__skein__skein_512_context__h =
  (local_ctx__split_fields4).rec__skein__skein_512_context__h;
  rec__skein__skein_512_context__x =
  (local_ctx__split_fields4).rec__skein__skein_512_context__x;
  rec__skein__skein_512_context__b = temp___1169 }) ->
  (forall x:(t3,u64) farray.
  ((x = (local_ctx__split_fields5).rec__skein__skein_512_context__x) ->
  (forall blocks_required1:t3. ((blocks_required1 = udiv(add(byte_count1,
  rliteral9), rliteral12)) -> ((sub(blocks_required1, rliteral11) = r256b) ->
  (forall blocks_done:t3. ((blocks_done = rliteral6) ->
  ((andb((if ule1(rliteral6, blocks_done) then true else false),
  (if ule1(blocks_done, r256b) then true else false)) = true) ->
  (forall temp___loop_entry_1270:t3.
  ((to_rep5((((local_ctx__split_fields5).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len) = temp___loop_entry_1270) ->
  (forall o10:t3. ((to_rep7(hash__last) = o10) ->
  (forall o11:t3. ((to_rep7(hash__first) = o11) ->
  (forall o12:t3.
  ((to_rep5((((local_ctx__split_fields5).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len) = o12) ->
  (forall local_ctx__split_fields6:us_split_fields4. forall blocks_done1:t3.
  ((to_rep5((((local_ctx__split_fields6).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len) = temp___loop_entry_1270) ->
  ((andb((if dynamic_invariant({ us_split_fields5 = local_ctx__split_fields6
  }, false, true, true, true) then true else false), (if (ule1(rliteral6,
  blocks_done1) and ule1(blocks_done1,
  r256b)) then true else false)) = true) -> ((blocks_done1 = c258b) ->
  (forall o13:byte. ((to_rep6(o13) = toSmall(bw_and(c258b, rliteral))) ->
  (forall local_ctx__split_fields7:us_split_fields4.
  ((local_ctx__split_fields7 = { rec__skein__skein_512_context__h =
  (local_ctx__split_fields6).rec__skein__skein_512_context__h;
  rec__skein__skein_512_context__x =
  (local_ctx__split_fields6).rec__skein__skein_512_context__x;
  rec__skein__skein_512_context__b =
  ((local_ctx__split_fields6).rec__skein__skein_512_context__b[rliteral6 <- o13])
  }) -> ule1(bw_and(lsr_bv(c258b, of_int3(8)), rliteral),
  toBig(rliteral16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
