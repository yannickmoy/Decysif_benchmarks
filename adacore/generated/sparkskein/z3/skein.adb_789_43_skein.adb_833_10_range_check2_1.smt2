;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const two_power_size_minus_one Int)

(declare-const two_power_size_minus_one1 Int)

(declare-const two_power_size_minus_one2 Int)

(declare-const two_power_size_minus_one3 Int)

(declare-datatypes ()
  ((t__ref (t__refqtmk (t__content (_ BitVec 64))))))

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

;; "to_rep"
(declare-fun to_rep (u16) (_ BitVec 16))

;; "of_rep"
(declare-fun of_rep ((_ BitVec 16)) u16)

;; "inversion_axiom"
(assert
  (forall ((x u16)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 16)))
    (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(declare-sort u32 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; "to_rep"
(declare-fun to_rep1 (u32) (_ BitVec 32))

;; "of_rep"
(declare-fun of_rep1 ((_ BitVec 32)) u32)

;; "inversion_axiom"
(assert
  (forall ((x u32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 32)))
    (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(declare-sort u64 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

;; "to_rep"
(declare-fun to_rep2 (u64) (_ BitVec 64))

;; "of_rep"
(declare-fun of_rep2 ((_ BitVec 64)) u64)

;; "inversion_axiom"
(assert
  (forall ((x u64)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 64)))
    (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(declare-sort u7 0)

;; "in_range"
(define-fun in_range ((x (_ BitVec 8))) Bool
  (and (bvule #x00 x) (bvule x #x7F)))

;; "to_rep"
(declare-fun to_rep3 (u7) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep3 ((_ BitVec 8)) u7)

;; "inversion_axiom"
(assert
  (forall ((x u7)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert (forall ((x u7)) (! (in_range (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (let ((y (bvurem x #x80)))
         (=> (in_range y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3
                                                                    (of_rep3
                                                                    x))) )))

(declare-sort u6 0)

;; "in_range"
(define-fun in_range1 ((x (_ BitVec 8))) Bool
  (and (bvule #x00 x) (bvule x #x3F)))

;; "to_rep"
(declare-fun to_rep4 (u6) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep4 ((_ BitVec 8)) u6)

;; "inversion_axiom"
(assert
  (forall ((x u6)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert
  (forall ((x u6)) (! (in_range1 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (let ((y (bvurem x #x40)))
         (=> (in_range1 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4
                                                                    (of_rep4
                                                                    x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__skein__tweak_value__byte_count_lsb u64)(rec__skein__tweak_value__byte_count_msb u32)(rec__skein__tweak_value__reserved u16)(rec__skein__tweak_value__tree_level u7)(rec__skein__tweak_value__bit_pad Bool)(rec__skein__tweak_value__field_type u6)(rec__skein__tweak_value__first_block Bool)(rec__skein__tweak_value__final_block Bool)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const skein__tweak_value__byte_count_lsb__first__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__last__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__position Int)

;; "skein__tweak_value__byte_count_lsb__first__bit_axiom"
(assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))

;; "skein__tweak_value__byte_count_lsb__last__bit_axiom"
(assert
  (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))

;; "skein__tweak_value__byte_count_lsb__position_axiom"
(assert (<= 0 skein__tweak_value__byte_count_lsb__position))

(declare-const skein__tweak_value__byte_count_msb__first__bit Int)

(declare-const skein__tweak_value__byte_count_msb__last__bit Int)

(declare-const skein__tweak_value__byte_count_msb__position Int)

;; "skein__tweak_value__byte_count_msb__first__bit_axiom"
(assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))

;; "skein__tweak_value__byte_count_msb__last__bit_axiom"
(assert
  (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))

;; "skein__tweak_value__byte_count_msb__position_axiom"
(assert (<= 0 skein__tweak_value__byte_count_msb__position))

(declare-const skein__tweak_value__reserved__first__bit Int)

(declare-const skein__tweak_value__reserved__last__bit Int)

(declare-const skein__tweak_value__reserved__position Int)

;; "skein__tweak_value__reserved__first__bit_axiom"
(assert (<= 0 skein__tweak_value__reserved__first__bit))

;; "skein__tweak_value__reserved__last__bit_axiom"
(assert
  (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))

;; "skein__tweak_value__reserved__position_axiom"
(assert (<= 0 skein__tweak_value__reserved__position))

(declare-const skein__tweak_value__tree_level__first__bit Int)

(declare-const skein__tweak_value__tree_level__last__bit Int)

(declare-const skein__tweak_value__tree_level__position Int)

;; "skein__tweak_value__tree_level__first__bit_axiom"
(assert (<= 0 skein__tweak_value__tree_level__first__bit))

;; "skein__tweak_value__tree_level__last__bit_axiom"
(assert
  (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))

;; "skein__tweak_value__tree_level__position_axiom"
(assert (<= 0 skein__tweak_value__tree_level__position))

(declare-const skein__tweak_value__bit_pad__first__bit Int)

(declare-const skein__tweak_value__bit_pad__last__bit Int)

(declare-const skein__tweak_value__bit_pad__position Int)

;; "skein__tweak_value__bit_pad__first__bit_axiom"
(assert (<= 0 skein__tweak_value__bit_pad__first__bit))

;; "skein__tweak_value__bit_pad__last__bit_axiom"
(assert
  (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))

;; "skein__tweak_value__bit_pad__position_axiom"
(assert (<= 0 skein__tweak_value__bit_pad__position))

(declare-const skein__tweak_value__field_type__first__bit Int)

(declare-const skein__tweak_value__field_type__last__bit Int)

(declare-const skein__tweak_value__field_type__position Int)

;; "skein__tweak_value__field_type__first__bit_axiom"
(assert (<= 0 skein__tweak_value__field_type__first__bit))

;; "skein__tweak_value__field_type__last__bit_axiom"
(assert
  (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))

;; "skein__tweak_value__field_type__position_axiom"
(assert (<= 0 skein__tweak_value__field_type__position))

(declare-const skein__tweak_value__first_block__first__bit Int)

(declare-const skein__tweak_value__first_block__last__bit Int)

(declare-const skein__tweak_value__first_block__position Int)

;; "skein__tweak_value__first_block__first__bit_axiom"
(assert (<= 0 skein__tweak_value__first_block__first__bit))

;; "skein__tweak_value__first_block__last__bit_axiom"
(assert
  (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))

;; "skein__tweak_value__first_block__position_axiom"
(assert (<= 0 skein__tweak_value__first_block__position))

(declare-const skein__tweak_value__final_block__first__bit Int)

(declare-const skein__tweak_value__final_block__last__bit Int)

(declare-const skein__tweak_value__final_block__position Int)

;; "skein__tweak_value__final_block__first__bit_axiom"
(assert (<= 0 skein__tweak_value__final_block__first__bit))

;; "skein__tweak_value__final_block__last__bit_axiom"
(assert
  (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))

;; "skein__tweak_value__final_block__position_axiom"
(assert (<= 0 skein__tweak_value__final_block__position))

(declare-const dummy us_rep)

(declare-sort hash_bit_length 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

;; "in_range"
(define-fun in_range2 ((x (_ BitVec 64))) Bool
  (and (bvule #x0000000000000000 x) (bvule x #xFFFFFFFFFFFFFFF8)))

;; "to_rep"
(declare-fun to_rep5 (hash_bit_length) (_ BitVec 64))

;; "of_rep"
(declare-fun of_rep5 ((_ BitVec 64)) hash_bit_length)

;; "inversion_axiom"
(assert
  (forall ((x hash_bit_length))
    (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; "range_axiom"
(assert
  (forall ((x hash_bit_length))
    (! (in_range2 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 64)))
    (! (=> (in_range2 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                                  (of_rep5 x))) )))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__skein__context_header__tweak_words us_rep)(rec__skein__context_header__hash_bit_len hash_bit_length)(rec__skein__context_header__byte_count u64)))))

(declare-datatypes ()
  ((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const skein__context_header__tweak_words__first__bit Int)

(declare-const skein__context_header__tweak_words__last__bit Int)

(declare-const skein__context_header__tweak_words__position Int)

;; "skein__context_header__tweak_words__first__bit_axiom"
(assert (<= 0 skein__context_header__tweak_words__first__bit))

;; "skein__context_header__tweak_words__last__bit_axiom"
(assert
  (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))

;; "skein__context_header__tweak_words__position_axiom"
(assert (<= 0 skein__context_header__tweak_words__position))

(declare-const skein__context_header__hash_bit_len__first__bit Int)

(declare-const skein__context_header__hash_bit_len__last__bit Int)

(declare-const skein__context_header__hash_bit_len__position Int)

;; "skein__context_header__hash_bit_len__first__bit_axiom"
(assert (<= 0 skein__context_header__hash_bit_len__first__bit))

;; "skein__context_header__hash_bit_len__last__bit_axiom"
(assert
  (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))

;; "skein__context_header__hash_bit_len__position_axiom"
(assert (<= 0 skein__context_header__hash_bit_len__position))

(declare-const skein__context_header__byte_count__first__bit Int)

(declare-const skein__context_header__byte_count__last__bit Int)

(declare-const skein__context_header__byte_count__position Int)

;; "skein__context_header__byte_count__first__bit_axiom"
(assert (<= 0 skein__context_header__byte_count__first__bit))

;; "skein__context_header__byte_count__last__bit_axiom"
(assert
  (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))

;; "skein__context_header__byte_count__position_axiom"
(assert (<= 0 skein__context_header__byte_count__position))

(declare-const dummy1 us_rep1)

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array (_ BitVec 64) u64))))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 8))

;; "to_rep"
(declare-fun to_rep6 (byte) (_ BitVec 8))

;; "of_rep"
(declare-fun of_rep6 ((_ BitVec 8)) byte)

;; "inversion_axiom"
(assert
  (forall ((x byte)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 8)))
    (! (= (to_rep6 (of_rep6 x)) x) :pattern ((to_rep6 (of_rep6 x))) )))

(declare-datatypes ()
  ((map__ref1 (map__refqtmk1 (map__content1 (Array (_ BitVec 64) byte))))))

;; "slide"
(declare-fun slide ((Array (_ BitVec 64) byte)
  (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; "slide_eq"
(assert
  (forall ((a (Array (_ BitVec 64) byte)))
    (forall ((first (_ BitVec 64)))
      (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; "slide_def"
(assert
  (forall ((a (Array (_ BitVec 64) byte)))
    (forall ((old_first (_ BitVec 64)))
      (forall ((new_first (_ BitVec 64)))
        (forall ((i (_ BitVec 64)))
          (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
          (slide
            a
            old_first
            new_first) i)) ))))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__skein__skein_512_context__h us_rep1)(rec__skein__skein_512_context__x (Array (_ BitVec 64) u64))(rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields4)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const skein__skein_512_context__h__first__bit Int)

(declare-const skein__skein_512_context__h__last__bit Int)

(declare-const skein__skein_512_context__h__position Int)

;; "skein__skein_512_context__h__first__bit_axiom"
(assert (<= 0 skein__skein_512_context__h__first__bit))

;; "skein__skein_512_context__h__last__bit_axiom"
(assert
  (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))

;; "skein__skein_512_context__h__position_axiom"
(assert (<= 0 skein__skein_512_context__h__position))

(declare-const skein__skein_512_context__x__first__bit Int)

(declare-const skein__skein_512_context__x__last__bit Int)

(declare-const skein__skein_512_context__x__position Int)

;; "skein__skein_512_context__x__first__bit_axiom"
(assert (<= 0 skein__skein_512_context__x__first__bit))

;; "skein__skein_512_context__x__last__bit_axiom"
(assert
  (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))

;; "skein__skein_512_context__x__position_axiom"
(assert (<= 0 skein__skein_512_context__x__position))

(declare-const skein__skein_512_context__b__first__bit Int)

(declare-const skein__skein_512_context__b__last__bit Int)

(declare-const skein__skein_512_context__b__position Int)

;; "skein__skein_512_context__b__first__bit_axiom"
(assert (<= 0 skein__skein_512_context__b__first__bit))

;; "skein__skein_512_context__b__last__bit_axiom"
(assert
  (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))

;; "skein__skein_512_context__b__position_axiom"
(assert (<= 0 skein__skein_512_context__b__position))

(declare-const dummy2 us_rep2)

;; "hash_bit_len_of"
(define-fun hash_bit_len_of ((param__ctx us_rep2)) (_ BitVec 64)
  (to_rep5
    (rec__skein__context_header__hash_bit_len
      (us_split_fields3
        (rec__skein__skein_512_context__h (us_split_fields5 param__ctx))))))

;; "byte_count_of"
(define-fun byte_count_of ((param__ctx us_rep2)) (_ BitVec 64)
  (to_rep2
    (rec__skein__context_header__byte_count
      (us_split_fields3
        (rec__skein__skein_512_context__h (us_split_fields5 param__ctx))))))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_623 us_rep2) (temp___is_init_619 Bool) (temp___skip_constant_620 Bool) (temp___do_toplevel_621 Bool) (temp___do_typ_inv_622 Bool)) Bool
  true)

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 64))

;; "to_rep"
(declare-fun to_rep7 (unsigned_64) (_ BitVec 64))

;; "of_rep"
(declare-fun of_rep7 ((_ BitVec 64)) unsigned_64)

;; "inversion_axiom"
(assert
  (forall ((x unsigned_64))
    (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; "range_axiom"
(assert true)

;; "coerce_axiom"
(assert
  (forall ((x (_ BitVec 64)))
    (! (= (to_rep7 (of_rep7 x)) x) :pattern ((to_rep7 (of_rep7 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first unsigned_64)(rec__last unsigned_64)))))

;; "mk"
(declare-fun mk ((_ BitVec 64)
  (_ BitVec 64)) t)

;; "mk_def"
(assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
    (! (and
         (= (to_rep7 (rec__first (mk f l))) f)
         (= (to_rep7 (rec__last (mk f l))) l)) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property ((range_first (_ BitVec 64)) (range_last (_ BitVec 64)) (low (_ BitVec 64)) (high (_ BitVec 64))) Bool
  true)

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array (_ BitVec 64) byte))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte)
  (elts a))

;; "of_array"
(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64)) (l (_ BitVec 64))) us_t
  (us_tqtmk a (mk f l)))

;; "first"
(define-fun first ((a us_t)) (_ BitVec 64)
  (to_rep7 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) (_ BitVec 64)
  (to_rep7 (rec__last (rt a))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "component__size_axiom"
(assert (<= 0 component__size2))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const ctx us_rep2)

(declare-const hash__first unsigned_64)

(declare-const hash__last unsigned_64)

(declare-const attr__ATTRIBUTE_MODULUS6 (_ BitVec 64))

;; "in_range"
(define-fun in_range3 ((x (_ BitVec 64))) Bool
  (and (bvule #x0000000000000001 x) (bvule x #xFFFFFFFFFFFFFFF8)))

(declare-const attr__ATTRIBUTE_MODULUS7 (_ BitVec 64))

;; "in_range"
(define-fun in_range4 ((x (_ BitVec 64))) Bool
  (and (bvule #x0000000000000000 x) (bvule x #x0000000000000040)))

(declare-const r252b (_ BitVec 64))

(declare-const r256b (_ BitVec 64))

(declare-const c258b (_ BitVec 64))

(declare-const c260b (_ BitVec 8))

(declare-const c261b Bool)

(declare-const c262b Bool)

(declare-const c266b (_ BitVec 64))

(declare-const c268b (Array (_ BitVec 64) u64))

(declare-const c269b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_MODULUS8 (_ BitVec 64))

(declare-const attr__ATTRIBUTE_MODULUS9 (_ BitVec 64))

(declare-const attr__ATTRIBUTE_MODULUS10 (_ BitVec 64))

;; "in_range"
(define-fun in_range5 ((x (_ BitVec 64))) Bool
  (and (bvule #x0000000000000001 x) (bvule x #x1FFFFFFFFFFFFFFF)))

(declare-const attr__ATTRIBUTE_MODULUS11 (_ BitVec 64))

;; "in_range"
(define-fun in_range6 ((x (_ BitVec 64))) Bool
  (and (bvule #x0000000000000001 x) (bvule x #x0080000000000000)))

;; "temp_____aggregate_def_1116"
(declare-fun temp_____aggregate_def_1116 ((_ BitVec 8)
  (_ BitVec 64)
  (_ BitVec 64)) us_t)

(declare-const attr__ATTRIBUTE_MODULUS12 (_ BitVec 64))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size3 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "component__size_axiom"
(assert (<= 0 component__size3))

;; "alignment_axiom"
(assert (<= 0 alignment6))

;; "temp_____aggregate_def_1165"
(declare-fun temp_____aggregate_def_1165 ((_ BitVec 8)) (Array (_ BitVec 64) byte))

(declare-const hash (Array (_ BitVec 64) byte))

(declare-const local_ctx__split_fields us_split_fields4)

(declare-const n (_ BitVec 64))

(declare-const blocks_required (_ BitVec 64))

(declare-const byte_count (_ BitVec 64))

(declare-const x (Array (_ BitVec 64) u64))

(declare-const tmp_b (Array (_ BitVec 64) byte))

(declare-const tmp_byte_count_add (_ BitVec 64))

;; "tmp_byte_count_add'unused"
(define-fun tmp_byte_count_addqtunused () t__ref
  (t__refqtmk tmp_byte_count_add))

;; "tmp_b'unused"
(define-fun tmp_bqtunused () map__ref1
  (map__refqtmk1 tmp_b))

;; "x'unused"
(define-fun xqtunused () map__ref
  (map__refqtmk x))

;; "byte_count'unused"
(define-fun byte_countqtunused () t__ref
  (t__refqtmk byte_count))

;; "blocks_required'unused"
(define-fun blocks_requiredqtunused () t__ref
  (t__refqtmk blocks_required))

;; "n'unused"
(define-fun nqtunused () t__ref
  (t__refqtmk n))

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields))

;; "hash'unused"
(define-fun hashqtunused () map__ref1
  (map__refqtmk1 hash))

;; "Assume"
(assert (dynamic_invariant ctx true false true true))

;; "Assume"
(assert
  (dynamic_property
    #x0000000000000000
    #xFFFFFFFFFFFFFFFF
    (to_rep7 hash__first)
    (to_rep7 hash__last)))

;; "Assume"
(assert
  (and
    (and
      (and
        (and
          (in_range3 (hash_bit_len_of ctx))
          (in_range4 (byte_count_of ctx)))
        (= (to_rep7 hash__first) #x0000000000000000))
      (bvult (to_rep7 hash__last) #xFFFFFFFFFFFFFFFF))
    (bvule (bvsub (bvudiv (bvadd (hash_bit_len_of ctx) #x0000000000000007) #x0000000000000008) #x0000000000000001) 
    (to_rep7
      hash__last))))

;; "Assume"
(assert true)

;; "Assume"
(assert
  (dynamic_invariant
    (us_repqtmk2 local_ctx__split_fields)
    false
    false
    true
    true))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range6 blocks_required))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range5 byte_count))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "o"
(define-fun o () us_split_fields4
  (us_split_fields5 ctx))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields4
  o)

(declare-const local_ctx__split_fields1 us_split_fields4)

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields1))

;; "H"
(assert (= local_ctx__split_fields1 o))

(declare-const o1 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__last) o1))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () (_ BitVec 64)
  o1)

(declare-const o2 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__first) o2))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () (_ BitVec 64)
  o2)

(declare-const temp___1124 us_t)

;; "H"
(assert (= (first temp___1124) o2))

;; "H"
(assert (= (last temp___1124) o1))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___1119 (_ BitVec 64)))
    (! (=>
         (and
           (bvule (first temp___1124) temp___1119)
           (bvule temp___1119 (last temp___1124)))
         (= (to_rep6 (select (to_array temp___1124) temp___1119)) #x00)) :pattern ((select 
    (to_array
      temp___1124) temp___1119)) )))

;; "H"
(assert (= temp___1124 (temp_____aggregate_def_1116 #x00 o2 o1)))

;; "temp_____aggregate_def_1116'result'unused"
(define-fun temp_____aggregate_def_1116qtresultqtunused () us_t
  temp___1124)

;; "Assume"
(assert (= (first temp___1124) (to_rep7 hash__first)))

;; "Assume"
(assert (= (last temp___1124) (to_rep7 hash__last)))

;; "Assert"
(assert (bvult (last temp___1124) #xFFFFFFFFFFFFFFFF))

;; "temp___1130"
(define-fun temp___1130 () (Array (_ BitVec 64) byte)
  (to_array temp___1124))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array (_ BitVec 64) byte)
  temp___1130)

;; "Assert"
(assert (bvult (last temp___1124) #xFFFFFFFFFFFFFFFF))

;; "Assert"
(assert
  (dynamic_property
    #x0000000000000000
    #xFFFFFFFFFFFFFFFF
    (first temp___1124)
    (last temp___1124)))

;; "o"
(define-fun o3 () (_ BitVec 64)
  (last temp___1124))

;; "last'result'unused"
(define-fun lastqtresultqtunused () (_ BitVec 64)
  o3)

;; "o"
(define-fun o4 () (_ BitVec 64)
  (first temp___1124))

;; "first'result'unused"
(define-fun firstqtresultqtunused () (_ BitVec 64)
  o4)

;; "temp___1132"
(define-fun temp___1132 () us_t
  temp___1124)

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused () us_t
  temp___1132)

(declare-const o5 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__last) o5))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () (_ BitVec 64)
  o5)

(declare-const o6 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__first) o6))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused3 () (_ BitVec 64)
  o6)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array (_ BitVec 64) byte)
  hash)

;; "temp___1133"
(define-fun temp___1133 () us_t
  (of_array hash o6 o5))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused1 () us_t
  temp___1133)

;; "Assert"
(assert
  (ite (bvule (first temp___1132) (last temp___1132))
    (and
      (bvule o6 o5)
      (= (bvsub (last temp___1132) (first temp___1132)) (bvsub o5 o6)))
    (bvult o5 o6)))

(declare-const o7 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__first) o7))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused4 () (_ BitVec 64)
  o7)

;; "o"
(define-fun o8 () (_ BitVec 64)
  (first temp___1132))

;; "first'result'unused"
(define-fun firstqtresultqtunused1 () (_ BitVec 64)
  o8)

;; "o"
(define-fun o9 () (Array (_ BitVec 64) byte)
  (to_array temp___1132))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array (_ BitVec 64) byte)
  o9)

;; "temp___1138"
(define-fun temp___1138 () (Array (_ BitVec 64) byte)
  (slide o9 o8 o7))

;; "slide'result'unused"
(define-fun slideqtresultqtunused () (Array (_ BitVec 64) byte)
  temp___1138)

(declare-const o10 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__last) o10))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused5 () (_ BitVec 64)
  o10)

(declare-const o11 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__first) o11))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused6 () (_ BitVec 64)
  o11)

;; "o"
(define-fun o12 () us_t
  (of_array temp___1138 o11 o10))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused2 () us_t
  o12)

;; "o"
(define-fun o13 () (Array (_ BitVec 64) byte)
  temp___1138)

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array (_ BitVec 64) byte)
  o13)

(declare-const hash1 (Array (_ BitVec 64) byte))

;; "hash'unused"
(define-fun hashqtunused1 () map__ref1
  (map__refqtmk1 hash1))

;; "H"
(assert (= hash1 o13))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields4
  local_ctx__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep2
  (us_repqtmk2 local_ctx__split_fields1))

;; "_q 'unused"
(define-fun usq_qtunused () us_split_fields4
  local_ctx__split_fields1)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields4
  local_ctx__split_fields1)

;; "o"
(define-fun o14 () (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b local_ctx__split_fields1))

;; "rec__skein__skein_512_context__b'result'unused"
(define-fun rec__skein__skein_512_context__bqtresultqtunused () (Array (_ BitVec 64) byte)
  o14)

;; "o"
(define-fun o15 () (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x local_ctx__split_fields1))

;; "rec__skein__skein_512_context__x'result'unused"
(define-fun rec__skein__skein_512_context__xqtresultqtunused () (Array (_ BitVec 64) u64)
  o15)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields4
  local_ctx__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep2
  (us_repqtmk2 local_ctx__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields4
  local_ctx__split_fields1)

;; "temp___1142"
(define-fun temp___1142 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields1))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused () us_rep1
  temp___1142)

;; "_q "
(define-fun usq_ () us_split_fields2
  (us_split_fields3 temp___1142))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields2
  usq_)

;; "o"
(define-fun o16 () u64
  (rec__skein__context_header__byte_count usq_))

;; "rec__skein__context_header__byte_count'result'unused"
(define-fun rec__skein__context_header__byte_countqtresultqtunused () u64
  o16)

;; "o"
(define-fun o17 () hash_bit_length
  (rec__skein__context_header__hash_bit_len usq_))

;; "rec__skein__context_header__hash_bit_len'result'unused"
(define-fun rec__skein__context_header__hash_bit_lenqtresultqtunused 
  () hash_bit_length
  o17)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields4
  local_ctx__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep2
  (us_repqtmk2 local_ctx__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields4
  local_ctx__split_fields1)

;; "o"
(define-fun o18 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields1))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused1 () us_rep1
  o18)

;; "o"
(define-fun o19 () us_split_fields2
  (us_split_fields3 o18))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields2
  o19)

;; "temp___1140"
(define-fun temp___1140 () us_rep
  (rec__skein__context_header__tweak_words o19))

;; "rec__skein__context_header__tweak_words'result'unused"
(define-fun rec__skein__context_header__tweak_wordsqtresultqtunused () us_rep
  temp___1140)

;; "_q "
(define-fun usq_1 () us_split_fields
  (us_split_fields1 temp___1140))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields
  usq_1)

;; "o"
(define-fun o20 () Bool
  (distinct 1 0))

;; "of_int'result'unused"
(define-fun of_intqtresultqtunused () Bool
  o20)

;; "o"
(define-fun o21 () Bool
  (rec__skein__tweak_value__first_block usq_1))

;; "rec__skein__tweak_value__first_block'result'unused"
(define-fun rec__skein__tweak_value__first_blockqtresultqtunused () Bool
  o21)

;; "o"
(define-fun o22 () u6
  (rec__skein__tweak_value__field_type usq_1))

;; "rec__skein__tweak_value__field_type'result'unused"
(define-fun rec__skein__tweak_value__field_typeqtresultqtunused () u6
  o22)

;; "o"
(define-fun o23 () Bool
  (rec__skein__tweak_value__bit_pad usq_1))

;; "rec__skein__tweak_value__bit_pad'result'unused"
(define-fun rec__skein__tweak_value__bit_padqtresultqtunused () Bool
  o23)

;; "o"
(define-fun o24 () u7
  (rec__skein__tweak_value__tree_level usq_1))

;; "rec__skein__tweak_value__tree_level'result'unused"
(define-fun rec__skein__tweak_value__tree_levelqtresultqtunused () u7
  o24)

;; "o"
(define-fun o25 () u16
  (rec__skein__tweak_value__reserved usq_1))

;; "rec__skein__tweak_value__reserved'result'unused"
(define-fun rec__skein__tweak_value__reservedqtresultqtunused () u16
  o25)

;; "o"
(define-fun o26 () u32
  (rec__skein__tweak_value__byte_count_msb usq_1))

;; "rec__skein__tweak_value__byte_count_msb'result'unused"
(define-fun rec__skein__tweak_value__byte_count_msbqtresultqtunused () u32
  o26)

;; "o"
(define-fun o27 () u64
  (rec__skein__tweak_value__byte_count_lsb usq_1))

;; "rec__skein__tweak_value__byte_count_lsb'result'unused"
(define-fun rec__skein__tweak_value__byte_count_lsbqtresultqtunused () u64
  o27)

;; "o"
(define-fun o28 () us_split_fields
  (us_split_fieldsqtmk o27 o26 o25 o24 o23 o22 o21 o20))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o28)

;; "o"
(define-fun o29 () us_rep
  (us_repqtmk o28))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep
  o29)

;; "o"
(define-fun o30 () us_split_fields2
  (us_split_fieldsqtmk1 o29 o17 o16))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields2
  o30)

;; "o"
(define-fun o31 () us_rep1
  (us_repqtmk1 o30))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep1
  o31)

;; "o"
(define-fun o32 () us_split_fields4
  (us_split_fieldsqtmk2 o31 o15 o14))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused2 () us_split_fields4
  o32)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep2
  (us_repqtmk2 o32))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields4
  o32)

(declare-const local_ctx__split_fields2 us_split_fields4)

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused2 () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields2))

;; "H"
(assert (= local_ctx__split_fields2 o32))

(declare-const spark__branch Bool)

(declare-const local_ctx__split_fields3 us_split_fields4)

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused3 () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields3))

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

(declare-const us_split_fields__contentqtresultqtunused3 us_split_fields4)

;; "H"
(assert
  (= us_split_fields__contentqtresultqtunused3 local_ctx__split_fields2))

(declare-const us_repqtmkqtresultqtunused6 us_rep2)

;; "H"
(assert
  (= us_repqtmkqtresultqtunused6 (us_repqtmk2 local_ctx__split_fields2)))

(declare-const us_split_fieldsqtresultqtunused8 us_split_fields4)

;; "H"
(assert (= us_split_fieldsqtresultqtunused8 local_ctx__split_fields2))

(declare-const o33 us_rep1)

;; "H"
(assert (= o33 (rec__skein__skein_512_context__h local_ctx__split_fields2)))

(declare-const rec__skein__skein_512_context__hqtresultqtunused2 us_rep1)

;; "H"
(assert (= rec__skein__skein_512_context__hqtresultqtunused2 o33))

(declare-const o34 us_split_fields2)

;; "H"
(assert (= o34 (us_split_fields3 o33)))

(declare-const us_split_fieldsqtresultqtunused9 us_split_fields2)

;; "H"
(assert (= us_split_fieldsqtresultqtunused9 o34))

(declare-const o35 u64)

;; "H"
(assert (= o35 (rec__skein__context_header__byte_count o34)))

(declare-const rec__skein__context_header__byte_countqtresultqtunused1 u64)

;; "H"
(assert (= rec__skein__context_header__byte_countqtresultqtunused1 o35))

(declare-const o36 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep2 o35) o36))

(declare-const to_repqtresultqtunused7 (_ BitVec 64))

;; "H"
(assert (= to_repqtresultqtunused7 o36))

(declare-const o37 Bool)

;; "H"
(assert (= o37 (ite (bvult o36 #x0000000000000040) true false)))

(declare-const ultqtresultqtunused Bool)

;; "H"
(assert (= ultqtresultqtunused o37))

;; "H"
(assert (= spark__branch o37))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const us_split_fields__contentqtresultqtunused4 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused7 us_rep2)

(declare-const us_split_fieldsqtresultqtunused10 us_split_fields4)

(declare-const o38 us_rep1)

(declare-const rec__skein__skein_512_context__hqtresultqtunused3 us_rep1)

(declare-const o39 us_split_fields2)

(declare-const us_split_fieldsqtresultqtunused11 us_split_fields2)

(declare-const o40 u64)

(declare-const rec__skein__context_header__byte_countqtresultqtunused2 u64)

(declare-const skein__skein_512_final__B251b__L_10__R252b__assume (_ BitVec 64))

(declare-const to_repqtresultqtunused8 (_ BitVec 64))

(declare-const temp___1147 (_ BitVec 64))

(declare-const i (_ BitVec 64))

(declare-const iqtunused t__ref)

(declare-const t__contentqtresultqtunused (_ BitVec 64))

(declare-const o41 Bool)

(declare-const uleqtresultqtunused Bool)

(declare-const t__contentqtresultqtunused1 (_ BitVec 64))

(declare-const o42 Bool)

(declare-const uleqtresultqtunused1 Bool)

(declare-const o43 Bool)

(declare-const andbqtresultqtunused Bool)

(declare-const us_split_fields__contentqtresultqtunused5 us_split_fields4)

(declare-const temp___loop_entry_1155qtunused us_rep2)

(declare-const us_repqtmkqtresultqtunused8 us_rep2)

(declare-const local_ctx__split_fields4 us_split_fields4)

(declare-const i1 (_ BitVec 64))

(declare-const iqtunused1 t__ref)

(declare-const local_ctx__split_fieldsqtunused4 us_split_fields__ref)

(declare-const us_split_fields__contentqtresultqtunused6 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused9 us_rep2)

(declare-const usq_qtunused1 us_split_fields4)

(declare-const us_split_fieldsqtresultqtunused12 us_split_fields4)

(declare-const us_split_fields__contentqtresultqtunused7 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused10 us_rep2)

(declare-const us_split_fieldsqtresultqtunused13 us_split_fields4)

(declare-const temp___1150 (Array (_ BitVec 64) byte))

(declare-const rec__skein__skein_512_context__bqtresultqtunused1 (Array (_ BitVec 64) byte))

(declare-const o44 byte)

(declare-const of_repqtresultqtunused byte)

(declare-const t__contentqtresultqtunused2 (_ BitVec 64))

(declare-const o45 (Array (_ BitVec 64) byte))

(declare-const setqtresultqtunused (Array (_ BitVec 64) byte))

(declare-const o46 (Array (_ BitVec 64) u64))

(declare-const rec__skein__skein_512_context__xqtresultqtunused1 (Array (_ BitVec 64) u64))

(declare-const o47 us_rep1)

(declare-const rec__skein__skein_512_context__hqtresultqtunused4 us_rep1)

(declare-const o48 us_split_fields4)

(declare-const us_split_fieldsqtmkqtresultqtunused3 us_split_fields4)

(declare-const us_repqtmkqtresultqtunused11 us_rep2)

(declare-const us_split_fieldsqtresultqtunused14 us_split_fields4)

(declare-const t__contentqtresultqtunused3 (_ BitVec 64))

(declare-const eqqtresultqtunused Bool)

;; "H"
(assert
  (ite (= spark__branch true)
    (and
      (= us_split_fields__contentqtresultqtunused4 local_ctx__split_fields2)
      (and
        (= us_repqtmkqtresultqtunused7 (us_repqtmk2 local_ctx__split_fields2))
        (and
          (= us_split_fieldsqtresultqtunused10 local_ctx__split_fields2)
          (and
            (= o38 (rec__skein__skein_512_context__h
                     local_ctx__split_fields2))
            (and
              (= rec__skein__skein_512_context__hqtresultqtunused3 o38)
              (and
                (= o39 (us_split_fields3 o38))
                (and
                  (= us_split_fieldsqtresultqtunused11 o39)
                  (and
                    (= o40 (rec__skein__context_header__byte_count o39))
                    (and
                      (= rec__skein__context_header__byte_countqtresultqtunused2 
                      o40)
                      (and
                        (= (to_rep2 o40) skein__skein_512_final__B251b__L_10__R252b__assume)
                        (and
                          (= to_repqtresultqtunused8 skein__skein_512_final__B251b__L_10__R252b__assume)
                          (and
                            (= skein__skein_512_final__B251b__L_10__R252b__assume 
                            r252b)
                            (and
                              (= temp___1147 r252b)
                              (and
                                (= iqtunused (t__refqtmk i))
                                (and
                                  (= i temp___1147)
                                  (and
                                    (= t__contentqtresultqtunused i)
                                    (and
                                      (= o41 (ite (bvule i #x000000000000003F)
                                               true
                                               false))
                                      (and
                                        (= uleqtresultqtunused o41)
                                        (and
                                          (= t__contentqtresultqtunused1 
                                          i)
                                          (and
                                            (= o42 (ite (bvule temp___1147 
                                                     i)
                                                     true
                                                     false))
                                            (and
                                              (= uleqtresultqtunused1 
                                              o42)
                                              (and
                                                (= o43 (and o42 o41))
                                                (and
                                                  (= andbqtresultqtunused 
                                                  o43)
                                                  (ite (= o43 true)
                                                    (and
                                                      (= us_split_fields__contentqtresultqtunused5 
                                                      local_ctx__split_fields2)
                                                      (and
                                                        (= temp___loop_entry_1155qtunused 
                                                        (us_repqtmk2
                                                          local_ctx__split_fields2))
                                                        (and
                                                          (= us_repqtmkqtresultqtunused8 
                                                          (us_repqtmk2
                                                            local_ctx__split_fields2))
                                                          (and
                                                            (= iqtunused1 
                                                            (t__refqtmk
                                                              i1))
                                                            (and
                                                              (= local_ctx__split_fieldsqtunused4 
                                                              (us_split_fields__refqtmk
                                                                local_ctx__split_fields4))
                                                              (and
                                                                (= (and 
                                                                (ite 
                                                                  (and
                                                                    (dynamic_invariant
                                                                    (us_repqtmk2
                                                                    local_ctx__split_fields4)
                                                                    false
                                                                    true
                                                                    true
                                                                    true)
                                                                    (and
                                                                    (and
                                                                    (= 
                                                                    (rec__skein__skein_512_context__h
                                                                    local_ctx__split_fields4) 
                                                                    (rec__skein__skein_512_context__h
                                                                    local_ctx__split_fields2))
                                                                    (= 
                                                                    (rec__skein__skein_512_context__x
                                                                    local_ctx__split_fields4) 
                                                                    (rec__skein__skein_512_context__x
                                                                    local_ctx__split_fields2)))
                                                                    (forall 
                                                                    ((temp___1156 (_ BitVec 64)))
                                                                    (=>
                                                                    (and
                                                                    (bvule #x0000000000000000 temp___1156)
                                                                    (bvule temp___1156 #x000000000000003F))
                                                                    (=>
                                                                    (or
                                                                    (bvult #x000000000000003F temp___1156)
                                                                    (or
                                                                    (bvult temp___1156 
                                                                    temp___1147)
                                                                    (bvule 
                                                                    i1 temp___1156)))
                                                                    (= (select 
                                                                    (rec__skein__skein_512_context__b
                                                                    local_ctx__split_fields4) temp___1156) (select 
                                                                    (rec__skein__skein_512_context__b
                                                                    local_ctx__split_fields2) temp___1156)))))))
                                                                  true
                                                                  false) 
                                                                (ite 
                                                                  (and
                                                                    (bvule 
                                                                    r252b 
                                                                    i1)
                                                                    (bvule 
                                                                    i1 #x000000000000003F))
                                                                  true
                                                                  false)) true)
                                                                (and
                                                                  (= 
                                                                  us_split_fields__contentqtresultqtunused6 
                                                                  local_ctx__split_fields4)
                                                                  (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused9 
                                                                    (us_repqtmk2
                                                                    local_ctx__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    usq_qtunused1 
                                                                    local_ctx__split_fields4)
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused12 
                                                                    local_ctx__split_fields4)
                                                                    (and
                                                                    (= 
                                                                    us_split_fields__contentqtresultqtunused7 
                                                                    local_ctx__split_fields4)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused10 
                                                                    (us_repqtmk2
                                                                    local_ctx__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused13 
                                                                    local_ctx__split_fields4)
                                                                    (and
                                                                    (= 
                                                                    temp___1150 
                                                                    (rec__skein__skein_512_context__b
                                                                    local_ctx__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    rec__skein__skein_512_context__bqtresultqtunused1 
                                                                    temp___1150)
                                                                    (and
                                                                    (= 
                                                                    (to_rep6
                                                                    o44) #x00)
                                                                    (and
                                                                    (= 
                                                                    of_repqtresultqtunused 
                                                                    o44)
                                                                    (and
                                                                    (= 
                                                                    t__contentqtresultqtunused2 
                                                                    i1)
                                                                    (and
                                                                    (= 
                                                                    o45 (store 
                                                                    temp___1150 
                                                                    i1 
                                                                    o44))
                                                                    (and
                                                                    (= 
                                                                    setqtresultqtunused 
                                                                    o45)
                                                                    (and
                                                                    (= 
                                                                    o46 
                                                                    (rec__skein__skein_512_context__x
                                                                    local_ctx__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    rec__skein__skein_512_context__xqtresultqtunused1 
                                                                    o46)
                                                                    (and
                                                                    (= 
                                                                    o47 
                                                                    (rec__skein__skein_512_context__h
                                                                    local_ctx__split_fields4))
                                                                    (and
                                                                    (= 
                                                                    rec__skein__skein_512_context__hqtresultqtunused4 
                                                                    o47)
                                                                    (and
                                                                    (= 
                                                                    o48 
                                                                    (us_split_fieldsqtmk2
                                                                    o47
                                                                    o46
                                                                    o45))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtmkqtresultqtunused3 
                                                                    o48)
                                                                    (and
                                                                    (= 
                                                                    us_repqtmkqtresultqtunused11 
                                                                    (us_repqtmk2
                                                                    o48))
                                                                    (and
                                                                    (= 
                                                                    us_split_fieldsqtresultqtunused14 
                                                                    o48)
                                                                    (and
                                                                    (= 
                                                                    local_ctx__split_fields3 
                                                                    o48)
                                                                    (and
                                                                    (= 
                                                                    t__contentqtresultqtunused3 
                                                                    i1)
                                                                    (and
                                                                    (= 
                                                                    eqqtresultqtunused 
                                                                    (ite (= 
                                                                    i1 #x000000000000003F)
                                                                    true
                                                                    false))
                                                                    (= 
                                                                    i1 #x000000000000003F))))))))))))))))))))))))))))))))
                                                    (= local_ctx__split_fields3 
                                                    local_ctx__split_fields2)))))))))))))))))))))))))
    (= local_ctx__split_fields3 local_ctx__split_fields2)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused8 () us_split_fields4
  local_ctx__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused12 () us_rep2
  (us_repqtmk2 local_ctx__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused15 () us_split_fields4
  local_ctx__split_fields3)

;; "o"
(define-fun o49 () (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b local_ctx__split_fields3))

;; "rec__skein__skein_512_context__b'result'unused"
(define-fun rec__skein__skein_512_context__bqtresultqtunused2 () (Array (_ BitVec 64) byte)
  o49)

(declare-const tmp_b1 (Array (_ BitVec 64) byte))

;; "tmp_b'unused"
(define-fun tmp_bqtunused1 () map__ref1
  (map__refqtmk1 tmp_b1))

;; "H"
(assert (= tmp_b1 o49))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused9 () us_split_fields4
  local_ctx__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused13 () us_rep2
  (us_repqtmk2 local_ctx__split_fields3))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused16 () us_split_fields4
  local_ctx__split_fields3)

;; "o"
(define-fun o50 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields3))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused5 () us_rep1
  o50)

;; "o"
(define-fun o51 () us_split_fields2
  (us_split_fields3 o50))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused17 () us_split_fields2
  o51)

;; "o"
(define-fun o52 () u64
  (rec__skein__context_header__byte_count o51))

;; "rec__skein__context_header__byte_count'result'unused"
(define-fun rec__skein__context_header__byte_countqtresultqtunused3 () u64
  o52)

(declare-const o53 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep2 o52) o53))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused9 () (_ BitVec 64)
  o53)

(declare-const tmp_byte_count_add1 (_ BitVec 64))

;; "tmp_byte_count_add'unused"
(define-fun tmp_byte_count_addqtunused1 () t__ref
  (t__refqtmk tmp_byte_count_add1))

;; "H"
(assert (= tmp_byte_count_add1 o53))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused10 () us_split_fields4
  local_ctx__split_fields3)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused14 () us_rep2
  (us_repqtmk2 local_ctx__split_fields3))

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused4 () (_ BitVec 64)
  tmp_byte_count_add1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused1 () (Array (_ BitVec 64) byte)
  tmp_b1)

;; "Assert"
(assert (bvult #x000000000000003F #xFFFFFFFFFFFFFFFF))

;; "Assert"
(assert
  (dynamic_property
    #x0000000000000000
    #xFFFFFFFFFFFFFFFF
    #x0000000000000000
    #x000000000000003F))

;; "o"
(define-fun o54 () us_t
  (of_array tmp_b1 #x0000000000000000 #x000000000000003F))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused3 () us_t
  o54)

;; "param__ctx__split_fields'unused"
(define-fun param__ctx__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields3))

(declare-const local_ctx__split_fields5 us_split_fields4)

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused5 () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields5))

;; "H"
(assert
  (in_range3
    (to_rep5
      (rec__skein__context_header__hash_bit_len
        (us_split_fields3
          (rec__skein__skein_512_context__h local_ctx__split_fields5))))))

;; "H"
(assert
  (= (to_rep5
       (rec__skein__context_header__hash_bit_len
         (us_split_fields3
           (rec__skein__skein_512_context__h local_ctx__split_fields5)))) 
  (to_rep5
    (rec__skein__context_header__hash_bit_len
      (us_split_fields3
        (rec__skein__skein_512_context__h local_ctx__split_fields3))))))

;; "H"
(assert
  (in_range4
    (to_rep2
      (rec__skein__context_header__byte_count
        (us_split_fields3
          (rec__skein__skein_512_context__h local_ctx__split_fields5))))))

;; "H"
(assert
  (= (to_rep2
       (rec__skein__context_header__byte_count
         (us_split_fields3
           (rec__skein__skein_512_context__h local_ctx__split_fields5)))) 
  (to_rep2
    (rec__skein__context_header__byte_count
      (us_split_fields3
        (rec__skein__skein_512_context__h local_ctx__split_fields3))))))

;; "H"
(assert
  (dynamic_invariant
    (us_repqtmk2 local_ctx__split_fields5)
    true
    true
    true
    true))

;; "H"
(assert true)

;; "H"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused11 () us_split_fields4
  local_ctx__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused15 () us_rep2
  (us_repqtmk2 local_ctx__split_fields5))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused18 () us_split_fields4
  local_ctx__split_fields5)

;; "o"
(define-fun o55 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields5))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused6 () us_rep1
  o55)

;; "o"
(define-fun o56 () us_split_fields2
  (us_split_fields3 o55))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused19 () us_split_fields2
  o56)

;; "o"
(define-fun o57 () hash_bit_length
  (rec__skein__context_header__hash_bit_len o56))

;; "rec__skein__context_header__hash_bit_len'result'unused"
(define-fun rec__skein__context_header__hash_bit_lenqtresultqtunused1 
  () hash_bit_length
  o57)

(declare-const o58 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep5 o57) o58))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused10 () (_ BitVec 64)
  o58)

;; "o"
(define-fun o59 () (_ BitVec 64)
  (bvadd o58 #x0000000000000007))

;; "add'result'unused"
(define-fun addqtresultqtunused () (_ BitVec 64)
  o59)

;; "o"
(define-fun o60 () (_ BitVec 64)
  (bvudiv o59 #x0000000000000008))

;; "udiv_'result'unused"
(define-fun udiv_qtresultqtunused () (_ BitVec 64)
  o60)

;; "Ensures"
(assert (in_range5 o60))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () (_ BitVec 64)
  o60)

(declare-const byte_count1 (_ BitVec 64))

;; "byte_count'unused"
(define-fun byte_countqtunused1 () t__ref
  (t__refqtmk byte_count1))

;; "H"
(assert (= byte_count1 o60))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused12 () us_split_fields4
  local_ctx__split_fields5)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused16 () us_rep2
  (us_repqtmk2 local_ctx__split_fields5))

;; "_q 'unused"
(define-fun usq_qtunused2 () us_split_fields4
  local_ctx__split_fields5)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused20 () us_split_fields4
  local_ctx__split_fields5)

(declare-const temp___1169 (Array (_ BitVec 64) byte))

;; "H"
(assert true)

;; "H"
(assert true)

;; "H"
(assert
  (forall ((temp___1168 (_ BitVec 64)))
    (! (=>
         (and
           (bvule #x0000000000000000 temp___1168)
           (bvule temp___1168 #x000000000000003F))
         (= (to_rep6 (select temp___1169 temp___1168)) #x00)) :pattern ((select 
    temp___1169 temp___1168)) )))

;; "H"
(assert (= temp___1169 (temp_____aggregate_def_1165 #x00)))

;; "temp_____aggregate_def_1165'result'unused"
(define-fun temp_____aggregate_def_1165qtresultqtunused () (Array (_ BitVec 64) byte)
  temp___1169)

;; "o"
(define-fun o61 () (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x local_ctx__split_fields5))

;; "rec__skein__skein_512_context__x'result'unused"
(define-fun rec__skein__skein_512_context__xqtresultqtunused2 () (Array (_ BitVec 64) u64)
  o61)

;; "o"
(define-fun o62 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields5))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused7 () us_rep1
  o62)

;; "o"
(define-fun o63 () us_split_fields4
  (us_split_fieldsqtmk2 o62 o61 temp___1169))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused4 () us_split_fields4
  o63)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused17 () us_rep2
  (us_repqtmk2 o63))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused21 () us_split_fields4
  o63)

(declare-const local_ctx__split_fields6 us_split_fields4)

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused6 () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields6))

;; "H"
(assert (= local_ctx__split_fields6 o63))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused13 () us_split_fields4
  local_ctx__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused18 () us_rep2
  (us_repqtmk2 local_ctx__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused22 () us_split_fields4
  local_ctx__split_fields6)

;; "o"
(define-fun o64 () (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x local_ctx__split_fields6))

;; "rec__skein__skein_512_context__x'result'unused"
(define-fun rec__skein__skein_512_context__xqtresultqtunused3 () (Array (_ BitVec 64) u64)
  o64)

(declare-const x1 (Array (_ BitVec 64) u64))

;; "x'unused"
(define-fun xqtunused1 () map__ref
  (map__refqtmk x1))

;; "H"
(assert (= x1 o64))

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused5 () (_ BitVec 64)
  byte_count1)

;; "o"
(define-fun o65 () (_ BitVec 64)
  (bvadd byte_count1 #x000000000000003F))

;; "add'result'unused"
(define-fun addqtresultqtunused1 () (_ BitVec 64)
  o65)

;; "o"
(define-fun o66 () (_ BitVec 64)
  (bvudiv o65 #x0000000000000040))

;; "udiv_'result'unused"
(define-fun udiv_qtresultqtunused1 () (_ BitVec 64)
  o66)

(declare-const blocks_required1 (_ BitVec 64))

;; "blocks_required'unused"
(define-fun blocks_requiredqtunused1 () t__ref
  (t__refqtmk blocks_required1))

;; "H"
(assert (= blocks_required1 o66))

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused6 () (_ BitVec 64)
  blocks_required1)

;; "skein__skein_512_final__L_11__R256b__assume"
(define-fun skein__skein_512_final__L_11__R256b__assume () (_ BitVec 64)
  (bvsub blocks_required1 #x0000000000000001))

;; "sub'result'unused"
(define-fun subqtresultqtunused () (_ BitVec 64)
  skein__skein_512_final__L_11__R256b__assume)

;; "Assume"
(assert (= skein__skein_512_final__L_11__R256b__assume r256b))

;; "Assume"
(assert true)

;; "temp___1177"
(define-fun temp___1177 () (_ BitVec 64)
  r256b)

(declare-const blocks_done (_ BitVec 64))

;; "blocks_done'unused"
(define-fun blocks_doneqtunused () t__ref
  (t__refqtmk blocks_done))

;; "H"
(assert (= blocks_done #x0000000000000000))

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused7 () (_ BitVec 64)
  blocks_done)

;; "o"
(define-fun o67 () Bool
  (ite (bvule blocks_done temp___1177) true false))

;; "ule'result'unused"
(define-fun uleqtresultqtunused2 () Bool
  o67)

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused8 () (_ BitVec 64)
  blocks_done)

;; "o"
(define-fun o68 () Bool
  (ite (bvule #x0000000000000000 blocks_done) true false))

;; "ule'result'unused"
(define-fun uleqtresultqtunused3 () Bool
  o68)

;; "o"
(define-fun o69 () Bool
  (and o68 o67))

;; "andb'result'unused"
(define-fun andbqtresultqtunused1 () Bool
  o69)

;; "H"
(assert (= o69 true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused14 () us_split_fields4
  local_ctx__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused19 () us_rep2
  (us_repqtmk2 local_ctx__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused23 () us_split_fields4
  local_ctx__split_fields6)

;; "o"
(define-fun o70 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields6))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused8 () us_rep1
  o70)

;; "o"
(define-fun o71 () us_split_fields2
  (us_split_fields3 o70))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused24 () us_split_fields2
  o71)

;; "o"
(define-fun o72 () hash_bit_length
  (rec__skein__context_header__hash_bit_len o71))

;; "rec__skein__context_header__hash_bit_len'result'unused"
(define-fun rec__skein__context_header__hash_bit_lenqtresultqtunused2 
  () hash_bit_length
  o72)

(declare-const temp___loop_entry_1270 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep5 o72) temp___loop_entry_1270))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused11 () (_ BitVec 64)
  temp___loop_entry_1270)

(declare-const o73 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__last) o73))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused12 () (_ BitVec 64)
  o73)

(declare-const o74 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep7 hash__first) o74))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused13 () (_ BitVec 64)
  o74)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused2 () (Array (_ BitVec 64) byte)
  hash1)

;; "temp___loop_entry_1267'unused"
(define-fun temp___loop_entry_1267qtunused () us_t
  (of_array hash1 o74 o73))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused4 () us_t
  (of_array hash1 o74 o73))

;; "temp___loop_entry_1264'unused"
(define-fun temp___loop_entry_1264qtunused () (Array (_ BitVec 64) byte)
  tmp_b1)

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused3 () (Array (_ BitVec 64) byte)
  tmp_b1)

;; "temp___loop_entry_1263'unused"
(define-fun temp___loop_entry_1263qtunused () (_ BitVec 64)
  n)

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused9 () (_ BitVec 64)
  n)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused15 () us_split_fields4
  local_ctx__split_fields6)

;; "temp___loop_entry_1262'unused"
(define-fun temp___loop_entry_1262qtunused () us_rep2
  (us_repqtmk2 local_ctx__split_fields6))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused20 () us_rep2
  (us_repqtmk2 local_ctx__split_fields6))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused16 () us_split_fields4
  local_ctx__split_fields6)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused21 () us_rep2
  (us_repqtmk2 local_ctx__split_fields6))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused25 () us_split_fields4
  local_ctx__split_fields6)

;; "o"
(define-fun o75 () us_rep1
  (rec__skein__skein_512_context__h local_ctx__split_fields6))

;; "rec__skein__skein_512_context__h'result'unused"
(define-fun rec__skein__skein_512_context__hqtresultqtunused9 () us_rep1
  o75)

;; "o"
(define-fun o76 () us_split_fields2
  (us_split_fields3 o75))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused26 () us_split_fields2
  o76)

;; "o"
(define-fun o77 () hash_bit_length
  (rec__skein__context_header__hash_bit_len o76))

;; "rec__skein__context_header__hash_bit_len'result'unused"
(define-fun rec__skein__context_header__hash_bit_lenqtresultqtunused3 
  () hash_bit_length
  o77)

(declare-const o78 (_ BitVec 64))

;; "Ensures"
(assert (= (to_rep5 o77) o78))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused14 () (_ BitVec 64)
  o78)

;; "eq'result'unused"
(define-fun eqqtresultqtunused1 () Bool
  (ite (= o78 temp___loop_entry_1270) true false))

(declare-const hash2 (Array (_ BitVec 64) byte))

(declare-const local_ctx__split_fields7 us_split_fields4)

(declare-const n1 (_ BitVec 64))

(declare-const tmp_b2 (Array (_ BitVec 64) byte))

(declare-const blocks_done1 (_ BitVec 64))

;; "blocks_done'unused"
(define-fun blocks_doneqtunused1 () t__ref
  (t__refqtmk blocks_done1))

;; "local_ctx__split_fields'unused"
(define-fun local_ctx__split_fieldsqtunused7 () us_split_fields__ref
  (us_split_fields__refqtmk local_ctx__split_fields7))

;; "hash'unused"
(define-fun hashqtunused2 () map__ref1
  (map__refqtmk1 hash2))

;; "LoopInvariant"
(assert
  (= (to_rep5
       (rec__skein__context_header__hash_bit_len
         (us_split_fields3
           (rec__skein__skein_512_context__h local_ctx__split_fields7)))) 
  temp___loop_entry_1270))

;; "Assume"
(assert
  (= (and (ite (dynamic_invariant
                 (us_repqtmk2 local_ctx__split_fields7)
                 false
                 true
                 true
                 true)
            true
            false) (ite (and
                          (bvule #x0000000000000000 blocks_done1)
                          (bvule blocks_done1 r256b))
                     true
                     false)) true))

;; "skein__skein_512_final__L_11__C258b__assume'unused"
(define-fun skein__skein_512_final__L_11__C258b__assumeqtunused () (_ BitVec 64)
  blocks_done1)

;; "t__content'result'unused"
(define-fun t__contentqtresultqtunused10 () (_ BitVec 64)
  blocks_done1)

;; "Assume"
(assert (= blocks_done1 c258b))

;; "Assume"
(assert true)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused17 () us_split_fields4
  local_ctx__split_fields7)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused22 () us_rep2
  (us_repqtmk2 local_ctx__split_fields7))

;; "_q 'unused"
(define-fun usq_qtunused3 () us_split_fields4
  local_ctx__split_fields7)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused27 () us_split_fields4
  local_ctx__split_fields7)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused18 () us_split_fields4
  local_ctx__split_fields7)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused23 () us_rep2
  (us_repqtmk2 local_ctx__split_fields7))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused28 () us_split_fields4
  local_ctx__split_fields7)

;; "temp___1179"
(define-fun temp___1179 () (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b local_ctx__split_fields7))

;; "rec__skein__skein_512_context__b'result'unused"
(define-fun rec__skein__skein_512_context__bqtresultqtunused3 () (Array (_ BitVec 64) byte)
  temp___1179)

;; "o"
(define-fun o79 () (_ BitVec 64)
  (bvand c258b #x00000000000000FF))

;; "bw_and'result'unused"
(define-fun bw_andqtresultqtunused () (_ BitVec 64)
  o79)

;; "o"
(define-fun o80 () (_ BitVec 64)
  ((_ zero_extend 56) #xFF))

;; "toBig'result'unused"
(define-fun toBigqtresultqtunused () (_ BitVec 64)
  o80)

;; "o"
(define-fun o81 () (_ BitVec 64)
  ((_ zero_extend 56) #x00))

;; "toBig'result'unused"
(define-fun toBigqtresultqtunused1 () (_ BitVec 64)
  o81)

;; Goal "def'vc"
;; File "skein.ads", line 197, characters 0-0
(assert
  (not (bvule o79 o80)))

(check-sat)
