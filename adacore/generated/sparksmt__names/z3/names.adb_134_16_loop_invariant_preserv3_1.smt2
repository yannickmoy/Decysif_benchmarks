;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-const two_power_size_minus_one Int)

(declare-sort character 0)

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 255)))

;; "to_rep"
(declare-fun to_rep (character) Int)

;; "of_rep"
(declare-fun of_rep (Int) character)

;; "inversion_axiom"
(assert
  (forall ((x character))
    (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x character)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "bool_eq"
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool
  (ite (and
         (ite (<= a__first a__last)
           (and
             (<= b__first b__last)
             (= (- a__last a__first) (- b__last b__first)))
           (< b__last b__first))
         (forall ((temp___idx_105 Int))
           (=>
             (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
             (= (to_rep (select a temp___idx_105)) (to_rep
                                                     (select b (+ (- b__first a__first) temp___idx_105)))))))
    true
    false))

;; "bool_eq_rev"
(assert
  (forall ((a (Array Int character)) (b (Array Int character)))
    (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
      (=>
        (= (bool_eq b b__first b__last a a__first a__last) true)
        (and
          (ite (<= a__first a__last)
            (and
              (<= b__first b__last)
              (= (- a__last a__first) (- b__last b__first)))
            (< b__last b__first))
          (forall ((temp___idx_105 Int))
            (=>
              (and (<= a__first temp___idx_105) (<= temp___idx_105 a__last))
              (= (to_rep (select a temp___idx_105)) (to_rep
                                                      (select b (+ (- b__first a__first) temp___idx_105)))))))))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-sort positive 0)

;; "positive'int"
(declare-fun positiveqtint (positive) Int)

;; "positive'axiom"
(assert
  (forall ((i positive))
    (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range1 low)
    (and
      (in_range1 high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int character)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_110 us_t) (temp___is_init_106 Bool) (temp___skip_constant_107 Bool) (temp___do_toplevel_108 Bool) (temp___do_typ_inv_109 Bool)) Bool
  (=>
    (not (= temp___skip_constant_107 true))
    (dynamic_property
      1
      2147483647
      (first temp___expr_110)
      (last temp___expr_110))))

(declare-sort us_rep 0)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const dummy us_rep)

(declare-datatypes ()
  ((vector__ref (vector__refqtmk (vector__content us_rep)))))

;; "last_index"
(declare-fun last_index (us_rep) Int)

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

(declare-sort us_rep1 0)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "alignment_axiom"
(assert (<= 0 alignment2))

(declare-const dummy1 us_rep1)

(declare-datatypes ()
  ((vector__ref1 (vector__refqtmk1 (vector__content1 us_rep1)))))

;; "to_rep"
(define-fun to_rep2 ((x positive)) Int
  (positiveqtint x))

;; "of_rep"
(declare-fun of_rep2 (Int) positive)

;; "inversion_axiom"
(assert
  (forall ((x positive))
    (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; "range_axiom"
(assert
  (forall ((x positive)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                                  (of_rep2 x))) )))

(declare-sort name_id 0)

;; "name_id'int"
(declare-fun name_idqtint (name_id) Int)

;; "name_id'axiom"
(assert
  (forall ((i name_id))
    (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep3 ((x name_id)) Int
  (name_idqtint x))

;; "of_rep"
(declare-fun of_rep3 (Int) name_id)

;; "inversion_axiom"
(assert
  (forall ((x name_id))
    (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; "range_axiom"
(assert
  (forall ((x name_id)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                                  (of_rep3 x))) )))

(declare-sort char_table_index 0)

;; "char_table_index'int"
(declare-fun char_table_indexqtint (char_table_index) Int)

;; "char_table_index'axiom"
(assert
  (forall ((i char_table_index))
    (and
      (<= 0 (char_table_indexqtint i))
      (<= (char_table_indexqtint i) 2147483646))))

;; "in_range"
(define-fun in_range5 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483646)))

;; "to_rep"
(define-fun to_rep4 ((x char_table_index)) Int
  (char_table_indexqtint x))

;; "of_rep"
(declare-fun of_rep4 (Int) char_table_index)

;; "inversion_axiom"
(assert
  (forall ((x char_table_index))
    (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; "range_axiom"
(assert
  (forall ((x char_table_index))
    (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__ada___names__data__name_entry__table_index char_table_index)(rec__ada___names__data__name_entry__length positive)(rec__ada___names__data__name_entry__next_hash name_id)))))

(declare-datatypes ()
  ((us_rep2 (us_repqtmk (us_split_fields1 us_split_fields)))))

;; "bool_eq"
(define-fun bool_eq1 ((a us_rep2) (b us_rep2)) Bool
  (ite (and
         (= (to_rep4
              (rec__ada___names__data__name_entry__table_index
                (us_split_fields1 a))) (to_rep4
                                         (rec__ada___names__data__name_entry__table_index
                                           (us_split_fields1 b))))
         (and
           (= (to_rep2
                (rec__ada___names__data__name_entry__length
                  (us_split_fields1 a))) (to_rep2
                                           (rec__ada___names__data__name_entry__length
                                             (us_split_fields1 b))))
           (= (to_rep3
                (rec__ada___names__data__name_entry__next_hash
                  (us_split_fields1 a))) (to_rep3
                                           (rec__ada___names__data__name_entry__next_hash
                                             (us_split_fields1 b))))))
    true
    false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const ada___names__data__name_entry__table_index__first__bit Int)

(declare-const ada___names__data__name_entry__table_index__last__bit Int)

(declare-const ada___names__data__name_entry__table_index__position Int)

;; "ada___names__data__name_entry__table_index__first__bit_axiom"
(assert (<= 0 ada___names__data__name_entry__table_index__first__bit))

;; "ada___names__data__name_entry__table_index__last__bit_axiom"
(assert
  (< ada___names__data__name_entry__table_index__first__bit ada___names__data__name_entry__table_index__last__bit))

;; "ada___names__data__name_entry__table_index__position_axiom"
(assert (<= 0 ada___names__data__name_entry__table_index__position))

(declare-const ada___names__data__name_entry__length__first__bit Int)

(declare-const ada___names__data__name_entry__length__last__bit Int)

(declare-const ada___names__data__name_entry__length__position Int)

;; "ada___names__data__name_entry__length__first__bit_axiom"
(assert (<= 0 ada___names__data__name_entry__length__first__bit))

;; "ada___names__data__name_entry__length__last__bit_axiom"
(assert
  (< ada___names__data__name_entry__length__first__bit ada___names__data__name_entry__length__last__bit))

;; "ada___names__data__name_entry__length__position_axiom"
(assert (<= 0 ada___names__data__name_entry__length__position))

(declare-const ada___names__data__name_entry__next_hash__first__bit Int)

(declare-const ada___names__data__name_entry__next_hash__last__bit Int)

(declare-const ada___names__data__name_entry__next_hash__position Int)

;; "ada___names__data__name_entry__next_hash__first__bit_axiom"
(assert (<= 0 ada___names__data__name_entry__next_hash__first__bit))

;; "ada___names__data__name_entry__next_hash__last__bit_axiom"
(assert
  (< ada___names__data__name_entry__next_hash__first__bit ada___names__data__name_entry__next_hash__last__bit))

;; "ada___names__data__name_entry__next_hash__position_axiom"
(assert (<= 0 ada___names__data__name_entry__next_hash__position))

(declare-const dummy2 us_rep2)

(declare-sort us_rep3 0)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const dummy3 us_rep3)

;; "get"
(declare-fun get (us_rep3
  Int) us_rep2)

;; "model"
(declare-fun model1 (us_rep) us_rep3)

;; "element"
(define-fun element ((param__container us_rep) (param__index Int)) us_rep2
  (get (model1 param__container) param__index))

(declare-datatypes ()
  ((map__ref (map__refqtmk (map__content (Array (_ BitVec 32) name_id))))))

;; "invariant__"
(declare-fun invariant__ ((Array (_ BitVec 32) name_id)
  us_rep1
  us_rep) Bool)

;; "valid_tables"
(declare-fun valid_tables (us_rep1
  us_rep) Bool)

;; "valid_name_table"
(declare-fun valid_name_table (us_rep1
  us_rep) Bool)

;; "valid_hashes"
(declare-fun valid_hashes ((Array (_ BitVec 32) name_id)
  us_rep) Bool)

(declare-const s us_t)

;; "to_string"
(declare-fun to_string (Int
  (Array (_ BitVec 32) name_id)
  us_rep1
  us_rep) us_t)

;; "to_string__function_guard"
(declare-fun to_string__function_guard (us_t
  Int
  (Array (_ BitVec 32) name_id)
  us_rep1
  us_rep) Bool)

(declare-sort us_rep4 0)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; "value__size_axiom"
(assert (<= 0 value__size5))

;; "object__size_axiom"
(assert (<= 0 object__size5))

;; "alignment_axiom"
(assert (<= 0 alignment5))

(declare-const dummy4 us_rep4)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; "value__size_axiom"
(assert (<= 0 value__size6))

;; "object__size_axiom"
(assert (<= 0 object__size6))

;; "alignment_axiom"
(assert (<= 0 alignment6))

(declare-const dummy5 Int)

;; "last"
(declare-fun last1 (us_rep3) Int)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

;; "hash"
(declare-fun hash (us_t) (_ BitVec 32))

(declare-const h (_ BitVec 32))

;; "in_range"
(define-fun in_range6 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

;; "in_range"
(define-fun in_range7 ((x (_ BitVec 32))) Bool
  (and (bvule #x00000000 x) (bvule x #x000000FF)))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size1 Int)

(declare-const alignment7 Int)

;; "value__size_axiom"
(assert (<= 0 value__size7))

;; "object__size_axiom"
(assert (<= 0 object__size7))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment7))

;; "last_index"
(declare-fun last_index1 (us_rep1) Int)

;; "valid_entry"
(declare-fun valid_entry (us_rep2
  us_rep1
  us_rep) Bool)

;; "in_range"
(define-fun in_range8 ((x Int)) Bool
  (and (<= (- 1) x) (<= x 2147483646)))

;; "in_range"
(define-fun in_range9 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "last_index__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (in_range3 (last_index param__container)) :pattern ((last_index
                                                             param__container)) )))

;; "last_index__post_axiom"
(assert
  (forall ((param__container us_rep1))
    (! (in_range8 (last_index1 param__container)) :pattern ((last_index1
                                                              param__container)) )))

;; "valid_tables__post_axiom"
(assert true)

;; "valid_tables__def_axiom"
(assert
  (forall ((Names__char_table___char_table___ us_rep1))
    (forall ((Names__entry_table___entry_table___ us_rep))
      (! (=
           (= (valid_tables
                Names__char_table___char_table___
                Names__entry_table___entry_table___) true)
           (and
             (<= (last_index Names__entry_table___entry_table___) 2147483647)
             (<= (last_index1 Names__char_table___char_table___) 2147483646))) :pattern (
      (valid_tables
        Names__char_table___char_table___
        Names__entry_table___entry_table___)) ))))

;; "valid_entry__post_axiom"
(assert true)

;; "valid_entry__def_axiom"
(assert
  (forall ((param__e us_rep2))
    (forall ((Names__char_table___char_table___ us_rep1))
      (forall ((Names__entry_table___entry_table___ us_rep))
        (! (=
             (= (valid_entry
                  param__e
                  Names__char_table___char_table___
                  Names__entry_table___entry_table___) true)
             (and
               (<= (to_rep3
                     (rec__ada___names__data__name_entry__next_hash
                       (us_split_fields1 param__e))) (last_index
                                                       Names__entry_table___entry_table___))
               (<= (- (to_rep2
                        (rec__ada___names__data__name_entry__length
                          (us_split_fields1 param__e))) 1) (- (last_index1
                                                                Names__char_table___char_table___) 
               (to_rep4
                 (rec__ada___names__data__name_entry__table_index
                   (us_split_fields1 param__e))))))) :pattern ((valid_entry
                                                                 param__e
                                                                 Names__char_table___char_table___
                                                                 Names__entry_table___entry_table___)) )))))

;; "last__post_axiom"
(assert
  (forall ((param__container us_rep3))
    (! (in_range9 (last1 param__container)) :pattern ((last1
                                                        param__container)) )))

;; "get__post_axiom"
(assert true)

;; "model__post_axiom"
(assert
  (forall ((param__container us_rep))
    (! (= (last1 (model1 param__container)) (last_index param__container)) :pattern (
    (model1
      param__container)) )))

;; "valid_name_table__post_axiom"
(assert true)

;; "valid_name_table__def_axiom"
(assert
  (forall ((Names__char_table___char_table___ us_rep1))
    (forall ((Names__entry_table___entry_table___ us_rep))
      (! (=
           (= (valid_name_table
                Names__char_table___char_table___
                Names__entry_table___entry_table___) true)
           (forall ((i Int))
             (=>
               (and
                 (<= 1 i)
                 (<= i (last_index Names__entry_table___entry_table___)))
               (= (valid_entry
                    (element Names__entry_table___entry_table___ i)
                    Names__char_table___char_table___
                    Names__entry_table___entry_table___) true)))) :pattern (
      (valid_name_table
        Names__char_table___char_table___
        Names__entry_table___entry_table___)) ))))

;; "valid_hashes__post_axiom"
(assert true)

;; "valid_hashes__def_axiom"
(assert
  (forall ((Names__hash_table___hash_table___ (Array (_ BitVec 32) name_id)))
    (forall ((Names__entry_table___entry_table___ us_rep))
      (! (=
           (= (valid_hashes
                Names__hash_table___hash_table___
                Names__entry_table___entry_table___) true)
           (forall ((h1 (_ BitVec 32)))
             (=>
               (and (bvule #x00000000 h1) (bvule h1 #x000000FF))
               (<= (to_rep3 (select Names__hash_table___hash_table___ h1)) 
               (last_index
                 Names__entry_table___entry_table___))))) :pattern ((valid_hashes
                                                                    Names__hash_table___hash_table___
                                                                    Names__entry_table___entry_table___)) ))))

;; "invariant____post_axiom"
(assert true)

;; "invariant____def_axiom"
(assert
  (forall ((Names__hash_table___hash_table___ (Array (_ BitVec 32) name_id)))
    (forall ((Names__char_table___char_table___ us_rep1))
      (forall ((Names__entry_table___entry_table___ us_rep))
        (! (=
             (= (invariant__
                  Names__hash_table___hash_table___
                  Names__char_table___char_table___
                  Names__entry_table___entry_table___) true)
             (and
               (and
                 (= (valid_tables
                      Names__char_table___char_table___
                      Names__entry_table___entry_table___) true)
                 (= (valid_name_table
                      Names__char_table___char_table___
                      Names__entry_table___entry_table___) true))
               (= (valid_hashes
                    Names__hash_table___hash_table___
                    Names__entry_table___entry_table___) true))) :pattern (
        (invariant__
          Names__hash_table___hash_table___
          Names__char_table___char_table___
          Names__entry_table___entry_table___)) )))))

;; "hash__post_axiom"
(assert true)

(declare-const entry_table us_rep)

(declare-const char_table us_rep1)

(declare-const hash_table (Array (_ BitVec 32) name_id))

(declare-const n Int)

;; "hash_table'unused"
(define-fun hash_tableqtunused () map__ref
  (map__refqtmk hash_table))

;; "char_table"
(define-fun char_table1 () vector__ref1
  (vector__refqtmk1 char_table))

;; "entry_table"
(define-fun entry_table1 () vector__ref
  (vector__refqtmk entry_table))

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert true)

;; "Assume"
(assert (dynamic_invariant s true false true true))

;; "Assume"
(assert (in_range4 n))

;; "Assume"
(assert (= (invariant__ hash_table char_table entry_table) true))

(declare-const ptr Int)

;; "ptr'unused"
(define-fun ptrqtunused () int__ref
  (int__refqtmk ptr))

;; "H"
(assert (= ptr 0))

;; "Assume"
(assert (in_range4 ptr))

;; "o"
(define-fun o () (_ BitVec 32)
  (hash s))

;; "Ensures"
(assert true)

;; "hash'result'unused"
(define-fun hashqtresultqtunused () (_ BitVec 32)
  o)

;; "o"
(define-fun o1 () (_ BitVec 32)
  (bvurem o #x00000100))

;; "urem_'result'unused"
(define-fun urem_qtresultqtunused () (_ BitVec 32)
  o1)

;; "names__lookup__h__assume'unused"
(define-fun names__lookup__h__assumeqtunused () (_ BitVec 32)
  o1)

;; "Ensures"
(assert (in_range7 o1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () (_ BitVec 32)
  o1)

;; "Assume"
(assert (= o1 h))

;; "Assume"
(assert (in_range7 h))

;; "o"
(define-fun o2 () Int
  (length s))

;; "length'result'unused"
(define-fun lengthqtresultqtunused () Int
  o2)

;; "o"
(define-fun o3 () Bool
  (ite (= o2 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o3)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o3))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

;; "map__content'result'unused"
(define-fun map__contentqtresultqtunused () (Array (_ BitVec 32) name_id)
  hash_table)

;; "o"
(define-fun o4 () name_id
  (select hash_table h))

;; "get'result'unused"
(define-fun getqtresultqtunused () name_id
  o4)

(declare-const o5 Int)

;; "Ensures"
(assert (= (to_rep3 o4) o5))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o5)

(declare-const n1 Int)

;; "n'unused"
(define-fun nqtunused () int__ref
  (int__refqtmk n1))

;; "H"
(assert (= n1 o5))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  n1)

;; "o"
(define-fun o6 () Bool
  (ite (in_range6 n1) true false))

;; "in_range'result'unused"
(define-fun in_rangeqtresultqtunused () Bool
  o6)

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o6))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (= spark__branch1 true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  n1)

(declare-const ptr1 Int)

;; "ptr'unused"
(define-fun ptrqtunused1 () int__ref
  (int__refqtmk ptr1))

;; "H"
(assert (= ptr1 n1))

;; "temp___loop_entry_461'unused"
(define-fun temp___loop_entry_461qtunused () Int
  n1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  n1)

;; "temp___loop_entry_460'unused"
(define-fun temp___loop_entry_460qtunused () Int
  ptr1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  ptr1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  ptr1)

;; "temp___458"
(define-fun temp___458 () us_t
  (to_string ptr1 hash_table char_table entry_table))

;; "H"
(assert
  (to_string__function_guard
    temp___458
    ptr1
    hash_table
    char_table
    entry_table))

;; "H"
(assert (dynamic_invariant temp___458 true false true true))

;; "to_string'result'unused"
(define-fun to_stringqtresultqtunused () us_t
  temp___458)

;; "o"
(define-fun o7 () Int
  (last s))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  o7)

;; "o"
(define-fun o8 () Int
  (first s))

;; "first'result'unused"
(define-fun firstqtresultqtunused () Int
  o8)

;; "o"
(define-fun o9 () (Array Int character)
  (to_array s))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int character)
  o9)

;; "o"
(define-fun o10 () Int
  (last temp___458))

;; "last'result'unused"
(define-fun lastqtresultqtunused1 () Int
  o10)

;; "o"
(define-fun o11 () Int
  (first temp___458))

;; "first'result'unused"
(define-fun firstqtresultqtunused1 () Int
  o11)

;; "o"
(define-fun o12 () (Array Int character)
  (to_array temp___458))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array Int character)
  o12)

;; "o"
(define-fun o13 () Bool
  (bool_eq o12 o11 o10 o9 o8 o7))

;; "bool_eq'result'unused"
(define-fun bool_eqqtresultqtunused () Bool
  o13)

(declare-const spark__branch2 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused2 () bool__ref
  (bool__refqtmk spark__branch2))

;; "H"
(assert (= spark__branch2 o13))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused2 () Bool
  spark__branch2)

;; "H"
(assert (not (= spark__branch2 true)))

;; "o"
(define-fun o14 () Bool
  (invariant__ hash_table char_table entry_table))

;; "Ensures"
(assert
  (=
    (= o14 true)
    (and
      (and
        (= (valid_tables char_table entry_table) true)
        (= (valid_name_table char_table entry_table) true))
      (= (valid_hashes hash_table entry_table) true))))

;; "invariant__'result'unused"
(define-fun invariant__qtresultqtunused () Bool
  o14)

;; "vector__content'result'unused"
(define-fun vector__contentqtresultqtunused () us_rep
  entry_table)

;; "o"
(define-fun o15 () Int
  (last_index entry_table))

;; "Ensures"
(assert (in_range3 o15))

;; "last_index'result'unused"
(define-fun last_indexqtresultqtunused () Int
  o15)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  ptr1)

;; "o"
(define-fun o16 () Bool
  (ite (<= ptr1 o15) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o16)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  ptr1)

;; "o"
(define-fun o17 () Bool
  (ite (in_range6 ptr1) true false))

;; "in_range'result'unused"
(define-fun in_rangeqtresultqtunused1 () Bool
  o17)

;; "o"
(define-fun o18 () Bool
  (and o17 o16))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o18)

;; "andb'result'unused"
(define-fun andbqtresultqtunused1 () Bool
  (and o18 o14))

(declare-const n2 Int)

(declare-const ptr2 Int)

;; "ptr'unused"
(define-fun ptrqtunused2 () int__ref
  (int__refqtmk ptr2))

;; "LoopInvariant"
(assert
  (and
    (and (in_range6 ptr2) (<= ptr2 (last_index entry_table)))
    (= (invariant__ hash_table char_table entry_table) true)))

;; "Assume"
(assert (and (in_range4 ptr2) (= n2 n1)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused7 () Int
  ptr2)

;; "vector__content'result'unused"
(define-fun vector__contentqtresultqtunused1 () us_rep
  entry_table)

;; "o"
(define-fun o19 () us_rep2
  (element entry_table ptr2))

;; "H"
(assert true)

;; "H"
(assert (= (bool_eq1 o19 (get (model1 entry_table) ptr2)) true))

;; "element'result'unused"
(define-fun elementqtresultqtunused () us_rep2
  o19)

;; "o"
(define-fun o20 () us_split_fields
  (us_split_fields1 o19))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields
  o20)

;; "o"
(define-fun o21 () name_id
  (rec__ada___names__data__name_entry__next_hash o20))

;; "rec__ada___names__data__name_entry__next_hash'result'unused"
(define-fun rec__ada___names__data__name_entry__next_hashqtresultqtunused 
  () name_id
  o21)

(declare-const o22 Int)

;; "Ensures"
(assert (= (to_rep3 o21) o22))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o22)

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused1 () Bool
  (ite (= o22 0) true false))

;; "H"
(assert (not (= o22 0)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  ptr2)

;; "vector__content'result'unused"
(define-fun vector__contentqtresultqtunused2 () us_rep
  entry_table)

;; "o"
(define-fun o23 () us_rep2
  (element entry_table ptr2))

;; "H"
(assert true)

;; "H"
(assert (= (bool_eq1 o23 (get (model1 entry_table) ptr2)) true))

;; "element'result'unused"
(define-fun elementqtresultqtunused1 () us_rep2
  o23)

;; "o"
(define-fun o24 () us_split_fields
  (us_split_fields1 o23))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields
  o24)

;; "o"
(define-fun o25 () name_id
  (rec__ada___names__data__name_entry__next_hash o24))

;; "rec__ada___names__data__name_entry__next_hash'result'unused"
(define-fun rec__ada___names__data__name_entry__next_hashqtresultqtunused1 
  () name_id
  o25)

(declare-const o26 Int)

;; "Ensures"
(assert (= (to_rep3 o25) o26))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o26)

(declare-const ptr3 Int)

;; "ptr'unused"
(define-fun ptrqtunused3 () int__ref
  (int__refqtmk ptr3))

;; "H"
(assert (= ptr3 o26))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  ptr3)

;; "temp___458"
(define-fun temp___4581 () us_t
  (to_string ptr3 hash_table char_table entry_table))

;; "H"
(assert
  (to_string__function_guard
    temp___4581
    ptr3
    hash_table
    char_table
    entry_table))

;; "H"
(assert (dynamic_invariant temp___4581 true false true true))

;; "to_string'result'unused"
(define-fun to_stringqtresultqtunused1 () us_t
  temp___4581)

;; "o"
(define-fun o27 () Int
  (last s))

;; "last'result'unused"
(define-fun lastqtresultqtunused2 () Int
  o27)

;; "o"
(define-fun o28 () Int
  (first s))

;; "first'result'unused"
(define-fun firstqtresultqtunused2 () Int
  o28)

;; "o"
(define-fun o29 () (Array Int character)
  (to_array s))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int character)
  o29)

;; "o"
(define-fun o30 () Int
  (last temp___4581))

;; "last'result'unused"
(define-fun lastqtresultqtunused3 () Int
  o30)

;; "o"
(define-fun o31 () Int
  (first temp___4581))

;; "first'result'unused"
(define-fun firstqtresultqtunused3 () Int
  o31)

;; "o"
(define-fun o32 () (Array Int character)
  (to_array temp___4581))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused3 () (Array Int character)
  o32)

;; "o"
(define-fun o33 () Bool
  (bool_eq o32 o31 o30 o29 o28 o27))

;; "bool_eq'result'unused"
(define-fun bool_eqqtresultqtunused1 () Bool
  o33)

(declare-const spark__branch3 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused3 () bool__ref
  (bool__refqtmk spark__branch3))

;; "H"
(assert (= spark__branch3 o33))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused3 () Bool
  spark__branch3)

;; "H"
(assert (not (= spark__branch3 true)))

;; "o"
(define-fun o34 () Bool
  (invariant__ hash_table char_table entry_table))

;; "Ensures"
(assert
  (=
    (= o34 true)
    (and
      (and
        (= (valid_tables char_table entry_table) true)
        (= (valid_name_table char_table entry_table) true))
      (= (valid_hashes hash_table entry_table) true))))

;; "invariant__'result'unused"
(define-fun invariant__qtresultqtunused1 () Bool
  o34)

;; "vector__content'result'unused"
(define-fun vector__contentqtresultqtunused3 () us_rep
  entry_table)

;; "o"
(define-fun o35 () Int
  (last_index entry_table))

;; "Ensures"
(assert (in_range3 o35))

;; "last_index'result'unused"
(define-fun last_indexqtresultqtunused1 () Int
  o35)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  ptr3)

;; "o"
(define-fun o36 () Bool
  (ite (<= ptr3 o35) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o36)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  ptr3)

;; "o"
(define-fun o37 () Bool
  (ite (in_range6 ptr3) true false))

;; "in_range'result'unused"
(define-fun in_rangeqtresultqtunused2 () Bool
  o37)

;; "o"
(define-fun o38 () Bool
  (and o37 o36))

;; "andb'result'unused"
(define-fun andbqtresultqtunused2 () Bool
  o38)

;; "andb'result'unused"
(define-fun andbqtresultqtunused3 () Bool
  (and o38 o34))

;; Goal "def'vc"
;; File "names.ads", line 44, characters 0-0
(assert
  (not (<= ptr3 (last_index entry_table))))

(check-sat)
