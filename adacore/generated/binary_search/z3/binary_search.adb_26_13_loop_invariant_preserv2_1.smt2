;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-const a (Array Int integer))

(declare-const i Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 10)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const left Int)

(declare-const right Int)

(declare-const med Int)

(declare-const binary_search__search__result Int)

;; "med'unused"
(define-fun medqtunused () int__ref
  (int__refqtmk med))

;; "right'unused"
(define-fun rightqtunused () int__ref
  (int__refqtmk right))

;; "left'unused"
(define-fun leftqtunused () int__ref
  (int__refqtmk left))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range i))

;; "Assume"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 10))
      (forall ((i2 Int))
        (=>
          (and (<= i1 i2) (<= i2 10))
          (<= (to_rep (select a i1)) (to_rep (select a i2))))))))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 left))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 right))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 med))

(declare-const left1 Int)

;; "left'unused"
(define-fun leftqtunused1 () int__ref
  (int__refqtmk left1))

;; "H"
(assert (= left1 1))

(declare-const right1 Int)

;; "right'unused"
(define-fun rightqtunused1 () int__ref
  (int__refqtmk right1))

;; "H"
(assert (= right1 10))

(declare-const o Bool)

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused left1))

(declare-const o1 integer)

;; "H"
(assert (= o1 (select a left1)))

(declare-const getqtresultqtunused integer)

;; "H"
(assert (= getqtresultqtunused o1))

(declare-const o2 Int)

;; "Ensures"
(assert (= (to_rep o1) o2))

(declare-const to_repqtresultqtunused Int)

;; "H"
(assert (= to_repqtresultqtunused o2))

(declare-const infix_gtqtresultqtunused Bool)

;; "H"
(assert (= infix_gtqtresultqtunused (ite (< i o2) true false)))

(declare-const int__contentqtresultqtunused1 Int)

(declare-const o3 integer)

(declare-const getqtresultqtunused1 integer)

(declare-const o4 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const infix_lsqtresultqtunused Bool)

;; "H"
(assert
  (ite (< i o2)
    (= o true)
    (and
      (= int__contentqtresultqtunused1 right1)
      (and
        (= o3 (select a right1))
        (and
          (= getqtresultqtunused1 o3)
          (and
            (= (to_rep o3) o4)
            (and
              (= to_repqtresultqtunused1 o4)
              (and
                (= o (ite (< o4 i) true false))
                (= infix_lsqtresultqtunused o)))))))))

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  right1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  left1)

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  (ite (<= left1 right1) true false))

;; "H"
(assert (<= left1 right1))

;; "temp___loop_entry_202'unused"
(define-fun temp___loop_entry_202qtunused () Int
  left1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  left1)

;; "temp___loop_entry_201'unused"
(define-fun temp___loop_entry_201qtunused () Int
  med)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused5 () Int
  med)

;; "temp___loop_entry_200'unused"
(define-fun temp___loop_entry_200qtunused () Int
  right1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused6 () Int
  right1)

(declare-const usf Int)

(declare-const anyqtresultqtunused Int)

;; "H"
(assert (= anyqtresultqtunused usf))

(declare-const indexqtunused Int)

;; "H"
(assert (= indexqtunused usf))

(declare-const int__contentqtresultqtunused7 Int)

;; "H"
(assert (= int__contentqtresultqtunused7 left1))

(declare-const o5 Int)

;; "H"
(assert (= o5 (- left1 1)))

(declare-const infix_mnqtresultqtunused Int)

;; "H"
(assert (= infix_mnqtresultqtunused o5))

(declare-const o6 Bool)

;; "H"
(assert (= o6 (ite (<= usf o5) true false)))

(declare-const infix_lseqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused1 o6))

(declare-const o7 Bool)

;; "H"
(assert (= o7 (ite (<= 1 usf) true false)))

(declare-const infix_lseqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused2 o7))

(declare-const andbqtresultqtunused Bool)

;; "H"
(assert (= andbqtresultqtunused (and o7 o6)))

(declare-const usfqtunused Bool)

;; "H"
(assert
  (= usfqtunused (ite (forall ((index Int))
                        (=>
                          (and (<= 1 index) (<= index (- left1 1)))
                          (< (to_rep (select a index)) i)))
                   true
                   false)))

(declare-const anyqtresultqtunused1 Bool)

;; "H"
(assert
  (= anyqtresultqtunused1 (ite (forall ((index Int))
                                 (=>
                                   (and (<= 1 index) (<= index (- left1 1)))
                                   (< (to_rep (select a index)) i)))
                            true
                            false)))

(declare-const usfqtunused1 Bool)

(declare-const anyqtresultqtunused2 Bool)

(declare-const usf1 Int)

(declare-const anyqtresultqtunused3 Int)

(declare-const indexqtunused1 Int)

(declare-const o8 Bool)

(declare-const infix_lseqqtresultqtunused3 Bool)

(declare-const int__contentqtresultqtunused8 Int)

(declare-const o9 Int)

(declare-const infix_plqtresultqtunused Int)

(declare-const o10 Bool)

(declare-const infix_lseqqtresultqtunused4 Bool)

(declare-const andbqtresultqtunused1 Bool)

;; "H"
(assert
  (=>
    (forall ((index Int))
      (=>
        (and (<= 1 index) (<= index (- left1 1)))
        (< (to_rep (select a index)) i)))
    (and
      (and
        (= anyqtresultqtunused3 usf1)
        (and
          (= indexqtunused1 usf1)
          (and
            (= o8 (ite (<= usf1 10) true false))
            (and
              (= infix_lseqqtresultqtunused3 o8)
              (and
                (= int__contentqtresultqtunused8 right1)
                (and
                  (= o9 (+ right1 1))
                  (and
                    (= infix_plqtresultqtunused o9)
                    (and
                      (= o10 (ite (<= o9 usf1) true false))
                      (and
                        (= infix_lseqqtresultqtunused4 o10)
                        (= andbqtresultqtunused1 (and o10 o8)))))))))))
      (and
        (= usfqtunused1 (ite (forall ((index Int))
                               (=>
                                 (and (<= (+ right1 1) index) (<= index 10))
                                 (< i (to_rep (select a index)))))
                          true
                          false))
        (= anyqtresultqtunused2 (ite (forall ((index Int))
                                       (=>
                                         (and
                                           (<= (+ right1 1) index)
                                           (<= index 10))
                                         (< i (to_rep (select a index)))))
                                  true
                                  false))))))

(declare-const left2 Int)

(declare-const right2 Int)

(declare-const med1 Int)

;; "right'unused"
(define-fun rightqtunused2 () int__ref
  (int__refqtmk right2))

;; "left'unused"
(define-fun leftqtunused2 () int__ref
  (int__refqtmk left2))

;; "LoopInvariant"
(assert
  (and
    (forall ((index Int))
      (=>
        (and (<= 1 index) (<= index (- left2 1)))
        (< (to_rep (select a index)) i)))
    (forall ((index Int))
      (=>
        (and (<= (+ right2 1) index) (<= index 10))
        (< i (to_rep (select a index)))))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  left2)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  right2)

;; "loop_var___3400"
(define-fun loop_var___3400 () Int
  (- right2 left2))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused1 () Int
  loop_var___3400)

;; "Assume"
(assert
  (= (and (ite (and
                 (and (in_range1 right2) (in_range1 med1))
                 (in_range1 left2))
            true
            false) (ite (<= left2 right2) true false)) true))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  left2)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  right2)

;; "o"
(define-fun o11 () Int
  (- right2 left2))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused2 () Int
  o11)

;; "o"
(define-fun o12 () Int
  (__cdiv o11 2))

;; "div_'result'unused"
(define-fun div_qtresultqtunused () Int
  o12)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused13 () Int
  left2)

;; "o"
(define-fun o13 () Int
  (+ left2 o12))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused1 () Int
  o13)

;; "Ensures"
(assert (in_range1 o13))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o13)

(declare-const med2 Int)

;; "med'unused"
(define-fun medqtunused1 () int__ref
  (int__refqtmk med2))

;; "H"
(assert (= med2 o13))

(declare-const left3 Int)

(declare-const right3 Int)

;; "right'unused"
(define-fun rightqtunused3 () int__ref
  (int__refqtmk right3))

;; "left'unused"
(define-fun leftqtunused3 () int__ref
  (int__refqtmk left3))

(declare-const int__contentqtresultqtunused14 Int)

;; "H"
(assert (= int__contentqtresultqtunused14 med2))

(declare-const o14 integer)

;; "H"
(assert (= o14 (select a med2)))

(declare-const getqtresultqtunused2 integer)

;; "H"
(assert (= getqtresultqtunused2 o14))

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep o14) o15))

(declare-const to_repqtresultqtunused2 Int)

;; "H"
(assert (= to_repqtresultqtunused2 o15))

(declare-const o16 Bool)

;; "H"
(assert (= o16 (ite (< o15 i) true false)))

(declare-const infix_lsqtresultqtunused1 Bool)

;; "H"
(assert (= infix_lsqtresultqtunused1 o16))

(declare-const spark__branch1 Bool)

(declare-const spark__branchqtunused1 bool__ref)

;; "H"
(assert (= spark__branchqtunused1 (bool__refqtmk spark__branch1)))

;; "H"
(assert (= spark__branch1 o16))

(declare-const bool__contentqtresultqtunused1 Bool)

;; "H"
(assert (= bool__contentqtresultqtunused1 spark__branch1))

(declare-const int__contentqtresultqtunused15 Int)

(declare-const o17 integer)

(declare-const getqtresultqtunused3 integer)

(declare-const o18 Int)

(declare-const to_repqtresultqtunused3 Int)

(declare-const o19 Bool)

(declare-const infix_gtqtresultqtunused1 Bool)

(declare-const spark__branch2 Bool)

(declare-const spark__branchqtunused2 bool__ref)

(declare-const bool__contentqtresultqtunused2 Bool)

(declare-const int__contentqtresultqtunused16 Int)

(declare-const o20 Int)

(declare-const infix_mnqtresultqtunused3 Int)

(declare-const range_check_qtresultqtunused1 Int)

(declare-const int__contentqtresultqtunused17 Int)

(declare-const o21 Int)

(declare-const infix_plqtresultqtunused2 Int)

(declare-const range_check_qtresultqtunused2 Int)

;; "H"
(assert
  (ite (= spark__branch1 true)
    (and
      (and
        (= int__contentqtresultqtunused17 med2)
        (and
          (= o21 (+ med2 1))
          (and
            (= infix_plqtresultqtunused2 o21)
            (and
              (in_range1 o21)
              (and (= range_check_qtresultqtunused2 o21) (= left3 o21))))))
      (= right3 right2))
    (and
      (and
        (= int__contentqtresultqtunused15 med2)
        (and
          (= o17 (select a med2))
          (and
            (= getqtresultqtunused3 o17)
            (and
              (= (to_rep o17) o18)
              (and
                (= to_repqtresultqtunused3 o18)
                (and
                  (= o19 (ite (< i o18) true false))
                  (and
                    (= infix_gtqtresultqtunused1 o19)
                    (and
                      (= spark__branchqtunused2 (bool__refqtmk
                                                  spark__branch2))
                      (and
                        (= spark__branch2 o19)
                        (and
                          (= bool__contentqtresultqtunused2 spark__branch2)
                          (and
                            (= spark__branch2 true)
                            (and
                              (= int__contentqtresultqtunused16 med2)
                              (and
                                (= o20 (- med2 1))
                                (and
                                  (= infix_mnqtresultqtunused3 o20)
                                  (and
                                    (in_range1 o20)
                                    (and
                                      (= range_check_qtresultqtunused1 
                                      o20)
                                      (= right3 o20)))))))))))))))))
      (= left3 left2))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused18 () Int
  right3)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused19 () Int
  left3)

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused5 () Bool
  (ite (<= left3 right3) true false))

;; "H"
(assert (<= left3 right3))

(declare-const usf2 Int)

(declare-const anyqtresultqtunused4 Int)

;; "H"
(assert (= anyqtresultqtunused4 usf2))

(declare-const indexqtunused2 Int)

;; "H"
(assert (= indexqtunused2 usf2))

(declare-const int__contentqtresultqtunused20 Int)

;; "H"
(assert (= int__contentqtresultqtunused20 left3))

(declare-const o22 Int)

;; "H"
(assert (= o22 (- left3 1)))

(declare-const infix_mnqtresultqtunused4 Int)

;; "H"
(assert (= infix_mnqtresultqtunused4 o22))

(declare-const o23 Bool)

;; "H"
(assert (= o23 (ite (<= usf2 o22) true false)))

(declare-const infix_lseqqtresultqtunused6 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused6 o23))

(declare-const o24 Bool)

;; "H"
(assert (= o24 (ite (<= 1 usf2) true false)))

(declare-const infix_lseqqtresultqtunused7 Bool)

;; "H"
(assert (= infix_lseqqtresultqtunused7 o24))

(declare-const andbqtresultqtunused2 Bool)

;; "H"
(assert (= andbqtresultqtunused2 (and o24 o23)))

(declare-const usfqtunused2 Bool)

;; "H"
(assert
  (= usfqtunused2 (ite (forall ((index Int))
                         (=>
                           (and (<= 1 index) (<= index (- left3 1)))
                           (< (to_rep (select a index)) i)))
                    true
                    false)))

(declare-const anyqtresultqtunused5 Bool)

;; "H"
(assert
  (= anyqtresultqtunused5 (ite (forall ((index Int))
                                 (=>
                                   (and (<= 1 index) (<= index (- left3 1)))
                                   (< (to_rep (select a index)) i)))
                            true
                            false)))

(declare-const usfqtunused3 Bool)

(declare-const anyqtresultqtunused6 Bool)

(declare-const usf3 Int)

(declare-const anyqtresultqtunused7 Int)

(declare-const indexqtunused3 Int)

(declare-const o25 Bool)

(declare-const infix_lseqqtresultqtunused8 Bool)

(declare-const int__contentqtresultqtunused21 Int)

(declare-const o26 Int)

(declare-const infix_plqtresultqtunused3 Int)

(declare-const o27 Bool)

(declare-const infix_lseqqtresultqtunused9 Bool)

(declare-const andbqtresultqtunused3 Bool)

;; "H"
(assert
  (=>
    (forall ((index Int))
      (=>
        (and (<= 1 index) (<= index (- left3 1)))
        (< (to_rep (select a index)) i)))
    (and
      (and
        (= anyqtresultqtunused7 usf3)
        (and
          (= indexqtunused3 usf3)
          (and
            (= o25 (ite (<= usf3 10) true false))
            (and
              (= infix_lseqqtresultqtunused8 o25)
              (and
                (= int__contentqtresultqtunused21 right3)
                (and
                  (= o26 (+ right3 1))
                  (and
                    (= infix_plqtresultqtunused3 o26)
                    (and
                      (= o27 (ite (<= o26 usf3) true false))
                      (and
                        (= infix_lseqqtresultqtunused9 o27)
                        (= andbqtresultqtunused3 (and o27 o25)))))))))))
      (and
        (= usfqtunused3 (ite (forall ((index Int))
                               (=>
                                 (and (<= (+ right3 1) index) (<= index 10))
                                 (< i (to_rep (select a index)))))
                          true
                          false))
        (= anyqtresultqtunused6 (ite (forall ((index Int))
                                       (=>
                                         (and
                                           (<= (+ right3 1) index)
                                           (<= index 10))
                                         (< i (to_rep (select a index)))))
                                  true
                                  false))))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused22 () Int
  left3)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused23 () Int
  right3)

;; "loop_var_new___3400"
(define-fun loop_var_new___3400 () Int
  (- right3 left3))

;; "infix -'result'unused"
(define-fun infix_mnqtresultqtunused5 () Int
  loop_var_new___3400)

;; "H"
(assert (< loop_var_new___3400 loop_var___3400))

(declare-const index Int)

;; "H"
(assert (<= (+ right3 1) index))

;; "H"
(assert (<= index 10))

;; Goal "def'vc"
;; File "binary_search.ads", line 17, characters 0-0
(assert
  (not (< i (to_rep (select a index)))))

(check-sat)
