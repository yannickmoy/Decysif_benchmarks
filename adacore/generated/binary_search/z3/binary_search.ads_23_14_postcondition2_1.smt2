;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-const a (Array Int integer))

(declare-const i Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 10)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const left Int)

(declare-const right Int)

(declare-const med Int)

(declare-const binary_search__search__result Int)

;; "med'unused"
(define-fun medqtunused () int__ref
  (int__refqtmk med))

;; "right'unused"
(define-fun rightqtunused () int__ref
  (int__refqtmk right))

;; "left'unused"
(define-fun leftqtunused () int__ref
  (int__refqtmk left))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range i))

;; "Assume"
(assert
  (forall ((i1 Int))
    (=>
      (and (<= 1 i1) (<= i1 10))
      (forall ((i2 Int))
        (=>
          (and (<= i1 i2) (<= i2 10))
          (<= (to_rep (select a i1)) (to_rep (select a i2))))))))

(declare-const binary_search__search__result1 Int)

;; "binary_search__search__result'unused"
(define-fun binary_search__search__resultqtunused () int__ref
  (int__refqtmk binary_search__search__result1))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 left))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 right))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range1 med))

(declare-const left1 Int)

(declare-const leftqtunused1 int__ref)

;; "H"
(assert (= leftqtunused1 (int__refqtmk left1)))

;; "H"
(assert (= left1 1))

(declare-const right1 Int)

(declare-const rightqtunused1 int__ref)

;; "H"
(assert (= rightqtunused1 (int__refqtmk right1)))

;; "H"
(assert (= right1 10))

(declare-const int__contentqtresultqtunused Int)

;; "H"
(assert (= int__contentqtresultqtunused left1))

(declare-const o integer)

;; "H"
(assert (= o (select a left1)))

(declare-const getqtresultqtunused integer)

;; "H"
(assert (= getqtresultqtunused o))

(declare-const o1 Int)

;; "Ensures"
(assert (= (to_rep o) o1))

(declare-const to_repqtresultqtunused Int)

;; "H"
(assert (= to_repqtresultqtunused o1))

(declare-const infix_gtqtresultqtunused Bool)

;; "H"
(assert (= infix_gtqtresultqtunused (ite (< i o1) true false)))

(declare-const o2 Bool)

(declare-const int__contentqtresultqtunused1 Int)

(declare-const o3 integer)

(declare-const getqtresultqtunused1 integer)

(declare-const o4 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const infix_lsqtresultqtunused Bool)

;; "H"
(assert
  (ite (< i o1)
    (= o2 true)
    (and
      (= int__contentqtresultqtunused1 right1)
      (and
        (= o3 (select a right1))
        (and
          (= getqtresultqtunused1 o3)
          (and
            (= (to_rep o3) o4)
            (and
              (= to_repqtresultqtunused1 o4)
              (and
                (= o2 (ite (< o4 i) true false))
                (= infix_lsqtresultqtunused o2)))))))))

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

;; "H"
(assert (= spark__branchqtunused (bool__refqtmk spark__branch)))

;; "H"
(assert (= spark__branch o2))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

;; "H"
(assert
  (ite (= spark__branch true)
    (= binary_search__search__result1 0)
    (or
      (and
        (<= left1 right1)
        (exists ((left2 Int) (right2 Int) (med1 Int))
          (and
            (and
              (forall ((index Int))
                (=>
                  (and (<= 1 index) (<= index (- left2 1)))
                  (< (to_rep (select a index)) i)))
              (forall ((index Int))
                (=>
                  (and (<= (+ right2 1) index) (<= index 10))
                  (< i (to_rep (select a index))))))
            (and
              (= (and (ite (and
                             (and (in_range1 right2) (in_range1 med1))
                             (in_range1 left2))
                        true
                        false) (ite (<= left2 right2) true false)) true)
              (let ((o5 (+ left2 (__cdiv (- right2 left2) 2))))
                (and
                  (in_range1 o5)
                  (exists ((med2 Int))
                    (and
                      (= med2 o5)
                      (exists ((o6 Int))
                        (and
                          (= (to_rep (select a med2)) o6)
                          (exists ((spark__branch1 Bool))
                            (and
                              (= spark__branch1 (ite (< o6 i) true false))
                              (and
                                (not (= spark__branch1 true))
                                (exists ((o7 Int))
                                  (and
                                    (= (to_rep (select a med2)) o7)
                                    (exists ((spark__branch2 Bool))
                                      (and
                                        (= spark__branch2 (ite (< i o7)
                                                            true
                                                            false))
                                        (and
                                          (not (= spark__branch2 true))
                                          (= binary_search__search__result1 med2)))))))))))))))))))
      (exists ((binary_search__search__result2 Int))
        (and
          (ite (<= left1 right1)
            (exists ((left2 Int) (right2 Int) (med1 Int))
              (and
                (and
                  (forall ((index Int))
                    (=>
                      (and (<= 1 index) (<= index (- left2 1)))
                      (< (to_rep (select a index)) i)))
                  (forall ((index Int))
                    (=>
                      (and (<= (+ right2 1) index) (<= index 10))
                      (< i (to_rep (select a index))))))
                (and
                  (= (and (ite (and
                                 (and (in_range1 right2) (in_range1 med1))
                                 (in_range1 left2))
                            true
                            false) (ite (<= left2 right2) true false)) true)
                  (let ((o5 (+ left2 (__cdiv (- right2 left2) 2))))
                    (and
                      (in_range1 o5)
                      (exists ((med2 Int))
                        (and
                          (= med2 o5)
                          (exists ((left3 Int) (right3 Int))
                            (and
                              (exists ((o6 Int))
                                (and
                                  (= (to_rep (select a med2)) o6)
                                  (exists ((spark__branch1 Bool))
                                    (and
                                      (= spark__branch1 (ite (< o6 i)
                                                          true
                                                          false))
                                      (ite (= spark__branch1 true)
                                        (and
                                          (let ((o7 (+ med2 1)))
                                            (and (in_range1 o7) (= left3 o7)))
                                          (= right3 right2))
                                        (and
                                          (exists ((o7 Int))
                                            (and
                                              (= (to_rep (select a med2)) o7)
                                              (exists ((spark__branch2 Bool))
                                                (and
                                                  (= spark__branch2 (ite (< 
                                                                    i o7)
                                                                    true
                                                                    false))
                                                  (and
                                                    (= spark__branch2 true)
                                                    (let ((o8 (- med2 1)))
                                                      (and
                                                        (in_range1 o8)
                                                        (= right3 o8))))))))
                                          (= left3 left2)))))))
                              (not (<= left3 right3)))))))))))
            (= binary_search__search__result2 binary_search__search__result))
          (= binary_search__search__result1 0))))))

;; "result'unused"
(define-fun resultqtunused () Int
  binary_search__search__result1)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  binary_search__search__result1)

;; "H"
(assert
  (not
    (and
      (<= 1 binary_search__search__result1)
      (<= binary_search__search__result1 10))))

(declare-const index Int)

;; "H"
(assert (<= 1 index))

;; "H"
(assert (<= index 10))

;; Goal "def'vc"
;; File "binary_search.ads", line 17, characters 0-0
(assert
  (not (not (= (to_rep (select a index)) i))))

(check-sat)
