;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

(declare-const a (Array Int integer))

(declare-const i Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 10)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; Goal "def'vc"
;; File "binary_search.ads", line 17, characters 0-0
(assert
  (not
  (forall ((left Int) (right Int) (med Int) (binary_search__search__result Int))
    (=>
      (in_range i)
      (=>
        (forall ((i1 Int))
          (=>
            (and (<= 1 i1) (<= i1 10))
            (forall ((i2 Int))
              (=>
                (and (<= i1 i2) (<= i2 10))
                (<= (to_rep (select a i1)) (to_rep (select a i2)))))))
        (forall ((binary_search__search__result1 Int))
          (=>
            (and
              (in_range1 left)
              (and
                (in_range1 right)
                (and
                  (in_range1 med)
                  (exists ((left1 Int))
                    (and
                      (= left1 1)
                      (exists ((right1 Int))
                        (and
                          (= right1 10)
                          (exists ((o Bool))
                            (and
                              (exists ((o1 Int))
                                (and
                                  (= (to_rep (select a left1)) o1)
                                  (ite (< i o1)
                                    (= o true)
                                    (exists ((o2 Int))
                                      (and
                                        (= (to_rep (select a right1)) o2)
                                        (= o (ite (< o2 i) true false)))))))
                              (exists ((spark__branch Bool))
                                (and
                                  (= spark__branch o)
                                  (ite (= spark__branch true)
                                    (= binary_search__search__result1 0)
                                    (or
                                      (and
                                        (<= left1 right1)
                                        (exists ((left2 Int) (right2 Int) (med1 Int))
                                          (and
                                            (and
                                              (forall ((index Int))
                                                (=>
                                                  (and
                                                    (<= 1 index)
                                                    (<= index (- left2 1)))
                                                  (< (to_rep
                                                       (select a index)) 
                                                  i)))
                                              (forall ((index Int))
                                                (=>
                                                  (and
                                                    (<= (+ right2 1) index)
                                                    (<= index 10))
                                                  (< i (to_rep
                                                         (select a index))))))
                                            (and
                                              (= (and (ite (and
                                                             (and
                                                               (in_range1
                                                                 right2)
                                                               (in_range1
                                                                 med1))
                                                             (in_range1
                                                               left2))
                                                        true
                                                        false) (ite (<= left2 right2)
                                                                 true
                                                                 false)) true)
                                              (let ((o1 (+ left2 (__cdiv (- right2 left2) 2))))
                                                (and
                                                  (in_range1 o1)
                                                  (exists ((med2 Int))
                                                    (and
                                                      (= med2 o1)
                                                      (exists ((o2 Int))
                                                        (and
                                                          (= (to_rep
                                                               (select 
                                                               a med2)) o2)
                                                          (exists ((spark__branch1 Bool))
                                                            (and
                                                              (= spark__branch1 
                                                              (ite (< o2 
                                                                i)
                                                                true
                                                                false))
                                                              (and
                                                                (not
                                                                  (= spark__branch1 true))
                                                                (exists 
                                                                  ((o3 Int))
                                                                  (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    a med2)) o3)
                                                                    (exists 
                                                                    ((spark__branch2 Bool))
                                                                    (and
                                                                    (= spark__branch2 
                                                                    (ite (< 
                                                                    i o3)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (not
                                                                    (= spark__branch2 true))
                                                                    (= binary_search__search__result1 med2)))))))))))))))))))
                                      (exists ((binary_search__search__result2 Int))
                                        (and
                                          (ite (<= left1 right1)
                                            (exists ((left2 Int) (right2 Int) (med1 Int))
                                              (and
                                                (and
                                                  (forall ((index Int))
                                                    (=>
                                                      (and
                                                        (<= 1 index)
                                                        (<= index (- left2 1)))
                                                      (< (to_rep
                                                           (select a index)) 
                                                      i)))
                                                  (forall ((index Int))
                                                    (=>
                                                      (and
                                                        (<= (+ right2 1) index)
                                                        (<= index 10))
                                                      (< i (to_rep
                                                             (select 
                                                             a index))))))
                                                (and
                                                  (= (and (ite (and
                                                                 (and
                                                                   (in_range1
                                                                    right2)
                                                                   (in_range1
                                                                    med1))
                                                                 (in_range1
                                                                   left2))
                                                            true
                                                            false) (ite (<= left2 right2)
                                                                    true
                                                                    false)) true)
                                                  (let ((o1 (+ left2 (__cdiv (- right2 left2) 2))))
                                                    (and
                                                      (in_range1 o1)
                                                      (exists ((med2 Int))
                                                        (and
                                                          (= med2 o1)
                                                          (exists ((left3 Int) (right3 Int))
                                                            (and
                                                              (exists 
                                                                ((o2 Int))
                                                                (and
                                                                  (= 
                                                                  (to_rep
                                                                    (select 
                                                                    a med2)) o2)
                                                                  (exists 
                                                                    ((spark__branch1 Bool))
                                                                    (and
                                                                    (= spark__branch1 
                                                                    (ite (< o2 
                                                                    i)
                                                                    true
                                                                    false))
                                                                    (ite (= spark__branch1 true)
                                                                    (and
                                                                    (let ((o3 (+ med2 1)))
                                                                    (and
                                                                    (in_range1
                                                                    o3)
                                                                    (= left3 o3)))
                                                                    (= right3 right2))
                                                                    (and
                                                                    (exists 
                                                                    ((o3 Int))
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    (select 
                                                                    a med2)) o3)
                                                                    (exists 
                                                                    ((spark__branch2 Bool))
                                                                    (and
                                                                    (= spark__branch2 
                                                                    (ite (< 
                                                                    i o3)
                                                                    true
                                                                    false))
                                                                    (and
                                                                    (= spark__branch2 true)
                                                                    (let ((o4 (- med2 1)))
                                                                    (and
                                                                    (in_range1
                                                                    o4)
                                                                    (= right3 o4))))))))
                                                                    (= left3 left2)))))))
                                                              (not
                                                                (<= left3 right3)))))))))))
                                            (= binary_search__search__result2 binary_search__search__result))
                                          (= binary_search__search__result1 0))))))))))))))))
            (=>
              (not
                (and
                  (<= 1 binary_search__search__result1)
                  (<= binary_search__search__result1 10)))
              (forall ((index Int))
                (=>
                  (and (<= 1 index) (<= index 10))
                  (not (= (to_rep (select a index)) i))))))))))))

(check-sat)
(get-info :reason-unknown)
