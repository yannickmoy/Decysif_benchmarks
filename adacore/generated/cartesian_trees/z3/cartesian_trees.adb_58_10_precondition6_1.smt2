;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__cartesian_trees__tree_cell__left natural)(rec__cartesian_trees__tree_cell__right natural)(rec__cartesian_trees__tree_cell__parent natural)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-const cartesian_trees__tree_cell__left__first__bit Int)

(declare-const cartesian_trees__tree_cell__left__last__bit Int)

(declare-const cartesian_trees__tree_cell__left__position Int)

;; "cartesian_trees__tree_cell__left__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__left__first__bit))

;; "cartesian_trees__tree_cell__left__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__left__first__bit cartesian_trees__tree_cell__left__last__bit))

;; "cartesian_trees__tree_cell__left__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__left__position))

(declare-const cartesian_trees__tree_cell__right__first__bit Int)

(declare-const cartesian_trees__tree_cell__right__last__bit Int)

(declare-const cartesian_trees__tree_cell__right__position Int)

;; "cartesian_trees__tree_cell__right__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__right__first__bit))

;; "cartesian_trees__tree_cell__right__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__right__first__bit cartesian_trees__tree_cell__right__last__bit))

;; "cartesian_trees__tree_cell__right__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__right__position))

(declare-const cartesian_trees__tree_cell__parent__first__bit Int)

(declare-const cartesian_trees__tree_cell__parent__last__bit Int)

(declare-const cartesian_trees__tree_cell__parent__position Int)

;; "cartesian_trees__tree_cell__parent__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__parent__first__bit))

;; "cartesian_trees__tree_cell__parent__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__parent__first__bit cartesian_trees__tree_cell__parent__last__bit))

;; "cartesian_trees__tree_cell__parent__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__parent__position))

(declare-const dummy us_rep)

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range2 low)
    (and
      (in_range2 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int us_rep))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int us_rep)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment1))

;; "valid_tree_cell"
(define-fun valid_tree_cell ((param__t us_t)) Bool
  (and (and (ite (forall ((x Int))
                   (=>
                     (and (<= (first param__t) x) (<= x (last param__t)))
                     (or
                       (= (to_rep
                            (rec__cartesian_trees__tree_cell__left
                              (us_split_fields1
                                (select (to_array param__t) x)))) 0)
                       (let ((temp___174 (to_rep
                                           (rec__cartesian_trees__tree_cell__left
                                             (us_split_fields1
                                               (select (to_array param__t) x))))))
                         (and
                           (<= (first param__t) temp___174)
                           (<= temp___174 (last param__t)))))))
              true
              false) (ite (forall ((x Int))
                            (=>
                              (and
                                (<= (first param__t) x)
                                (<= x (last param__t)))
                              (or
                                (= (to_rep
                                     (rec__cartesian_trees__tree_cell__right
                                       (us_split_fields1
                                         (select (to_array param__t) x)))) 0)
                                (let ((temp___176 (to_rep
                                                    (rec__cartesian_trees__tree_cell__right
                                                      (us_split_fields1
                                                        (select (to_array
                                                                  param__t) x))))))
                                  (and
                                    (<= (first param__t) temp___176)
                                    (<= temp___176 (last param__t)))))))
                       true
                       false)) (ite (forall ((x Int))
                                      (=>
                                        (and
                                          (<= (first param__t) x)
                                          (<= x (last param__t)))
                                        (or
                                          (= (to_rep
                                               (rec__cartesian_trees__tree_cell__parent
                                                 (us_split_fields1
                                                   (select (to_array
                                                             param__t) x)))) 0)
                                          (let ((temp___178 (to_rep
                                                              (rec__cartesian_trees__tree_cell__parent
                                                                (us_split_fields1
                                                                  (select 
                                                                  (to_array
                                                                    param__t) x))))))
                                            (and
                                              (<= (first param__t) temp___178)
                                              (<= temp___178 (last param__t)))))))
                                 true
                                 false)))

;; "well_formed"
(define-fun well_formed ((param__t us_t) (param__x Int)) Bool
  (and (and (ite (not
                   (= (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array param__t) param__x)))) 0))
              (and (< (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array param__t) param__x)))) param__x) (= 
              (to_rep
                (rec__cartesian_trees__tree_cell__parent
                  (us_split_fields1
                    (select (to_array param__t) (to_rep
                                                  (rec__cartesian_trees__tree_cell__left
                                                    (us_split_fields1
                                                      (select (to_array
                                                                param__t) param__x)))))))) param__x))
              (distinct 1 0)) (ite (not
                                     (= (to_rep
                                          (rec__cartesian_trees__tree_cell__right
                                            (us_split_fields1
                                              (select (to_array param__t) param__x)))) 0))
                                (and (< param__x (to_rep
                                                   (rec__cartesian_trees__tree_cell__right
                                                     (us_split_fields1
                                                       (select (to_array
                                                                 param__t) param__x))))) (= 
                                (to_rep
                                  (rec__cartesian_trees__tree_cell__parent
                                    (us_split_fields1
                                      (select (to_array param__t) (to_rep
                                                                    (rec__cartesian_trees__tree_cell__right
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (to_array
                                                                    param__t) param__x)))))))) param__x))
                                (distinct 1 0))) (ite (not
                                                        (= (to_rep
                                                             (rec__cartesian_trees__tree_cell__parent
                                                               (us_split_fields1
                                                                 (select 
                                                                 (to_array
                                                                   param__t) param__x)))) 0))
                                                   (ite (< param__x (to_rep
                                                                    (rec__cartesian_trees__tree_cell__parent
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (to_array
                                                                    param__t) param__x)))))
                                                     (= (to_rep
                                                          (rec__cartesian_trees__tree_cell__left
                                                            (us_split_fields1
                                                              (select 
                                                              (to_array
                                                                param__t) 
                                                              (to_rep
                                                                (rec__cartesian_trees__tree_cell__parent
                                                                  (us_split_fields1
                                                                    (select 
                                                                    (to_array
                                                                    param__t) param__x)))))))) param__x)
                                                     (= (to_rep
                                                          (rec__cartesian_trees__tree_cell__right
                                                            (us_split_fields1
                                                              (select 
                                                              (to_array
                                                                param__t) 
                                                              (to_rep
                                                                (rec__cartesian_trees__tree_cell__parent
                                                                  (us_split_fields1
                                                                    (select 
                                                                    (to_array
                                                                    param__t) param__x)))))))) param__x))
                                                   (distinct 1 0))))

;; "well_formed"
(declare-fun well_formed1 (us_t) Bool)

;; "belongs_to"
(declare-fun belongs_to (us_t
  Int
  Int) Bool)

(declare-const t1 us_t)

(declare-const r Int)

(declare-const x Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_251 us_t) (temp___is_init_247 Bool) (temp___skip_constant_248 Bool) (temp___do_toplevel_249 Bool) (temp___do_typ_inv_250 Bool)) Bool
  (=>
    (not (= temp___skip_constant_248 true))
    (dynamic_property
      1
      2147483646
      (first temp___expr_251)
      (last temp___expr_251))))

;; "well_formed__post_axiom"
(assert true)

;; "well_formed__def_axiom"
(assert
  (forall ((param__t us_t))
    (! (=
         (= (well_formed1 param__t) true)
         (forall ((x1 Int))
           (=>
             (and (<= (first param__t) x1) (<= x1 (last param__t)))
             (= (well_formed param__t x1) true)))) :pattern ((well_formed1
                                                               param__t)) )))

;; "belongs_to__post_axiom"
(assert true)

;; "belongs_to__def_axiom"
(assert
  (forall ((param__t us_t))
    (forall ((param__r Int) (param__x Int))
      (! (=
           (= (belongs_to param__t param__r param__x) true)
           (or
             (or
               (= param__r param__x)
               (and
                 (not
                   (= (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array param__t) param__r)))) 0))
                 (= (belongs_to
                      param__t
                      (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array param__t) param__r))))
                      param__x) true)))
             (and
               (not
                 (= (to_rep
                      (rec__cartesian_trees__tree_cell__right
                        (us_split_fields1
                          (select (to_array param__t) param__r)))) 0))
               (= (belongs_to
                    param__t
                    (to_rep
                      (rec__cartesian_trees__tree_cell__right
                        (us_split_fields1
                          (select (to_array param__t) param__r))))
                    param__x) true)))) :pattern ((belongs_to
                                                   param__t
                                                   param__r
                                                   param__x)) ))))

;; "Assume"
(assert (dynamic_invariant t1 true false true true))

;; "Assume"
(assert (in_range1 r))

;; "Assume"
(assert (in_range1 x))

;; "Assume"
(assert
  (and
    (and
      (and
        (and
          (and (<= (first t1) r) (<= r (last t1)))
          (and (<= (first t1) x) (<= x (last t1))))
        (= (valid_tree_cell t1) true))
      (= (well_formed1 t1) true))
    (= (belongs_to t1 r x) true)))

;; "o"
(define-fun o () Bool
  (ite (= x r) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o)

(declare-const spark__branch Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch))

;; "H"
(assert (= spark__branch o))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch)

;; "H"
(assert (not (= spark__branch true)))

(declare-const o1 Bool)

;; "Assert"
(assert (and (<= (first t1) r) (<= r (last t1))))

(declare-const o2 (Array Int us_rep))

;; "H"
(assert (= o2 (to_array t1)))

(declare-const to_arrayqtresultqtunused (Array Int us_rep))

;; "H"
(assert (= to_arrayqtresultqtunused o2))

(declare-const o3 us_rep)

;; "H"
(assert (= o3 (select o2 r)))

(declare-const getqtresultqtunused us_rep)

;; "H"
(assert (= getqtresultqtunused o3))

(declare-const o4 us_split_fields)

;; "H"
(assert (= o4 (us_split_fields1 o3)))

(declare-const us_split_fieldsqtresultqtunused us_split_fields)

;; "H"
(assert (= us_split_fieldsqtresultqtunused o4))

(declare-const o5 natural)

;; "H"
(assert (= o5 (rec__cartesian_trees__tree_cell__left o4)))

(declare-const rec__cartesian_trees__tree_cell__leftqtresultqtunused natural)

;; "H"
(assert (= rec__cartesian_trees__tree_cell__leftqtresultqtunused o5))

(declare-const o6 Int)

;; "Ensures"
(assert (= (to_rep o5) o6))

(declare-const to_repqtresultqtunused Int)

;; "H"
(assert (= to_repqtresultqtunused o6))

(declare-const infix_eqqtresultqtunused1 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused1 (ite (= o6 0) true false)))

(declare-const o7 Int)

(declare-const o8 (Array Int us_rep))

(declare-const to_arrayqtresultqtunused1 (Array Int us_rep))

(declare-const o9 us_rep)

(declare-const getqtresultqtunused1 us_rep)

(declare-const o10 us_split_fields)

(declare-const us_split_fieldsqtresultqtunused1 us_split_fields)

(declare-const o11 natural)

(declare-const rec__cartesian_trees__tree_cell__leftqtresultqtunused1 natural)

(declare-const o12 Int)

(declare-const to_repqtresultqtunused1 Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const o13 us_t)

(declare-const belongs_toqtresultqtunused Bool)

;; "H"
(assert
  (ite (not (= o6 0))
    (and
      (= o7 x)
      (and
        (and (<= (first t1) r) (<= r (last t1)))
        (and
          (= o8 (to_array t1))
          (and
            (= to_arrayqtresultqtunused1 o8)
            (and
              (= o9 (select o8 r))
              (and
                (= getqtresultqtunused1 o9)
                (and
                  (= o10 (us_split_fields1 o9))
                  (and
                    (= us_split_fieldsqtresultqtunused1 o10)
                    (and
                      (= o11 (rec__cartesian_trees__tree_cell__left o10))
                      (and
                        (= rec__cartesian_trees__tree_cell__leftqtresultqtunused1 
                        o11)
                        (and
                          (= (to_rep o11) o12)
                          (and
                            (= to_repqtresultqtunused1 o12)
                            (and
                              (in_range1 o12)
                              (and
                                (= range_check_qtresultqtunused o12)
                                (and
                                  (= o13 t1)
                                  (and
                                    (= o1 (belongs_to o13 o12 o7))
                                    (and
                                      (=
                                        (= o1 true)
                                        (or
                                          (or
                                            (= o12 o7)
                                            (and
                                              (not
                                                (= (to_rep
                                                     (rec__cartesian_trees__tree_cell__left
                                                       (us_split_fields1
                                                         (select (to_array
                                                                   o13) 
                                                         o12)))) 0))
                                              (= (belongs_to
                                                   o13
                                                   (to_rep
                                                     (rec__cartesian_trees__tree_cell__left
                                                       (us_split_fields1
                                                         (select (to_array
                                                                   o13) 
                                                         o12))))
                                                   o7) true)))
                                          (and
                                            (not
                                              (= (to_rep
                                                   (rec__cartesian_trees__tree_cell__right
                                                     (us_split_fields1
                                                       (select (to_array o13) 
                                                       o12)))) 0))
                                            (= (belongs_to
                                                 o13
                                                 (to_rep
                                                   (rec__cartesian_trees__tree_cell__right
                                                     (us_split_fields1
                                                       (select (to_array o13) 
                                                       o12))))
                                                 o7) true))))
                                      (= belongs_toqtresultqtunused o1))))))))))))))))))
    (= o1 false)))

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o1))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch1)

;; "H"
(assert (not (= spark__branch1 true)))

;; "o"
(define-fun o14 () Int
  x)

;; "Assert"
(assert (and (<= (first t1) r) (<= r (last t1))))

;; "o"
(define-fun o15 () (Array Int us_rep)
  (to_array t1))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int us_rep)
  o15)

;; "o"
(define-fun o16 () us_rep
  (select o15 r))

;; "get'result'unused"
(define-fun getqtresultqtunused2 () us_rep
  o16)

;; "o"
(define-fun o17 () us_split_fields
  (us_split_fields1 o16))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields
  o17)

;; "o"
(define-fun o18 () natural
  (rec__cartesian_trees__tree_cell__right o17))

;; "rec__cartesian_trees__tree_cell__right'result'unused"
(define-fun rec__cartesian_trees__tree_cell__rightqtresultqtunused () natural
  o18)

(declare-const o19 Int)

;; "Ensures"
(assert (= (to_rep o18) o19))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused2 () Int
  o19)

;; "Ensures"
(assert (in_range1 o19))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o19)

;; "o"
(define-fun o20 () us_t
  t1)

;; "dummy"
(define-fun dummy1 () Bool
  true)

(declare-const x1 Int)

;; "H"
(assert (<= (first o20) x1))

;; "H"
(assert (<= x1 (last o20)))

;; Goal "def'vc"
;; File "cartesian_trees.adb", line 7, characters 0-0
(assert
  (not (= (well_formed o20 x1) true)))

(check-sat)
