;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                 (of_rep1 x))) )))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ()
  ((t (tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t (us_tqtmk (elts (Array Int natural))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int natural)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

;; "left_neighbors"
(declare-fun left_neighbors (us_t) us_t)

;; "left_neighbors__function_guard"
(declare-fun left_neighbors__function_guard (us_t
  us_t) Bool)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_220 us_t) (temp___is_init_216 Bool) (temp___skip_constant_217 Bool) (temp___do_toplevel_218 Bool) (temp___do_typ_inv_219 Bool)) Bool
  (and
    (=>
      (not (= temp___skip_constant_217 true))
      (dynamic_property
        1
        2147483646
        (first temp___expr_220)
        (last temp___expr_220)))
    (=>
      (= temp___is_init_216 true)
      (=> (= temp___do_toplevel_218 true) (= (first temp___expr_220) 1)))))

;; "right_neighbors"
(declare-fun right_neighbors (us_t) us_t)

;; "right_neighbors__function_guard"
(declare-fun right_neighbors__function_guard (us_t
  us_t) Bool)

(declare-datatypes ()
  ((us_split_fields
   (us_split_fieldsqtmk
   (rec__cartesian_trees__tree_cell__left natural)(rec__cartesian_trees__tree_cell__right natural)(rec__cartesian_trees__tree_cell__parent natural)))))

(declare-datatypes ()
  ((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const cartesian_trees__tree_cell__left__first__bit Int)

(declare-const cartesian_trees__tree_cell__left__last__bit Int)

(declare-const cartesian_trees__tree_cell__left__position Int)

;; "cartesian_trees__tree_cell__left__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__left__first__bit))

;; "cartesian_trees__tree_cell__left__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__left__first__bit cartesian_trees__tree_cell__left__last__bit))

;; "cartesian_trees__tree_cell__left__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__left__position))

(declare-const cartesian_trees__tree_cell__right__first__bit Int)

(declare-const cartesian_trees__tree_cell__right__last__bit Int)

(declare-const cartesian_trees__tree_cell__right__position Int)

;; "cartesian_trees__tree_cell__right__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__right__first__bit))

;; "cartesian_trees__tree_cell__right__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__right__first__bit cartesian_trees__tree_cell__right__last__bit))

;; "cartesian_trees__tree_cell__right__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__right__position))

(declare-const cartesian_trees__tree_cell__parent__first__bit Int)

(declare-const cartesian_trees__tree_cell__parent__last__bit Int)

(declare-const cartesian_trees__tree_cell__parent__position Int)

;; "cartesian_trees__tree_cell__parent__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__parent__first__bit))

;; "cartesian_trees__tree_cell__parent__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__parent__first__bit cartesian_trees__tree_cell__parent__last__bit))

;; "cartesian_trees__tree_cell__parent__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__parent__position))

(declare-const dummy us_rep)

(declare-datatypes ()
  ((t1 (tqtmk1 (rec__first1 integer)(rec__last1 integer)))))

;; "mk"
(declare-fun mk (Int
  Int) t1)

;; "mk_def"
(assert
  (forall ((f Int) (l Int))
    (! (=>
         (in_range f)
         (=>
           (in_range l)
           (and
             (= (to_rep1 (rec__first1 (mk f l))) f)
             (= (to_rep1 (rec__last1 (mk f l))) l)))) :pattern ((mk f l)) )))

;; "dynamic_property"
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range low)
    (and
      (in_range high)
      (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
  ((us_t1 (us_tqtmk1 (elts1 (Array Int us_rep))(rt1 t1)))))

;; "to_array"
(define-fun to_array1 ((a us_t1)) (Array Int us_rep)
  (elts1 a))

;; "of_array"
(define-fun of_array ((a (Array Int us_rep)) (f Int) (l Int)) us_t1
  (us_tqtmk1 a (mk f l)))

;; "first"
(define-fun first1 ((a us_t1)) Int
  (to_rep1 (rec__first1 (rt1 a))))

;; "last"
(define-fun last1 ((a us_t1)) Int
  (to_rep1 (rec__last1 (rt1 a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "valid_tree_cell"
(define-fun valid_tree_cell ((param__t us_t1)) Bool
  (and (and (ite (forall ((x Int))
                   (=>
                     (and (<= (first1 param__t) x) (<= x (last1 param__t)))
                     (or
                       (= (to_rep
                            (rec__cartesian_trees__tree_cell__left
                              (us_split_fields1
                                (select (to_array1 param__t) x)))) 0)
                       (let ((temp___174 (to_rep
                                           (rec__cartesian_trees__tree_cell__left
                                             (us_split_fields1
                                               (select (to_array1 param__t) x))))))
                         (and
                           (<= (first1 param__t) temp___174)
                           (<= temp___174 (last1 param__t)))))))
              true
              false) (ite (forall ((x Int))
                            (=>
                              (and
                                (<= (first1 param__t) x)
                                (<= x (last1 param__t)))
                              (or
                                (= (to_rep
                                     (rec__cartesian_trees__tree_cell__right
                                       (us_split_fields1
                                         (select (to_array1 param__t) x)))) 0)
                                (let ((temp___176 (to_rep
                                                    (rec__cartesian_trees__tree_cell__right
                                                      (us_split_fields1
                                                        (select (to_array1
                                                                  param__t) x))))))
                                  (and
                                    (<= (first1 param__t) temp___176)
                                    (<= temp___176 (last1 param__t)))))))
                       true
                       false)) (ite (forall ((x Int))
                                      (=>
                                        (and
                                          (<= (first1 param__t) x)
                                          (<= x (last1 param__t)))
                                        (or
                                          (= (to_rep
                                               (rec__cartesian_trees__tree_cell__parent
                                                 (us_split_fields1
                                                   (select (to_array1
                                                             param__t) x)))) 0)
                                          (let ((temp___178 (to_rep
                                                              (rec__cartesian_trees__tree_cell__parent
                                                                (us_split_fields1
                                                                  (select 
                                                                  (to_array1
                                                                    param__t) x))))))
                                            (and
                                              (<= (first1 param__t) temp___178)
                                              (<= temp___178 (last1 param__t)))))))
                                 true
                                 false)))

(declare-datatypes ()
  ((us_split_discrs
   (us_split_discrsqtmk (rec__cartesian_trees__tree__size natural)))))

(declare-datatypes ()
  ((us_split_fields2
   (us_split_fieldsqtmk1
   (rec__cartesian_trees__tree__root natural)(rec__cartesian_trees__tree__cells us_t1)))))

(declare-datatypes ()
  ((us_rep1
   (us_repqtmk1
   (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))

;; "in_range"
(define-fun in_range3 ((rec__cartesian_trees__tree__size1 Int) (a us_split_discrs)) Bool
  (= rec__cartesian_trees__tree__size1 (to_rep
                                         (rec__cartesian_trees__tree__size a))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; "value__size_axiom"
(assert (<= 0 value__size3))

;; "object__size_axiom"
(assert (<= 0 object__size3))

;; "alignment_axiom"
(assert (<= 0 alignment3))

(declare-const cartesian_trees__tree__size__first__bit Int)

(declare-const cartesian_trees__tree__size__last__bit Int)

(declare-const cartesian_trees__tree__size__position Int)

;; "cartesian_trees__tree__size__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree__size__first__bit))

;; "cartesian_trees__tree__size__last__bit_axiom"
(assert
  (< cartesian_trees__tree__size__first__bit cartesian_trees__tree__size__last__bit))

;; "cartesian_trees__tree__size__position_axiom"
(assert (<= 0 cartesian_trees__tree__size__position))

(declare-const cartesian_trees__tree__root__first__bit Int)

(declare-const cartesian_trees__tree__root__last__bit Int)

(declare-const cartesian_trees__tree__root__position Int)

;; "cartesian_trees__tree__root__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree__root__first__bit))

;; "cartesian_trees__tree__root__last__bit_axiom"
(assert
  (< cartesian_trees__tree__root__first__bit cartesian_trees__tree__root__last__bit))

;; "cartesian_trees__tree__root__position_axiom"
(assert (<= 0 cartesian_trees__tree__root__position))

(declare-const cartesian_trees__tree__cells__first__bit Int)

(declare-const cartesian_trees__tree__cells__last__bit Int)

(declare-const cartesian_trees__tree__cells__position Int)

;; "cartesian_trees__tree__cells__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree__cells__first__bit))

;; "cartesian_trees__tree__cells__last__bit_axiom"
(assert
  (< cartesian_trees__tree__cells__first__bit cartesian_trees__tree__cells__last__bit))

;; "cartesian_trees__tree__cells__position_axiom"
(assert (<= 0 cartesian_trees__tree__cells__position))

(declare-const dummy1 us_rep1)

;; "well_formed"
(define-fun well_formed ((param__t us_t1) (param__x Int)) Bool
  (and (and (ite (not
                   (= (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array1 param__t) param__x)))) 0))
              (and (< (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array1 param__t) param__x)))) param__x) (= 
              (to_rep
                (rec__cartesian_trees__tree_cell__parent
                  (us_split_fields1
                    (select (to_array1 param__t) (to_rep
                                                   (rec__cartesian_trees__tree_cell__left
                                                     (us_split_fields1
                                                       (select (to_array1
                                                                 param__t) param__x)))))))) param__x))
              (distinct 1 0)) (ite (not
                                     (= (to_rep
                                          (rec__cartesian_trees__tree_cell__right
                                            (us_split_fields1
                                              (select (to_array1 param__t) param__x)))) 0))
                                (and (< param__x (to_rep
                                                   (rec__cartesian_trees__tree_cell__right
                                                     (us_split_fields1
                                                       (select (to_array1
                                                                 param__t) param__x))))) (= 
                                (to_rep
                                  (rec__cartesian_trees__tree_cell__parent
                                    (us_split_fields1
                                      (select (to_array1 param__t) (to_rep
                                                                    (rec__cartesian_trees__tree_cell__right
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))))) param__x))
                                (distinct 1 0))) (ite (not
                                                        (= (to_rep
                                                             (rec__cartesian_trees__tree_cell__parent
                                                               (us_split_fields1
                                                                 (select 
                                                                 (to_array1
                                                                   param__t) param__x)))) 0))
                                                   (ite (< param__x (to_rep
                                                                    (rec__cartesian_trees__tree_cell__parent
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))
                                                     (= (to_rep
                                                          (rec__cartesian_trees__tree_cell__left
                                                            (us_split_fields1
                                                              (select 
                                                              (to_array1
                                                                param__t) 
                                                              (to_rep
                                                                (rec__cartesian_trees__tree_cell__parent
                                                                  (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))))) param__x)
                                                     (= (to_rep
                                                          (rec__cartesian_trees__tree_cell__right
                                                            (us_split_fields1
                                                              (select 
                                                              (to_array1
                                                                param__t) 
                                                              (to_rep
                                                                (rec__cartesian_trees__tree_cell__parent
                                                                  (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))))) param__x))
                                                   (distinct 1 0))))

;; "well_formed"
(declare-fun well_formed1 (us_t1) Bool)

;; "is_heap"
(define-fun is_heap ((param__t us_t1) (param__s us_t)) Bool
  (ite (forall ((x Int))
         (=>
           (and (<= (first1 param__t) x) (<= x (last1 param__t)))
           (=>
             (not
               (= (to_rep
                    (rec__cartesian_trees__tree_cell__parent
                      (us_split_fields1 (select (to_array1 param__t) x)))) 0))
             (< (to_rep
                  (select (to_array param__s) (to_rep
                                                (rec__cartesian_trees__tree_cell__parent
                                                  (us_split_fields1
                                                    (select (to_array1
                                                              param__t) x)))))) 
             (to_rep
               (select (to_array param__s) x))))))
    true
    false))

(declare-const s us_t)

(declare-const left us_t)

(declare-const right us_t)

(declare-datatypes ()
  ((us_split_fields4
   (us_split_fieldsqtmk2
   (rec__cartesian_trees__tree__root1 natural)(rec__cartesian_trees__tree__cells1 us_t1)))))

(declare-datatypes ()
  ((us_split_fields__ref
   (us_split_fields__refqtmk (us_split_fields__content us_split_fields4)))))

(declare-datatypes ()
  ((us_rep2
   (us_repqtmk2
   (us_split_discrs2 us_split_discrs)(us_split_fields5 us_split_fields4)))))

;; "to_base"
(define-fun to_base ((a us_rep2)) us_rep1
  (us_repqtmk1
    (us_split_discrs2 a)
    (us_split_fieldsqtmk1
      (rec__cartesian_trees__tree__root1 (us_split_fields5 a))
      (let ((temp___200 (rec__cartesian_trees__tree__cells1
                          (us_split_fields5 a))))
        (let ((temp___201 (to_array1 temp___200)))
          (of_array temp___201 (first1 temp___200) (last1 temp___200)))))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; "value__size_axiom"
(assert (<= 0 value__size4))

;; "object__size_axiom"
(assert (<= 0 object__size4))

;; "alignment_axiom"
(assert (<= 0 alignment4))

(declare-const cartesian_trees__tree__size__first__bit1 Int)

(declare-const cartesian_trees__tree__size__last__bit1 Int)

(declare-const cartesian_trees__tree__size__position1 Int)

;; "cartesian_trees__tree__size__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree__size__first__bit1))

;; "cartesian_trees__tree__size__last__bit_axiom"
(assert
  (< cartesian_trees__tree__size__first__bit1 cartesian_trees__tree__size__last__bit1))

;; "cartesian_trees__tree__size__position_axiom"
(assert (<= 0 cartesian_trees__tree__size__position1))

(declare-const cartesian_trees__tree__root__first__bit1 Int)

(declare-const cartesian_trees__tree__root__last__bit1 Int)

(declare-const cartesian_trees__tree__root__position1 Int)

;; "cartesian_trees__tree__root__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree__root__first__bit1))

;; "cartesian_trees__tree__root__last__bit_axiom"
(assert
  (< cartesian_trees__tree__root__first__bit1 cartesian_trees__tree__root__last__bit1))

;; "cartesian_trees__tree__root__position_axiom"
(assert (<= 0 cartesian_trees__tree__root__position1))

(declare-const cartesian_trees__tree__cells__first__bit1 Int)

(declare-const cartesian_trees__tree__cells__last__bit1 Int)

(declare-const cartesian_trees__tree__cells__position1 Int)

;; "cartesian_trees__tree__cells__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree__cells__first__bit1))

;; "cartesian_trees__tree__cells__last__bit_axiom"
(assert
  (< cartesian_trees__tree__cells__first__bit1 cartesian_trees__tree__cells__last__bit1))

;; "cartesian_trees__tree__cells__position_axiom"
(assert (<= 0 cartesian_trees__tree__cells__position1))

(declare-const dummy2 us_rep2)

(declare-const t__split_discrs us_split_discrs)

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_416 us_rep2) (temp___is_init_412 Bool) (temp___skip_constant_413 Bool) (temp___do_toplevel_414 Bool) (temp___do_typ_inv_415 Bool)) Bool
  (and
    (and
      (=>
        (not (= temp___skip_constant_413 true))
        (in_range3 (length s) (us_split_discrs1 (to_base temp___expr_416))))
      (and
        (= (valid_tree_cell
             (let ((temp___418 (rec__cartesian_trees__tree__cells
                                 (us_split_fields3 (to_base temp___expr_416)))))
               (let ((temp___419 (to_array1 temp___418)))
                 (of_array temp___419 (first1 temp___418) (last1 temp___418))))) true)
        (or
          (= (to_rep
               (rec__cartesian_trees__tree__root
                 (us_split_fields3 (to_base temp___expr_416)))) 0)
          (let ((temp___421 (to_rep
                              (rec__cartesian_trees__tree__root
                                (us_split_fields3 (to_base temp___expr_416))))))
            (and
              (<= 1 temp___421)
              (<= temp___421 (to_rep
                               (rec__cartesian_trees__tree__size
                                 (us_split_discrs1 (to_base temp___expr_416))))))))))
    (=>
      (not (= false true))
      (and
        (and
          (dynamic_property1
            1
            (length s)
            (first1
              (rec__cartesian_trees__tree__cells1
                (us_split_fields5 temp___expr_416)))
            (last1
              (rec__cartesian_trees__tree__cells1
                (us_split_fields5 temp___expr_416))))
          (= (first1
               (rec__cartesian_trees__tree__cells1
                 (us_split_fields5 temp___expr_416))) 1))
        (= (last1
             (rec__cartesian_trees__tree__cells1
               (us_split_fields5 temp___expr_416))) (length s))))))

;; "temp_____aggregate_def_430"
(declare-fun temp_____aggregate_def_430 (us_rep
  Int
  Int) us_t1)

(declare-const rliteral natural)

;; "rliteral_axiom"
(assert (= (naturalqtint rliteral) 0))

;; "default_initial_assumption"
(define-fun default_initial_assumption ((temp___expr_424 us_rep2) (temp___skip_top_level_425 Bool)) Bool
  (and
    (and
      (= (to_rep
           (rec__cartesian_trees__tree__size
             (us_split_discrs2 temp___expr_424))) (length s))
      (= (to_rep
           (rec__cartesian_trees__tree__root1
             (us_split_fields5 temp___expr_424))) 0))
    (= (rec__cartesian_trees__tree__cells1
         (us_split_fields5 temp___expr_424)) (let ((temp___434 (temp_____aggregate_def_430
                                                                 (us_repqtmk
                                                                   (us_split_fieldsqtmk
                                                                    rliteral
                                                                    rliteral
                                                                    rliteral))
                                                                 1
                                                                 (to_rep
                                                                   (rec__cartesian_trees__tree__size
                                                                    (us_split_discrs2
                                                                    temp___expr_424))))))
                                               (let ((temp___435 (to_array1
                                                                   temp___434)))
                                                 (of_array
                                                   temp___435
                                                   (first1 temp___434)
                                                   (last1 temp___434)))))))

;; "dynamic_property"
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool
  (and (<= first_int x) (<= x last_int)))

;; "dynamic_invariant"
(define-fun dynamic_invariant2 ((temp___expr_251 us_t1) (temp___is_init_247 Bool) (temp___skip_constant_248 Bool) (temp___do_toplevel_249 Bool) (temp___do_typ_inv_250 Bool)) Bool
  (=>
    (not (= temp___skip_constant_248 true))
    (dynamic_property1
      1
      2147483646
      (first1 temp___expr_251)
      (last1 temp___expr_251))))

;; "left_neighbors__post_axiom"
(assert
  (forall ((param__s us_t))
    (! (=>
         (and
           (dynamic_invariant param__s true false true true)
           (< 0 (length param__s)))
         (let ((result (left_neighbors param__s)))
           (=>
             (left_neighbors__function_guard result param__s)
             (and
               (and
                 (= (length param__s) (length result))
                 (forall ((k Int))
                   (=>
                     (and (<= (first result) k) (<= k (last result)))
                     (ite (= (to_rep (select (to_array result) k)) 0)
                       (forall ((l Int))
                         (=>
                           (and (<= (first param__s) l) (<= l (- k 1)))
                           (< (to_rep (select (to_array param__s) k)) 
                           (to_rep
                             (select (to_array param__s) l)))))
                       (and
                         (and
                           (let ((temp___227 (to_rep
                                               (select (to_array result) k))))
                             (and (<= 1 temp___227) (<= temp___227 (- k 1))))
                           (<= (to_rep
                                 (select (to_array param__s) (to_rep
                                                               (select 
                                                               (to_array
                                                                 result) k)))) 
                           (to_rep
                             (select (to_array param__s) k))))
                         (forall ((l Int))
                           (=>
                             (and
                               (<= (+ (to_rep (select (to_array result) k)) 1) l)
                               (<= l (- k 1)))
                             (< (to_rep (select (to_array param__s) k)) 
                             (to_rep
                               (select (to_array param__s) l))))))))))
               (dynamic_invariant result true false true true))))) :pattern (
    (left_neighbors
      param__s)) )))

;; "right_neighbors__post_axiom"
(assert
  (forall ((param__s us_t))
    (! (=>
         (and
           (dynamic_invariant param__s true false true true)
           (< 0 (length param__s)))
         (let ((result (right_neighbors param__s)))
           (=>
             (right_neighbors__function_guard result param__s)
             (and
               (and
                 (= (length param__s) (length result))
                 (forall ((k Int))
                   (=>
                     (and (<= (first result) k) (<= k (last result)))
                     (ite (= (to_rep (select (to_array result) k)) 0)
                       (forall ((l Int))
                         (=>
                           (and (<= (+ k 1) l) (<= l (last param__s)))
                           (< (to_rep (select (to_array param__s) k)) 
                           (to_rep
                             (select (to_array param__s) l)))))
                       (and
                         (and
                           (let ((temp___234 (to_rep
                                               (select (to_array result) k))))
                             (and
                               (<= (+ k 1) temp___234)
                               (<= temp___234 (last param__s))))
                           (<= (to_rep
                                 (select (to_array param__s) (to_rep
                                                               (select 
                                                               (to_array
                                                                 result) k)))) 
                           (to_rep
                             (select (to_array param__s) k))))
                         (forall ((l Int))
                           (=>
                             (and
                               (<= (+ k 1) l)
                               (<= l (- (to_rep (select (to_array result) k)) 1)))
                             (< (to_rep (select (to_array param__s) k)) 
                             (to_rep
                               (select (to_array param__s) l))))))))))
               (dynamic_invariant result true false true true))))) :pattern (
    (right_neighbors
      param__s)) )))

;; "well_formed__post_axiom"
(assert true)

;; "well_formed__def_axiom"
(assert
  (forall ((param__t us_t1))
    (! (=
         (= (well_formed1 param__t) true)
         (forall ((x Int))
           (=>
             (and (<= (first1 param__t) x) (<= x (last1 param__t)))
             (= (well_formed param__t x) true)))) :pattern ((well_formed1
                                                              param__t)) )))

;; "def_axiom"
(assert
  (forall ((temp___427 us_rep))
    (forall ((temp___first_428 Int) (temp___last_429 Int))
      (let ((temp___431 (temp_____aggregate_def_430
                          temp___427
                          temp___first_428
                          temp___last_429)))
        (and
          (=>
            (dynamic_property1 1 2147483646 temp___first_428 temp___last_429)
            (and
              (= (first1 temp___431) temp___first_428)
              (= (last1 temp___431) temp___last_429)))
          (forall ((temp___432 Int))
            (! (=>
                 (and
                   (<= (first1 temp___431) temp___432)
                   (<= temp___432 (last1 temp___431)))
                 (= (select (to_array1 temp___431) temp___432) temp___427)) :pattern ((select 
            (to_array1
              temp___431) temp___432)) )))))))

(declare-const spark__branch Bool)

(declare-const t__split_fields us_split_fields4)

(declare-const w Int)

(declare-const j Int)

(declare-const w1 Int)

(declare-const j1 Int)

;; "j'unused"
(define-fun jqtunused () int__ref
  (int__refqtmk j1))

;; "w'unused"
(define-fun wqtunused () int__ref
  (int__refqtmk w1))

;; "j'unused"
(define-fun jqtunused1 () int__ref
  (int__refqtmk j))

;; "w'unused"
(define-fun wqtunused1 () int__ref
  (int__refqtmk w))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused () us_split_fields__ref
  (us_split_fields__refqtmk t__split_fields))

;; "Assume"
(assert (dynamic_invariant s true false true true))

;; "Assume"
(assert
  (and
    (< 0 (length s))
    (forall ((x Int))
      (=>
        (and (<= (first s) x) (<= x (last s)))
        (forall ((y Int))
          (=>
            (and (<= (first s) y) (<= y (last s)))
            (=>
              (= (to_rep (select (to_array s) x)) (to_rep
                                                    (select (to_array s) y)))
              (= x y))))))))

;; "o"
(define-fun o () us_t
  s)

;; "cartesian_trees__mk_tree__left__assume"
(define-fun cartesian_trees__mk_tree__left__assume () us_t
  (left_neighbors o))

;; "H"
(assert
  (left_neighbors__function_guard cartesian_trees__mk_tree__left__assume o))

;; "H"
(assert
  (dynamic_invariant
    cartesian_trees__mk_tree__left__assume
    true
    false
    true
    true))

;; "H"
(assert (= (length o) (length cartesian_trees__mk_tree__left__assume)))

;; "H"
(assert
  (forall ((k Int))
    (=>
      (and
        (<= (first cartesian_trees__mk_tree__left__assume) k)
        (<= k (last cartesian_trees__mk_tree__left__assume)))
      (ite (= (to_rep
                (select (to_array cartesian_trees__mk_tree__left__assume) k)) 0)
        (forall ((l Int))
          (=>
            (and (<= (first o) l) (<= l (- k 1)))
            (< (to_rep (select (to_array o) k)) (to_rep
                                                  (select (to_array o) l)))))
        (and
          (and
            (let ((temp___224 (to_rep
                                (select (to_array
                                          cartesian_trees__mk_tree__left__assume) k))))
              (and (<= 1 temp___224) (<= temp___224 (- k 1))))
            (<= (to_rep
                  (select (to_array o) (to_rep
                                         (select (to_array
                                                   cartesian_trees__mk_tree__left__assume) k)))) 
            (to_rep
              (select (to_array o) k))))
          (forall ((l Int))
            (=>
              (and
                (<= (+ (to_rep
                         (select (to_array
                                   cartesian_trees__mk_tree__left__assume) k)) 1) l)
                (<= l (- k 1)))
              (< (to_rep (select (to_array o) k)) (to_rep
                                                    (select (to_array o) l))))))))))

;; "left_neighbors'result'unused"
(define-fun left_neighborsqtresultqtunused () us_t
  cartesian_trees__mk_tree__left__assume)

;; "Assume"
(assert (= cartesian_trees__mk_tree__left__assume left))

;; "Assume"
(assert (dynamic_invariant left true false true true))

;; "o"
(define-fun o1 () us_t
  s)

;; "cartesian_trees__mk_tree__right__assume"
(define-fun cartesian_trees__mk_tree__right__assume () us_t
  (right_neighbors o1))

;; "H"
(assert
  (right_neighbors__function_guard
    cartesian_trees__mk_tree__right__assume
    o1))

;; "H"
(assert
  (dynamic_invariant
    cartesian_trees__mk_tree__right__assume
    true
    false
    true
    true))

;; "H"
(assert (= (length o1) (length cartesian_trees__mk_tree__right__assume)))

;; "H"
(assert
  (forall ((k Int))
    (=>
      (and
        (<= (first cartesian_trees__mk_tree__right__assume) k)
        (<= k (last cartesian_trees__mk_tree__right__assume)))
      (ite (= (to_rep
                (select (to_array cartesian_trees__mk_tree__right__assume) k)) 0)
        (forall ((l Int))
          (=>
            (and (<= (+ k 1) l) (<= l (last o1)))
            (< (to_rep (select (to_array o1) k)) (to_rep
                                                   (select (to_array o1) l)))))
        (and
          (and
            (let ((temp___231 (to_rep
                                (select (to_array
                                          cartesian_trees__mk_tree__right__assume) k))))
              (and (<= (+ k 1) temp___231) (<= temp___231 (last o1))))
            (<= (to_rep
                  (select (to_array o1) (to_rep
                                          (select (to_array
                                                    cartesian_trees__mk_tree__right__assume) k)))) 
            (to_rep
              (select (to_array o1) k))))
          (forall ((l Int))
            (=>
              (and
                (<= (+ k 1) l)
                (<= l (- (to_rep
                           (select (to_array
                                     cartesian_trees__mk_tree__right__assume) k)) 1)))
              (< (to_rep (select (to_array o1) k)) (to_rep
                                                     (select (to_array o1) l))))))))))

;; "right_neighbors'result'unused"
(define-fun right_neighborsqtresultqtunused () us_t
  cartesian_trees__mk_tree__right__assume)

;; "Assume"
(assert (= cartesian_trees__mk_tree__right__assume right))

;; "Assume"
(assert (dynamic_invariant right true false true true))

;; "o"
(define-fun o2 () Int
  (length s))

;; "length'result'unused"
(define-fun lengthqtresultqtunused () Int
  o2)

;; "Ensures"
(assert (in_range o2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o2)

;; "_'unused"
(define-fun usqtunused () Int
  o2)

;; "Ensures"
(assert (in_range1 o2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o2)

;; "Assume"
(assert
  (default_initial_assumption
    (us_repqtmk2 t__split_discrs t__split_fields)
    false))

;; "Assume"
(assert
  (dynamic_invariant1
    (us_repqtmk2 t__split_discrs t__split_fields)
    false
    false
    true
    true))

;; "temp___810"
(define-fun temp___810 () Int
  (first s))

;; "first'result'unused"
(define-fun firstqtresultqtunused () Int
  temp___810)

;; "temp___811"
(define-fun temp___811 () Int
  (last s))

;; "last'result'unused"
(define-fun lastqtresultqtunused () Int
  temp___811)

(declare-const i Int)

;; "i'unused"
(define-fun iqtunused () int__ref
  (int__refqtmk i))

;; "H"
(assert (= i temp___810))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  i)

;; "o"
(define-fun o3 () Bool
  (ite (<= i temp___811) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused () Bool
  o3)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused1 () Int
  i)

;; "o"
(define-fun o4 () Bool
  (ite (<= temp___810 i) true false))

;; "infix <='result'unused"
(define-fun infix_lseqqtresultqtunused1 () Bool
  o4)

;; "o"
(define-fun o5 () Bool
  (and o4 o3))

;; "andb'result'unused"
(define-fun andbqtresultqtunused () Bool
  o5)

;; "H"
(assert (= o5 true))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused () us_split_fields4
  t__split_fields)

;; "temp___loop_entry_944'unused"
(define-fun temp___loop_entry_944qtunused () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused1 () us_split_fields4
  t__split_fields)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused1 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused () us_split_fields4
  t__split_fields)

;; "temp___987"
(define-fun temp___987 () us_t1
  (rec__cartesian_trees__tree__cells1 t__split_fields))

;; "rec__cartesian_trees__tree__cells'result'unused"
(define-fun rec__cartesian_trees__tree__cellsqtresultqtunused () us_t1
  temp___987)

;; "temp___988"
(define-fun temp___988 () (Array Int us_rep)
  (to_array1 temp___987))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused () (Array Int us_rep)
  temp___988)

;; "o"
(define-fun o6 () Int
  (last1 temp___987))

;; "last'result'unused"
(define-fun lastqtresultqtunused1 () Int
  o6)

;; "o"
(define-fun o7 () Int
  (first1 temp___987))

;; "first'result'unused"
(define-fun firstqtresultqtunused1 () Int
  o7)

;; "o"
(define-fun o8 () us_t1
  (rec__cartesian_trees__tree__cells1 t__split_fields))

;; "of_array'result'unused"
(define-fun of_arrayqtresultqtunused () us_t1
  o8)

;; "temp___inv_986"
(define-fun temp___inv_986 () Bool
  (well_formed1 o8))

;; "Ensures"
(assert
  (=
    (= temp___inv_986 true)
    (forall ((x Int))
      (=>
        (and (<= (first1 o8) x) (<= x (last1 o8)))
        (= (well_formed o8 x) true)))))

;; "well_formed'result'unused"
(define-fun well_formedqtresultqtunused () Bool
  temp___inv_986)

(declare-const t__split_fields1 us_split_fields4)

(declare-const i1 Int)

;; "i'unused"
(define-fun iqtunused1 () int__ref
  (int__refqtmk i1))

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused1 () us_split_fields__ref
  (us_split_fields__refqtmk t__split_fields1))

;; "LoopInvariant"
(assert
  (= (well_formed1
       (let ((temp___989 (rec__cartesian_trees__tree__cells1
                           t__split_fields1)))
         (rec__cartesian_trees__tree__cells1 t__split_fields1))) true))

;; "LoopInvariant"
(assert
  (= (is_heap
       (let ((temp___984 (rec__cartesian_trees__tree__cells1
                           t__split_fields1)))
         (rec__cartesian_trees__tree__cells1 t__split_fields1))
       s) true))

;; "LoopInvariant"
(assert
  (ite (= (to_rep (rec__cartesian_trees__tree__root1 t__split_fields1)) 0)
    (forall ((k Int))
      (=>
        (and (<= 1 k) (<= k (- i1 1)))
        (or
          (not (= (to_rep (select (to_array right) k)) 0))
          (not (= (to_rep (select (to_array left) k)) 0)))))
    (and
      (let ((temp___979 (to_rep
                          (rec__cartesian_trees__tree__root1
                            t__split_fields1))))
        (and (<= 1 temp___979) (<= temp___979 (- i1 1))))
      (and
        (and
          (= (to_rep
               (select (to_array right) (to_rep
                                          (rec__cartesian_trees__tree__root1
                                            t__split_fields1)))) 0)
          (= (to_rep
               (select (to_array left) (to_rep
                                         (rec__cartesian_trees__tree__root1
                                           t__split_fields1)))) 0))
        (= (to_rep
             (rec__cartesian_trees__tree_cell__parent
               (us_split_fields1
                 (select (to_array1
                           (rec__cartesian_trees__tree__cells1
                             t__split_fields1)) (to_rep
                                                  (rec__cartesian_trees__tree__root1
                                                    t__split_fields1)))))) 0)))))

;; "LoopInvariant"
(assert
  (forall ((k Int))
    (=>
      (and (<= i1 k) (<= k (last s)))
      (= (to_rep
           (rec__cartesian_trees__tree_cell__parent
             (us_split_fields1
               (select (to_array1
                         (rec__cartesian_trees__tree__cells1
                           t__split_fields1)) k)))) 0))))

;; "LoopInvariant"
(assert
  (forall ((k Int))
    (=>
      (and (<= 1 k) (<= k (- i1 1)))
      (ite (and
             (= (to_rep (select (to_array right) k)) 0)
             (= (to_rep (select (to_array left) k)) 0))
        (= (to_rep
             (rec__cartesian_trees__tree_cell__parent
               (us_split_fields1
                 (select (to_array1
                           (rec__cartesian_trees__tree__cells1
                             t__split_fields1)) k)))) 0)
        (ite (or
               (= (to_rep (select (to_array left) k)) 0)
               (and
                 (< 0 (to_rep (select (to_array right) k)))
                 (< (to_rep
                      (select (to_array s) (to_rep
                                             (select (to_array left) k)))) 
                 (to_rep
                   (select (to_array s) (to_rep (select (to_array right) k)))))))
          (and
            (= (to_rep
                 (rec__cartesian_trees__tree_cell__parent
                   (us_split_fields1
                     (select (to_array1
                               (rec__cartesian_trees__tree__cells1
                                 t__split_fields1)) k)))) (to_rep
                                                            (select (to_array
                                                                    right) k)))
            (= (to_rep
                 (rec__cartesian_trees__tree_cell__left
                   (us_split_fields1
                     (select (to_array1
                               (rec__cartesian_trees__tree__cells1
                                 t__split_fields1)) (to_rep
                                                      (select (to_array
                                                                right) k)))))) k))
          (and
            (= (to_rep
                 (rec__cartesian_trees__tree_cell__parent
                   (us_split_fields1
                     (select (to_array1
                               (rec__cartesian_trees__tree__cells1
                                 t__split_fields1)) k)))) (to_rep
                                                            (select (to_array
                                                                    left) k)))
            (= (to_rep
                 (rec__cartesian_trees__tree_cell__right
                   (us_split_fields1
                     (select (to_array1
                               (rec__cartesian_trees__tree__cells1
                                 t__split_fields1)) (to_rep
                                                      (select (to_array left) k)))))) k)))))))

;; "Assume"
(assert
  (= (and (ite (dynamic_invariant1
                 (us_repqtmk2 t__split_discrs t__split_fields1)
                 false
                 true
                 true
                 true)
            true
            false) (ite (and (<= (first s) i1) (<= i1 (last s))) true false)) true))

;; "Assert"
(assert (and (<= (first left) i1) (<= i1 (last left))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused2 () Int
  i1)

;; "o"
(define-fun o9 () (Array Int natural)
  (to_array left))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused1 () (Array Int natural)
  o9)

;; "o"
(define-fun o10 () natural
  (select o9 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused () natural
  o10)

(declare-const o11 Int)

;; "Ensures"
(assert (= (to_rep o10) o11))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused () Int
  o11)

;; "o"
(define-fun o12 () Bool
  (ite (= o11 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused () Bool
  o12)

;; "Assert"
(assert (and (<= (first right) i1) (<= i1 (last right))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  i1)

;; "o"
(define-fun o13 () (Array Int natural)
  (to_array right))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused2 () (Array Int natural)
  o13)

;; "o"
(define-fun o14 () natural
  (select o13 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused1 () natural
  o14)

(declare-const o15 Int)

;; "Ensures"
(assert (= (to_rep o14) o15))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused1 () Int
  o15)

;; "o"
(define-fun o16 () Bool
  (ite (= o15 0) true false))

;; "infix ='result'unused"
(define-fun infix_eqqtresultqtunused1 () Bool
  o16)

;; "o"
(define-fun o17 () Bool
  (and o16 o12))

;; "andb'result'unused"
(define-fun andbqtresultqtunused1 () Bool
  o17)

(declare-const spark__branch1 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused () bool__ref
  (bool__refqtmk spark__branch1))

;; "H"
(assert (= spark__branch1 o17))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused () Bool
  spark__branch1)

;; "H"
(assert (not (= spark__branch1 true)))

(declare-const o18 Bool)

;; "Assert"
(assert (and (<= (first left) i1) (<= i1 (last left))))

(declare-const int__contentqtresultqtunused4 Int)

;; "H"
(assert (= int__contentqtresultqtunused4 i1))

(declare-const o19 (Array Int natural))

;; "H"
(assert (= o19 (to_array left)))

(declare-const to_arrayqtresultqtunused3 (Array Int natural))

;; "H"
(assert (= to_arrayqtresultqtunused3 o19))

(declare-const o20 natural)

;; "H"
(assert (= o20 (select o19 i1)))

(declare-const getqtresultqtunused2 natural)

;; "H"
(assert (= getqtresultqtunused2 o20))

(declare-const o21 Int)

;; "Ensures"
(assert (= (to_rep o20) o21))

(declare-const to_repqtresultqtunused2 Int)

;; "H"
(assert (= to_repqtresultqtunused2 o21))

(declare-const infix_eqqtresultqtunused2 Bool)

;; "H"
(assert (= infix_eqqtresultqtunused2 (ite (= o21 0) true false)))

(declare-const int__contentqtresultqtunused5 Int)

(declare-const o22 (Array Int natural))

(declare-const to_arrayqtresultqtunused4 (Array Int natural))

(declare-const o23 natural)

(declare-const getqtresultqtunused3 natural)

(declare-const o24 Int)

(declare-const to_repqtresultqtunused3 Int)

(declare-const infix_gtqtresultqtunused Bool)

(declare-const int__contentqtresultqtunused6 Int)

(declare-const o25 (Array Int natural))

(declare-const to_arrayqtresultqtunused5 (Array Int natural))

(declare-const o26 natural)

(declare-const getqtresultqtunused4 natural)

(declare-const temp___823 Int)

(declare-const to_repqtresultqtunused4 Int)

(declare-const o27 (Array Int natural))

(declare-const to_arrayqtresultqtunused6 (Array Int natural))

(declare-const o28 natural)

(declare-const getqtresultqtunused5 natural)

(declare-const o29 Int)

(declare-const to_repqtresultqtunused5 Int)

(declare-const int__contentqtresultqtunused7 Int)

(declare-const o30 (Array Int natural))

(declare-const to_arrayqtresultqtunused7 (Array Int natural))

(declare-const o31 natural)

(declare-const getqtresultqtunused6 natural)

(declare-const temp___822 Int)

(declare-const to_repqtresultqtunused6 Int)

(declare-const o32 (Array Int natural))

(declare-const to_arrayqtresultqtunused8 (Array Int natural))

(declare-const o33 natural)

(declare-const getqtresultqtunused7 natural)

(declare-const o34 Int)

(declare-const to_repqtresultqtunused7 Int)

(declare-const infix_gtqtresultqtunused1 Bool)

;; "H"
(assert
  (ite (= o21 0)
    (= o18 true)
    (and
      (and (<= (first right) i1) (<= i1 (last right)))
      (and
        (= int__contentqtresultqtunused5 i1)
        (and
          (= o22 (to_array right))
          (and
            (= to_arrayqtresultqtunused4 o22)
            (and
              (= o23 (select o22 i1))
              (and
                (= getqtresultqtunused3 o23)
                (and
                  (= (to_rep o23) o24)
                  (and
                    (= to_repqtresultqtunused3 o24)
                    (and
                      (= infix_gtqtresultqtunused (ite (< 0 o24) true false))
                      (ite (< 0 o24)
                        (and
                          (and (<= (first left) i1) (<= i1 (last left)))
                          (and
                            (= int__contentqtresultqtunused6 i1)
                            (and
                              (= o25 (to_array left))
                              (and
                                (= to_arrayqtresultqtunused5 o25)
                                (and
                                  (= o26 (select o25 i1))
                                  (and
                                    (= getqtresultqtunused4 o26)
                                    (and
                                      (= (to_rep o26) temp___823)
                                      (and
                                        (= to_repqtresultqtunused4 temp___823)
                                        (and
                                          (and
                                            (<= (first s) temp___823)
                                            (<= temp___823 (last s)))
                                          (and
                                            (= o27 (to_array s))
                                            (and
                                              (= to_arrayqtresultqtunused6 
                                              o27)
                                              (and
                                                (= o28 (select o27 temp___823))
                                                (and
                                                  (= getqtresultqtunused5 
                                                  o28)
                                                  (and
                                                    (= (to_rep o28) o29)
                                                    (and
                                                      (= to_repqtresultqtunused5 
                                                      o29)
                                                      (and
                                                        (and
                                                          (<= (first right) 
                                                          i1)
                                                          (<= i1 (last right)))
                                                        (and
                                                          (= int__contentqtresultqtunused7 
                                                          i1)
                                                          (and
                                                            (= o30 (to_array
                                                                    right))
                                                            (and
                                                              (= to_arrayqtresultqtunused7 
                                                              o30)
                                                              (and
                                                                (= o31 (select 
                                                                o30 i1))
                                                                (and
                                                                  (= 
                                                                  getqtresultqtunused6 
                                                                  o31)
                                                                  (and
                                                                    (= 
                                                                    (to_rep
                                                                    o31) 
                                                                    temp___822)
                                                                    (and
                                                                    (= 
                                                                    to_repqtresultqtunused6 
                                                                    temp___822)
                                                                    (and
                                                                    (and
                                                                    (<= 
                                                                    (first
                                                                    s) 
                                                                    temp___822)
                                                                    (<= 
                                                                    temp___822 
                                                                    (last
                                                                    s)))
                                                                    (and
                                                                    (= 
                                                                    o32 
                                                                    (to_array
                                                                    s))
                                                                    (and
                                                                    (= 
                                                                    to_arrayqtresultqtunused8 
                                                                    o32)
                                                                    (and
                                                                    (= 
                                                                    o33 (select 
                                                                    o32 
                                                                    temp___822))
                                                                    (and
                                                                    (= 
                                                                    getqtresultqtunused7 
                                                                    o33)
                                                                    (and
                                                                    (= 
                                                                    (to_rep
                                                                    o33) 
                                                                    o34)
                                                                    (and
                                                                    (= 
                                                                    to_repqtresultqtunused7 
                                                                    o34)
                                                                    (and
                                                                    (= 
                                                                    o18 
                                                                    (ite (< 
                                                                    o29 
                                                                    o34)
                                                                    true
                                                                    false))
                                                                    (= 
                                                                    infix_gtqtresultqtunused1 
                                                                    o18))))))))))))))))))))))))))))))))
                        (= o18 false)))))))))))))

(declare-const spark__branch2 Bool)

;; "spark__branch'unused"
(define-fun spark__branchqtunused1 () bool__ref
  (bool__refqtmk spark__branch2))

;; "H"
(assert (= spark__branch2 o18))

;; "bool__content'result'unused"
(define-fun bool__contentqtresultqtunused1 () Bool
  spark__branch2)

;; "H"
(assert (not (= spark__branch2 true)))

;; "Assert"
(assert
  (= (well_formed
       (let ((temp___880 (rec__cartesian_trees__tree__cells1
                           t__split_fields1)))
         (rec__cartesian_trees__tree__cells1 t__split_fields1))
       (to_rep (select (to_array left) i1))) true))

;; "Ensures"
(assert
  (= (to_rep
       (rec__cartesian_trees__tree_cell__right
         (us_split_fields1
           (select (to_array1
                     (rec__cartesian_trees__tree__cells1 t__split_fields1)) 
           (to_rep
             (select (to_array left) i1)))))) 0))

;; "Assume"
(assert
  (dynamic_invariant1
    (us_repqtmk2 t__split_discrs t__split_fields1)
    false
    true
    true
    true))

;; "Assume"
(assert
  (=> (<= (first s) (last s)) (dynamic_property2 (first s) (last s) i1)))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused2 () us_split_fields4
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused2 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields1))

;; "_q 'unused"
(define-fun usq_qtunused () us_split_fields4
  t__split_fields1)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused1 () us_split_fields4
  t__split_fields1)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused3 () us_split_fields4
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused3 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused2 () us_split_fields4
  t__split_fields1)

;; "temp___900"
(define-fun temp___900 () us_t1
  (rec__cartesian_trees__tree__cells1 t__split_fields1))

;; "rec__cartesian_trees__tree__cells'result'unused"
(define-fun rec__cartesian_trees__tree__cellsqtresultqtunused1 () us_t1
  temp___900)

;; "o"
(define-fun o35 () t1
  (rt1 temp___900))

;; "rt'result'unused"
(define-fun rtqtresultqtunused () t1
  o35)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused4 () us_split_fields4
  t__split_fields1)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused4 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields1))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused3 () us_split_fields4
  t__split_fields1)

;; "temp___897"
(define-fun temp___897 () us_t1
  (rec__cartesian_trees__tree__cells1 t__split_fields1))

;; "rec__cartesian_trees__tree__cells'result'unused"
(define-fun rec__cartesian_trees__tree__cellsqtresultqtunused2 () us_t1
  temp___897)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused8 () Int
  i1)

;; "o"
(define-fun o36 () (Array Int us_rep)
  (to_array1 temp___897))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused9 () (Array Int us_rep)
  o36)

;; "temp___898"
(define-fun temp___898 () us_rep
  (select o36 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused8 () us_rep
  temp___898)

;; "_q "
(define-fun usq_ () us_split_fields
  (us_split_fields1 temp___898))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused4 () us_split_fields
  usq_)

;; "Assert"
(assert (and (<= (first left) i1) (<= i1 (last left))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused9 () Int
  i1)

;; "o"
(define-fun o37 () (Array Int natural)
  (to_array left))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused10 () (Array Int natural)
  o37)

;; "o"
(define-fun o38 () natural
  (select o37 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused9 () natural
  o38)

(declare-const o39 Int)

;; "Ensures"
(assert (= (to_rep o38) o39))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused8 () Int
  o39)

(declare-const o40 natural)

;; "Ensures"
(assert (= (to_rep o40) o39))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused () natural
  o40)

;; "o"
(define-fun o41 () natural
  (rec__cartesian_trees__tree_cell__right usq_))

;; "rec__cartesian_trees__tree_cell__right'result'unused"
(define-fun rec__cartesian_trees__tree_cell__rightqtresultqtunused () natural
  o41)

;; "o"
(define-fun o42 () natural
  (rec__cartesian_trees__tree_cell__left usq_))

;; "rec__cartesian_trees__tree_cell__left'result'unused"
(define-fun rec__cartesian_trees__tree_cell__leftqtresultqtunused () natural
  o42)

;; "o"
(define-fun o43 () us_split_fields
  (us_split_fieldsqtmk o42 o41 o40))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused () us_split_fields
  o43)

;; "o"
(define-fun o44 () us_rep
  (us_repqtmk o43))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused5 () us_rep
  o44)

;; "Assert"
(assert (and (<= (first1 temp___900) i1) (<= i1 (last1 temp___900))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused10 () Int
  i1)

;; "o"
(define-fun o45 () (Array Int us_rep)
  (to_array1 temp___900))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused11 () (Array Int us_rep)
  o45)

;; "o"
(define-fun o46 () (Array Int us_rep)
  (store o45 i1 o44))

;; "set'result'unused"
(define-fun setqtresultqtunused () (Array Int us_rep)
  o46)

;; "o"
(define-fun o47 () us_t1
  (us_tqtmk1 o46 o35))

;; "__t'mk'result'unused"
(define-fun us_tqtmkqtresultqtunused () us_t1
  o47)

;; "o"
(define-fun o48 () natural
  (rec__cartesian_trees__tree__root1 t__split_fields1))

;; "rec__cartesian_trees__tree__root'result'unused"
(define-fun rec__cartesian_trees__tree__rootqtresultqtunused () natural
  o48)

;; "o"
(define-fun o49 () us_split_fields4
  (us_split_fieldsqtmk2 o48 o47))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused1 () us_split_fields4
  o49)

;; "o"
(define-fun o50 () us_split_discrs
  t__split_discrs)

;; "__split_discrs'result'unused"
(define-fun us_split_discrsqtresultqtunused () us_split_discrs
  o50)

;; "temp___904"
(define-fun temp___904 () us_rep2
  (us_repqtmk2 o50 o49))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused6 () us_rep2
  temp___904)

;; "Assert"
(assert
  (and
    (= (valid_tree_cell
         (let ((temp___906 (rec__cartesian_trees__tree__cells
                             (us_split_fields3 (to_base temp___904)))))
           (rec__cartesian_trees__tree__cells
             (us_split_fields3 (to_base temp___904))))) true)
    (or
      (= (to_rep
           (rec__cartesian_trees__tree__root
             (us_split_fields3 (to_base temp___904)))) 0)
      (let ((temp___909 (to_rep
                          (rec__cartesian_trees__tree__root
                            (us_split_fields3 (to_base temp___904))))))
        (and
          (<= 1 temp___909)
          (<= temp___909 (to_rep
                           (rec__cartesian_trees__tree__size
                             (us_split_discrs1 (to_base temp___904))))))))))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused5 () us_split_fields4
  o49)

(declare-const t__split_fields2 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused2 () us_split_fields__ref
  (us_split_fields__refqtmk t__split_fields2))

;; "H"
(assert (= t__split_fields2 o49))

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused5 () us_split_fields4
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused7 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields2))

;; "_q 'unused"
(define-fun usq_qtunused1 () us_split_fields4
  t__split_fields2)

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused6 () us_split_fields4
  t__split_fields2)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused6 () us_split_fields4
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused8 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused7 () us_split_fields4
  t__split_fields2)

;; "temp___915"
(define-fun temp___915 () us_t1
  (rec__cartesian_trees__tree__cells1 t__split_fields2))

;; "rec__cartesian_trees__tree__cells'result'unused"
(define-fun rec__cartesian_trees__tree__cellsqtresultqtunused3 () us_t1
  temp___915)

;; "o"
(define-fun o51 () t1
  (rt1 temp___915))

;; "rt'result'unused"
(define-fun rtqtresultqtunused1 () t1
  o51)

;; "__split_fields__content'result'unused"
(define-fun us_split_fields__contentqtresultqtunused7 () us_split_fields4
  t__split_fields2)

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused9 () us_rep2
  (us_repqtmk2 t__split_discrs t__split_fields2))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused8 () us_split_fields4
  t__split_fields2)

;; "temp___912"
(define-fun temp___912 () us_t1
  (rec__cartesian_trees__tree__cells1 t__split_fields2))

;; "rec__cartesian_trees__tree__cells'result'unused"
(define-fun rec__cartesian_trees__tree__cellsqtresultqtunused4 () us_t1
  temp___912)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused11 () Int
  i1)

;; "o"
(define-fun o52 () (Array Int natural)
  (to_array left))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused12 () (Array Int natural)
  o52)

;; "o"
(define-fun o53 () natural
  (select o52 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused10 () natural
  o53)

(declare-const o54 Int)

;; "Ensures"
(assert (= (to_rep o53) o54))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused9 () Int
  o54)

;; "o"
(define-fun o55 () (Array Int us_rep)
  (to_array1 temp___912))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused13 () (Array Int us_rep)
  o55)

;; "temp___913"
(define-fun temp___913 () us_rep
  (select o55 o54))

;; "get'result'unused"
(define-fun getqtresultqtunused11 () us_rep
  temp___913)

;; "_q "
(define-fun usq_1 () us_split_fields
  (us_split_fields1 temp___913))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused9 () us_split_fields
  usq_1)

;; "o"
(define-fun o56 () natural
  (rec__cartesian_trees__tree_cell__parent usq_1))

;; "rec__cartesian_trees__tree_cell__parent'result'unused"
(define-fun rec__cartesian_trees__tree_cell__parentqtresultqtunused () natural
  o56)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused12 () Int
  i1)

;; "Ensures"
(assert (in_range1 i1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  i1)

(declare-const o57 natural)

;; "Ensures"
(assert (= (to_rep o57) i1))

;; "of_rep'result'unused"
(define-fun of_repqtresultqtunused1 () natural
  o57)

;; "o"
(define-fun o58 () natural
  (rec__cartesian_trees__tree_cell__left usq_1))

;; "rec__cartesian_trees__tree_cell__left'result'unused"
(define-fun rec__cartesian_trees__tree_cell__leftqtresultqtunused1 () natural
  o58)

;; "o"
(define-fun o59 () us_split_fields
  (us_split_fieldsqtmk o58 o57 o56))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused2 () us_split_fields
  o59)

;; "o"
(define-fun o60 () us_rep
  (us_repqtmk o59))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused10 () us_rep
  o60)

;; "Assert"
(assert (and (<= (first left) i1) (<= i1 (last left))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused13 () Int
  i1)

;; "o"
(define-fun o61 () (Array Int natural)
  (to_array left))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused14 () (Array Int natural)
  o61)

;; "o"
(define-fun o62 () natural
  (select o61 i1))

;; "get'result'unused"
(define-fun getqtresultqtunused12 () natural
  o62)

(declare-const temp___917 Int)

;; "Ensures"
(assert (= (to_rep o62) temp___917))

;; "to_rep'result'unused"
(define-fun to_repqtresultqtunused10 () Int
  temp___917)

;; "Assert"
(assert
  (and
    (<= (first1 temp___915) temp___917)
    (<= temp___917 (last1 temp___915))))

;; "o"
(define-fun o63 () (Array Int us_rep)
  (to_array1 temp___915))

;; "to_array'result'unused"
(define-fun to_arrayqtresultqtunused15 () (Array Int us_rep)
  o63)

;; "o"
(define-fun o64 () (Array Int us_rep)
  (store o63 temp___917 o60))

;; "set'result'unused"
(define-fun setqtresultqtunused1 () (Array Int us_rep)
  o64)

;; "o"
(define-fun o65 () us_t1
  (us_tqtmk1 o64 o51))

;; "__t'mk'result'unused"
(define-fun us_tqtmkqtresultqtunused1 () us_t1
  o65)

;; "o"
(define-fun o66 () natural
  (rec__cartesian_trees__tree__root1 t__split_fields2))

;; "rec__cartesian_trees__tree__root'result'unused"
(define-fun rec__cartesian_trees__tree__rootqtresultqtunused1 () natural
  o66)

;; "o"
(define-fun o67 () us_split_fields4
  (us_split_fieldsqtmk2 o66 o65))

;; "__split_fields'mk'result'unused"
(define-fun us_split_fieldsqtmkqtresultqtunused3 () us_split_fields4
  o67)

;; "o"
(define-fun o68 () us_split_discrs
  t__split_discrs)

;; "__split_discrs'result'unused"
(define-fun us_split_discrsqtresultqtunused1 () us_split_discrs
  o68)

;; "temp___920"
(define-fun temp___920 () us_rep2
  (us_repqtmk2 o68 o67))

;; "__rep'mk'result'unused"
(define-fun us_repqtmkqtresultqtunused11 () us_rep2
  temp___920)

;; "Assert"
(assert
  (and
    (= (valid_tree_cell
         (let ((temp___922 (rec__cartesian_trees__tree__cells
                             (us_split_fields3 (to_base temp___920)))))
           (rec__cartesian_trees__tree__cells
             (us_split_fields3 (to_base temp___920))))) true)
    (or
      (= (to_rep
           (rec__cartesian_trees__tree__root
             (us_split_fields3 (to_base temp___920)))) 0)
      (let ((temp___925 (to_rep
                          (rec__cartesian_trees__tree__root
                            (us_split_fields3 (to_base temp___920))))))
        (and
          (<= 1 temp___925)
          (<= temp___925 (to_rep
                           (rec__cartesian_trees__tree__size
                             (us_split_discrs1 (to_base temp___920))))))))))

;; "__split_fields'result'unused"
(define-fun us_split_fieldsqtresultqtunused10 () us_split_fields4
  o67)

(declare-const t__split_fields3 us_split_fields4)

;; "t__split_fields'unused"
(define-fun t__split_fieldsqtunused3 () us_split_fields__ref
  (us_split_fields__refqtmk t__split_fields3))

;; "H"
(assert (= t__split_fields3 o67))

;; "Assert"
(assert (< (to_rep (select (to_array left) i1)) i1))

;; "Assert"
(assert
  (not
    (= i1 (to_rep
            (rec__cartesian_trees__tree_cell__parent
              (us_split_fields1
                (select (to_array1
                          (rec__cartesian_trees__tree__cells1
                            t__split_fields3)) (to_rep
                                                 (select (to_array left) 
                                                 i1)))))))))

;; Goal "def'vc"
;; File "cartesian_trees.ads", line 113, characters 0-0
(assert
  (not
  (= (well_formed
       (let ((temp___932 (rec__cartesian_trees__tree__cells1
                           t__split_fields3)))
         (rec__cartesian_trees__tree__cells1 t__split_fields3))
       (to_rep (select (to_array left) i1))) true)))

(check-sat)
