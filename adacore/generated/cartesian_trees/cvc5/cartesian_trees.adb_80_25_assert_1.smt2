;; produced by cvc5.drv ;;
(set-logic ALL)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-sort natural 0)

;; "natural'int"
(declare-fun naturalqtint (natural) Int)

;; "natural'axiom"
(assert
  (forall ((i natural))
    (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= 0 x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep ((x natural)) Int
  (naturalqtint x))

;; "of_rep"
(declare-fun of_rep (Int) natural)

;; "inversion_axiom"
(assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; "range_axiom"
(assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                               (of_rep x))) )))

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483647)))

(declare-sort integer 0)

;; "integer'int"
(declare-fun integerqtint (integer) Int)

;; "integer'axiom"
(assert
  (forall ((i integer))
    (and
      (<= (- 2147483648) (integerqtint i))
      (<= (integerqtint i) 2147483647))))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

;; "to_rep"
(define-fun to_rep1 ((x integer)) Int
  (integerqtint x))

;; "of_rep"
(declare-fun of_rep1 (Int) integer)

;; "inversion_axiom"
(assert
  (forall ((x integer))
    (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; "range_axiom"
(assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; "coerce_axiom"
(assert
  (forall ((x Int))
    (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 1 x) (<= x 2147483646)))

(declare-datatypes ((t 0))
  (((tqtmk (rec__first integer)(rec__last integer)))))

;; "dynamic_property"
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range2 low)
    (and
      (in_range2 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
  (((us_tqtmk (elts (Array Int natural))(rt t)))))

;; "to_array"
(define-fun to_array ((a us_t)) (Array Int natural)
  (elts a))

;; "first"
(define-fun first ((a us_t)) Int
  (to_rep1 (rec__first (rt a))))

;; "last"
(define-fun last ((a us_t)) Int
  (to_rep1 (rec__last (rt a))))

;; "length"
(define-fun length ((a us_t)) Int
  (ite (<= (first a) (last a)) (+ (- (last a) (first a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; "value__size_axiom"
(assert (<= 0 value__size))

;; "object__size_axiom"
(assert (<= 0 object__size))

;; "component__size_axiom"
(assert (<= 0 component__size))

;; "alignment_axiom"
(assert (<= 0 alignment))

(declare-datatypes ((us_split_fields 0))
  (((us_split_fieldsqtmk
    (rec__cartesian_trees__tree_cell__left natural)(rec__cartesian_trees__tree_cell__right natural)(rec__cartesian_trees__tree_cell__parent natural)))))

(declare-datatypes ((us_rep 0))
  (((us_repqtmk (us_split_fields1 us_split_fields)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; "value__size_axiom"
(assert (<= 0 value__size1))

;; "object__size_axiom"
(assert (<= 0 object__size1))

;; "alignment_axiom"
(assert (<= 0 alignment1))

(declare-const cartesian_trees__tree_cell__left__first__bit Int)

(declare-const cartesian_trees__tree_cell__left__last__bit Int)

(declare-const cartesian_trees__tree_cell__left__position Int)

;; "cartesian_trees__tree_cell__left__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__left__first__bit))

;; "cartesian_trees__tree_cell__left__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__left__first__bit cartesian_trees__tree_cell__left__last__bit))

;; "cartesian_trees__tree_cell__left__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__left__position))

(declare-const cartesian_trees__tree_cell__right__first__bit Int)

(declare-const cartesian_trees__tree_cell__right__last__bit Int)

(declare-const cartesian_trees__tree_cell__right__position Int)

;; "cartesian_trees__tree_cell__right__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__right__first__bit))

;; "cartesian_trees__tree_cell__right__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__right__first__bit cartesian_trees__tree_cell__right__last__bit))

;; "cartesian_trees__tree_cell__right__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__right__position))

(declare-const cartesian_trees__tree_cell__parent__first__bit Int)

(declare-const cartesian_trees__tree_cell__parent__last__bit Int)

(declare-const cartesian_trees__tree_cell__parent__position Int)

;; "cartesian_trees__tree_cell__parent__first__bit_axiom"
(assert (<= 0 cartesian_trees__tree_cell__parent__first__bit))

;; "cartesian_trees__tree_cell__parent__last__bit_axiom"
(assert
  (< cartesian_trees__tree_cell__parent__first__bit cartesian_trees__tree_cell__parent__last__bit))

;; "cartesian_trees__tree_cell__parent__position_axiom"
(assert (<= 0 cartesian_trees__tree_cell__parent__position))

(declare-const dummy us_rep)

(declare-datatypes ((t1 0))
  (((tqtmk1 (rec__first1 integer)(rec__last1 integer)))))

;; "dynamic_property"
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool
  (and
    (in_range2 low)
    (and
      (in_range2 high)
      (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t1 0))
  (((us_tqtmk1 (elts1 (Array Int us_rep))(rt1 t1)))))

;; "to_array"
(define-fun to_array1 ((a us_t1)) (Array Int us_rep)
  (elts1 a))

;; "first"
(define-fun first1 ((a us_t1)) Int
  (to_rep1 (rec__first1 (rt1 a))))

;; "last"
(define-fun last1 ((a us_t1)) Int
  (to_rep1 (rec__last1 (rt1 a))))

;; "length"
(define-fun length1 ((a us_t1)) Int
  (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; "value__size_axiom"
(assert (<= 0 value__size2))

;; "object__size_axiom"
(assert (<= 0 object__size2))

;; "component__size_axiom"
(assert (<= 0 component__size1))

;; "alignment_axiom"
(assert (<= 0 alignment2))

;; "valid_tree_cell"
(define-fun valid_tree_cell ((param__t us_t1)) Bool
  (and (and (ite (forall ((x Int))
                   (=>
                     (and (<= (first1 param__t) x) (<= x (last1 param__t)))
                     (or
                       (= (to_rep
                            (rec__cartesian_trees__tree_cell__left
                              (us_split_fields1
                                (select (to_array1 param__t) x)))) 0)
                       (let ((temp___174 (to_rep
                                           (rec__cartesian_trees__tree_cell__left
                                             (us_split_fields1
                                               (select (to_array1 param__t) x))))))
                         (and
                           (<= (first1 param__t) temp___174)
                           (<= temp___174 (last1 param__t)))))))
              true
              false) (ite (forall ((x Int))
                            (=>
                              (and
                                (<= (first1 param__t) x)
                                (<= x (last1 param__t)))
                              (or
                                (= (to_rep
                                     (rec__cartesian_trees__tree_cell__right
                                       (us_split_fields1
                                         (select (to_array1 param__t) x)))) 0)
                                (let ((temp___176 (to_rep
                                                    (rec__cartesian_trees__tree_cell__right
                                                      (us_split_fields1
                                                        (select (to_array1
                                                                  param__t) x))))))
                                  (and
                                    (<= (first1 param__t) temp___176)
                                    (<= temp___176 (last1 param__t)))))))
                       true
                       false)) (ite (forall ((x Int))
                                      (=>
                                        (and
                                          (<= (first1 param__t) x)
                                          (<= x (last1 param__t)))
                                        (or
                                          (= (to_rep
                                               (rec__cartesian_trees__tree_cell__parent
                                                 (us_split_fields1
                                                   (select (to_array1
                                                             param__t) x)))) 0)
                                          (let ((temp___178 (to_rep
                                                              (rec__cartesian_trees__tree_cell__parent
                                                                (us_split_fields1
                                                                  (select 
                                                                  (to_array1
                                                                    param__t) x))))))
                                            (and
                                              (<= (first1 param__t) temp___178)
                                              (<= temp___178 (last1 param__t)))))))
                                 true
                                 false)))

;; "well_formed"
(define-fun well_formed ((param__t us_t1) (param__x Int)) Bool
  (and (and (ite (not
                   (= (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array1 param__t) param__x)))) 0))
              (and (< (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array1 param__t) param__x)))) param__x) (= 
              (to_rep
                (rec__cartesian_trees__tree_cell__parent
                  (us_split_fields1
                    (select (to_array1 param__t) (to_rep
                                                   (rec__cartesian_trees__tree_cell__left
                                                     (us_split_fields1
                                                       (select (to_array1
                                                                 param__t) param__x)))))))) param__x))
              (distinct 1 0)) (ite (not
                                     (= (to_rep
                                          (rec__cartesian_trees__tree_cell__right
                                            (us_split_fields1
                                              (select (to_array1 param__t) param__x)))) 0))
                                (and (< param__x (to_rep
                                                   (rec__cartesian_trees__tree_cell__right
                                                     (us_split_fields1
                                                       (select (to_array1
                                                                 param__t) param__x))))) (= 
                                (to_rep
                                  (rec__cartesian_trees__tree_cell__parent
                                    (us_split_fields1
                                      (select (to_array1 param__t) (to_rep
                                                                    (rec__cartesian_trees__tree_cell__right
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))))) param__x))
                                (distinct 1 0))) (ite (not
                                                        (= (to_rep
                                                             (rec__cartesian_trees__tree_cell__parent
                                                               (us_split_fields1
                                                                 (select 
                                                                 (to_array1
                                                                   param__t) param__x)))) 0))
                                                   (ite (< param__x (to_rep
                                                                    (rec__cartesian_trees__tree_cell__parent
                                                                    (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))
                                                     (= (to_rep
                                                          (rec__cartesian_trees__tree_cell__left
                                                            (us_split_fields1
                                                              (select 
                                                              (to_array1
                                                                param__t) 
                                                              (to_rep
                                                                (rec__cartesian_trees__tree_cell__parent
                                                                  (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))))) param__x)
                                                     (= (to_rep
                                                          (rec__cartesian_trees__tree_cell__right
                                                            (us_split_fields1
                                                              (select 
                                                              (to_array1
                                                                param__t) 
                                                              (to_rep
                                                                (rec__cartesian_trees__tree_cell__parent
                                                                  (us_split_fields1
                                                                    (select 
                                                                    (to_array1
                                                                    param__t) param__x)))))))) param__x))
                                                   (distinct 1 0))))

;; "well_formed"
(declare-fun well_formed1 (us_t1) Bool)

;; "is_heap"
(define-fun is_heap ((param__t us_t1) (param__s us_t)) Bool
  (ite (forall ((x Int))
         (=>
           (and (<= (first1 param__t) x) (<= x (last1 param__t)))
           (=>
             (not
               (= (to_rep
                    (rec__cartesian_trees__tree_cell__parent
                      (us_split_fields1 (select (to_array1 param__t) x)))) 0))
             (< (to_rep
                  (select (to_array param__s) (to_rep
                                                (rec__cartesian_trees__tree_cell__parent
                                                  (us_split_fields1
                                                    (select (to_array1
                                                              param__t) x)))))) 
             (to_rep
               (select (to_array param__s) x))))))
    true
    false))

;; "belongs_to"
(declare-fun belongs_to (us_t1
  Int
  Int) Bool)

(declare-const t2 us_t1)

(declare-const s us_t)

(declare-const r Int)

(declare-const x Int)

;; "dynamic_invariant"
(define-fun dynamic_invariant ((temp___expr_251 us_t1) (temp___is_init_247 Bool) (temp___skip_constant_248 Bool) (temp___do_toplevel_249 Bool) (temp___do_typ_inv_250 Bool)) Bool
  (=>
    (not (= temp___skip_constant_248 true))
    (dynamic_property1
      1
      2147483646
      (first1 temp___expr_251)
      (last1 temp___expr_251))))

;; "dynamic_invariant"
(define-fun dynamic_invariant1 ((temp___expr_220 us_t) (temp___is_init_216 Bool) (temp___skip_constant_217 Bool) (temp___do_toplevel_218 Bool) (temp___do_typ_inv_219 Bool)) Bool
  (and
    (=>
      (not (= temp___skip_constant_217 true))
      (dynamic_property
        1
        2147483646
        (first temp___expr_220)
        (last temp___expr_220)))
    (=>
      (= temp___is_init_216 true)
      (=> (= temp___do_toplevel_218 true) (= (first temp___expr_220) 1)))))

;; "well_formed__post_axiom"
(assert true)

;; "well_formed__def_axiom"
(assert
  (forall ((param__t us_t1))
    (! (=
         (= (well_formed1 param__t) true)
         (forall ((x1 Int))
           (=>
             (and (<= (first1 param__t) x1) (<= x1 (last1 param__t)))
             (= (well_formed param__t x1) true)))) :pattern ((well_formed1
                                                               param__t)) )))

;; "belongs_to__post_axiom"
(assert true)

;; "belongs_to__def_axiom"
(assert
  (forall ((param__t us_t1))
    (forall ((param__r Int) (param__x Int))
      (! (=
           (= (belongs_to param__t param__r param__x) true)
           (or
             (or
               (= param__r param__x)
               (and
                 (not
                   (= (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array1 param__t) param__r)))) 0))
                 (= (belongs_to
                      param__t
                      (to_rep
                        (rec__cartesian_trees__tree_cell__left
                          (us_split_fields1
                            (select (to_array1 param__t) param__r))))
                      param__x) true)))
             (and
               (not
                 (= (to_rep
                      (rec__cartesian_trees__tree_cell__right
                        (us_split_fields1
                          (select (to_array1 param__t) param__r)))) 0))
               (= (belongs_to
                    param__t
                    (to_rep
                      (rec__cartesian_trees__tree_cell__right
                        (us_split_fields1
                          (select (to_array1 param__t) param__r))))
                    param__x) true)))) :pattern ((belongs_to
                                                   param__t
                                                   param__r
                                                   param__x)) ))))

;; Goal "def'vc"
;; File "cartesian_trees.adb", line 19, characters 0-0
(assert
  (not
  (=>
    (dynamic_invariant t2 true false true true)
    (=>
      (dynamic_invariant1 s true false true true)
      (=>
        (in_range1 r)
        (=>
          (in_range1 x)
          (=>
            (and
              (and
                (and
                  (and
                    (and
                      (and (<= (first1 t2) r) (<= r (last1 t2)))
                      (and (<= (first1 t2) x) (<= x (last1 t2))))
                    (= (valid_tree_cell t2) true))
                  (= (well_formed1 t2) true))
                (and
                  (and (= (length1 t2) (length s)) (= (first1 t2) 1))
                  (= (is_heap t2 s) true)))
              (= (belongs_to t2 r x) true))
            (forall ((spark__branch Bool))
              (=>
                (= spark__branch (ite (= x r) true false))
                (=>
                  (not (= spark__branch true))
                  (forall ((o Bool))
                    (=>
                      (and
                        (and (<= (first1 t2) r) (<= r (last1 t2)))
                        (exists ((o1 Int))
                          (and
                            (= (to_rep
                                 (rec__cartesian_trees__tree_cell__left
                                   (us_split_fields1
                                     (select (to_array1 t2) r)))) o1)
                            (ite (not (= o1 0))
                              (let ((o2 x))
                                (and
                                  (and (<= (first1 t2) r) (<= r (last1 t2)))
                                  (exists ((o3 Int))
                                    (and
                                      (= (to_rep
                                           (rec__cartesian_trees__tree_cell__left
                                             (us_split_fields1
                                               (select (to_array1 t2) 
                                               r)))) o3)
                                      (and
                                        (in_range1 o3)
                                        (let ((o4 t2))
                                          (and
                                            (= o (belongs_to o4 o3 o2))
                                            (=
                                              (= o true)
                                              (or
                                                (or
                                                  (= o3 o2)
                                                  (and
                                                    (not
                                                      (= (to_rep
                                                           (rec__cartesian_trees__tree_cell__left
                                                             (us_split_fields1
                                                               (select 
                                                               (to_array1
                                                                 o4) o3)))) 0))
                                                    (= (belongs_to
                                                         o4
                                                         (to_rep
                                                           (rec__cartesian_trees__tree_cell__left
                                                             (us_split_fields1
                                                               (select 
                                                               (to_array1
                                                                 o4) o3))))
                                                         o2) true)))
                                                (and
                                                  (not
                                                    (= (to_rep
                                                         (rec__cartesian_trees__tree_cell__right
                                                           (us_split_fields1
                                                             (select 
                                                             (to_array1
                                                               o4) o3)))) 0))
                                                  (= (belongs_to
                                                       o4
                                                       (to_rep
                                                         (rec__cartesian_trees__tree_cell__right
                                                           (us_split_fields1
                                                             (select 
                                                             (to_array1
                                                               o4) o3))))
                                                       o2) true)))))))))))
                              (= o false)))))
                      (forall ((spark__branch1 Bool))
                        (=>
                          (= spark__branch1 o)
                          (=>
                            (not (= spark__branch1 true))
                            (= (well_formed t2 r) true))))))))))))))))

(check-sat)
(get-info :reason-unknown)
