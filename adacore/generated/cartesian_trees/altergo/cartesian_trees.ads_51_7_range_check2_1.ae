(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type us_private

logic us_null_ext__ : us_private

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom :
  (forall i:natural. ((0 <= naturalqtint(i)) and
  (naturalqtint(i) <= 2147483647)))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type small_pos

logic small_posqtint : small_pos -> int

axiom small_posqtaxiom :
  (forall i:small_pos. ((1 <= small_posqtint(i)) and
  (small_posqtint(i) <= 2147483646)))

type us_split_fields = { rec__cartesian_trees__tree_cell__left : natural;
rec__cartesian_trees__tree_cell__right : natural;
rec__cartesian_trees__tree_cell__parent : natural }

type us_rep = { us_split_fields1 : us_split_fields
}

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic cartesian_trees__tree_cell__left__first__bit : int

logic cartesian_trees__tree_cell__left__last__bit : int

logic cartesian_trees__tree_cell__left__position : int

axiom cartesian_trees__tree_cell__left__first__bit_axiom :
  (0 <= cartesian_trees__tree_cell__left__first__bit)

axiom cartesian_trees__tree_cell__left__last__bit_axiom :
  (cartesian_trees__tree_cell__left__first__bit <  cartesian_trees__tree_cell__left__last__bit)

axiom cartesian_trees__tree_cell__left__position_axiom :
  (0 <= cartesian_trees__tree_cell__left__position)

logic cartesian_trees__tree_cell__right__first__bit : int

logic cartesian_trees__tree_cell__right__last__bit : int

logic cartesian_trees__tree_cell__right__position : int

axiom cartesian_trees__tree_cell__right__first__bit_axiom :
  (0 <= cartesian_trees__tree_cell__right__first__bit)

axiom cartesian_trees__tree_cell__right__last__bit_axiom :
  (cartesian_trees__tree_cell__right__first__bit <  cartesian_trees__tree_cell__right__last__bit)

axiom cartesian_trees__tree_cell__right__position_axiom :
  (0 <= cartesian_trees__tree_cell__right__position)

logic cartesian_trees__tree_cell__parent__first__bit : int

logic cartesian_trees__tree_cell__parent__last__bit : int

logic cartesian_trees__tree_cell__parent__position : int

axiom cartesian_trees__tree_cell__parent__first__bit_axiom :
  (0 <= cartesian_trees__tree_cell__parent__first__bit)

axiom cartesian_trees__tree_cell__parent__last__bit_axiom :
  (cartesian_trees__tree_cell__parent__first__bit <  cartesian_trees__tree_cell__parent__last__bit)

axiom cartesian_trees__tree_cell__parent__position_axiom :
  (0 <= cartesian_trees__tree_cell__parent__position)

logic dummy : us_rep

type t = { rec__first : integer; rec__last : integer }

type us_t = { elts : (int,us_rep) farray; rt : t
}

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

type us_split_discrs = { rec__cartesian_trees__tree__size : natural
}

type us_split_fields2 = { rec__cartesian_trees__tree__root : natural;
rec__cartesian_trees__tree__cells : us_t }

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic cartesian_trees__tree__size__first__bit : int

logic cartesian_trees__tree__size__last__bit : int

logic cartesian_trees__tree__size__position : int

axiom cartesian_trees__tree__size__first__bit_axiom :
  (0 <= cartesian_trees__tree__size__first__bit)

axiom cartesian_trees__tree__size__last__bit_axiom :
  (cartesian_trees__tree__size__first__bit <  cartesian_trees__tree__size__last__bit)

axiom cartesian_trees__tree__size__position_axiom :
  (0 <= cartesian_trees__tree__size__position)

logic cartesian_trees__tree__root__first__bit : int

logic cartesian_trees__tree__root__last__bit : int

logic cartesian_trees__tree__root__position : int

axiom cartesian_trees__tree__root__first__bit_axiom :
  (0 <= cartesian_trees__tree__root__first__bit)

axiom cartesian_trees__tree__root__last__bit_axiom :
  (cartesian_trees__tree__root__first__bit <  cartesian_trees__tree__root__last__bit)

axiom cartesian_trees__tree__root__position_axiom :
  (0 <= cartesian_trees__tree__root__position)

logic cartesian_trees__tree__cells__first__bit : int

logic cartesian_trees__tree__cells__last__bit : int

logic cartesian_trees__tree__cells__position : int

axiom cartesian_trees__tree__cells__first__bit_axiom :
  (0 <= cartesian_trees__tree__cells__first__bit)

axiom cartesian_trees__tree__cells__last__bit_axiom :
  (cartesian_trees__tree__cells__first__bit <  cartesian_trees__tree__cells__last__bit)

axiom cartesian_trees__tree__cells__position_axiom :
  (0 <= cartesian_trees__tree__cells__position)

logic dummy1 : us_rep1

 (* "cartesian_trees.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall usf:int. (in_range(usf) ->
  (forall usf1:us_rep1.
  ((to_rep(((usf1).us_split_discrs1).rec__cartesian_trees__tree__size) = usf) ->
  ((1 <= usf) -> (usf <= 2147483646))))))
