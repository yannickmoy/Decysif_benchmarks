;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

(declare-datatypes ()
  ((bool__ref (bool__refqtmk (bool__content Bool)))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-const mach Int)

(declare-const present Int)

(declare-const target Int)

(declare-const max Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= (- 100) x) (<= x 100)))

;; "in_range"
(define-fun in_range3 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

;; "in_range"
(define-fun in_range4 ((x Int)) Bool
  (and (<= (- 45) x) (<= x 45)))

(declare-const target_angle Int)

(declare-const k1 Int)

(declare-const k2 Int)

(declare-const gap Int)

;; "gap'unused"
(define-fun gapqtunused () int__ref
  (int__refqtmk gap))

;; "k2'unused"
(define-fun k2qtunused () int__ref
  (int__refqtmk k2))

;; "k1'unused"
(define-fun k1qtunused () int__ref
  (int__refqtmk k1))

;; "target_angle'unused"
(define-fun target_angleqtunused () int__ref
  (int__refqtmk target_angle))

;; "Assume"
(assert (in_range3 mach))

;; "Assume"
(assert (in_range2 present))

;; "Assume"
(assert (in_range2 target))

;; "Assume"
(assert (in_range4 max))

;; "Assume"
(assert (< 0 max))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range4 target_angle))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range k1))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range k2))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range gap))

(declare-const target_angle1 Int)

;; "target_angle'unused"
(define-fun target_angleqtunused1 () int__ref
  (int__refqtmk target_angle1))

(declare-const o Bool)

;; "H"
(assert (= o (ite (= present target) true false)))

(declare-const infix_eqqtresultqtunused Bool)

;; "H"
(assert (= infix_eqqtresultqtunused o))

(declare-const spark__branch Bool)

(declare-const spark__branchqtunused bool__ref)

;; "H"
(assert (= spark__branchqtunused (bool__refqtmk spark__branch)))

;; "H"
(assert (= spark__branch o))

(declare-const bool__contentqtresultqtunused Bool)

;; "H"
(assert (= bool__contentqtresultqtunused spark__branch))

(declare-const k11 Int)

(declare-const k21 Int)

(declare-const k2qtunused1 int__ref)

(declare-const k1qtunused1 int__ref)

(declare-const int__contentqtresultqtunused Int)

(declare-const int__contentqtresultqtunused1 Int)

(declare-const o1 Int)

(declare-const infix_asqtresultqtunused Int)

(declare-const range_check_qtresultqtunused Int)

(declare-const o2 Int)

(declare-const div_qtresultqtunused Int)

(declare-const range_check_qtresultqtunused1 Int)

(declare-const range_check_qtresultqtunused2 Int)

(declare-const target_angle2 Int)

(declare-const target_angleqtunused2 int__ref)

(declare-const o3 Bool)

(declare-const infix_gtqtresultqtunused Bool)

(declare-const spark__branch1 Bool)

(declare-const spark__branchqtunused1 bool__ref)

(declare-const bool__contentqtresultqtunused1 Bool)

(declare-const int__contentqtresultqtunused2 Int)

(declare-const o4 Int)

(declare-const prefix_mnqtresultqtunused Int)

;; "H"
(assert
  (ite (= spark__branch true)
    (= target_angle1 0)
    (and
      (= k2qtunused1 (int__refqtmk k21))
      (and
        (= k1qtunused1 (int__refqtmk k11))
        (and
          (and (and (in_range1 k11) (< 0 k21)) (<= k11 k21))
          (and
            (in_range k11)
            (and
              (in_range k21)
              (and
                (= int__contentqtresultqtunused k21)
                (and
                  (= int__contentqtresultqtunused1 k11)
                  (and
                    (= o1 (* max k11))
                    (and
                      (= infix_asqtresultqtunused o1)
                      (and
                        (in_range o1)
                        (and
                          (= range_check_qtresultqtunused o1)
                          (and
                            (= o2 (__cdiv o1 k21))
                            (and
                              (= div_qtresultqtunused o2)
                              (and
                                (in_range o2)
                                (and
                                  (= range_check_qtresultqtunused1 o2)
                                  (and
                                    (in_range4 o2)
                                    (and
                                      (= range_check_qtresultqtunused2 
                                      o2)
                                      (and
                                        (= target_angleqtunused2 (int__refqtmk
                                                                   target_angle2))
                                        (and
                                          (= target_angle2 o2)
                                          (and
                                            (= o3 (ite (< target present)
                                                    true
                                                    false))
                                            (and
                                              (= infix_gtqtresultqtunused 
                                              o3)
                                              (and
                                                (= spark__branchqtunused1 
                                                (bool__refqtmk
                                                  spark__branch1))
                                                (and
                                                  (= spark__branch1 o3)
                                                  (and
                                                    (= bool__contentqtresultqtunused1 
                                                    spark__branch1)
                                                    (ite (= spark__branch1 true)
                                                      (and
                                                        (= int__contentqtresultqtunused2 
                                                        target_angle2)
                                                        (and
                                                          (= o4 (- target_angle2))
                                                          (and
                                                            (= prefix_mnqtresultqtunused 
                                                            o4)
                                                            (= target_angle1 
                                                            o4))))
                                                      (= target_angle1 
                                                      target_angle2))))))))))))))))))))))))))))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused3 () Int
  target_angle1)

(declare-const scale__scale_movement__result Int)

;; "scale__scale_movement__result'unused"
(define-fun scale__scale_movement__resultqtunused () int__ref
  (int__refqtmk scale__scale_movement__result))

;; "H"
(assert (= scale__scale_movement__result target_angle1))

;; "result'unused"
(define-fun resultqtunused () Int
  scale__scale_movement__result)

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused4 () Int
  scale__scale_movement__result)

;; Goal "def'vc"
;; File "scale.ads", line 9, characters 0-0
(assert
  (not (<= (- max) scale__scale_movement__result)))

(check-sat)
