;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(define-fun __cdiv ((x Int) (y Int)) Int (ite (>= x 0) (div x y) (- (div (- x) y))))
(define-fun __cmod ((x Int) (y Int)) Int (ite (>= x 0) (mod x y) (- (mod (- x) y))))
(declare-sort us_private 0)

(declare-const us_null_ext__ us_private)

(declare-datatypes ()
  ((int__ref (int__refqtmk (int__content Int)))))

;; "in_range"
(define-fun in_range ((x Int)) Bool
  (and (<= (- 2147483648) x) (<= x 2147483647)))

(declare-const val__ Int)

(declare-const flatness Int)

;; "in_range"
(define-fun in_range1 ((x Int)) Bool
  (and (<= (- 100) x) (<= x 100)))

;; "in_range"
(define-fun in_range2 ((x Int)) Bool
  (and (<= 0 x) (<= x 100)))

(declare-const calc Int)

(declare-const ans Int)

;; "ans'unused"
(define-fun ansqtunused () int__ref
  (int__refqtmk ans))

;; "calc'unused"
(define-fun calcqtunused () int__ref
  (int__refqtmk calc))

;; "Assume"
(assert (in_range1 val__))

;; "Assume"
(assert (in_range flatness))

;; "Assume"
(assert (and (and (<= 0 val__) (< 0 flatness)) (<= flatness 100)))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range calc))

;; "Assume"
(assert true)

;; "Assume"
(assert (in_range2 ans))

;; "o"
(define-fun o () Int
  (+ flatness val__))

;; "infix +'result'unused"
(define-fun infix_plqtresultqtunused () Int
  o)

;; "Ensures"
(assert (in_range o))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused () Int
  o)

;; "o"
(define-fun o1 () Int
  (* 100 flatness))

;; "infix *'result'unused"
(define-fun infix_asqtresultqtunused () Int
  o1)

;; "Ensures"
(assert (in_range o1))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused1 () Int
  o1)

;; "o"
(define-fun o2 () Int
  (__cdiv o1 o))

;; "div_'result'unused"
(define-fun div_qtresultqtunused () Int
  o2)

;; "Ensures"
(assert (in_range o2))

;; "range_check_'result'unused"
(define-fun range_check_qtresultqtunused2 () Int
  o2)

(declare-const calc1 Int)

;; "calc'unused"
(define-fun calcqtunused1 () int__ref
  (int__refqtmk calc1))

;; "H"
(assert (= calc1 o2))

;; "int__content'result'unused"
(define-fun int__contentqtresultqtunused () Int
  calc1)

;; Goal "def'vc"
;; File "scale.adb", line 11, characters 0-0
(assert
  (not (<= calc1 100)))

(check-sat)
