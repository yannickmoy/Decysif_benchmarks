(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type us_private

logic us_null_ext__ : us_private

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((0 <= div(x,
  y)) and (div(x, y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (((-abs_int(y)) <  mod(x,
  y)) and (mod(x, y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. (((- 2147483648) <= integerqtint(i)) and
  (integerqtint(i) <= 2147483647)))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic mach : int

logic present : int

logic target : int

logic max : int

type percent

logic percentqtint : percent -> int

axiom percentqtaxiom :
  (forall i:percent. ((0 <= percentqtint(i)) and (percentqtint(i) <= 100)))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

type scaledata

logic scaledataqtint : scaledata -> int

axiom scaledataqtaxiom :
  (forall i:scaledata. (((- 100) <= scaledataqtint(i)) and
  (scaledataqtint(i) <= 100)))

predicate in_range2(x: int) = (((- 100) <= x) and (x <= 100))

type machnumber

logic machnumberqtint : machnumber -> int

axiom machnumberqtaxiom :
  (forall i:machnumber. ((0 <= machnumberqtint(i)) and
  (machnumberqtint(i) <= 100)))

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

type controlangle

logic controlangleqtint : controlangle -> int

axiom controlangleqtaxiom :
  (forall i:controlangle. (((- 45) <= controlangleqtint(i)) and
  (controlangleqtint(i) <= 45)))

predicate in_range4(x: int) = (((- 45) <= x) and (x <= 45))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. (((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))) and (((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))) and (((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))) and ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d))))))))))

 (* "scale.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall target_angle:int. forall k1:int. forall k2:int. forall gap:int.
  (in_range3(mach) -> (in_range2(present) -> (in_range2(target) ->
  (in_range4(max) -> ((0 <  max) -> (in_range4(target_angle) ->
  (in_range(k1) -> (in_range(k2) -> (in_range(gap) ->
  (forall target_angle1:int.
  ((exists spark__branch:bool.
   ((spark__branch = (if (present = target) then true else false)) and
   (if (spark__branch = true) then (target_angle1 = 0) else (exists k11:int.
                                                            exists k21:int.
                                                            (((in_range1(k11) and
                                                            (0 <  k21)) and
                                                            (k11 <= k21)) and
                                                            (in_range(k11) and
                                                            (in_range(k21) and
                                                            (let o =
                                                            (max * k11)
                                                            : int in
                                                            (in_range(o) and
                                                            (let o1 = div(o,
                                                            k21) : int in
                                                            (in_range(o1) and
                                                            (in_range4(o1) and
                                                            (exists target_angle2:int.
                                                            ((target_angle2 = o1) and
                                                            (exists spark__branch1:bool.
                                                            ((spark__branch1 = (if (target <  present) then true else false)) and
                                                            (if (spark__branch1 = true) then (target_angle1 = (-target_angle2)) else (target_angle1 = target_angle2)))))))))))))))))) ->
  (forall scale__scale_movement__result:int.
  ((scale__scale_movement__result = target_angle1) ->
  ((-max) <= scale__scale_movement__result)))))))))))))))
